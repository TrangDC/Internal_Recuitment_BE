enum ReportFilterPeriod {
  all
  year
  quarter
  month
  week
}

enum ReportOrderByField {
  hiring_team_name
  hiring_team_created_at
  job_position_name
  job_position_created_at
}

input ReportOrderBy {
  direction: OrderDirection!
  field: ReportOrderByField!
}

type ReportNumberByType {
  type: String!
  number: Int!
}

type ReportStatsPerTimePeriod {
  from_date: Time!
  to_date: Time!
  total: Int!
  number_by_type: [ReportNumberByType!]!
}

type ReportStatsByTime {
  total: Int!
  number_by_type: [ReportNumberByType!]!
  stats_per_time_period: [ReportStatsPerTimePeriod!]!
}

# Candidate
type CandidateReport {
  total: Int!
  active_number: Int!
  blacklist_number: Int!
  number_by_ref_type: [ReportNumberByType!]!
  stats_by_time: ReportStatsByTime!
}

type CandidateReportResponse {
  data: CandidateReport!
}

# Recruitment
type RecruitmentReportResponse {
  data: ReportStatsByTime!
}

# Candidate conversion rate
type CandidateConversionRateReportResponse {
  data: [ReportNumberByType!]!
}

input ReportFilter {
  hiring_team_id: ID
  filter_period: ReportFilterPeriod!
  from_date: Time!
  to_date: Time!
}

# new schema
type ReportCandidateConversionRateChartResponse {
  data: CandidateConversionRateReport!
}

type CandidateConversionRateReport {
  id: ID!
  hiring_team_name: String!
  job_position_name: String!
  applied: Int!
  interviewing: Int!
  offering: Int!
  hired: Int!
}

type CandidateConversionRateReportEdge {
  node: CandidateConversionRateReport!
  cursor: Cursor!
}

type ReportCandidateConversionRateTableResponse {
  edges: [CandidateConversionRateReportEdge!]!
  pagination: Pagination!
}

type ApplicationReportFailReason {
  poor_professionalism: Int!
  poor_fit_and_engagement: Int!
  over_expectations: Int!
  over_qualification: Int!
  language_deficiency: Int!
  weak_technical_skills: Int!
  poor_interpersonal_skills: Int!
  poor_problem_solving_skills: Int!
  poor_management_skills: Int!
  candidate_withdrawal: Int!
  others: Int!
}

# LCC = line circle chart
type ReportCandidateLCCResponse {
  data: ReportCandidateLCC!
}

type ReportCandidateColumnChartResponse {
  edges: ReportCandidateColumnChartEdge!
}

type ReportCandidateLCC {
  total: Int!
  non_black_list: Int!
  black_list: Int!
  recruitment: ReportRecruitment!
}

type ReportRecruitment {
  eb: Int!
  rec: Int!
  hiring_platform: Int!
  reference: Int!
  headhunt: Int!
  from_date: Time
  to_date: Time
}

type ReportCandidateColumnChartEdge {
  node: [ReportRecruitment]!
  cursor: Cursor!
}

type ReportApplicationResponse {
  edges: ReportApplicationEdge!
}

type ReportApplicationEdge {
  node: [ReportApplication]!
  cursor: Cursor!
}

type ReportApplication {
  from_date: Time!
  to_date: Time!
  applied: Int!
  interviewing: Int!
  offering: Int!
  hired: Int!
  failed_cv: Int!
  failed_interview: Int!
  offer_lost: Int!
  ex_staff: Int!
}

# Report Processing Application
type ReportProcessingApplicationResponse {
  edges: [ReportProcessingApplicationEdge!]!
}

type ReportProcessingApplicationEdge {
  node: ReportProcessingApplication!
}

type ReportProcessingApplication {
  from_date: Time!
  to_date: Time!
  actual_interview: Int!
  cancel: Int!
}

# Report Failed Application
type ReportFailedApplicationResponse {
  data: ReportFailedApplication
}

type ReportFailedApplication {
  failed_cv: ApplicationReportFailReason!
  failed_interview: ApplicationReportFailReason!
  offer_lost: ApplicationReportFailReason!
}

# Report Hired Application
type ReportHiredApplicationResponse {
  edges: [ReportHiredApplicationEdge!]!
}

type ReportHiredApplicationEdge {
  node: ReportHiredApplication!
}

type ReportHiredApplication {
  job_position_name: String!
  intern: Int!
  fresher: Int!
  junior: Int!
  middle: Int!
  senior: Int!
  manager: Int!
  director: Int!
}
