// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	stdsql "database/sql"
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...any)
	// hooks to execute on mutations.
	hooks *hooks
}

// hooks per client, for fast access.
type hooks struct {
	Attachment           []ent.Hook
	AuditTrail           []ent.Hook
	Candidate            []ent.Hook
	CandidateAward       []ent.Hook
	CandidateCertificate []ent.Hook
	CandidateEducate     []ent.Hook
	CandidateExp         []ent.Hook
	CandidateHistoryCall []ent.Hook
	CandidateInterview   []ent.Hook
	CandidateInterviewer []ent.Hook
	CandidateJob         []ent.Hook
	CandidateJobFeedback []ent.Hook
	CandidateJobStep     []ent.Hook
	CandidateNote        []ent.Hook
	EmailRoleAttribute   []ent.Hook
	EmailTemplate        []ent.Hook
	EntityPermission     []ent.Hook
	EntitySkill          []ent.Hook
	HiringJob            []ent.Hook
	HiringTeam           []ent.Hook
	HiringTeamApprover   []ent.Hook
	HiringTeamManager    []ent.Hook
	JobPosition          []ent.Hook
	OutgoingEmail        []ent.Hook
	Permission           []ent.Hook
	PermissionGroup      []ent.Hook
	RecTeam              []ent.Hook
	Role                 []ent.Hook
	Skill                []ent.Hook
	SkillType            []ent.Hook
	User                 []ent.Hook
	UserRole             []ent.Hook
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
