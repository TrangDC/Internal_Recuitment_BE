// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"trec/ent/attachment"
	"trec/ent/audittrail"
	"trec/ent/candidate"
	"trec/ent/candidateinterview"
	"trec/ent/candidateinterviewer"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/candidatejobstep"
	"trec/ent/hiringjob"
	"trec/ent/schema"
	"trec/ent/skill"
	"trec/ent/team"
	"trec/ent/teammanager"
	"trec/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	attachmentMixin := schema.Attachment{}.Mixin()
	attachmentMixinFields0 := attachmentMixin[0].Fields()
	_ = attachmentMixinFields0
	attachmentFields := schema.Attachment{}.Fields()
	_ = attachmentFields
	// attachmentDescCreatedAt is the schema descriptor for created_at field.
	attachmentDescCreatedAt := attachmentMixinFields0[1].Descriptor()
	// attachment.DefaultCreatedAt holds the default value on creation for the created_at field.
	attachment.DefaultCreatedAt = attachmentDescCreatedAt.Default.(func() time.Time)
	// attachmentDescDocumentName is the schema descriptor for document_name field.
	attachmentDescDocumentName := attachmentFields[1].Descriptor()
	// attachment.DocumentNameValidator is a validator for the "document_name" field. It is called by the builders before save.
	attachment.DocumentNameValidator = attachmentDescDocumentName.Validators[0].(func(string) error)
	audittrailMixin := schema.AuditTrail{}.Mixin()
	audittrailMixinFields0 := audittrailMixin[0].Fields()
	_ = audittrailMixinFields0
	audittrailFields := schema.AuditTrail{}.Fields()
	_ = audittrailFields
	// audittrailDescCreatedAt is the schema descriptor for created_at field.
	audittrailDescCreatedAt := audittrailMixinFields0[1].Descriptor()
	// audittrail.DefaultCreatedAt holds the default value on creation for the created_at field.
	audittrail.DefaultCreatedAt = audittrailDescCreatedAt.Default.(func() time.Time)
	// audittrailDescNote is the schema descriptor for note field.
	audittrailDescNote := audittrailFields[4].Descriptor()
	// audittrail.NoteValidator is a validator for the "note" field. It is called by the builders before save.
	audittrail.NoteValidator = audittrailDescNote.Validators[0].(func(string) error)
	candidateMixin := schema.Candidate{}.Mixin()
	candidateMixinFields0 := candidateMixin[0].Fields()
	_ = candidateMixinFields0
	candidateFields := schema.Candidate{}.Fields()
	_ = candidateFields
	// candidateDescCreatedAt is the schema descriptor for created_at field.
	candidateDescCreatedAt := candidateMixinFields0[1].Descriptor()
	// candidate.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidate.DefaultCreatedAt = candidateDescCreatedAt.Default.(func() time.Time)
	// candidateDescName is the schema descriptor for name field.
	candidateDescName := candidateFields[0].Descriptor()
	// candidate.NameValidator is a validator for the "name" field. It is called by the builders before save.
	candidate.NameValidator = func() func(string) error {
		validators := candidateDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidateDescEmail is the schema descriptor for email field.
	candidateDescEmail := candidateFields[1].Descriptor()
	// candidate.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	candidate.EmailValidator = func() func(string) error {
		validators := candidateDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidateDescPhone is the schema descriptor for phone field.
	candidateDescPhone := candidateFields[2].Descriptor()
	// candidate.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	candidate.PhoneValidator = func() func(string) error {
		validators := candidateDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidateDescIsBlacklist is the schema descriptor for is_blacklist field.
	candidateDescIsBlacklist := candidateFields[4].Descriptor()
	// candidate.DefaultIsBlacklist holds the default value on creation for the is_blacklist field.
	candidate.DefaultIsBlacklist = candidateDescIsBlacklist.Default.(bool)
	candidateinterviewMixin := schema.CandidateInterview{}.Mixin()
	candidateinterviewMixinFields0 := candidateinterviewMixin[0].Fields()
	_ = candidateinterviewMixinFields0
	candidateinterviewFields := schema.CandidateInterview{}.Fields()
	_ = candidateinterviewFields
	// candidateinterviewDescCreatedAt is the schema descriptor for created_at field.
	candidateinterviewDescCreatedAt := candidateinterviewMixinFields0[1].Descriptor()
	// candidateinterview.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidateinterview.DefaultCreatedAt = candidateinterviewDescCreatedAt.Default.(func() time.Time)
	// candidateinterviewDescTitle is the schema descriptor for title field.
	candidateinterviewDescTitle := candidateinterviewFields[0].Descriptor()
	// candidateinterview.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	candidateinterview.TitleValidator = candidateinterviewDescTitle.Validators[0].(func(string) error)
	candidateinterviewerMixin := schema.CandidateInterviewer{}.Mixin()
	candidateinterviewerMixinFields0 := candidateinterviewerMixin[0].Fields()
	_ = candidateinterviewerMixinFields0
	candidateinterviewerFields := schema.CandidateInterviewer{}.Fields()
	_ = candidateinterviewerFields
	// candidateinterviewerDescCreatedAt is the schema descriptor for created_at field.
	candidateinterviewerDescCreatedAt := candidateinterviewerMixinFields0[1].Descriptor()
	// candidateinterviewer.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidateinterviewer.DefaultCreatedAt = candidateinterviewerDescCreatedAt.Default.(func() time.Time)
	candidatejobMixin := schema.CandidateJob{}.Mixin()
	candidatejobMixinFields0 := candidatejobMixin[0].Fields()
	_ = candidatejobMixinFields0
	candidatejobFields := schema.CandidateJob{}.Fields()
	_ = candidatejobFields
	// candidatejobDescCreatedAt is the schema descriptor for created_at field.
	candidatejobDescCreatedAt := candidatejobMixinFields0[1].Descriptor()
	// candidatejob.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidatejob.DefaultCreatedAt = candidatejobDescCreatedAt.Default.(func() time.Time)
	candidatejobfeedbackMixin := schema.CandidateJobFeedback{}.Mixin()
	candidatejobfeedbackMixinFields0 := candidatejobfeedbackMixin[0].Fields()
	_ = candidatejobfeedbackMixinFields0
	candidatejobfeedbackFields := schema.CandidateJobFeedback{}.Fields()
	_ = candidatejobfeedbackFields
	// candidatejobfeedbackDescCreatedAt is the schema descriptor for created_at field.
	candidatejobfeedbackDescCreatedAt := candidatejobfeedbackMixinFields0[1].Descriptor()
	// candidatejobfeedback.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidatejobfeedback.DefaultCreatedAt = candidatejobfeedbackDescCreatedAt.Default.(func() time.Time)
	candidatejobstepMixin := schema.CandidateJobStep{}.Mixin()
	candidatejobstepMixinFields0 := candidatejobstepMixin[0].Fields()
	_ = candidatejobstepMixinFields0
	candidatejobstepFields := schema.CandidateJobStep{}.Fields()
	_ = candidatejobstepFields
	// candidatejobstepDescCreatedAt is the schema descriptor for created_at field.
	candidatejobstepDescCreatedAt := candidatejobstepMixinFields0[1].Descriptor()
	// candidatejobstep.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidatejobstep.DefaultCreatedAt = candidatejobstepDescCreatedAt.Default.(func() time.Time)
	hiringjobMixin := schema.HiringJob{}.Mixin()
	hiringjobMixinFields0 := hiringjobMixin[0].Fields()
	_ = hiringjobMixinFields0
	hiringjobMixinFields1 := hiringjobMixin[1].Fields()
	_ = hiringjobMixinFields1
	hiringjobFields := schema.HiringJob{}.Fields()
	_ = hiringjobFields
	// hiringjobDescCreatedAt is the schema descriptor for created_at field.
	hiringjobDescCreatedAt := hiringjobMixinFields0[1].Descriptor()
	// hiringjob.DefaultCreatedAt holds the default value on creation for the created_at field.
	hiringjob.DefaultCreatedAt = hiringjobDescCreatedAt.Default.(func() time.Time)
	// hiringjobDescSlug is the schema descriptor for slug field.
	hiringjobDescSlug := hiringjobMixinFields1[0].Descriptor()
	// hiringjob.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	hiringjob.SlugValidator = hiringjobDescSlug.Validators[0].(func(string) error)
	// hiringjobDescName is the schema descriptor for name field.
	hiringjobDescName := hiringjobFields[0].Descriptor()
	// hiringjob.NameValidator is a validator for the "name" field. It is called by the builders before save.
	hiringjob.NameValidator = func() func(string) error {
		validators := hiringjobDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hiringjobDescDescription is the schema descriptor for description field.
	hiringjobDescDescription := hiringjobFields[1].Descriptor()
	// hiringjob.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	hiringjob.DescriptionValidator = hiringjobDescDescription.Validators[0].(func(string) error)
	// hiringjobDescAmount is the schema descriptor for amount field.
	hiringjobDescAmount := hiringjobFields[2].Descriptor()
	// hiringjob.DefaultAmount holds the default value on creation for the amount field.
	hiringjob.DefaultAmount = hiringjobDescAmount.Default.(int)
	// hiringjobDescSalaryFrom is the schema descriptor for salary_from field.
	hiringjobDescSalaryFrom := hiringjobFields[8].Descriptor()
	// hiringjob.DefaultSalaryFrom holds the default value on creation for the salary_from field.
	hiringjob.DefaultSalaryFrom = hiringjobDescSalaryFrom.Default.(int)
	// hiringjobDescSalaryTo is the schema descriptor for salary_to field.
	hiringjobDescSalaryTo := hiringjobFields[9].Descriptor()
	// hiringjob.DefaultSalaryTo holds the default value on creation for the salary_to field.
	hiringjob.DefaultSalaryTo = hiringjobDescSalaryTo.Default.(int)
	// hiringjobDescPriority is the schema descriptor for priority field.
	hiringjobDescPriority := hiringjobFields[12].Descriptor()
	// hiringjob.DefaultPriority holds the default value on creation for the priority field.
	hiringjob.DefaultPriority = hiringjobDescPriority.Default.(int)
	skillMixin := schema.Skill{}.Mixin()
	skillMixinFields0 := skillMixin[0].Fields()
	_ = skillMixinFields0
	skillFields := schema.Skill{}.Fields()
	_ = skillFields
	// skillDescCreatedAt is the schema descriptor for created_at field.
	skillDescCreatedAt := skillMixinFields0[1].Descriptor()
	// skill.DefaultCreatedAt holds the default value on creation for the created_at field.
	skill.DefaultCreatedAt = skillDescCreatedAt.Default.(func() time.Time)
	// skillDescName is the schema descriptor for name field.
	skillDescName := skillFields[0].Descriptor()
	// skill.NameValidator is a validator for the "name" field. It is called by the builders before save.
	skill.NameValidator = skillDescName.Validators[0].(func(string) error)
	// skillDescDescription is the schema descriptor for description field.
	skillDescDescription := skillFields[1].Descriptor()
	// skill.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	skill.DescriptionValidator = skillDescDescription.Validators[0].(func(string) error)
	teamMixin := schema.Team{}.Mixin()
	teamMixinFields0 := teamMixin[0].Fields()
	_ = teamMixinFields0
	teamMixinFields1 := teamMixin[1].Fields()
	_ = teamMixinFields1
	teamFields := schema.Team{}.Fields()
	_ = teamFields
	// teamDescCreatedAt is the schema descriptor for created_at field.
	teamDescCreatedAt := teamMixinFields0[1].Descriptor()
	// team.DefaultCreatedAt holds the default value on creation for the created_at field.
	team.DefaultCreatedAt = teamDescCreatedAt.Default.(func() time.Time)
	// teamDescSlug is the schema descriptor for slug field.
	teamDescSlug := teamMixinFields1[0].Descriptor()
	// team.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	team.SlugValidator = teamDescSlug.Validators[0].(func(string) error)
	// teamDescName is the schema descriptor for name field.
	teamDescName := teamFields[0].Descriptor()
	// team.NameValidator is a validator for the "name" field. It is called by the builders before save.
	team.NameValidator = func() func(string) error {
		validators := teamDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	teammanagerMixin := schema.TeamManager{}.Mixin()
	teammanagerMixinFields0 := teammanagerMixin[0].Fields()
	_ = teammanagerMixinFields0
	teammanagerFields := schema.TeamManager{}.Fields()
	_ = teammanagerFields
	// teammanagerDescCreatedAt is the schema descriptor for created_at field.
	teammanagerDescCreatedAt := teammanagerMixinFields0[1].Descriptor()
	// teammanager.DefaultCreatedAt holds the default value on creation for the created_at field.
	teammanager.DefaultCreatedAt = teammanagerDescCreatedAt.Default.(func() time.Time)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescWorkEmail is the schema descriptor for work_email field.
	userDescWorkEmail := userFields[1].Descriptor()
	// user.WorkEmailValidator is a validator for the "work_email" field. It is called by the builders before save.
	user.WorkEmailValidator = userDescWorkEmail.Validators[0].(func(string) error)
	// userDescOid is the schema descriptor for oid field.
	userDescOid := userFields[3].Descriptor()
	// user.OidValidator is a validator for the "oid" field. It is called by the builders before save.
	user.OidValidator = userDescOid.Validators[0].(func(string) error)
}
