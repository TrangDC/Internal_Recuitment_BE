// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"trec/ent/attachment"
	"trec/ent/audittrail"
	"trec/ent/candidate"
	"trec/ent/candidateaward"
	"trec/ent/candidatecertificate"
	"trec/ent/candidateeducate"
	"trec/ent/candidateexp"
	"trec/ent/candidatehistorycall"
	"trec/ent/candidateinterview"
	"trec/ent/candidateinterviewer"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/candidatejobstep"
	"trec/ent/candidatenote"
	"trec/ent/emailroleattribute"
	"trec/ent/emailtemplate"
	"trec/ent/entitypermission"
	"trec/ent/entityskill"
	"trec/ent/hiringjob"
	"trec/ent/hiringteam"
	"trec/ent/hiringteamapprover"
	"trec/ent/hiringteammanager"
	"trec/ent/jobposition"
	"trec/ent/outgoingemail"
	"trec/ent/permission"
	"trec/ent/permissiongroup"
	"trec/ent/recteam"
	"trec/ent/role"
	"trec/ent/schema"
	"trec/ent/skill"
	"trec/ent/skilltype"
	"trec/ent/user"
	"trec/ent/userrole"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	attachmentMixin := schema.Attachment{}.Mixin()
	attachmentMixinFields0 := attachmentMixin[0].Fields()
	_ = attachmentMixinFields0
	attachmentFields := schema.Attachment{}.Fields()
	_ = attachmentFields
	// attachmentDescCreatedAt is the schema descriptor for created_at field.
	attachmentDescCreatedAt := attachmentMixinFields0[1].Descriptor()
	// attachment.DefaultCreatedAt holds the default value on creation for the created_at field.
	attachment.DefaultCreatedAt = attachmentDescCreatedAt.Default.(func() time.Time)
	// attachmentDescDocumentName is the schema descriptor for document_name field.
	attachmentDescDocumentName := attachmentFields[1].Descriptor()
	// attachment.DocumentNameValidator is a validator for the "document_name" field. It is called by the builders before save.
	attachment.DocumentNameValidator = attachmentDescDocumentName.Validators[0].(func(string) error)
	audittrailMixin := schema.AuditTrail{}.Mixin()
	audittrailMixinFields0 := audittrailMixin[0].Fields()
	_ = audittrailMixinFields0
	audittrailFields := schema.AuditTrail{}.Fields()
	_ = audittrailFields
	// audittrailDescCreatedAt is the schema descriptor for created_at field.
	audittrailDescCreatedAt := audittrailMixinFields0[1].Descriptor()
	// audittrail.DefaultCreatedAt holds the default value on creation for the created_at field.
	audittrail.DefaultCreatedAt = audittrailDescCreatedAt.Default.(func() time.Time)
	// audittrailDescNote is the schema descriptor for note field.
	audittrailDescNote := audittrailFields[4].Descriptor()
	// audittrail.NoteValidator is a validator for the "note" field. It is called by the builders before save.
	audittrail.NoteValidator = audittrailDescNote.Validators[0].(func(string) error)
	candidateMixin := schema.Candidate{}.Mixin()
	candidateMixinFields0 := candidateMixin[0].Fields()
	_ = candidateMixinFields0
	candidateFields := schema.Candidate{}.Fields()
	_ = candidateFields
	// candidateDescCreatedAt is the schema descriptor for created_at field.
	candidateDescCreatedAt := candidateMixinFields0[1].Descriptor()
	// candidate.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidate.DefaultCreatedAt = candidateDescCreatedAt.Default.(func() time.Time)
	// candidateDescName is the schema descriptor for name field.
	candidateDescName := candidateFields[0].Descriptor()
	// candidate.NameValidator is a validator for the "name" field. It is called by the builders before save.
	candidate.NameValidator = func() func(string) error {
		validators := candidateDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidateDescEmail is the schema descriptor for email field.
	candidateDescEmail := candidateFields[1].Descriptor()
	// candidate.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	candidate.EmailValidator = func() func(string) error {
		validators := candidateDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidateDescPhone is the schema descriptor for phone field.
	candidateDescPhone := candidateFields[2].Descriptor()
	// candidate.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	candidate.PhoneValidator = func() func(string) error {
		validators := candidateDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidateDescIsBlacklist is the schema descriptor for is_blacklist field.
	candidateDescIsBlacklist := candidateFields[4].Descriptor()
	// candidate.DefaultIsBlacklist holds the default value on creation for the is_blacklist field.
	candidate.DefaultIsBlacklist = candidateDescIsBlacklist.Default.(bool)
	// candidateDescReferenceValue is the schema descriptor for reference_value field.
	candidateDescReferenceValue := candidateFields[7].Descriptor()
	// candidate.ReferenceValueValidator is a validator for the "reference_value" field. It is called by the builders before save.
	candidate.ReferenceValueValidator = candidateDescReferenceValue.Validators[0].(func(string) error)
	// candidateDescDescription is the schema descriptor for description field.
	candidateDescDescription := candidateFields[10].Descriptor()
	// candidate.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	candidate.DescriptionValidator = candidateDescDescription.Validators[0].(func(string) error)
	// candidateDescCountry is the schema descriptor for country field.
	candidateDescCountry := candidateFields[12].Descriptor()
	// candidate.CountryValidator is a validator for the "country" field. It is called by the builders before save.
	candidate.CountryValidator = candidateDescCountry.Validators[0].(func(string) error)
	// candidateDescAddress is the schema descriptor for address field.
	candidateDescAddress := candidateFields[13].Descriptor()
	// candidate.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	candidate.AddressValidator = candidateDescAddress.Validators[0].(func(string) error)
	candidateawardMixin := schema.CandidateAward{}.Mixin()
	candidateawardMixinFields0 := candidateawardMixin[0].Fields()
	_ = candidateawardMixinFields0
	candidateawardFields := schema.CandidateAward{}.Fields()
	_ = candidateawardFields
	// candidateawardDescCreatedAt is the schema descriptor for created_at field.
	candidateawardDescCreatedAt := candidateawardMixinFields0[1].Descriptor()
	// candidateaward.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidateaward.DefaultCreatedAt = candidateawardDescCreatedAt.Default.(func() time.Time)
	// candidateawardDescName is the schema descriptor for name field.
	candidateawardDescName := candidateawardFields[1].Descriptor()
	// candidateaward.NameValidator is a validator for the "name" field. It is called by the builders before save.
	candidateaward.NameValidator = func() func(string) error {
		validators := candidateawardDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	candidatecertificateMixin := schema.CandidateCertificate{}.Mixin()
	candidatecertificateMixinFields0 := candidatecertificateMixin[0].Fields()
	_ = candidatecertificateMixinFields0
	candidatecertificateFields := schema.CandidateCertificate{}.Fields()
	_ = candidatecertificateFields
	// candidatecertificateDescCreatedAt is the schema descriptor for created_at field.
	candidatecertificateDescCreatedAt := candidatecertificateMixinFields0[1].Descriptor()
	// candidatecertificate.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidatecertificate.DefaultCreatedAt = candidatecertificateDescCreatedAt.Default.(func() time.Time)
	// candidatecertificateDescName is the schema descriptor for name field.
	candidatecertificateDescName := candidatecertificateFields[1].Descriptor()
	// candidatecertificate.NameValidator is a validator for the "name" field. It is called by the builders before save.
	candidatecertificate.NameValidator = func() func(string) error {
		validators := candidatecertificateDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidatecertificateDescScore is the schema descriptor for score field.
	candidatecertificateDescScore := candidatecertificateFields[2].Descriptor()
	// candidatecertificate.ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	candidatecertificate.ScoreValidator = candidatecertificateDescScore.Validators[0].(func(string) error)
	candidateeducateMixin := schema.CandidateEducate{}.Mixin()
	candidateeducateMixinFields0 := candidateeducateMixin[0].Fields()
	_ = candidateeducateMixinFields0
	candidateeducateFields := schema.CandidateEducate{}.Fields()
	_ = candidateeducateFields
	// candidateeducateDescCreatedAt is the schema descriptor for created_at field.
	candidateeducateDescCreatedAt := candidateeducateMixinFields0[1].Descriptor()
	// candidateeducate.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidateeducate.DefaultCreatedAt = candidateeducateDescCreatedAt.Default.(func() time.Time)
	// candidateeducateDescSchoolName is the schema descriptor for school_name field.
	candidateeducateDescSchoolName := candidateeducateFields[1].Descriptor()
	// candidateeducate.SchoolNameValidator is a validator for the "school_name" field. It is called by the builders before save.
	candidateeducate.SchoolNameValidator = func() func(string) error {
		validators := candidateeducateDescSchoolName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(school_name string) error {
			for _, fn := range fns {
				if err := fn(school_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidateeducateDescMajor is the schema descriptor for major field.
	candidateeducateDescMajor := candidateeducateFields[2].Descriptor()
	// candidateeducate.MajorValidator is a validator for the "major" field. It is called by the builders before save.
	candidateeducate.MajorValidator = candidateeducateDescMajor.Validators[0].(func(string) error)
	// candidateeducateDescGpa is the schema descriptor for gpa field.
	candidateeducateDescGpa := candidateeducateFields[3].Descriptor()
	// candidateeducate.GpaValidator is a validator for the "gpa" field. It is called by the builders before save.
	candidateeducate.GpaValidator = candidateeducateDescGpa.Validators[0].(func(string) error)
	// candidateeducateDescLocation is the schema descriptor for location field.
	candidateeducateDescLocation := candidateeducateFields[4].Descriptor()
	// candidateeducate.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	candidateeducate.LocationValidator = candidateeducateDescLocation.Validators[0].(func(string) error)
	// candidateeducateDescDescription is the schema descriptor for description field.
	candidateeducateDescDescription := candidateeducateFields[5].Descriptor()
	// candidateeducate.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	candidateeducate.DescriptionValidator = candidateeducateDescDescription.Validators[0].(func(string) error)
	// candidateeducateDescIsCurrent is the schema descriptor for is_current field.
	candidateeducateDescIsCurrent := candidateeducateFields[9].Descriptor()
	// candidateeducate.DefaultIsCurrent holds the default value on creation for the is_current field.
	candidateeducate.DefaultIsCurrent = candidateeducateDescIsCurrent.Default.(bool)
	candidateexpMixin := schema.CandidateExp{}.Mixin()
	candidateexpMixinFields0 := candidateexpMixin[0].Fields()
	_ = candidateexpMixinFields0
	candidateexpFields := schema.CandidateExp{}.Fields()
	_ = candidateexpFields
	// candidateexpDescCreatedAt is the schema descriptor for created_at field.
	candidateexpDescCreatedAt := candidateexpMixinFields0[1].Descriptor()
	// candidateexp.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidateexp.DefaultCreatedAt = candidateexpDescCreatedAt.Default.(func() time.Time)
	// candidateexpDescPosition is the schema descriptor for position field.
	candidateexpDescPosition := candidateexpFields[1].Descriptor()
	// candidateexp.PositionValidator is a validator for the "position" field. It is called by the builders before save.
	candidateexp.PositionValidator = func() func(string) error {
		validators := candidateexpDescPosition.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(position string) error {
			for _, fn := range fns {
				if err := fn(position); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidateexpDescCompany is the schema descriptor for company field.
	candidateexpDescCompany := candidateexpFields[2].Descriptor()
	// candidateexp.CompanyValidator is a validator for the "company" field. It is called by the builders before save.
	candidateexp.CompanyValidator = func() func(string) error {
		validators := candidateexpDescCompany.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(company string) error {
			for _, fn := range fns {
				if err := fn(company); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidateexpDescLocation is the schema descriptor for location field.
	candidateexpDescLocation := candidateexpFields[3].Descriptor()
	// candidateexp.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	candidateexp.LocationValidator = candidateexpDescLocation.Validators[0].(func(string) error)
	// candidateexpDescDescription is the schema descriptor for description field.
	candidateexpDescDescription := candidateexpFields[4].Descriptor()
	// candidateexp.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	candidateexp.DescriptionValidator = candidateexpDescDescription.Validators[0].(func(string) error)
	// candidateexpDescIsCurrent is the schema descriptor for is_current field.
	candidateexpDescIsCurrent := candidateexpFields[8].Descriptor()
	// candidateexp.DefaultIsCurrent holds the default value on creation for the is_current field.
	candidateexp.DefaultIsCurrent = candidateexpDescIsCurrent.Default.(bool)
	candidatehistorycallMixin := schema.CandidateHistoryCall{}.Mixin()
	candidatehistorycallMixinFields0 := candidatehistorycallMixin[0].Fields()
	_ = candidatehistorycallMixinFields0
	candidatehistorycallFields := schema.CandidateHistoryCall{}.Fields()
	_ = candidatehistorycallFields
	// candidatehistorycallDescCreatedAt is the schema descriptor for created_at field.
	candidatehistorycallDescCreatedAt := candidatehistorycallMixinFields0[1].Descriptor()
	// candidatehistorycall.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidatehistorycall.DefaultCreatedAt = candidatehistorycallDescCreatedAt.Default.(func() time.Time)
	// candidatehistorycallDescName is the schema descriptor for name field.
	candidatehistorycallDescName := candidatehistorycallFields[0].Descriptor()
	// candidatehistorycall.NameValidator is a validator for the "name" field. It is called by the builders before save.
	candidatehistorycall.NameValidator = candidatehistorycallDescName.Validators[0].(func(string) error)
	// candidatehistorycallDescContactTo is the schema descriptor for contact_to field.
	candidatehistorycallDescContactTo := candidatehistorycallFields[2].Descriptor()
	// candidatehistorycall.ContactToValidator is a validator for the "contact_to" field. It is called by the builders before save.
	candidatehistorycall.ContactToValidator = candidatehistorycallDescContactTo.Validators[0].(func(string) error)
	// candidatehistorycallDescDescription is the schema descriptor for description field.
	candidatehistorycallDescDescription := candidatehistorycallFields[3].Descriptor()
	// candidatehistorycall.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	candidatehistorycall.DescriptionValidator = candidatehistorycallDescDescription.Validators[0].(func(string) error)
	candidateinterviewMixin := schema.CandidateInterview{}.Mixin()
	candidateinterviewMixinFields0 := candidateinterviewMixin[0].Fields()
	_ = candidateinterviewMixinFields0
	candidateinterviewFields := schema.CandidateInterview{}.Fields()
	_ = candidateinterviewFields
	// candidateinterviewDescCreatedAt is the schema descriptor for created_at field.
	candidateinterviewDescCreatedAt := candidateinterviewMixinFields0[1].Descriptor()
	// candidateinterview.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidateinterview.DefaultCreatedAt = candidateinterviewDescCreatedAt.Default.(func() time.Time)
	// candidateinterviewDescTitle is the schema descriptor for title field.
	candidateinterviewDescTitle := candidateinterviewFields[0].Descriptor()
	// candidateinterview.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	candidateinterview.TitleValidator = candidateinterviewDescTitle.Validators[0].(func(string) error)
	// candidateinterviewDescLocation is the schema descriptor for location field.
	candidateinterviewDescLocation := candidateinterviewFields[9].Descriptor()
	// candidateinterview.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	candidateinterview.LocationValidator = candidateinterviewDescLocation.Validators[0].(func(string) error)
	candidateinterviewerMixin := schema.CandidateInterviewer{}.Mixin()
	candidateinterviewerMixinFields0 := candidateinterviewerMixin[0].Fields()
	_ = candidateinterviewerMixinFields0
	candidateinterviewerFields := schema.CandidateInterviewer{}.Fields()
	_ = candidateinterviewerFields
	// candidateinterviewerDescCreatedAt is the schema descriptor for created_at field.
	candidateinterviewerDescCreatedAt := candidateinterviewerMixinFields0[1].Descriptor()
	// candidateinterviewer.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidateinterviewer.DefaultCreatedAt = candidateinterviewerDescCreatedAt.Default.(func() time.Time)
	candidatejobMixin := schema.CandidateJob{}.Mixin()
	candidatejobMixinFields0 := candidatejobMixin[0].Fields()
	_ = candidatejobMixinFields0
	candidatejobFields := schema.CandidateJob{}.Fields()
	_ = candidatejobFields
	// candidatejobDescCreatedAt is the schema descriptor for created_at field.
	candidatejobDescCreatedAt := candidatejobMixinFields0[1].Descriptor()
	// candidatejob.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidatejob.DefaultCreatedAt = candidatejobDescCreatedAt.Default.(func() time.Time)
	candidatejobfeedbackMixin := schema.CandidateJobFeedback{}.Mixin()
	candidatejobfeedbackMixinFields0 := candidatejobfeedbackMixin[0].Fields()
	_ = candidatejobfeedbackMixinFields0
	candidatejobfeedbackFields := schema.CandidateJobFeedback{}.Fields()
	_ = candidatejobfeedbackFields
	// candidatejobfeedbackDescCreatedAt is the schema descriptor for created_at field.
	candidatejobfeedbackDescCreatedAt := candidatejobfeedbackMixinFields0[1].Descriptor()
	// candidatejobfeedback.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidatejobfeedback.DefaultCreatedAt = candidatejobfeedbackDescCreatedAt.Default.(func() time.Time)
	candidatejobstepMixin := schema.CandidateJobStep{}.Mixin()
	candidatejobstepMixinFields0 := candidatejobstepMixin[0].Fields()
	_ = candidatejobstepMixinFields0
	candidatejobstepFields := schema.CandidateJobStep{}.Fields()
	_ = candidatejobstepFields
	// candidatejobstepDescCreatedAt is the schema descriptor for created_at field.
	candidatejobstepDescCreatedAt := candidatejobstepMixinFields0[1].Descriptor()
	// candidatejobstep.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidatejobstep.DefaultCreatedAt = candidatejobstepDescCreatedAt.Default.(func() time.Time)
	candidatenoteMixin := schema.CandidateNote{}.Mixin()
	candidatenoteMixinFields0 := candidatenoteMixin[0].Fields()
	_ = candidatenoteMixinFields0
	candidatenoteFields := schema.CandidateNote{}.Fields()
	_ = candidatenoteFields
	// candidatenoteDescCreatedAt is the schema descriptor for created_at field.
	candidatenoteDescCreatedAt := candidatenoteMixinFields0[1].Descriptor()
	// candidatenote.DefaultCreatedAt holds the default value on creation for the created_at field.
	candidatenote.DefaultCreatedAt = candidatenoteDescCreatedAt.Default.(func() time.Time)
	// candidatenoteDescName is the schema descriptor for name field.
	candidatenoteDescName := candidatenoteFields[2].Descriptor()
	// candidatenote.NameValidator is a validator for the "name" field. It is called by the builders before save.
	candidatenote.NameValidator = func() func(string) error {
		validators := candidatenoteDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// candidatenoteDescDescription is the schema descriptor for description field.
	candidatenoteDescDescription := candidatenoteFields[3].Descriptor()
	// candidatenote.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	candidatenote.DescriptionValidator = candidatenoteDescDescription.Validators[0].(func(string) error)
	emailroleattributeMixin := schema.EmailRoleAttribute{}.Mixin()
	emailroleattributeMixinFields0 := emailroleattributeMixin[0].Fields()
	_ = emailroleattributeMixinFields0
	emailroleattributeFields := schema.EmailRoleAttribute{}.Fields()
	_ = emailroleattributeFields
	// emailroleattributeDescCreatedAt is the schema descriptor for created_at field.
	emailroleattributeDescCreatedAt := emailroleattributeMixinFields0[1].Descriptor()
	// emailroleattribute.DefaultCreatedAt holds the default value on creation for the created_at field.
	emailroleattribute.DefaultCreatedAt = emailroleattributeDescCreatedAt.Default.(func() time.Time)
	emailtemplateMixin := schema.EmailTemplate{}.Mixin()
	emailtemplateMixinFields0 := emailtemplateMixin[0].Fields()
	_ = emailtemplateMixinFields0
	emailtemplateFields := schema.EmailTemplate{}.Fields()
	_ = emailtemplateFields
	// emailtemplateDescCreatedAt is the schema descriptor for created_at field.
	emailtemplateDescCreatedAt := emailtemplateMixinFields0[1].Descriptor()
	// emailtemplate.DefaultCreatedAt holds the default value on creation for the created_at field.
	emailtemplate.DefaultCreatedAt = emailtemplateDescCreatedAt.Default.(func() time.Time)
	// emailtemplateDescSubject is the schema descriptor for subject field.
	emailtemplateDescSubject := emailtemplateFields[4].Descriptor()
	// emailtemplate.SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	emailtemplate.SubjectValidator = func() func(string) error {
		validators := emailtemplateDescSubject.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(subject string) error {
			for _, fn := range fns {
				if err := fn(subject); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// emailtemplateDescContent is the schema descriptor for content field.
	emailtemplateDescContent := emailtemplateFields[5].Descriptor()
	// emailtemplate.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	emailtemplate.ContentValidator = emailtemplateDescContent.Validators[0].(func(string) error)
	entitypermissionFields := schema.EntityPermission{}.Fields()
	_ = entitypermissionFields
	// entitypermissionDescForOwner is the schema descriptor for for_owner field.
	entitypermissionDescForOwner := entitypermissionFields[2].Descriptor()
	// entitypermission.DefaultForOwner holds the default value on creation for the for_owner field.
	entitypermission.DefaultForOwner = entitypermissionDescForOwner.Default.(bool)
	// entitypermissionDescForTeam is the schema descriptor for for_team field.
	entitypermissionDescForTeam := entitypermissionFields[3].Descriptor()
	// entitypermission.DefaultForTeam holds the default value on creation for the for_team field.
	entitypermission.DefaultForTeam = entitypermissionDescForTeam.Default.(bool)
	// entitypermissionDescForAll is the schema descriptor for for_all field.
	entitypermissionDescForAll := entitypermissionFields[4].Descriptor()
	// entitypermission.DefaultForAll holds the default value on creation for the for_all field.
	entitypermission.DefaultForAll = entitypermissionDescForAll.Default.(bool)
	// entitypermissionDescCreatedAt is the schema descriptor for created_at field.
	entitypermissionDescCreatedAt := entitypermissionFields[7].Descriptor()
	// entitypermission.DefaultCreatedAt holds the default value on creation for the created_at field.
	entitypermission.DefaultCreatedAt = entitypermissionDescCreatedAt.Default.(func() time.Time)
	entityskillMixin := schema.EntitySkill{}.Mixin()
	entityskillMixinFields0 := entityskillMixin[0].Fields()
	_ = entityskillMixinFields0
	entityskillFields := schema.EntitySkill{}.Fields()
	_ = entityskillFields
	// entityskillDescCreatedAt is the schema descriptor for created_at field.
	entityskillDescCreatedAt := entityskillMixinFields0[1].Descriptor()
	// entityskill.DefaultCreatedAt holds the default value on creation for the created_at field.
	entityskill.DefaultCreatedAt = entityskillDescCreatedAt.Default.(func() time.Time)
	hiringjobMixin := schema.HiringJob{}.Mixin()
	hiringjobMixinFields0 := hiringjobMixin[0].Fields()
	_ = hiringjobMixinFields0
	hiringjobMixinFields1 := hiringjobMixin[1].Fields()
	_ = hiringjobMixinFields1
	hiringjobFields := schema.HiringJob{}.Fields()
	_ = hiringjobFields
	// hiringjobDescCreatedAt is the schema descriptor for created_at field.
	hiringjobDescCreatedAt := hiringjobMixinFields0[1].Descriptor()
	// hiringjob.DefaultCreatedAt holds the default value on creation for the created_at field.
	hiringjob.DefaultCreatedAt = hiringjobDescCreatedAt.Default.(func() time.Time)
	// hiringjobDescSlug is the schema descriptor for slug field.
	hiringjobDescSlug := hiringjobMixinFields1[0].Descriptor()
	// hiringjob.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	hiringjob.SlugValidator = hiringjobDescSlug.Validators[0].(func(string) error)
	// hiringjobDescName is the schema descriptor for name field.
	hiringjobDescName := hiringjobFields[0].Descriptor()
	// hiringjob.NameValidator is a validator for the "name" field. It is called by the builders before save.
	hiringjob.NameValidator = func() func(string) error {
		validators := hiringjobDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hiringjobDescDescription is the schema descriptor for description field.
	hiringjobDescDescription := hiringjobFields[1].Descriptor()
	// hiringjob.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	hiringjob.DescriptionValidator = hiringjobDescDescription.Validators[0].(func(string) error)
	// hiringjobDescAmount is the schema descriptor for amount field.
	hiringjobDescAmount := hiringjobFields[2].Descriptor()
	// hiringjob.DefaultAmount holds the default value on creation for the amount field.
	hiringjob.DefaultAmount = hiringjobDescAmount.Default.(int)
	// hiringjobDescSalaryFrom is the schema descriptor for salary_from field.
	hiringjobDescSalaryFrom := hiringjobFields[7].Descriptor()
	// hiringjob.DefaultSalaryFrom holds the default value on creation for the salary_from field.
	hiringjob.DefaultSalaryFrom = hiringjobDescSalaryFrom.Default.(int)
	// hiringjobDescSalaryTo is the schema descriptor for salary_to field.
	hiringjobDescSalaryTo := hiringjobFields[8].Descriptor()
	// hiringjob.DefaultSalaryTo holds the default value on creation for the salary_to field.
	hiringjob.DefaultSalaryTo = hiringjobDescSalaryTo.Default.(int)
	// hiringjobDescPriority is the schema descriptor for priority field.
	hiringjobDescPriority := hiringjobFields[11].Descriptor()
	// hiringjob.DefaultPriority holds the default value on creation for the priority field.
	hiringjob.DefaultPriority = hiringjobDescPriority.Default.(int)
	hiringteamMixin := schema.HiringTeam{}.Mixin()
	hiringteamMixinFields0 := hiringteamMixin[0].Fields()
	_ = hiringteamMixinFields0
	hiringteamMixinFields1 := hiringteamMixin[1].Fields()
	_ = hiringteamMixinFields1
	hiringteamFields := schema.HiringTeam{}.Fields()
	_ = hiringteamFields
	// hiringteamDescCreatedAt is the schema descriptor for created_at field.
	hiringteamDescCreatedAt := hiringteamMixinFields0[1].Descriptor()
	// hiringteam.DefaultCreatedAt holds the default value on creation for the created_at field.
	hiringteam.DefaultCreatedAt = hiringteamDescCreatedAt.Default.(func() time.Time)
	// hiringteamDescSlug is the schema descriptor for slug field.
	hiringteamDescSlug := hiringteamMixinFields1[0].Descriptor()
	// hiringteam.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	hiringteam.SlugValidator = hiringteamDescSlug.Validators[0].(func(string) error)
	// hiringteamDescName is the schema descriptor for name field.
	hiringteamDescName := hiringteamFields[0].Descriptor()
	// hiringteam.NameValidator is a validator for the "name" field. It is called by the builders before save.
	hiringteam.NameValidator = func() func(string) error {
		validators := hiringteamDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hiringteamDescDescription is the schema descriptor for description field.
	hiringteamDescDescription := hiringteamFields[1].Descriptor()
	// hiringteam.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	hiringteam.DescriptionValidator = hiringteamDescDescription.Validators[0].(func(string) error)
	hiringteamapproverMixin := schema.HiringTeamApprover{}.Mixin()
	hiringteamapproverMixinFields0 := hiringteamapproverMixin[0].Fields()
	_ = hiringteamapproverMixinFields0
	hiringteamapproverFields := schema.HiringTeamApprover{}.Fields()
	_ = hiringteamapproverFields
	// hiringteamapproverDescCreatedAt is the schema descriptor for created_at field.
	hiringteamapproverDescCreatedAt := hiringteamapproverMixinFields0[1].Descriptor()
	// hiringteamapprover.DefaultCreatedAt holds the default value on creation for the created_at field.
	hiringteamapprover.DefaultCreatedAt = hiringteamapproverDescCreatedAt.Default.(func() time.Time)
	// hiringteamapproverDescOrderID is the schema descriptor for order_id field.
	hiringteamapproverDescOrderID := hiringteamapproverFields[2].Descriptor()
	// hiringteamapprover.OrderIDValidator is a validator for the "order_id" field. It is called by the builders before save.
	hiringteamapprover.OrderIDValidator = hiringteamapproverDescOrderID.Validators[0].(func(int) error)
	hiringteammanagerMixin := schema.HiringTeamManager{}.Mixin()
	hiringteammanagerMixinFields0 := hiringteammanagerMixin[0].Fields()
	_ = hiringteammanagerMixinFields0
	hiringteammanagerFields := schema.HiringTeamManager{}.Fields()
	_ = hiringteammanagerFields
	// hiringteammanagerDescCreatedAt is the schema descriptor for created_at field.
	hiringteammanagerDescCreatedAt := hiringteammanagerMixinFields0[1].Descriptor()
	// hiringteammanager.DefaultCreatedAt holds the default value on creation for the created_at field.
	hiringteammanager.DefaultCreatedAt = hiringteammanagerDescCreatedAt.Default.(func() time.Time)
	jobpositionMixin := schema.JobPosition{}.Mixin()
	jobpositionMixinFields0 := jobpositionMixin[0].Fields()
	_ = jobpositionMixinFields0
	jobpositionFields := schema.JobPosition{}.Fields()
	_ = jobpositionFields
	// jobpositionDescCreatedAt is the schema descriptor for created_at field.
	jobpositionDescCreatedAt := jobpositionMixinFields0[1].Descriptor()
	// jobposition.DefaultCreatedAt holds the default value on creation for the created_at field.
	jobposition.DefaultCreatedAt = jobpositionDescCreatedAt.Default.(func() time.Time)
	// jobpositionDescName is the schema descriptor for name field.
	jobpositionDescName := jobpositionFields[0].Descriptor()
	// jobposition.NameValidator is a validator for the "name" field. It is called by the builders before save.
	jobposition.NameValidator = func() func(string) error {
		validators := jobpositionDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// jobpositionDescDescription is the schema descriptor for description field.
	jobpositionDescDescription := jobpositionFields[1].Descriptor()
	// jobposition.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	jobposition.DescriptionValidator = jobpositionDescDescription.Validators[0].(func(string) error)
	outgoingemailMixin := schema.OutgoingEmail{}.Mixin()
	outgoingemailMixinFields0 := outgoingemailMixin[0].Fields()
	_ = outgoingemailMixinFields0
	outgoingemailFields := schema.OutgoingEmail{}.Fields()
	_ = outgoingemailFields
	// outgoingemailDescCreatedAt is the schema descriptor for created_at field.
	outgoingemailDescCreatedAt := outgoingemailMixinFields0[1].Descriptor()
	// outgoingemail.DefaultCreatedAt holds the default value on creation for the created_at field.
	outgoingemail.DefaultCreatedAt = outgoingemailDescCreatedAt.Default.(func() time.Time)
	// outgoingemailDescSubject is the schema descriptor for subject field.
	outgoingemailDescSubject := outgoingemailFields[3].Descriptor()
	// outgoingemail.SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	outgoingemail.SubjectValidator = outgoingemailDescSubject.Validators[0].(func(string) error)
	// outgoingemailDescContent is the schema descriptor for content field.
	outgoingemailDescContent := outgoingemailFields[4].Descriptor()
	// outgoingemail.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	outgoingemail.ContentValidator = outgoingemailDescContent.Validators[0].(func(string) error)
	permissionMixin := schema.Permission{}.Mixin()
	permissionMixinFields0 := permissionMixin[0].Fields()
	_ = permissionMixinFields0
	permissionFields := schema.Permission{}.Fields()
	_ = permissionFields
	// permissionDescCreatedAt is the schema descriptor for created_at field.
	permissionDescCreatedAt := permissionMixinFields0[1].Descriptor()
	// permission.DefaultCreatedAt holds the default value on creation for the created_at field.
	permission.DefaultCreatedAt = permissionDescCreatedAt.Default.(func() time.Time)
	// permissionDescForOwner is the schema descriptor for for_owner field.
	permissionDescForOwner := permissionFields[2].Descriptor()
	// permission.DefaultForOwner holds the default value on creation for the for_owner field.
	permission.DefaultForOwner = permissionDescForOwner.Default.(bool)
	// permissionDescForTeam is the schema descriptor for for_team field.
	permissionDescForTeam := permissionFields[3].Descriptor()
	// permission.DefaultForTeam holds the default value on creation for the for_team field.
	permission.DefaultForTeam = permissionDescForTeam.Default.(bool)
	// permissionDescForAll is the schema descriptor for for_all field.
	permissionDescForAll := permissionFields[4].Descriptor()
	// permission.DefaultForAll holds the default value on creation for the for_all field.
	permission.DefaultForAll = permissionDescForAll.Default.(bool)
	permissiongroupMixin := schema.PermissionGroup{}.Mixin()
	permissiongroupMixinFields0 := permissiongroupMixin[0].Fields()
	_ = permissiongroupMixinFields0
	permissiongroupFields := schema.PermissionGroup{}.Fields()
	_ = permissiongroupFields
	// permissiongroupDescCreatedAt is the schema descriptor for created_at field.
	permissiongroupDescCreatedAt := permissiongroupMixinFields0[1].Descriptor()
	// permissiongroup.DefaultCreatedAt holds the default value on creation for the created_at field.
	permissiongroup.DefaultCreatedAt = permissiongroupDescCreatedAt.Default.(func() time.Time)
	recteamMixin := schema.RecTeam{}.Mixin()
	recteamMixinFields0 := recteamMixin[0].Fields()
	_ = recteamMixinFields0
	recteamFields := schema.RecTeam{}.Fields()
	_ = recteamFields
	// recteamDescCreatedAt is the schema descriptor for created_at field.
	recteamDescCreatedAt := recteamMixinFields0[1].Descriptor()
	// recteam.DefaultCreatedAt holds the default value on creation for the created_at field.
	recteam.DefaultCreatedAt = recteamDescCreatedAt.Default.(func() time.Time)
	// recteamDescName is the schema descriptor for name field.
	recteamDescName := recteamFields[0].Descriptor()
	// recteam.NameValidator is a validator for the "name" field. It is called by the builders before save.
	recteam.NameValidator = func() func(string) error {
		validators := recteamDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// recteamDescDescription is the schema descriptor for description field.
	recteamDescDescription := recteamFields[1].Descriptor()
	// recteam.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	recteam.DescriptionValidator = recteamDescDescription.Validators[0].(func(string) error)
	roleMixin := schema.Role{}.Mixin()
	roleMixinFields0 := roleMixin[0].Fields()
	_ = roleMixinFields0
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescCreatedAt is the schema descriptor for created_at field.
	roleDescCreatedAt := roleMixinFields0[1].Descriptor()
	// role.DefaultCreatedAt holds the default value on creation for the created_at field.
	role.DefaultCreatedAt = roleDescCreatedAt.Default.(func() time.Time)
	// roleDescDescription is the schema descriptor for description field.
	roleDescDescription := roleFields[1].Descriptor()
	// role.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	role.DescriptionValidator = roleDescDescription.Validators[0].(func(string) error)
	skillMixin := schema.Skill{}.Mixin()
	skillMixinFields0 := skillMixin[0].Fields()
	_ = skillMixinFields0
	skillFields := schema.Skill{}.Fields()
	_ = skillFields
	// skillDescCreatedAt is the schema descriptor for created_at field.
	skillDescCreatedAt := skillMixinFields0[1].Descriptor()
	// skill.DefaultCreatedAt holds the default value on creation for the created_at field.
	skill.DefaultCreatedAt = skillDescCreatedAt.Default.(func() time.Time)
	// skillDescName is the schema descriptor for name field.
	skillDescName := skillFields[0].Descriptor()
	// skill.NameValidator is a validator for the "name" field. It is called by the builders before save.
	skill.NameValidator = func() func(string) error {
		validators := skillDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// skillDescDescription is the schema descriptor for description field.
	skillDescDescription := skillFields[1].Descriptor()
	// skill.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	skill.DescriptionValidator = skillDescDescription.Validators[0].(func(string) error)
	skilltypeMixin := schema.SkillType{}.Mixin()
	skilltypeMixinFields0 := skilltypeMixin[0].Fields()
	_ = skilltypeMixinFields0
	skilltypeFields := schema.SkillType{}.Fields()
	_ = skilltypeFields
	// skilltypeDescCreatedAt is the schema descriptor for created_at field.
	skilltypeDescCreatedAt := skilltypeMixinFields0[1].Descriptor()
	// skilltype.DefaultCreatedAt holds the default value on creation for the created_at field.
	skilltype.DefaultCreatedAt = skilltypeDescCreatedAt.Default.(func() time.Time)
	// skilltypeDescName is the schema descriptor for name field.
	skilltypeDescName := skilltypeFields[0].Descriptor()
	// skilltype.NameValidator is a validator for the "name" field. It is called by the builders before save.
	skilltype.NameValidator = func() func(string) error {
		validators := skilltypeDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// skilltypeDescDescription is the schema descriptor for description field.
	skilltypeDescDescription := skilltypeFields[1].Descriptor()
	// skilltype.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	skilltype.DescriptionValidator = skilltypeDescDescription.Validators[0].(func(string) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescWorkEmail is the schema descriptor for work_email field.
	userDescWorkEmail := userFields[1].Descriptor()
	// user.WorkEmailValidator is a validator for the "work_email" field. It is called by the builders before save.
	user.WorkEmailValidator = userDescWorkEmail.Validators[0].(func(string) error)
	// userDescOid is the schema descriptor for oid field.
	userDescOid := userFields[3].Descriptor()
	// user.OidValidator is a validator for the "oid" field. It is called by the builders before save.
	user.OidValidator = userDescOid.Validators[0].(func(string) error)
	// userDescLocation is the schema descriptor for location field.
	userDescLocation := userFields[5].Descriptor()
	// user.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	user.LocationValidator = userDescLocation.Validators[0].(func(string) error)
	userroleMixin := schema.UserRole{}.Mixin()
	userroleMixinFields0 := userroleMixin[0].Fields()
	_ = userroleMixinFields0
	userroleFields := schema.UserRole{}.Fields()
	_ = userroleFields
	// userroleDescCreatedAt is the schema descriptor for created_at field.
	userroleDescCreatedAt := userroleMixinFields0[1].Descriptor()
	// userrole.DefaultCreatedAt holds the default value on creation for the created_at field.
	userrole.DefaultCreatedAt = userroleDescCreatedAt.Default.(func() time.Time)
}
