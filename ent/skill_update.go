// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/entityskill"
	"trec/ent/predicate"
	"trec/ent/skill"
	"trec/ent/skilltype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SkillUpdate is the builder for updating Skill entities.
type SkillUpdate struct {
	config
	hooks    []Hook
	mutation *SkillMutation
}

// Where appends a list predicates to the SkillUpdate builder.
func (su *SkillUpdate) Where(ps ...predicate.Skill) *SkillUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SkillUpdate) SetUpdatedAt(t time.Time) *SkillUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *SkillUpdate) SetNillableUpdatedAt(t *time.Time) *SkillUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SkillUpdate) ClearUpdatedAt() *SkillUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SkillUpdate) SetDeletedAt(t time.Time) *SkillUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SkillUpdate) SetNillableDeletedAt(t *time.Time) *SkillUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SkillUpdate) ClearDeletedAt() *SkillUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetName sets the "name" field.
func (su *SkillUpdate) SetName(s string) *SkillUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SkillUpdate) SetDescription(s string) *SkillUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SkillUpdate) SetNillableDescription(s *string) *SkillUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SkillUpdate) ClearDescription() *SkillUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetSkillTypeID sets the "skill_type_id" field.
func (su *SkillUpdate) SetSkillTypeID(u uuid.UUID) *SkillUpdate {
	su.mutation.SetSkillTypeID(u)
	return su
}

// SetNillableSkillTypeID sets the "skill_type_id" field if the given value is not nil.
func (su *SkillUpdate) SetNillableSkillTypeID(u *uuid.UUID) *SkillUpdate {
	if u != nil {
		su.SetSkillTypeID(*u)
	}
	return su
}

// ClearSkillTypeID clears the value of the "skill_type_id" field.
func (su *SkillUpdate) ClearSkillTypeID() *SkillUpdate {
	su.mutation.ClearSkillTypeID()
	return su
}

// SetSkillTypeEdgeID sets the "skill_type_edge" edge to the SkillType entity by ID.
func (su *SkillUpdate) SetSkillTypeEdgeID(id uuid.UUID) *SkillUpdate {
	su.mutation.SetSkillTypeEdgeID(id)
	return su
}

// SetNillableSkillTypeEdgeID sets the "skill_type_edge" edge to the SkillType entity by ID if the given value is not nil.
func (su *SkillUpdate) SetNillableSkillTypeEdgeID(id *uuid.UUID) *SkillUpdate {
	if id != nil {
		su = su.SetSkillTypeEdgeID(*id)
	}
	return su
}

// SetSkillTypeEdge sets the "skill_type_edge" edge to the SkillType entity.
func (su *SkillUpdate) SetSkillTypeEdge(s *SkillType) *SkillUpdate {
	return su.SetSkillTypeEdgeID(s.ID)
}

// AddEntitySkillEdgeIDs adds the "entity_skill_edges" edge to the EntitySkill entity by IDs.
func (su *SkillUpdate) AddEntitySkillEdgeIDs(ids ...uuid.UUID) *SkillUpdate {
	su.mutation.AddEntitySkillEdgeIDs(ids...)
	return su
}

// AddEntitySkillEdges adds the "entity_skill_edges" edges to the EntitySkill entity.
func (su *SkillUpdate) AddEntitySkillEdges(e ...*EntitySkill) *SkillUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddEntitySkillEdgeIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (su *SkillUpdate) Mutation() *SkillMutation {
	return su.mutation
}

// ClearSkillTypeEdge clears the "skill_type_edge" edge to the SkillType entity.
func (su *SkillUpdate) ClearSkillTypeEdge() *SkillUpdate {
	su.mutation.ClearSkillTypeEdge()
	return su
}

// ClearEntitySkillEdges clears all "entity_skill_edges" edges to the EntitySkill entity.
func (su *SkillUpdate) ClearEntitySkillEdges() *SkillUpdate {
	su.mutation.ClearEntitySkillEdges()
	return su
}

// RemoveEntitySkillEdgeIDs removes the "entity_skill_edges" edge to EntitySkill entities by IDs.
func (su *SkillUpdate) RemoveEntitySkillEdgeIDs(ids ...uuid.UUID) *SkillUpdate {
	su.mutation.RemoveEntitySkillEdgeIDs(ids...)
	return su
}

// RemoveEntitySkillEdges removes "entity_skill_edges" edges to EntitySkill entities.
func (su *SkillUpdate) RemoveEntitySkillEdges(e ...*EntitySkill) *SkillUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveEntitySkillEdgeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SkillUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SkillUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SkillUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SkillUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SkillUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := skill.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Skill.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := skill.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Skill.description": %w`, err)}
		}
	}
	return nil
}

func (su *SkillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skill.Table,
			Columns: skill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: skill.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(skill.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(skill.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(skill.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(skill.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(skill.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(skill.FieldDescription, field.TypeString)
	}
	if su.mutation.SkillTypeEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skill.SkillTypeEdgeTable,
			Columns: []string{skill.SkillTypeEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skilltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SkillTypeEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skill.SkillTypeEdgeTable,
			Columns: []string{skill.SkillTypeEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skilltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EntitySkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.EntitySkillEdgesTable,
			Columns: []string{skill.EntitySkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEntitySkillEdgesIDs(); len(nodes) > 0 && !su.mutation.EntitySkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.EntitySkillEdgesTable,
			Columns: []string{skill.EntitySkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EntitySkillEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.EntitySkillEdgesTable,
			Columns: []string{skill.EntitySkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SkillUpdateOne is the builder for updating a single Skill entity.
type SkillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SkillMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SkillUpdateOne) SetUpdatedAt(t time.Time) *SkillUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableUpdatedAt(t *time.Time) *SkillUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SkillUpdateOne) ClearUpdatedAt() *SkillUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SkillUpdateOne) SetDeletedAt(t time.Time) *SkillUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableDeletedAt(t *time.Time) *SkillUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SkillUpdateOne) ClearDeletedAt() *SkillUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetName sets the "name" field.
func (suo *SkillUpdateOne) SetName(s string) *SkillUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SkillUpdateOne) SetDescription(s string) *SkillUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableDescription(s *string) *SkillUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SkillUpdateOne) ClearDescription() *SkillUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetSkillTypeID sets the "skill_type_id" field.
func (suo *SkillUpdateOne) SetSkillTypeID(u uuid.UUID) *SkillUpdateOne {
	suo.mutation.SetSkillTypeID(u)
	return suo
}

// SetNillableSkillTypeID sets the "skill_type_id" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableSkillTypeID(u *uuid.UUID) *SkillUpdateOne {
	if u != nil {
		suo.SetSkillTypeID(*u)
	}
	return suo
}

// ClearSkillTypeID clears the value of the "skill_type_id" field.
func (suo *SkillUpdateOne) ClearSkillTypeID() *SkillUpdateOne {
	suo.mutation.ClearSkillTypeID()
	return suo
}

// SetSkillTypeEdgeID sets the "skill_type_edge" edge to the SkillType entity by ID.
func (suo *SkillUpdateOne) SetSkillTypeEdgeID(id uuid.UUID) *SkillUpdateOne {
	suo.mutation.SetSkillTypeEdgeID(id)
	return suo
}

// SetNillableSkillTypeEdgeID sets the "skill_type_edge" edge to the SkillType entity by ID if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableSkillTypeEdgeID(id *uuid.UUID) *SkillUpdateOne {
	if id != nil {
		suo = suo.SetSkillTypeEdgeID(*id)
	}
	return suo
}

// SetSkillTypeEdge sets the "skill_type_edge" edge to the SkillType entity.
func (suo *SkillUpdateOne) SetSkillTypeEdge(s *SkillType) *SkillUpdateOne {
	return suo.SetSkillTypeEdgeID(s.ID)
}

// AddEntitySkillEdgeIDs adds the "entity_skill_edges" edge to the EntitySkill entity by IDs.
func (suo *SkillUpdateOne) AddEntitySkillEdgeIDs(ids ...uuid.UUID) *SkillUpdateOne {
	suo.mutation.AddEntitySkillEdgeIDs(ids...)
	return suo
}

// AddEntitySkillEdges adds the "entity_skill_edges" edges to the EntitySkill entity.
func (suo *SkillUpdateOne) AddEntitySkillEdges(e ...*EntitySkill) *SkillUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddEntitySkillEdgeIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (suo *SkillUpdateOne) Mutation() *SkillMutation {
	return suo.mutation
}

// ClearSkillTypeEdge clears the "skill_type_edge" edge to the SkillType entity.
func (suo *SkillUpdateOne) ClearSkillTypeEdge() *SkillUpdateOne {
	suo.mutation.ClearSkillTypeEdge()
	return suo
}

// ClearEntitySkillEdges clears all "entity_skill_edges" edges to the EntitySkill entity.
func (suo *SkillUpdateOne) ClearEntitySkillEdges() *SkillUpdateOne {
	suo.mutation.ClearEntitySkillEdges()
	return suo
}

// RemoveEntitySkillEdgeIDs removes the "entity_skill_edges" edge to EntitySkill entities by IDs.
func (suo *SkillUpdateOne) RemoveEntitySkillEdgeIDs(ids ...uuid.UUID) *SkillUpdateOne {
	suo.mutation.RemoveEntitySkillEdgeIDs(ids...)
	return suo
}

// RemoveEntitySkillEdges removes "entity_skill_edges" edges to EntitySkill entities.
func (suo *SkillUpdateOne) RemoveEntitySkillEdges(e ...*EntitySkill) *SkillUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveEntitySkillEdgeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SkillUpdateOne) Select(field string, fields ...string) *SkillUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Skill entity.
func (suo *SkillUpdateOne) Save(ctx context.Context) (*Skill, error) {
	var (
		err  error
		node *Skill
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Skill)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SkillMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SkillUpdateOne) SaveX(ctx context.Context) *Skill {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SkillUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SkillUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SkillUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := skill.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Skill.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := skill.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Skill.description": %w`, err)}
		}
	}
	return nil
}

func (suo *SkillUpdateOne) sqlSave(ctx context.Context) (_node *Skill, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skill.Table,
			Columns: skill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: skill.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Skill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, skill.FieldID)
		for _, f := range fields {
			if !skill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != skill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(skill.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(skill.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(skill.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(skill.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(skill.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(skill.FieldDescription, field.TypeString)
	}
	if suo.mutation.SkillTypeEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skill.SkillTypeEdgeTable,
			Columns: []string{skill.SkillTypeEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skilltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SkillTypeEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skill.SkillTypeEdgeTable,
			Columns: []string{skill.SkillTypeEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skilltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EntitySkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.EntitySkillEdgesTable,
			Columns: []string{skill.EntitySkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEntitySkillEdgesIDs(); len(nodes) > 0 && !suo.mutation.EntitySkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.EntitySkillEdgesTable,
			Columns: []string{skill.EntitySkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EntitySkillEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.EntitySkillEdgesTable,
			Columns: []string{skill.EntitySkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Skill{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
