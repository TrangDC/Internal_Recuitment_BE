// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"trec/ent/predicate"
	"trec/ent/team"
	"trec/ent/teammanager"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TeamManagerQuery is the builder for querying TeamManager entities.
type TeamManagerQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.TeamManager
	withUserEdge *UserQuery
	withTeamEdge *TeamQuery
	modifiers    []func(*sql.Selector)
	loadTotal    []func(context.Context, []*TeamManager) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TeamManagerQuery builder.
func (tmq *TeamManagerQuery) Where(ps ...predicate.TeamManager) *TeamManagerQuery {
	tmq.predicates = append(tmq.predicates, ps...)
	return tmq
}

// Limit adds a limit step to the query.
func (tmq *TeamManagerQuery) Limit(limit int) *TeamManagerQuery {
	tmq.limit = &limit
	return tmq
}

// Offset adds an offset step to the query.
func (tmq *TeamManagerQuery) Offset(offset int) *TeamManagerQuery {
	tmq.offset = &offset
	return tmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tmq *TeamManagerQuery) Unique(unique bool) *TeamManagerQuery {
	tmq.unique = &unique
	return tmq
}

// Order adds an order step to the query.
func (tmq *TeamManagerQuery) Order(o ...OrderFunc) *TeamManagerQuery {
	tmq.order = append(tmq.order, o...)
	return tmq
}

// QueryUserEdge chains the current query on the "user_edge" edge.
func (tmq *TeamManagerQuery) QueryUserEdge() *UserQuery {
	query := &UserQuery{config: tmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammanager.Table, teammanager.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, teammanager.UserEdgeTable, teammanager.UserEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(tmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeamEdge chains the current query on the "team_edge" edge.
func (tmq *TeamManagerQuery) QueryTeamEdge() *TeamQuery {
	query := &TeamQuery{config: tmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammanager.Table, teammanager.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, teammanager.TeamEdgeTable, teammanager.TeamEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(tmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TeamManager entity from the query.
// Returns a *NotFoundError when no TeamManager was found.
func (tmq *TeamManagerQuery) First(ctx context.Context) (*TeamManager, error) {
	nodes, err := tmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{teammanager.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tmq *TeamManagerQuery) FirstX(ctx context.Context) *TeamManager {
	node, err := tmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TeamManager ID from the query.
// Returns a *NotFoundError when no TeamManager ID was found.
func (tmq *TeamManagerQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{teammanager.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tmq *TeamManagerQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TeamManager entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TeamManager entity is found.
// Returns a *NotFoundError when no TeamManager entities are found.
func (tmq *TeamManagerQuery) Only(ctx context.Context) (*TeamManager, error) {
	nodes, err := tmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{teammanager.Label}
	default:
		return nil, &NotSingularError{teammanager.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tmq *TeamManagerQuery) OnlyX(ctx context.Context) *TeamManager {
	node, err := tmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TeamManager ID in the query.
// Returns a *NotSingularError when more than one TeamManager ID is found.
// Returns a *NotFoundError when no entities are found.
func (tmq *TeamManagerQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{teammanager.Label}
	default:
		err = &NotSingularError{teammanager.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tmq *TeamManagerQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TeamManagers.
func (tmq *TeamManagerQuery) All(ctx context.Context) ([]*TeamManager, error) {
	if err := tmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tmq *TeamManagerQuery) AllX(ctx context.Context) []*TeamManager {
	nodes, err := tmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TeamManager IDs.
func (tmq *TeamManagerQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := tmq.Select(teammanager.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tmq *TeamManagerQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tmq *TeamManagerQuery) Count(ctx context.Context) (int, error) {
	if err := tmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tmq *TeamManagerQuery) CountX(ctx context.Context) int {
	count, err := tmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tmq *TeamManagerQuery) Exist(ctx context.Context) (bool, error) {
	if err := tmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tmq *TeamManagerQuery) ExistX(ctx context.Context) bool {
	exist, err := tmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TeamManagerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tmq *TeamManagerQuery) Clone() *TeamManagerQuery {
	if tmq == nil {
		return nil
	}
	return &TeamManagerQuery{
		config:       tmq.config,
		limit:        tmq.limit,
		offset:       tmq.offset,
		order:        append([]OrderFunc{}, tmq.order...),
		predicates:   append([]predicate.TeamManager{}, tmq.predicates...),
		withUserEdge: tmq.withUserEdge.Clone(),
		withTeamEdge: tmq.withTeamEdge.Clone(),
		// clone intermediate query.
		sql:    tmq.sql.Clone(),
		path:   tmq.path,
		unique: tmq.unique,
	}
}

// WithUserEdge tells the query-builder to eager-load the nodes that are connected to
// the "user_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (tmq *TeamManagerQuery) WithUserEdge(opts ...func(*UserQuery)) *TeamManagerQuery {
	query := &UserQuery{config: tmq.config}
	for _, opt := range opts {
		opt(query)
	}
	tmq.withUserEdge = query
	return tmq
}

// WithTeamEdge tells the query-builder to eager-load the nodes that are connected to
// the "team_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (tmq *TeamManagerQuery) WithTeamEdge(opts ...func(*TeamQuery)) *TeamManagerQuery {
	query := &TeamQuery{config: tmq.config}
	for _, opt := range opts {
		opt(query)
	}
	tmq.withTeamEdge = query
	return tmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TeamManager.Query().
//		GroupBy(teammanager.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tmq *TeamManagerQuery) GroupBy(field string, fields ...string) *TeamManagerGroupBy {
	grbuild := &TeamManagerGroupBy{config: tmq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tmq.sqlQuery(ctx), nil
	}
	grbuild.label = teammanager.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.TeamManager.Query().
//		Select(teammanager.FieldCreatedAt).
//		Scan(ctx, &v)
func (tmq *TeamManagerQuery) Select(fields ...string) *TeamManagerSelect {
	tmq.fields = append(tmq.fields, fields...)
	selbuild := &TeamManagerSelect{TeamManagerQuery: tmq}
	selbuild.label = teammanager.Label
	selbuild.flds, selbuild.scan = &tmq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a TeamManagerSelect configured with the given aggregations.
func (tmq *TeamManagerQuery) Aggregate(fns ...AggregateFunc) *TeamManagerSelect {
	return tmq.Select().Aggregate(fns...)
}

func (tmq *TeamManagerQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tmq.fields {
		if !teammanager.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tmq.path != nil {
		prev, err := tmq.path(ctx)
		if err != nil {
			return err
		}
		tmq.sql = prev
	}
	return nil
}

func (tmq *TeamManagerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TeamManager, error) {
	var (
		nodes       = []*TeamManager{}
		_spec       = tmq.querySpec()
		loadedTypes = [2]bool{
			tmq.withUserEdge != nil,
			tmq.withTeamEdge != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TeamManager).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TeamManager{config: tmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tmq.modifiers) > 0 {
		_spec.Modifiers = tmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tmq.withUserEdge; query != nil {
		if err := tmq.loadUserEdge(ctx, query, nodes, nil,
			func(n *TeamManager, e *User) { n.Edges.UserEdge = e }); err != nil {
			return nil, err
		}
	}
	if query := tmq.withTeamEdge; query != nil {
		if err := tmq.loadTeamEdge(ctx, query, nodes, nil,
			func(n *TeamManager, e *Team) { n.Edges.TeamEdge = e }); err != nil {
			return nil, err
		}
	}
	for i := range tmq.loadTotal {
		if err := tmq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tmq *TeamManagerQuery) loadUserEdge(ctx context.Context, query *UserQuery, nodes []*TeamManager, init func(*TeamManager), assign func(*TeamManager, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TeamManager)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tmq *TeamManagerQuery) loadTeamEdge(ctx context.Context, query *TeamQuery, nodes []*TeamManager, init func(*TeamManager), assign func(*TeamManager, *Team)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TeamManager)
	for i := range nodes {
		fk := nodes[i].TeamID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tmq *TeamManagerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tmq.querySpec()
	if len(tmq.modifiers) > 0 {
		_spec.Modifiers = tmq.modifiers
	}
	_spec.Node.Columns = tmq.fields
	if len(tmq.fields) > 0 {
		_spec.Unique = tmq.unique != nil && *tmq.unique
	}
	return sqlgraph.CountNodes(ctx, tmq.driver, _spec)
}

func (tmq *TeamManagerQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := tmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (tmq *TeamManagerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammanager.Table,
			Columns: teammanager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: teammanager.FieldID,
			},
		},
		From:   tmq.sql,
		Unique: true,
	}
	if unique := tmq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammanager.FieldID)
		for i := range fields {
			if fields[i] != teammanager.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tmq *TeamManagerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tmq.driver.Dialect())
	t1 := builder.Table(teammanager.Table)
	columns := tmq.fields
	if len(columns) == 0 {
		columns = teammanager.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tmq.sql != nil {
		selector = tmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tmq.unique != nil && *tmq.unique {
		selector.Distinct()
	}
	for _, p := range tmq.predicates {
		p(selector)
	}
	for _, p := range tmq.order {
		p(selector)
	}
	if offset := tmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TeamManagerGroupBy is the group-by builder for TeamManager entities.
type TeamManagerGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tmgb *TeamManagerGroupBy) Aggregate(fns ...AggregateFunc) *TeamManagerGroupBy {
	tmgb.fns = append(tmgb.fns, fns...)
	return tmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tmgb *TeamManagerGroupBy) Scan(ctx context.Context, v any) error {
	query, err := tmgb.path(ctx)
	if err != nil {
		return err
	}
	tmgb.sql = query
	return tmgb.sqlScan(ctx, v)
}

func (tmgb *TeamManagerGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range tmgb.fields {
		if !teammanager.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tmgb *TeamManagerGroupBy) sqlQuery() *sql.Selector {
	selector := tmgb.sql.Select()
	aggregation := make([]string, 0, len(tmgb.fns))
	for _, fn := range tmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tmgb.fields)+len(tmgb.fns))
		for _, f := range tmgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tmgb.fields...)...)
}

// TeamManagerSelect is the builder for selecting fields of TeamManager entities.
type TeamManagerSelect struct {
	*TeamManagerQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tms *TeamManagerSelect) Aggregate(fns ...AggregateFunc) *TeamManagerSelect {
	tms.fns = append(tms.fns, fns...)
	return tms
}

// Scan applies the selector query and scans the result into the given value.
func (tms *TeamManagerSelect) Scan(ctx context.Context, v any) error {
	if err := tms.prepareQuery(ctx); err != nil {
		return err
	}
	tms.sql = tms.TeamManagerQuery.sqlQuery(ctx)
	return tms.sqlScan(ctx, v)
}

func (tms *TeamManagerSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(tms.fns))
	for _, fn := range tms.fns {
		aggregation = append(aggregation, fn(tms.sql))
	}
	switch n := len(*tms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		tms.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		tms.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := tms.sql.Query()
	if err := tms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
