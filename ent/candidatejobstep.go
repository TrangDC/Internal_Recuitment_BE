// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobstep"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CandidateJobStep is the model entity for the CandidateJobStep schema.
type CandidateJobStep struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CandidateJobStatus holds the value of the "candidate_job_status" field.
	CandidateJobStatus candidatejobstep.CandidateJobStatus `json:"candidate_job_status,omitempty"`
	// CandidateJobID holds the value of the "candidate_job_id" field.
	CandidateJobID uuid.UUID `json:"candidate_job_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CandidateJobStepQuery when eager-loading is set.
	Edges CandidateJobStepEdges `json:"edges"`
}

// CandidateJobStepEdges holds the relations/edges for other nodes in the graph.
type CandidateJobStepEdges struct {
	// CandidateJobEdge holds the value of the candidate_job_edge edge.
	CandidateJobEdge *CandidateJob `json:"candidate_job_edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// CandidateJobEdgeOrErr returns the CandidateJobEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateJobStepEdges) CandidateJobEdgeOrErr() (*CandidateJob, error) {
	if e.loadedTypes[0] {
		if e.CandidateJobEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatejob.Label}
		}
		return e.CandidateJobEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CandidateJobStep) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case candidatejobstep.FieldCandidateJobStatus:
			values[i] = new(sql.NullString)
		case candidatejobstep.FieldCreatedAt, candidatejobstep.FieldUpdatedAt, candidatejobstep.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case candidatejobstep.FieldID, candidatejobstep.FieldCandidateJobID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CandidateJobStep", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CandidateJobStep fields.
func (cjs *CandidateJobStep) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case candidatejobstep.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cjs.ID = *value
			}
		case candidatejobstep.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cjs.CreatedAt = value.Time
			}
		case candidatejobstep.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cjs.UpdatedAt = value.Time
			}
		case candidatejobstep.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cjs.DeletedAt = value.Time
			}
		case candidatejobstep.FieldCandidateJobStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_job_status", values[i])
			} else if value.Valid {
				cjs.CandidateJobStatus = candidatejobstep.CandidateJobStatus(value.String)
			}
		case candidatejobstep.FieldCandidateJobID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_job_id", values[i])
			} else if value != nil {
				cjs.CandidateJobID = *value
			}
		}
	}
	return nil
}

// QueryCandidateJobEdge queries the "candidate_job_edge" edge of the CandidateJobStep entity.
func (cjs *CandidateJobStep) QueryCandidateJobEdge() *CandidateJobQuery {
	return (&CandidateJobStepClient{config: cjs.config}).QueryCandidateJobEdge(cjs)
}

// Update returns a builder for updating this CandidateJobStep.
// Note that you need to call CandidateJobStep.Unwrap() before calling this method if this CandidateJobStep
// was returned from a transaction, and the transaction was committed or rolled back.
func (cjs *CandidateJobStep) Update() *CandidateJobStepUpdateOne {
	return (&CandidateJobStepClient{config: cjs.config}).UpdateOne(cjs)
}

// Unwrap unwraps the CandidateJobStep entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cjs *CandidateJobStep) Unwrap() *CandidateJobStep {
	_tx, ok := cjs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CandidateJobStep is not a transactional entity")
	}
	cjs.config.driver = _tx.drv
	return cjs
}

// String implements the fmt.Stringer.
func (cjs *CandidateJobStep) String() string {
	var builder strings.Builder
	builder.WriteString("CandidateJobStep(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cjs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cjs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cjs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(cjs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("candidate_job_status=")
	builder.WriteString(fmt.Sprintf("%v", cjs.CandidateJobStatus))
	builder.WriteString(", ")
	builder.WriteString("candidate_job_id=")
	builder.WriteString(fmt.Sprintf("%v", cjs.CandidateJobID))
	builder.WriteByte(')')
	return builder.String()
}

// CandidateJobSteps is a parsable slice of CandidateJobStep.
type CandidateJobSteps []*CandidateJobStep

func (cjs CandidateJobSteps) config(cfg config) {
	for _i := range cjs {
		cjs[_i].config = cfg
	}
}
