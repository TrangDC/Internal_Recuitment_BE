// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/jobposition"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// JobPositionCreate is the builder for creating a JobPosition entity.
type JobPositionCreate struct {
	config
	mutation *JobPositionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (jpc *JobPositionCreate) SetCreatedAt(t time.Time) *JobPositionCreate {
	jpc.mutation.SetCreatedAt(t)
	return jpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableCreatedAt(t *time.Time) *JobPositionCreate {
	if t != nil {
		jpc.SetCreatedAt(*t)
	}
	return jpc
}

// SetUpdatedAt sets the "updated_at" field.
func (jpc *JobPositionCreate) SetUpdatedAt(t time.Time) *JobPositionCreate {
	jpc.mutation.SetUpdatedAt(t)
	return jpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableUpdatedAt(t *time.Time) *JobPositionCreate {
	if t != nil {
		jpc.SetUpdatedAt(*t)
	}
	return jpc
}

// SetDeletedAt sets the "deleted_at" field.
func (jpc *JobPositionCreate) SetDeletedAt(t time.Time) *JobPositionCreate {
	jpc.mutation.SetDeletedAt(t)
	return jpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableDeletedAt(t *time.Time) *JobPositionCreate {
	if t != nil {
		jpc.SetDeletedAt(*t)
	}
	return jpc
}

// SetName sets the "name" field.
func (jpc *JobPositionCreate) SetName(s string) *JobPositionCreate {
	jpc.mutation.SetName(s)
	return jpc
}

// SetDescription sets the "description" field.
func (jpc *JobPositionCreate) SetDescription(s string) *JobPositionCreate {
	jpc.mutation.SetDescription(s)
	return jpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jpc *JobPositionCreate) SetNillableDescription(s *string) *JobPositionCreate {
	if s != nil {
		jpc.SetDescription(*s)
	}
	return jpc
}

// SetID sets the "id" field.
func (jpc *JobPositionCreate) SetID(u uuid.UUID) *JobPositionCreate {
	jpc.mutation.SetID(u)
	return jpc
}

// Mutation returns the JobPositionMutation object of the builder.
func (jpc *JobPositionCreate) Mutation() *JobPositionMutation {
	return jpc.mutation
}

// Save creates the JobPosition in the database.
func (jpc *JobPositionCreate) Save(ctx context.Context) (*JobPosition, error) {
	var (
		err  error
		node *JobPosition
	)
	jpc.defaults()
	if len(jpc.hooks) == 0 {
		if err = jpc.check(); err != nil {
			return nil, err
		}
		node, err = jpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobPositionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jpc.check(); err != nil {
				return nil, err
			}
			jpc.mutation = mutation
			if node, err = jpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(jpc.hooks) - 1; i >= 0; i-- {
			if jpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jpc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, jpc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*JobPosition)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from JobPositionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jpc *JobPositionCreate) SaveX(ctx context.Context) *JobPosition {
	v, err := jpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jpc *JobPositionCreate) Exec(ctx context.Context) error {
	_, err := jpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpc *JobPositionCreate) ExecX(ctx context.Context) {
	if err := jpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jpc *JobPositionCreate) defaults() {
	if _, ok := jpc.mutation.CreatedAt(); !ok {
		v := jobposition.DefaultCreatedAt()
		jpc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jpc *JobPositionCreate) check() error {
	if _, ok := jpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobPosition.created_at"`)}
	}
	if _, ok := jpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "JobPosition.name"`)}
	}
	if v, ok := jpc.mutation.Name(); ok {
		if err := jobposition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "JobPosition.name": %w`, err)}
		}
	}
	if v, ok := jpc.mutation.Description(); ok {
		if err := jobposition.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "JobPosition.description": %w`, err)}
		}
	}
	return nil
}

func (jpc *JobPositionCreate) sqlSave(ctx context.Context) (*JobPosition, error) {
	_node, _spec := jpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (jpc *JobPositionCreate) createSpec() (*JobPosition, *sqlgraph.CreateSpec) {
	var (
		_node = &JobPosition{config: jpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: jobposition.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: jobposition.FieldID,
			},
		}
	)
	if id, ok := jpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jpc.mutation.CreatedAt(); ok {
		_spec.SetField(jobposition.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jpc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobposition.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jpc.mutation.DeletedAt(); ok {
		_spec.SetField(jobposition.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jpc.mutation.Name(); ok {
		_spec.SetField(jobposition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := jpc.mutation.Description(); ok {
		_spec.SetField(jobposition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// JobPositionCreateBulk is the builder for creating many JobPosition entities in bulk.
type JobPositionCreateBulk struct {
	config
	builders []*JobPositionCreate
}

// Save creates the JobPosition entities in the database.
func (jpcb *JobPositionCreateBulk) Save(ctx context.Context) ([]*JobPosition, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jpcb.builders))
	nodes := make([]*JobPosition, len(jpcb.builders))
	mutators := make([]Mutator, len(jpcb.builders))
	for i := range jpcb.builders {
		func(i int, root context.Context) {
			builder := jpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobPositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jpcb *JobPositionCreateBulk) SaveX(ctx context.Context) []*JobPosition {
	v, err := jpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jpcb *JobPositionCreateBulk) Exec(ctx context.Context) error {
	_, err := jpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpcb *JobPositionCreateBulk) ExecX(ctx context.Context) {
	if err := jpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
