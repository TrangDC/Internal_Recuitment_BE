// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/team"
	"trec/ent/teammanager"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TeamManagerCreate is the builder for creating a TeamManager entity.
type TeamManagerCreate struct {
	config
	mutation *TeamManagerMutation
	hooks    []Hook
}

// SetTeamID sets the "team_id" field.
func (tmc *TeamManagerCreate) SetTeamID(u uuid.UUID) *TeamManagerCreate {
	tmc.mutation.SetTeamID(u)
	return tmc
}

// SetUserID sets the "user_id" field.
func (tmc *TeamManagerCreate) SetUserID(u uuid.UUID) *TeamManagerCreate {
	tmc.mutation.SetUserID(u)
	return tmc
}

// SetCreatedAt sets the "created_at" field.
func (tmc *TeamManagerCreate) SetCreatedAt(t time.Time) *TeamManagerCreate {
	tmc.mutation.SetCreatedAt(t)
	return tmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmc *TeamManagerCreate) SetNillableCreatedAt(t *time.Time) *TeamManagerCreate {
	if t != nil {
		tmc.SetCreatedAt(*t)
	}
	return tmc
}

// SetUpdatedAt sets the "updated_at" field.
func (tmc *TeamManagerCreate) SetUpdatedAt(t time.Time) *TeamManagerCreate {
	tmc.mutation.SetUpdatedAt(t)
	return tmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmc *TeamManagerCreate) SetNillableUpdatedAt(t *time.Time) *TeamManagerCreate {
	if t != nil {
		tmc.SetUpdatedAt(*t)
	}
	return tmc
}

// SetDeletedAt sets the "deleted_at" field.
func (tmc *TeamManagerCreate) SetDeletedAt(t time.Time) *TeamManagerCreate {
	tmc.mutation.SetDeletedAt(t)
	return tmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmc *TeamManagerCreate) SetNillableDeletedAt(t *time.Time) *TeamManagerCreate {
	if t != nil {
		tmc.SetDeletedAt(*t)
	}
	return tmc
}

// SetID sets the "id" field.
func (tmc *TeamManagerCreate) SetID(u uuid.UUID) *TeamManagerCreate {
	tmc.mutation.SetID(u)
	return tmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tmc *TeamManagerCreate) SetNillableID(u *uuid.UUID) *TeamManagerCreate {
	if u != nil {
		tmc.SetID(*u)
	}
	return tmc
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (tmc *TeamManagerCreate) SetUserEdgeID(id uuid.UUID) *TeamManagerCreate {
	tmc.mutation.SetUserEdgeID(id)
	return tmc
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (tmc *TeamManagerCreate) SetUserEdge(u *User) *TeamManagerCreate {
	return tmc.SetUserEdgeID(u.ID)
}

// SetTeamEdgeID sets the "team_edge" edge to the Team entity by ID.
func (tmc *TeamManagerCreate) SetTeamEdgeID(id uuid.UUID) *TeamManagerCreate {
	tmc.mutation.SetTeamEdgeID(id)
	return tmc
}

// SetTeamEdge sets the "team_edge" edge to the Team entity.
func (tmc *TeamManagerCreate) SetTeamEdge(t *Team) *TeamManagerCreate {
	return tmc.SetTeamEdgeID(t.ID)
}

// Mutation returns the TeamManagerMutation object of the builder.
func (tmc *TeamManagerCreate) Mutation() *TeamManagerMutation {
	return tmc.mutation
}

// Save creates the TeamManager in the database.
func (tmc *TeamManagerCreate) Save(ctx context.Context) (*TeamManager, error) {
	var (
		err  error
		node *TeamManager
	)
	tmc.defaults()
	if len(tmc.hooks) == 0 {
		if err = tmc.check(); err != nil {
			return nil, err
		}
		node, err = tmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamManagerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tmc.check(); err != nil {
				return nil, err
			}
			tmc.mutation = mutation
			if node, err = tmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tmc.hooks) - 1; i >= 0; i-- {
			if tmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TeamManager)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TeamManagerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TeamManagerCreate) SaveX(ctx context.Context) *TeamManager {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TeamManagerCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TeamManagerCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmc *TeamManagerCreate) defaults() {
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		v := teammanager.DefaultCreatedAt()
		tmc.mutation.SetCreatedAt(v)
	}
	if _, ok := tmc.mutation.UpdatedAt(); !ok {
		v := teammanager.DefaultUpdatedAt()
		tmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tmc.mutation.ID(); !ok {
		v := teammanager.DefaultID()
		tmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TeamManagerCreate) check() error {
	if _, ok := tmc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`ent: missing required field "TeamManager.team_id"`)}
	}
	if _, ok := tmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TeamManager.user_id"`)}
	}
	if _, ok := tmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TeamManager.created_at"`)}
	}
	if _, ok := tmc.mutation.UserEdgeID(); !ok {
		return &ValidationError{Name: "user_edge", err: errors.New(`ent: missing required edge "TeamManager.user_edge"`)}
	}
	if _, ok := tmc.mutation.TeamEdgeID(); !ok {
		return &ValidationError{Name: "team_edge", err: errors.New(`ent: missing required edge "TeamManager.team_edge"`)}
	}
	return nil
}

func (tmc *TeamManagerCreate) sqlSave(ctx context.Context) (*TeamManager, error) {
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tmc *TeamManagerCreate) createSpec() (*TeamManager, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamManager{config: tmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teammanager.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: teammanager.FieldID,
			},
		}
	)
	if id, ok := tmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tmc.mutation.CreatedAt(); ok {
		_spec.SetField(teammanager.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tmc.mutation.UpdatedAt(); ok {
		_spec.SetField(teammanager.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tmc.mutation.DeletedAt(); ok {
		_spec.SetField(teammanager.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := tmc.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.UserEdgeTable,
			Columns: []string{teammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tmc.mutation.TeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.TeamEdgeTable,
			Columns: []string{teammanager.TeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TeamManagerCreateBulk is the builder for creating many TeamManager entities in bulk.
type TeamManagerCreateBulk struct {
	config
	builders []*TeamManagerCreate
}

// Save creates the TeamManager entities in the database.
func (tmcb *TeamManagerCreateBulk) Save(ctx context.Context) ([]*TeamManager, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TeamManager, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamManagerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TeamManagerCreateBulk) SaveX(ctx context.Context) []*TeamManager {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TeamManagerCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TeamManagerCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
