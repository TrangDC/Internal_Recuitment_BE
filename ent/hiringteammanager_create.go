// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/hiringteam"
	"trec/ent/hiringteammanager"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HiringTeamManagerCreate is the builder for creating a HiringTeamManager entity.
type HiringTeamManagerCreate struct {
	config
	mutation *HiringTeamManagerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (htmc *HiringTeamManagerCreate) SetCreatedAt(t time.Time) *HiringTeamManagerCreate {
	htmc.mutation.SetCreatedAt(t)
	return htmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (htmc *HiringTeamManagerCreate) SetNillableCreatedAt(t *time.Time) *HiringTeamManagerCreate {
	if t != nil {
		htmc.SetCreatedAt(*t)
	}
	return htmc
}

// SetUpdatedAt sets the "updated_at" field.
func (htmc *HiringTeamManagerCreate) SetUpdatedAt(t time.Time) *HiringTeamManagerCreate {
	htmc.mutation.SetUpdatedAt(t)
	return htmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (htmc *HiringTeamManagerCreate) SetNillableUpdatedAt(t *time.Time) *HiringTeamManagerCreate {
	if t != nil {
		htmc.SetUpdatedAt(*t)
	}
	return htmc
}

// SetDeletedAt sets the "deleted_at" field.
func (htmc *HiringTeamManagerCreate) SetDeletedAt(t time.Time) *HiringTeamManagerCreate {
	htmc.mutation.SetDeletedAt(t)
	return htmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (htmc *HiringTeamManagerCreate) SetNillableDeletedAt(t *time.Time) *HiringTeamManagerCreate {
	if t != nil {
		htmc.SetDeletedAt(*t)
	}
	return htmc
}

// SetHiringTeamID sets the "hiring_team_id" field.
func (htmc *HiringTeamManagerCreate) SetHiringTeamID(u uuid.UUID) *HiringTeamManagerCreate {
	htmc.mutation.SetHiringTeamID(u)
	return htmc
}

// SetUserID sets the "user_id" field.
func (htmc *HiringTeamManagerCreate) SetUserID(u uuid.UUID) *HiringTeamManagerCreate {
	htmc.mutation.SetUserID(u)
	return htmc
}

// SetID sets the "id" field.
func (htmc *HiringTeamManagerCreate) SetID(u uuid.UUID) *HiringTeamManagerCreate {
	htmc.mutation.SetID(u)
	return htmc
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (htmc *HiringTeamManagerCreate) SetUserEdgeID(id uuid.UUID) *HiringTeamManagerCreate {
	htmc.mutation.SetUserEdgeID(id)
	return htmc
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (htmc *HiringTeamManagerCreate) SetUserEdge(u *User) *HiringTeamManagerCreate {
	return htmc.SetUserEdgeID(u.ID)
}

// SetHiringTeamEdgeID sets the "hiring_team_edge" edge to the HiringTeam entity by ID.
func (htmc *HiringTeamManagerCreate) SetHiringTeamEdgeID(id uuid.UUID) *HiringTeamManagerCreate {
	htmc.mutation.SetHiringTeamEdgeID(id)
	return htmc
}

// SetHiringTeamEdge sets the "hiring_team_edge" edge to the HiringTeam entity.
func (htmc *HiringTeamManagerCreate) SetHiringTeamEdge(h *HiringTeam) *HiringTeamManagerCreate {
	return htmc.SetHiringTeamEdgeID(h.ID)
}

// Mutation returns the HiringTeamManagerMutation object of the builder.
func (htmc *HiringTeamManagerCreate) Mutation() *HiringTeamManagerMutation {
	return htmc.mutation
}

// Save creates the HiringTeamManager in the database.
func (htmc *HiringTeamManagerCreate) Save(ctx context.Context) (*HiringTeamManager, error) {
	var (
		err  error
		node *HiringTeamManager
	)
	htmc.defaults()
	if len(htmc.hooks) == 0 {
		if err = htmc.check(); err != nil {
			return nil, err
		}
		node, err = htmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiringTeamManagerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = htmc.check(); err != nil {
				return nil, err
			}
			htmc.mutation = mutation
			if node, err = htmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(htmc.hooks) - 1; i >= 0; i-- {
			if htmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = htmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, htmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HiringTeamManager)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HiringTeamManagerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (htmc *HiringTeamManagerCreate) SaveX(ctx context.Context) *HiringTeamManager {
	v, err := htmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htmc *HiringTeamManagerCreate) Exec(ctx context.Context) error {
	_, err := htmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htmc *HiringTeamManagerCreate) ExecX(ctx context.Context) {
	if err := htmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (htmc *HiringTeamManagerCreate) defaults() {
	if _, ok := htmc.mutation.CreatedAt(); !ok {
		v := hiringteammanager.DefaultCreatedAt()
		htmc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htmc *HiringTeamManagerCreate) check() error {
	if _, ok := htmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HiringTeamManager.created_at"`)}
	}
	if _, ok := htmc.mutation.HiringTeamID(); !ok {
		return &ValidationError{Name: "hiring_team_id", err: errors.New(`ent: missing required field "HiringTeamManager.hiring_team_id"`)}
	}
	if _, ok := htmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "HiringTeamManager.user_id"`)}
	}
	if _, ok := htmc.mutation.UserEdgeID(); !ok {
		return &ValidationError{Name: "user_edge", err: errors.New(`ent: missing required edge "HiringTeamManager.user_edge"`)}
	}
	if _, ok := htmc.mutation.HiringTeamEdgeID(); !ok {
		return &ValidationError{Name: "hiring_team_edge", err: errors.New(`ent: missing required edge "HiringTeamManager.hiring_team_edge"`)}
	}
	return nil
}

func (htmc *HiringTeamManagerCreate) sqlSave(ctx context.Context) (*HiringTeamManager, error) {
	_node, _spec := htmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, htmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (htmc *HiringTeamManagerCreate) createSpec() (*HiringTeamManager, *sqlgraph.CreateSpec) {
	var (
		_node = &HiringTeamManager{config: htmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: hiringteammanager.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringteammanager.FieldID,
			},
		}
	)
	if id, ok := htmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := htmc.mutation.CreatedAt(); ok {
		_spec.SetField(hiringteammanager.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := htmc.mutation.UpdatedAt(); ok {
		_spec.SetField(hiringteammanager.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := htmc.mutation.DeletedAt(); ok {
		_spec.SetField(hiringteammanager.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := htmc.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.UserEdgeTable,
			Columns: []string{hiringteammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htmc.mutation.HiringTeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.HiringTeamEdgeTable,
			Columns: []string{hiringteammanager.HiringTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HiringTeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HiringTeamManagerCreateBulk is the builder for creating many HiringTeamManager entities in bulk.
type HiringTeamManagerCreateBulk struct {
	config
	builders []*HiringTeamManagerCreate
}

// Save creates the HiringTeamManager entities in the database.
func (htmcb *HiringTeamManagerCreateBulk) Save(ctx context.Context) ([]*HiringTeamManager, error) {
	specs := make([]*sqlgraph.CreateSpec, len(htmcb.builders))
	nodes := make([]*HiringTeamManager, len(htmcb.builders))
	mutators := make([]Mutator, len(htmcb.builders))
	for i := range htmcb.builders {
		func(i int, root context.Context) {
			builder := htmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HiringTeamManagerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, htmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, htmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, htmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (htmcb *HiringTeamManagerCreateBulk) SaveX(ctx context.Context) []*HiringTeamManager {
	v, err := htmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htmcb *HiringTeamManagerCreateBulk) Exec(ctx context.Context) error {
	_, err := htmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htmcb *HiringTeamManagerCreateBulk) ExecX(ctx context.Context) {
	if err := htmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
