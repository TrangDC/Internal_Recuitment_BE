// Code generated by ent, DO NOT EDIT.

package userrole

import (
	"time"
)

const (
	// Label holds the string label denoting the userrole type in the database.
	Label = "user_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUserEdge holds the string denoting the user_edge edge name in mutations.
	EdgeUserEdge = "user_edge"
	// EdgeRoleEdge holds the string denoting the role_edge edge name in mutations.
	EdgeRoleEdge = "role_edge"
	// Table holds the table name of the userrole in the database.
	Table = "user_roles"
	// UserEdgeTable is the table that holds the user_edge relation/edge.
	UserEdgeTable = "user_roles"
	// UserEdgeInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserEdgeInverseTable = "users"
	// UserEdgeColumn is the table column denoting the user_edge relation/edge.
	UserEdgeColumn = "user_id"
	// RoleEdgeTable is the table that holds the role_edge relation/edge.
	RoleEdgeTable = "user_roles"
	// RoleEdgeInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleEdgeInverseTable = "roles"
	// RoleEdgeColumn is the table column denoting the role_edge relation/edge.
	RoleEdgeColumn = "role_id"
)

// Columns holds all SQL columns for userrole fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldRoleID,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
