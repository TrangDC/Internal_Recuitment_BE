// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidatehistorycall"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateHistoryCallUpdate is the builder for updating CandidateHistoryCall entities.
type CandidateHistoryCallUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateHistoryCallMutation
}

// Where appends a list predicates to the CandidateHistoryCallUpdate builder.
func (chcu *CandidateHistoryCallUpdate) Where(ps ...predicate.CandidateHistoryCall) *CandidateHistoryCallUpdate {
	chcu.mutation.Where(ps...)
	return chcu
}

// SetUpdatedAt sets the "updated_at" field.
func (chcu *CandidateHistoryCallUpdate) SetUpdatedAt(t time.Time) *CandidateHistoryCallUpdate {
	chcu.mutation.SetUpdatedAt(t)
	return chcu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateHistoryCallUpdate {
	if t != nil {
		chcu.SetUpdatedAt(*t)
	}
	return chcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (chcu *CandidateHistoryCallUpdate) ClearUpdatedAt() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearUpdatedAt()
	return chcu
}

// SetDeletedAt sets the "deleted_at" field.
func (chcu *CandidateHistoryCallUpdate) SetDeletedAt(t time.Time) *CandidateHistoryCallUpdate {
	chcu.mutation.SetDeletedAt(t)
	return chcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableDeletedAt(t *time.Time) *CandidateHistoryCallUpdate {
	if t != nil {
		chcu.SetDeletedAt(*t)
	}
	return chcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (chcu *CandidateHistoryCallUpdate) ClearDeletedAt() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearDeletedAt()
	return chcu
}

// SetName sets the "name" field.
func (chcu *CandidateHistoryCallUpdate) SetName(s string) *CandidateHistoryCallUpdate {
	chcu.mutation.SetName(s)
	return chcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableName(s *string) *CandidateHistoryCallUpdate {
	if s != nil {
		chcu.SetName(*s)
	}
	return chcu
}

// ClearName clears the value of the "name" field.
func (chcu *CandidateHistoryCallUpdate) ClearName() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearName()
	return chcu
}

// SetCandidateID sets the "candidate_id" field.
func (chcu *CandidateHistoryCallUpdate) SetCandidateID(u uuid.UUID) *CandidateHistoryCallUpdate {
	chcu.mutation.SetCandidateID(u)
	return chcu
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableCandidateID(u *uuid.UUID) *CandidateHistoryCallUpdate {
	if u != nil {
		chcu.SetCandidateID(*u)
	}
	return chcu
}

// ClearCandidateID clears the value of the "candidate_id" field.
func (chcu *CandidateHistoryCallUpdate) ClearCandidateID() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearCandidateID()
	return chcu
}

// SetContactTo sets the "contact_to" field.
func (chcu *CandidateHistoryCallUpdate) SetContactTo(s string) *CandidateHistoryCallUpdate {
	chcu.mutation.SetContactTo(s)
	return chcu
}

// SetNillableContactTo sets the "contact_to" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableContactTo(s *string) *CandidateHistoryCallUpdate {
	if s != nil {
		chcu.SetContactTo(*s)
	}
	return chcu
}

// ClearContactTo clears the value of the "contact_to" field.
func (chcu *CandidateHistoryCallUpdate) ClearContactTo() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearContactTo()
	return chcu
}

// SetDescription sets the "description" field.
func (chcu *CandidateHistoryCallUpdate) SetDescription(s string) *CandidateHistoryCallUpdate {
	chcu.mutation.SetDescription(s)
	return chcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableDescription(s *string) *CandidateHistoryCallUpdate {
	if s != nil {
		chcu.SetDescription(*s)
	}
	return chcu
}

// ClearDescription clears the value of the "description" field.
func (chcu *CandidateHistoryCallUpdate) ClearDescription() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearDescription()
	return chcu
}

// SetType sets the "type" field.
func (chcu *CandidateHistoryCallUpdate) SetType(c candidatehistorycall.Type) *CandidateHistoryCallUpdate {
	chcu.mutation.SetType(c)
	return chcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableType(c *candidatehistorycall.Type) *CandidateHistoryCallUpdate {
	if c != nil {
		chcu.SetType(*c)
	}
	return chcu
}

// ClearType clears the value of the "type" field.
func (chcu *CandidateHistoryCallUpdate) ClearType() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearType()
	return chcu
}

// SetDate sets the "date" field.
func (chcu *CandidateHistoryCallUpdate) SetDate(t time.Time) *CandidateHistoryCallUpdate {
	chcu.mutation.SetDate(t)
	return chcu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableDate(t *time.Time) *CandidateHistoryCallUpdate {
	if t != nil {
		chcu.SetDate(*t)
	}
	return chcu
}

// ClearDate clears the value of the "date" field.
func (chcu *CandidateHistoryCallUpdate) ClearDate() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearDate()
	return chcu
}

// SetStartTime sets the "start_time" field.
func (chcu *CandidateHistoryCallUpdate) SetStartTime(t time.Time) *CandidateHistoryCallUpdate {
	chcu.mutation.SetStartTime(t)
	return chcu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableStartTime(t *time.Time) *CandidateHistoryCallUpdate {
	if t != nil {
		chcu.SetStartTime(*t)
	}
	return chcu
}

// ClearStartTime clears the value of the "start_time" field.
func (chcu *CandidateHistoryCallUpdate) ClearStartTime() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearStartTime()
	return chcu
}

// SetEndTime sets the "end_time" field.
func (chcu *CandidateHistoryCallUpdate) SetEndTime(t time.Time) *CandidateHistoryCallUpdate {
	chcu.mutation.SetEndTime(t)
	return chcu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableEndTime(t *time.Time) *CandidateHistoryCallUpdate {
	if t != nil {
		chcu.SetEndTime(*t)
	}
	return chcu
}

// ClearEndTime clears the value of the "end_time" field.
func (chcu *CandidateHistoryCallUpdate) ClearEndTime() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearEndTime()
	return chcu
}

// SetCreatedByID sets the "created_by_id" field.
func (chcu *CandidateHistoryCallUpdate) SetCreatedByID(u uuid.UUID) *CandidateHistoryCallUpdate {
	chcu.mutation.SetCreatedByID(u)
	return chcu
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableCreatedByID(u *uuid.UUID) *CandidateHistoryCallUpdate {
	if u != nil {
		chcu.SetCreatedByID(*u)
	}
	return chcu
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (chcu *CandidateHistoryCallUpdate) ClearCreatedByID() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearCreatedByID()
	return chcu
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (chcu *CandidateHistoryCallUpdate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateHistoryCallUpdate {
	chcu.mutation.AddAttachmentEdgeIDs(ids...)
	return chcu
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (chcu *CandidateHistoryCallUpdate) AddAttachmentEdges(a ...*Attachment) *CandidateHistoryCallUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return chcu.AddAttachmentEdgeIDs(ids...)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (chcu *CandidateHistoryCallUpdate) SetCandidateEdgeID(id uuid.UUID) *CandidateHistoryCallUpdate {
	chcu.mutation.SetCandidateEdgeID(id)
	return chcu
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateHistoryCallUpdate {
	if id != nil {
		chcu = chcu.SetCandidateEdgeID(*id)
	}
	return chcu
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (chcu *CandidateHistoryCallUpdate) SetCandidateEdge(c *Candidate) *CandidateHistoryCallUpdate {
	return chcu.SetCandidateEdgeID(c.ID)
}

// SetCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID.
func (chcu *CandidateHistoryCallUpdate) SetCreatedByEdgeID(id uuid.UUID) *CandidateHistoryCallUpdate {
	chcu.mutation.SetCreatedByEdgeID(id)
	return chcu
}

// SetNillableCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID if the given value is not nil.
func (chcu *CandidateHistoryCallUpdate) SetNillableCreatedByEdgeID(id *uuid.UUID) *CandidateHistoryCallUpdate {
	if id != nil {
		chcu = chcu.SetCreatedByEdgeID(*id)
	}
	return chcu
}

// SetCreatedByEdge sets the "created_by_edge" edge to the User entity.
func (chcu *CandidateHistoryCallUpdate) SetCreatedByEdge(u *User) *CandidateHistoryCallUpdate {
	return chcu.SetCreatedByEdgeID(u.ID)
}

// Mutation returns the CandidateHistoryCallMutation object of the builder.
func (chcu *CandidateHistoryCallUpdate) Mutation() *CandidateHistoryCallMutation {
	return chcu.mutation
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (chcu *CandidateHistoryCallUpdate) ClearAttachmentEdges() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearAttachmentEdges()
	return chcu
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (chcu *CandidateHistoryCallUpdate) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateHistoryCallUpdate {
	chcu.mutation.RemoveAttachmentEdgeIDs(ids...)
	return chcu
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (chcu *CandidateHistoryCallUpdate) RemoveAttachmentEdges(a ...*Attachment) *CandidateHistoryCallUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return chcu.RemoveAttachmentEdgeIDs(ids...)
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (chcu *CandidateHistoryCallUpdate) ClearCandidateEdge() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearCandidateEdge()
	return chcu
}

// ClearCreatedByEdge clears the "created_by_edge" edge to the User entity.
func (chcu *CandidateHistoryCallUpdate) ClearCreatedByEdge() *CandidateHistoryCallUpdate {
	chcu.mutation.ClearCreatedByEdge()
	return chcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chcu *CandidateHistoryCallUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(chcu.hooks) == 0 {
		if err = chcu.check(); err != nil {
			return 0, err
		}
		affected, err = chcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateHistoryCallMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = chcu.check(); err != nil {
				return 0, err
			}
			chcu.mutation = mutation
			affected, err = chcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(chcu.hooks) - 1; i >= 0; i-- {
			if chcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = chcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, chcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (chcu *CandidateHistoryCallUpdate) SaveX(ctx context.Context) int {
	affected, err := chcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chcu *CandidateHistoryCallUpdate) Exec(ctx context.Context) error {
	_, err := chcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcu *CandidateHistoryCallUpdate) ExecX(ctx context.Context) {
	if err := chcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chcu *CandidateHistoryCallUpdate) check() error {
	if v, ok := chcu.mutation.Name(); ok {
		if err := candidatehistorycall.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CandidateHistoryCall.name": %w`, err)}
		}
	}
	if v, ok := chcu.mutation.GetType(); ok {
		if err := candidatehistorycall.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CandidateHistoryCall.type": %w`, err)}
		}
	}
	return nil
}

func (chcu *CandidateHistoryCallUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatehistorycall.Table,
			Columns: candidatehistorycall.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatehistorycall.FieldID,
			},
		},
	}
	if ps := chcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chcu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatehistorycall.FieldUpdatedAt, field.TypeTime, value)
	}
	if chcu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidatehistorycall.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := chcu.mutation.DeletedAt(); ok {
		_spec.SetField(candidatehistorycall.FieldDeletedAt, field.TypeTime, value)
	}
	if chcu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidatehistorycall.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := chcu.mutation.Name(); ok {
		_spec.SetField(candidatehistorycall.FieldName, field.TypeString, value)
	}
	if chcu.mutation.NameCleared() {
		_spec.ClearField(candidatehistorycall.FieldName, field.TypeString)
	}
	if value, ok := chcu.mutation.ContactTo(); ok {
		_spec.SetField(candidatehistorycall.FieldContactTo, field.TypeString, value)
	}
	if chcu.mutation.ContactToCleared() {
		_spec.ClearField(candidatehistorycall.FieldContactTo, field.TypeString)
	}
	if value, ok := chcu.mutation.Description(); ok {
		_spec.SetField(candidatehistorycall.FieldDescription, field.TypeString, value)
	}
	if chcu.mutation.DescriptionCleared() {
		_spec.ClearField(candidatehistorycall.FieldDescription, field.TypeString)
	}
	if value, ok := chcu.mutation.GetType(); ok {
		_spec.SetField(candidatehistorycall.FieldType, field.TypeEnum, value)
	}
	if chcu.mutation.TypeCleared() {
		_spec.ClearField(candidatehistorycall.FieldType, field.TypeEnum)
	}
	if value, ok := chcu.mutation.Date(); ok {
		_spec.SetField(candidatehistorycall.FieldDate, field.TypeTime, value)
	}
	if chcu.mutation.DateCleared() {
		_spec.ClearField(candidatehistorycall.FieldDate, field.TypeTime)
	}
	if value, ok := chcu.mutation.StartTime(); ok {
		_spec.SetField(candidatehistorycall.FieldStartTime, field.TypeTime, value)
	}
	if chcu.mutation.StartTimeCleared() {
		_spec.ClearField(candidatehistorycall.FieldStartTime, field.TypeTime)
	}
	if value, ok := chcu.mutation.EndTime(); ok {
		_spec.SetField(candidatehistorycall.FieldEndTime, field.TypeTime, value)
	}
	if chcu.mutation.EndTimeCleared() {
		_spec.ClearField(candidatehistorycall.FieldEndTime, field.TypeTime)
	}
	if chcu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatehistorycall.AttachmentEdgesTable,
			Columns: []string{candidatehistorycall.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcu.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !chcu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatehistorycall.AttachmentEdgesTable,
			Columns: []string{candidatehistorycall.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcu.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatehistorycall.AttachmentEdgesTable,
			Columns: []string{candidatehistorycall.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chcu.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatehistorycall.CandidateEdgeTable,
			Columns: []string{candidatehistorycall.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcu.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatehistorycall.CandidateEdgeTable,
			Columns: []string{candidatehistorycall.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chcu.mutation.CreatedByEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatehistorycall.CreatedByEdgeTable,
			Columns: []string{candidatehistorycall.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcu.mutation.CreatedByEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatehistorycall.CreatedByEdgeTable,
			Columns: []string{candidatehistorycall.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, chcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidatehistorycall.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateHistoryCallUpdateOne is the builder for updating a single CandidateHistoryCall entity.
type CandidateHistoryCallUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateHistoryCallMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetUpdatedAt(t time.Time) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetUpdatedAt(t)
	return chcuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateHistoryCallUpdateOne {
	if t != nil {
		chcuo.SetUpdatedAt(*t)
	}
	return chcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearUpdatedAt() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearUpdatedAt()
	return chcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetDeletedAt(t time.Time) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetDeletedAt(t)
	return chcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateHistoryCallUpdateOne {
	if t != nil {
		chcuo.SetDeletedAt(*t)
	}
	return chcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearDeletedAt() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearDeletedAt()
	return chcuo
}

// SetName sets the "name" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetName(s string) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetName(s)
	return chcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableName(s *string) *CandidateHistoryCallUpdateOne {
	if s != nil {
		chcuo.SetName(*s)
	}
	return chcuo
}

// ClearName clears the value of the "name" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearName() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearName()
	return chcuo
}

// SetCandidateID sets the "candidate_id" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetCandidateID(u uuid.UUID) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetCandidateID(u)
	return chcuo
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableCandidateID(u *uuid.UUID) *CandidateHistoryCallUpdateOne {
	if u != nil {
		chcuo.SetCandidateID(*u)
	}
	return chcuo
}

// ClearCandidateID clears the value of the "candidate_id" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearCandidateID() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearCandidateID()
	return chcuo
}

// SetContactTo sets the "contact_to" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetContactTo(s string) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetContactTo(s)
	return chcuo
}

// SetNillableContactTo sets the "contact_to" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableContactTo(s *string) *CandidateHistoryCallUpdateOne {
	if s != nil {
		chcuo.SetContactTo(*s)
	}
	return chcuo
}

// ClearContactTo clears the value of the "contact_to" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearContactTo() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearContactTo()
	return chcuo
}

// SetDescription sets the "description" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetDescription(s string) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetDescription(s)
	return chcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableDescription(s *string) *CandidateHistoryCallUpdateOne {
	if s != nil {
		chcuo.SetDescription(*s)
	}
	return chcuo
}

// ClearDescription clears the value of the "description" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearDescription() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearDescription()
	return chcuo
}

// SetType sets the "type" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetType(c candidatehistorycall.Type) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetType(c)
	return chcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableType(c *candidatehistorycall.Type) *CandidateHistoryCallUpdateOne {
	if c != nil {
		chcuo.SetType(*c)
	}
	return chcuo
}

// ClearType clears the value of the "type" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearType() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearType()
	return chcuo
}

// SetDate sets the "date" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetDate(t time.Time) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetDate(t)
	return chcuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableDate(t *time.Time) *CandidateHistoryCallUpdateOne {
	if t != nil {
		chcuo.SetDate(*t)
	}
	return chcuo
}

// ClearDate clears the value of the "date" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearDate() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearDate()
	return chcuo
}

// SetStartTime sets the "start_time" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetStartTime(t time.Time) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetStartTime(t)
	return chcuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableStartTime(t *time.Time) *CandidateHistoryCallUpdateOne {
	if t != nil {
		chcuo.SetStartTime(*t)
	}
	return chcuo
}

// ClearStartTime clears the value of the "start_time" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearStartTime() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearStartTime()
	return chcuo
}

// SetEndTime sets the "end_time" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetEndTime(t time.Time) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetEndTime(t)
	return chcuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableEndTime(t *time.Time) *CandidateHistoryCallUpdateOne {
	if t != nil {
		chcuo.SetEndTime(*t)
	}
	return chcuo
}

// ClearEndTime clears the value of the "end_time" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearEndTime() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearEndTime()
	return chcuo
}

// SetCreatedByID sets the "created_by_id" field.
func (chcuo *CandidateHistoryCallUpdateOne) SetCreatedByID(u uuid.UUID) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetCreatedByID(u)
	return chcuo
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableCreatedByID(u *uuid.UUID) *CandidateHistoryCallUpdateOne {
	if u != nil {
		chcuo.SetCreatedByID(*u)
	}
	return chcuo
}

// ClearCreatedByID clears the value of the "created_by_id" field.
func (chcuo *CandidateHistoryCallUpdateOne) ClearCreatedByID() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearCreatedByID()
	return chcuo
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (chcuo *CandidateHistoryCallUpdateOne) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.AddAttachmentEdgeIDs(ids...)
	return chcuo
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (chcuo *CandidateHistoryCallUpdateOne) AddAttachmentEdges(a ...*Attachment) *CandidateHistoryCallUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return chcuo.AddAttachmentEdgeIDs(ids...)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (chcuo *CandidateHistoryCallUpdateOne) SetCandidateEdgeID(id uuid.UUID) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetCandidateEdgeID(id)
	return chcuo
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateHistoryCallUpdateOne {
	if id != nil {
		chcuo = chcuo.SetCandidateEdgeID(*id)
	}
	return chcuo
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (chcuo *CandidateHistoryCallUpdateOne) SetCandidateEdge(c *Candidate) *CandidateHistoryCallUpdateOne {
	return chcuo.SetCandidateEdgeID(c.ID)
}

// SetCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID.
func (chcuo *CandidateHistoryCallUpdateOne) SetCreatedByEdgeID(id uuid.UUID) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.SetCreatedByEdgeID(id)
	return chcuo
}

// SetNillableCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID if the given value is not nil.
func (chcuo *CandidateHistoryCallUpdateOne) SetNillableCreatedByEdgeID(id *uuid.UUID) *CandidateHistoryCallUpdateOne {
	if id != nil {
		chcuo = chcuo.SetCreatedByEdgeID(*id)
	}
	return chcuo
}

// SetCreatedByEdge sets the "created_by_edge" edge to the User entity.
func (chcuo *CandidateHistoryCallUpdateOne) SetCreatedByEdge(u *User) *CandidateHistoryCallUpdateOne {
	return chcuo.SetCreatedByEdgeID(u.ID)
}

// Mutation returns the CandidateHistoryCallMutation object of the builder.
func (chcuo *CandidateHistoryCallUpdateOne) Mutation() *CandidateHistoryCallMutation {
	return chcuo.mutation
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (chcuo *CandidateHistoryCallUpdateOne) ClearAttachmentEdges() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearAttachmentEdges()
	return chcuo
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (chcuo *CandidateHistoryCallUpdateOne) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateHistoryCallUpdateOne {
	chcuo.mutation.RemoveAttachmentEdgeIDs(ids...)
	return chcuo
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (chcuo *CandidateHistoryCallUpdateOne) RemoveAttachmentEdges(a ...*Attachment) *CandidateHistoryCallUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return chcuo.RemoveAttachmentEdgeIDs(ids...)
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (chcuo *CandidateHistoryCallUpdateOne) ClearCandidateEdge() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearCandidateEdge()
	return chcuo
}

// ClearCreatedByEdge clears the "created_by_edge" edge to the User entity.
func (chcuo *CandidateHistoryCallUpdateOne) ClearCreatedByEdge() *CandidateHistoryCallUpdateOne {
	chcuo.mutation.ClearCreatedByEdge()
	return chcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chcuo *CandidateHistoryCallUpdateOne) Select(field string, fields ...string) *CandidateHistoryCallUpdateOne {
	chcuo.fields = append([]string{field}, fields...)
	return chcuo
}

// Save executes the query and returns the updated CandidateHistoryCall entity.
func (chcuo *CandidateHistoryCallUpdateOne) Save(ctx context.Context) (*CandidateHistoryCall, error) {
	var (
		err  error
		node *CandidateHistoryCall
	)
	if len(chcuo.hooks) == 0 {
		if err = chcuo.check(); err != nil {
			return nil, err
		}
		node, err = chcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateHistoryCallMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = chcuo.check(); err != nil {
				return nil, err
			}
			chcuo.mutation = mutation
			node, err = chcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(chcuo.hooks) - 1; i >= 0; i-- {
			if chcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = chcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, chcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateHistoryCall)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateHistoryCallMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (chcuo *CandidateHistoryCallUpdateOne) SaveX(ctx context.Context) *CandidateHistoryCall {
	node, err := chcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chcuo *CandidateHistoryCallUpdateOne) Exec(ctx context.Context) error {
	_, err := chcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcuo *CandidateHistoryCallUpdateOne) ExecX(ctx context.Context) {
	if err := chcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chcuo *CandidateHistoryCallUpdateOne) check() error {
	if v, ok := chcuo.mutation.Name(); ok {
		if err := candidatehistorycall.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CandidateHistoryCall.name": %w`, err)}
		}
	}
	if v, ok := chcuo.mutation.GetType(); ok {
		if err := candidatehistorycall.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CandidateHistoryCall.type": %w`, err)}
		}
	}
	return nil
}

func (chcuo *CandidateHistoryCallUpdateOne) sqlSave(ctx context.Context) (_node *CandidateHistoryCall, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatehistorycall.Table,
			Columns: candidatehistorycall.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatehistorycall.FieldID,
			},
		},
	}
	id, ok := chcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CandidateHistoryCall.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidatehistorycall.FieldID)
		for _, f := range fields {
			if !candidatehistorycall.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidatehistorycall.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatehistorycall.FieldUpdatedAt, field.TypeTime, value)
	}
	if chcuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidatehistorycall.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := chcuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidatehistorycall.FieldDeletedAt, field.TypeTime, value)
	}
	if chcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidatehistorycall.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := chcuo.mutation.Name(); ok {
		_spec.SetField(candidatehistorycall.FieldName, field.TypeString, value)
	}
	if chcuo.mutation.NameCleared() {
		_spec.ClearField(candidatehistorycall.FieldName, field.TypeString)
	}
	if value, ok := chcuo.mutation.ContactTo(); ok {
		_spec.SetField(candidatehistorycall.FieldContactTo, field.TypeString, value)
	}
	if chcuo.mutation.ContactToCleared() {
		_spec.ClearField(candidatehistorycall.FieldContactTo, field.TypeString)
	}
	if value, ok := chcuo.mutation.Description(); ok {
		_spec.SetField(candidatehistorycall.FieldDescription, field.TypeString, value)
	}
	if chcuo.mutation.DescriptionCleared() {
		_spec.ClearField(candidatehistorycall.FieldDescription, field.TypeString)
	}
	if value, ok := chcuo.mutation.GetType(); ok {
		_spec.SetField(candidatehistorycall.FieldType, field.TypeEnum, value)
	}
	if chcuo.mutation.TypeCleared() {
		_spec.ClearField(candidatehistorycall.FieldType, field.TypeEnum)
	}
	if value, ok := chcuo.mutation.Date(); ok {
		_spec.SetField(candidatehistorycall.FieldDate, field.TypeTime, value)
	}
	if chcuo.mutation.DateCleared() {
		_spec.ClearField(candidatehistorycall.FieldDate, field.TypeTime)
	}
	if value, ok := chcuo.mutation.StartTime(); ok {
		_spec.SetField(candidatehistorycall.FieldStartTime, field.TypeTime, value)
	}
	if chcuo.mutation.StartTimeCleared() {
		_spec.ClearField(candidatehistorycall.FieldStartTime, field.TypeTime)
	}
	if value, ok := chcuo.mutation.EndTime(); ok {
		_spec.SetField(candidatehistorycall.FieldEndTime, field.TypeTime, value)
	}
	if chcuo.mutation.EndTimeCleared() {
		_spec.ClearField(candidatehistorycall.FieldEndTime, field.TypeTime)
	}
	if chcuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatehistorycall.AttachmentEdgesTable,
			Columns: []string{candidatehistorycall.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcuo.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !chcuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatehistorycall.AttachmentEdgesTable,
			Columns: []string{candidatehistorycall.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcuo.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatehistorycall.AttachmentEdgesTable,
			Columns: []string{candidatehistorycall.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chcuo.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatehistorycall.CandidateEdgeTable,
			Columns: []string{candidatehistorycall.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcuo.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatehistorycall.CandidateEdgeTable,
			Columns: []string{candidatehistorycall.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if chcuo.mutation.CreatedByEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatehistorycall.CreatedByEdgeTable,
			Columns: []string{candidatehistorycall.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := chcuo.mutation.CreatedByEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatehistorycall.CreatedByEdgeTable,
			Columns: []string{candidatehistorycall.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CandidateHistoryCall{config: chcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidatehistorycall.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
