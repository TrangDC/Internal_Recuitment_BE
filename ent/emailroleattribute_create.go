// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/emailroleattribute"
	"trec/ent/emailtemplate"
	"trec/ent/role"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EmailRoleAttributeCreate is the builder for creating a EmailRoleAttribute entity.
type EmailRoleAttributeCreate struct {
	config
	mutation *EmailRoleAttributeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (erac *EmailRoleAttributeCreate) SetCreatedAt(t time.Time) *EmailRoleAttributeCreate {
	erac.mutation.SetCreatedAt(t)
	return erac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (erac *EmailRoleAttributeCreate) SetNillableCreatedAt(t *time.Time) *EmailRoleAttributeCreate {
	if t != nil {
		erac.SetCreatedAt(*t)
	}
	return erac
}

// SetUpdatedAt sets the "updated_at" field.
func (erac *EmailRoleAttributeCreate) SetUpdatedAt(t time.Time) *EmailRoleAttributeCreate {
	erac.mutation.SetUpdatedAt(t)
	return erac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (erac *EmailRoleAttributeCreate) SetNillableUpdatedAt(t *time.Time) *EmailRoleAttributeCreate {
	if t != nil {
		erac.SetUpdatedAt(*t)
	}
	return erac
}

// SetDeletedAt sets the "deleted_at" field.
func (erac *EmailRoleAttributeCreate) SetDeletedAt(t time.Time) *EmailRoleAttributeCreate {
	erac.mutation.SetDeletedAt(t)
	return erac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (erac *EmailRoleAttributeCreate) SetNillableDeletedAt(t *time.Time) *EmailRoleAttributeCreate {
	if t != nil {
		erac.SetDeletedAt(*t)
	}
	return erac
}

// SetEmailTemplateID sets the "email_template_id" field.
func (erac *EmailRoleAttributeCreate) SetEmailTemplateID(u uuid.UUID) *EmailRoleAttributeCreate {
	erac.mutation.SetEmailTemplateID(u)
	return erac
}

// SetRoleID sets the "role_id" field.
func (erac *EmailRoleAttributeCreate) SetRoleID(u uuid.UUID) *EmailRoleAttributeCreate {
	erac.mutation.SetRoleID(u)
	return erac
}

// SetID sets the "id" field.
func (erac *EmailRoleAttributeCreate) SetID(u uuid.UUID) *EmailRoleAttributeCreate {
	erac.mutation.SetID(u)
	return erac
}

// SetEmailTemplateEdgeID sets the "email_template_edge" edge to the EmailTemplate entity by ID.
func (erac *EmailRoleAttributeCreate) SetEmailTemplateEdgeID(id uuid.UUID) *EmailRoleAttributeCreate {
	erac.mutation.SetEmailTemplateEdgeID(id)
	return erac
}

// SetEmailTemplateEdge sets the "email_template_edge" edge to the EmailTemplate entity.
func (erac *EmailRoleAttributeCreate) SetEmailTemplateEdge(e *EmailTemplate) *EmailRoleAttributeCreate {
	return erac.SetEmailTemplateEdgeID(e.ID)
}

// SetRoleEdgeID sets the "role_edge" edge to the Role entity by ID.
func (erac *EmailRoleAttributeCreate) SetRoleEdgeID(id uuid.UUID) *EmailRoleAttributeCreate {
	erac.mutation.SetRoleEdgeID(id)
	return erac
}

// SetRoleEdge sets the "role_edge" edge to the Role entity.
func (erac *EmailRoleAttributeCreate) SetRoleEdge(r *Role) *EmailRoleAttributeCreate {
	return erac.SetRoleEdgeID(r.ID)
}

// Mutation returns the EmailRoleAttributeMutation object of the builder.
func (erac *EmailRoleAttributeCreate) Mutation() *EmailRoleAttributeMutation {
	return erac.mutation
}

// Save creates the EmailRoleAttribute in the database.
func (erac *EmailRoleAttributeCreate) Save(ctx context.Context) (*EmailRoleAttribute, error) {
	var (
		err  error
		node *EmailRoleAttribute
	)
	erac.defaults()
	if len(erac.hooks) == 0 {
		if err = erac.check(); err != nil {
			return nil, err
		}
		node, err = erac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailRoleAttributeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = erac.check(); err != nil {
				return nil, err
			}
			erac.mutation = mutation
			if node, err = erac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(erac.hooks) - 1; i >= 0; i-- {
			if erac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = erac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, erac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EmailRoleAttribute)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EmailRoleAttributeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (erac *EmailRoleAttributeCreate) SaveX(ctx context.Context) *EmailRoleAttribute {
	v, err := erac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (erac *EmailRoleAttributeCreate) Exec(ctx context.Context) error {
	_, err := erac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erac *EmailRoleAttributeCreate) ExecX(ctx context.Context) {
	if err := erac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (erac *EmailRoleAttributeCreate) defaults() {
	if _, ok := erac.mutation.CreatedAt(); !ok {
		v := emailroleattribute.DefaultCreatedAt()
		erac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (erac *EmailRoleAttributeCreate) check() error {
	if _, ok := erac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EmailRoleAttribute.created_at"`)}
	}
	if _, ok := erac.mutation.EmailTemplateID(); !ok {
		return &ValidationError{Name: "email_template_id", err: errors.New(`ent: missing required field "EmailRoleAttribute.email_template_id"`)}
	}
	if _, ok := erac.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "EmailRoleAttribute.role_id"`)}
	}
	if _, ok := erac.mutation.EmailTemplateEdgeID(); !ok {
		return &ValidationError{Name: "email_template_edge", err: errors.New(`ent: missing required edge "EmailRoleAttribute.email_template_edge"`)}
	}
	if _, ok := erac.mutation.RoleEdgeID(); !ok {
		return &ValidationError{Name: "role_edge", err: errors.New(`ent: missing required edge "EmailRoleAttribute.role_edge"`)}
	}
	return nil
}

func (erac *EmailRoleAttributeCreate) sqlSave(ctx context.Context) (*EmailRoleAttribute, error) {
	_node, _spec := erac.createSpec()
	if err := sqlgraph.CreateNode(ctx, erac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (erac *EmailRoleAttributeCreate) createSpec() (*EmailRoleAttribute, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailRoleAttribute{config: erac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: emailroleattribute.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailroleattribute.FieldID,
			},
		}
	)
	if id, ok := erac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := erac.mutation.CreatedAt(); ok {
		_spec.SetField(emailroleattribute.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := erac.mutation.UpdatedAt(); ok {
		_spec.SetField(emailroleattribute.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := erac.mutation.DeletedAt(); ok {
		_spec.SetField(emailroleattribute.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := erac.mutation.EmailTemplateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.EmailTemplateEdgeTable,
			Columns: []string{emailroleattribute.EmailTemplateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailtemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmailTemplateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := erac.mutation.RoleEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.RoleEdgeTable,
			Columns: []string{emailroleattribute.RoleEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmailRoleAttributeCreateBulk is the builder for creating many EmailRoleAttribute entities in bulk.
type EmailRoleAttributeCreateBulk struct {
	config
	builders []*EmailRoleAttributeCreate
}

// Save creates the EmailRoleAttribute entities in the database.
func (eracb *EmailRoleAttributeCreateBulk) Save(ctx context.Context) ([]*EmailRoleAttribute, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eracb.builders))
	nodes := make([]*EmailRoleAttribute, len(eracb.builders))
	mutators := make([]Mutator, len(eracb.builders))
	for i := range eracb.builders {
		func(i int, root context.Context) {
			builder := eracb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailRoleAttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eracb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eracb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eracb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eracb *EmailRoleAttributeCreateBulk) SaveX(ctx context.Context) []*EmailRoleAttribute {
	v, err := eracb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eracb *EmailRoleAttributeCreateBulk) Exec(ctx context.Context) error {
	_, err := eracb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eracb *EmailRoleAttributeCreateBulk) ExecX(ctx context.Context) {
	if err := eracb.Exec(ctx); err != nil {
		panic(err)
	}
}
