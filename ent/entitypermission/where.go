// Code generated by ent, DO NOT EDIT.

package entitypermission

import (
	"time"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityID), v))
	})
}

// PermissionID applies equality check predicate on the "permission_id" field. It's identical to PermissionIDEQ.
func PermissionID(v uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissionID), v))
	})
}

// ForOwner applies equality check predicate on the "for_owner" field. It's identical to ForOwnerEQ.
func ForOwner(v bool) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForOwner), v))
	})
}

// ForTeam applies equality check predicate on the "for_team" field. It's identical to ForTeamEQ.
func ForTeam(v bool) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForTeam), v))
	})
}

// ForAll applies equality check predicate on the "for_all" field. It's identical to ForAllEQ.
func ForAll(v bool) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForAll), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityID), v))
	})
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntityID), v))
	})
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...uuid.UUID) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntityID), v...))
	})
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...uuid.UUID) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntityID), v...))
	})
}

// EntityIDIsNil applies the IsNil predicate on the "entity_id" field.
func EntityIDIsNil() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEntityID)))
	})
}

// EntityIDNotNil applies the NotNil predicate on the "entity_id" field.
func EntityIDNotNil() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEntityID)))
	})
}

// PermissionIDEQ applies the EQ predicate on the "permission_id" field.
func PermissionIDEQ(v uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissionID), v))
	})
}

// PermissionIDNEQ applies the NEQ predicate on the "permission_id" field.
func PermissionIDNEQ(v uuid.UUID) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPermissionID), v))
	})
}

// PermissionIDIn applies the In predicate on the "permission_id" field.
func PermissionIDIn(vs ...uuid.UUID) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPermissionID), v...))
	})
}

// PermissionIDNotIn applies the NotIn predicate on the "permission_id" field.
func PermissionIDNotIn(vs ...uuid.UUID) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPermissionID), v...))
	})
}

// PermissionIDIsNil applies the IsNil predicate on the "permission_id" field.
func PermissionIDIsNil() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPermissionID)))
	})
}

// PermissionIDNotNil applies the NotNil predicate on the "permission_id" field.
func PermissionIDNotNil() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPermissionID)))
	})
}

// ForOwnerEQ applies the EQ predicate on the "for_owner" field.
func ForOwnerEQ(v bool) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForOwner), v))
	})
}

// ForOwnerNEQ applies the NEQ predicate on the "for_owner" field.
func ForOwnerNEQ(v bool) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldForOwner), v))
	})
}

// ForTeamEQ applies the EQ predicate on the "for_team" field.
func ForTeamEQ(v bool) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForTeam), v))
	})
}

// ForTeamNEQ applies the NEQ predicate on the "for_team" field.
func ForTeamNEQ(v bool) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldForTeam), v))
	})
}

// ForAllEQ applies the EQ predicate on the "for_all" field.
func ForAllEQ(v bool) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForAll), v))
	})
}

// ForAllNEQ applies the NEQ predicate on the "for_all" field.
func ForAllNEQ(v bool) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldForAll), v))
	})
}

// EntityTypeEQ applies the EQ predicate on the "entity_type" field.
func EntityTypeEQ(v EntityType) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityType), v))
	})
}

// EntityTypeNEQ applies the NEQ predicate on the "entity_type" field.
func EntityTypeNEQ(v EntityType) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntityType), v))
	})
}

// EntityTypeIn applies the In predicate on the "entity_type" field.
func EntityTypeIn(vs ...EntityType) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntityType), v...))
	})
}

// EntityTypeNotIn applies the NotIn predicate on the "entity_type" field.
func EntityTypeNotIn(vs ...EntityType) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntityType), v...))
	})
}

// EntityTypeIsNil applies the IsNil predicate on the "entity_type" field.
func EntityTypeIsNil() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEntityType)))
	})
}

// EntityTypeNotNil applies the NotNil predicate on the "entity_type" field.
func EntityTypeNotNil() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEntityType)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EntityPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// HasPermissionEdges applies the HasEdge predicate on the "permission_edges" edge.
func HasPermissionEdges() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PermissionEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PermissionEdgesTable, PermissionEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionEdgesWith applies the HasEdge predicate on the "permission_edges" edge with a given conditions (other predicates).
func HasPermissionEdgesWith(preds ...predicate.Permission) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PermissionEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PermissionEdgesTable, PermissionEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserEdge applies the HasEdge predicate on the "user_edge" edge.
func HasUserEdge() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserEdgeTable, UserEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserEdgeWith applies the HasEdge predicate on the "user_edge" edge with a given conditions (other predicates).
func HasUserEdgeWith(preds ...predicate.User) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserEdgeTable, UserEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleEdge applies the HasEdge predicate on the "role_edge" edge.
func HasRoleEdge() predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleEdgeTable, RoleEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleEdgeWith applies the HasEdge predicate on the "role_edge" edge with a given conditions (other predicates).
func HasRoleEdgeWith(preds ...predicate.Role) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleEdgeTable, RoleEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntityPermission) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntityPermission) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntityPermission) predicate.EntityPermission {
	return predicate.EntityPermission(func(s *sql.Selector) {
		p(s.Not())
	})
}
