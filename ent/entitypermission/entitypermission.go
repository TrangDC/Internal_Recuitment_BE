// Code generated by ent, DO NOT EDIT.

package entitypermission

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the entitypermission type in the database.
	Label = "entity_permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntityID holds the string denoting the entity_id field in the database.
	FieldEntityID = "entity_id"
	// FieldPermissionID holds the string denoting the permission_id field in the database.
	FieldPermissionID = "permission_id"
	// FieldForOwner holds the string denoting the for_owner field in the database.
	FieldForOwner = "for_owner"
	// FieldForTeam holds the string denoting the for_team field in the database.
	FieldForTeam = "for_team"
	// FieldForAll holds the string denoting the for_all field in the database.
	FieldForAll = "for_all"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePermissionEdges holds the string denoting the permission_edges edge name in mutations.
	EdgePermissionEdges = "permission_edges"
	// EdgeUserEdge holds the string denoting the user_edge edge name in mutations.
	EdgeUserEdge = "user_edge"
	// EdgeRoleEdge holds the string denoting the role_edge edge name in mutations.
	EdgeRoleEdge = "role_edge"
	// Table holds the table name of the entitypermission in the database.
	Table = "entity_permissions"
	// PermissionEdgesTable is the table that holds the permission_edges relation/edge.
	PermissionEdgesTable = "entity_permissions"
	// PermissionEdgesInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionEdgesInverseTable = "permissions"
	// PermissionEdgesColumn is the table column denoting the permission_edges relation/edge.
	PermissionEdgesColumn = "permission_id"
	// UserEdgeTable is the table that holds the user_edge relation/edge.
	UserEdgeTable = "entity_permissions"
	// UserEdgeInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserEdgeInverseTable = "users"
	// UserEdgeColumn is the table column denoting the user_edge relation/edge.
	UserEdgeColumn = "entity_id"
	// RoleEdgeTable is the table that holds the role_edge relation/edge.
	RoleEdgeTable = "entity_permissions"
	// RoleEdgeInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleEdgeInverseTable = "roles"
	// RoleEdgeColumn is the table column denoting the role_edge relation/edge.
	RoleEdgeColumn = "entity_id"
)

// Columns holds all SQL columns for entitypermission fields.
var Columns = []string{
	FieldID,
	FieldEntityID,
	FieldPermissionID,
	FieldForOwner,
	FieldForTeam,
	FieldForAll,
	FieldEntityType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultForOwner holds the default value on creation for the "for_owner" field.
	DefaultForOwner bool
	// DefaultForTeam holds the default value on creation for the "for_team" field.
	DefaultForTeam bool
	// DefaultForAll holds the default value on creation for the "for_all" field.
	DefaultForAll bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// EntityType defines the type for the "entity_type" enum field.
type EntityType string

// EntityType values.
const (
	EntityTypeUser EntityType = "user"
	EntityTypeRole EntityType = "role"
)

func (et EntityType) String() string {
	return string(et)
}

// EntityTypeValidator is a validator for the "entity_type" field enum values. It is called by the builders before save.
func EntityTypeValidator(et EntityType) error {
	switch et {
	case EntityTypeUser, EntityTypeRole:
		return nil
	default:
		return fmt.Errorf("entitypermission: invalid enum value for entity_type field: %q", et)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e EntityType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *EntityType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = EntityType(str)
	if err := EntityTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid EntityType", str)
	}
	return nil
}
