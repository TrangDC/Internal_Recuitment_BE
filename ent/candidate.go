// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/candidate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Candidate is the model entity for the Candidate schema.
type Candidate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Dob holds the value of the "dob" field.
	Dob time.Time `json:"dob,omitempty"`
	// IsBlacklist holds the value of the "is_blacklist" field.
	IsBlacklist bool `json:"is_blacklist,omitempty"`
	// LastApplyDate holds the value of the "last_apply_date" field.
	LastApplyDate time.Time `json:"last_apply_date,omitempty"`
	// ReferenceType holds the value of the "reference_type" field.
	ReferenceType candidate.ReferenceType `json:"reference_type,omitempty"`
	// ReferenceValue holds the value of the "reference_value" field.
	ReferenceValue string `json:"reference_value,omitempty"`
	// ReferenceUID holds the value of the "reference_uid" field.
	ReferenceUID uuid.UUID `json:"reference_uid,omitempty"`
	// RecruitTime holds the value of the "recruit_time" field.
	RecruitTime time.Time `json:"recruit_time,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CandidateQuery when eager-loading is set.
	Edges CandidateEdges `json:"edges"`
}

// CandidateEdges holds the relations/edges for other nodes in the graph.
type CandidateEdges struct {
	// CandidateJobEdges holds the value of the candidate_job_edges edge.
	CandidateJobEdges []*CandidateJob `json:"candidate_job_edges,omitempty"`
	// ReferenceUserEdge holds the value of the reference_user_edge edge.
	ReferenceUserEdge *User `json:"reference_user_edge,omitempty"`
	// AttachmentEdges holds the value of the attachment_edges edge.
	AttachmentEdges []*Attachment `json:"attachment_edges,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedCandidateJobEdges map[string][]*CandidateJob
	namedAttachmentEdges   map[string][]*Attachment
}

// CandidateJobEdgesOrErr returns the CandidateJobEdges value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateEdges) CandidateJobEdgesOrErr() ([]*CandidateJob, error) {
	if e.loadedTypes[0] {
		return e.CandidateJobEdges, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_edges"}
}

// ReferenceUserEdgeOrErr returns the ReferenceUserEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateEdges) ReferenceUserEdgeOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.ReferenceUserEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ReferenceUserEdge, nil
	}
	return nil, &NotLoadedError{edge: "reference_user_edge"}
}

// AttachmentEdgesOrErr returns the AttachmentEdges value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateEdges) AttachmentEdgesOrErr() ([]*Attachment, error) {
	if e.loadedTypes[2] {
		return e.AttachmentEdges, nil
	}
	return nil, &NotLoadedError{edge: "attachment_edges"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Candidate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case candidate.FieldIsBlacklist:
			values[i] = new(sql.NullBool)
		case candidate.FieldName, candidate.FieldEmail, candidate.FieldPhone, candidate.FieldReferenceType, candidate.FieldReferenceValue, candidate.FieldDescription, candidate.FieldCountry:
			values[i] = new(sql.NullString)
		case candidate.FieldCreatedAt, candidate.FieldUpdatedAt, candidate.FieldDeletedAt, candidate.FieldDob, candidate.FieldLastApplyDate, candidate.FieldRecruitTime:
			values[i] = new(sql.NullTime)
		case candidate.FieldID, candidate.FieldReferenceUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Candidate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Candidate fields.
func (c *Candidate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case candidate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case candidate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case candidate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case candidate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = value.Time
			}
		case candidate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case candidate.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				c.Email = value.String
			}
		case candidate.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				c.Phone = value.String
			}
		case candidate.FieldDob:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dob", values[i])
			} else if value.Valid {
				c.Dob = value.Time
			}
		case candidate.FieldIsBlacklist:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_blacklist", values[i])
			} else if value.Valid {
				c.IsBlacklist = value.Bool
			}
		case candidate.FieldLastApplyDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_apply_date", values[i])
			} else if value.Valid {
				c.LastApplyDate = value.Time
			}
		case candidate.FieldReferenceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_type", values[i])
			} else if value.Valid {
				c.ReferenceType = candidate.ReferenceType(value.String)
			}
		case candidate.FieldReferenceValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_value", values[i])
			} else if value.Valid {
				c.ReferenceValue = value.String
			}
		case candidate.FieldReferenceUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field reference_uid", values[i])
			} else if value != nil {
				c.ReferenceUID = *value
			}
		case candidate.FieldRecruitTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field recruit_time", values[i])
			} else if value.Valid {
				c.RecruitTime = value.Time
			}
		case candidate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case candidate.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				c.Country = value.String
			}
		}
	}
	return nil
}

// QueryCandidateJobEdges queries the "candidate_job_edges" edge of the Candidate entity.
func (c *Candidate) QueryCandidateJobEdges() *CandidateJobQuery {
	return (&CandidateClient{config: c.config}).QueryCandidateJobEdges(c)
}

// QueryReferenceUserEdge queries the "reference_user_edge" edge of the Candidate entity.
func (c *Candidate) QueryReferenceUserEdge() *UserQuery {
	return (&CandidateClient{config: c.config}).QueryReferenceUserEdge(c)
}

// QueryAttachmentEdges queries the "attachment_edges" edge of the Candidate entity.
func (c *Candidate) QueryAttachmentEdges() *AttachmentQuery {
	return (&CandidateClient{config: c.config}).QueryAttachmentEdges(c)
}

// Update returns a builder for updating this Candidate.
// Note that you need to call Candidate.Unwrap() before calling this method if this Candidate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Candidate) Update() *CandidateUpdateOne {
	return (&CandidateClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Candidate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Candidate) Unwrap() *Candidate {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Candidate is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Candidate) String() string {
	var builder strings.Builder
	builder.WriteString("Candidate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(c.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(c.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(c.Phone)
	builder.WriteString(", ")
	builder.WriteString("dob=")
	builder.WriteString(c.Dob.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_blacklist=")
	builder.WriteString(fmt.Sprintf("%v", c.IsBlacklist))
	builder.WriteString(", ")
	builder.WriteString("last_apply_date=")
	builder.WriteString(c.LastApplyDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reference_type=")
	builder.WriteString(fmt.Sprintf("%v", c.ReferenceType))
	builder.WriteString(", ")
	builder.WriteString("reference_value=")
	builder.WriteString(c.ReferenceValue)
	builder.WriteString(", ")
	builder.WriteString("reference_uid=")
	builder.WriteString(fmt.Sprintf("%v", c.ReferenceUID))
	builder.WriteString(", ")
	builder.WriteString("recruit_time=")
	builder.WriteString(c.RecruitTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(c.Country)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCandidateJobEdges returns the CandidateJobEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Candidate) NamedCandidateJobEdges(name string) ([]*CandidateJob, error) {
	if c.Edges.namedCandidateJobEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCandidateJobEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Candidate) appendNamedCandidateJobEdges(name string, edges ...*CandidateJob) {
	if c.Edges.namedCandidateJobEdges == nil {
		c.Edges.namedCandidateJobEdges = make(map[string][]*CandidateJob)
	}
	if len(edges) == 0 {
		c.Edges.namedCandidateJobEdges[name] = []*CandidateJob{}
	} else {
		c.Edges.namedCandidateJobEdges[name] = append(c.Edges.namedCandidateJobEdges[name], edges...)
	}
}

// NamedAttachmentEdges returns the AttachmentEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Candidate) NamedAttachmentEdges(name string) ([]*Attachment, error) {
	if c.Edges.namedAttachmentEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedAttachmentEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Candidate) appendNamedAttachmentEdges(name string, edges ...*Attachment) {
	if c.Edges.namedAttachmentEdges == nil {
		c.Edges.namedAttachmentEdges = make(map[string][]*Attachment)
	}
	if len(edges) == 0 {
		c.Edges.namedAttachmentEdges[name] = []*Attachment{}
	} else {
		c.Edges.namedAttachmentEdges[name] = append(c.Edges.namedAttachmentEdges[name], edges...)
	}
}

// Candidates is a parsable slice of Candidate.
type Candidates []*Candidate

func (c Candidates) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
