// Code generated by ent, DO NOT EDIT.

package emailevent

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the emailevent type in the database.
	Label = "email_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModule holds the string denoting the module field in the database.
	FieldModule = "module"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the emailevent in the database.
	Table = "email_events"
)

// Columns holds all SQL columns for emailevent fields.
var Columns = []string{
	FieldID,
	FieldModule,
	FieldAction,
	FieldName,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Module defines the type for the "module" enum field.
type Module string

// Module values.
const (
	ModuleInterview   Module = "interview"
	ModuleApplication Module = "application"
	ModuleJobRequest  Module = "job_request"
)

func (m Module) String() string {
	return string(m)
}

// ModuleValidator is a validator for the "module" field enum values. It is called by the builders before save.
func ModuleValidator(m Module) error {
	switch m {
	case ModuleInterview, ModuleApplication, ModuleJobRequest:
		return nil
	default:
		return fmt.Errorf("emailevent: invalid enum value for module field: %q", m)
	}
}

// Action defines the type for the "action" enum field.
type Action string

// Action values.
const (
	ActionCreate            Action = "create"
	ActionUpdate            Action = "update"
	ActionCancel            Action = "cancel"
	ActionCdApplied         Action = "cd_applied"
	ActionCdInterviewing    Action = "cd_interviewing"
	ActionCdOffering        Action = "cd_offering"
	ActionCdFailedCv        Action = "cd_failed_cv"
	ActionCdFailedInterview Action = "cd_failed_interview"
	ActionCdOfferLost       Action = "cd_offer_lost"
	ActionCdHired           Action = "cd_hired"
	ActionClose             Action = "close"
	ActionOpen              Action = "open"
	ActionReopen            Action = "reopen"
	ActionNeedApproval      Action = "need_approval"
)

func (a Action) String() string {
	return string(a)
}

// ActionValidator is a validator for the "action" field enum values. It is called by the builders before save.
func ActionValidator(a Action) error {
	switch a {
	case ActionCreate, ActionUpdate, ActionCancel, ActionCdApplied, ActionCdInterviewing, ActionCdOffering, ActionCdFailedCv, ActionCdFailedInterview, ActionCdOfferLost, ActionCdHired, ActionClose, ActionOpen, ActionReopen, ActionNeedApproval:
		return nil
	default:
		return fmt.Errorf("emailevent: invalid enum value for action field: %q", a)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Module) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Module) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Module(str)
	if err := ModuleValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Module", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Action) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Action) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Action(str)
	if err := ActionValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Action", str)
	}
	return nil
}
