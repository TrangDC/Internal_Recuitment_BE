// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"trec/ent/permission"
	"trec/ent/permissiongroup"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PermissionGroupQuery is the builder for querying PermissionGroup entities.
type PermissionGroupQuery struct {
	config
	limit                            *int
	offset                           *int
	unique                           *bool
	order                            []OrderFunc
	fields                           []string
	predicates                       []predicate.PermissionGroup
	withGroupPermissionParent        *PermissionGroupQuery
	withGroupPermissionChildren      *PermissionGroupQuery
	withPermissionEdges              *PermissionQuery
	modifiers                        []func(*sql.Selector)
	loadTotal                        []func(context.Context, []*PermissionGroup) error
	withNamedGroupPermissionChildren map[string]*PermissionGroupQuery
	withNamedPermissionEdges         map[string]*PermissionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PermissionGroupQuery builder.
func (pgq *PermissionGroupQuery) Where(ps ...predicate.PermissionGroup) *PermissionGroupQuery {
	pgq.predicates = append(pgq.predicates, ps...)
	return pgq
}

// Limit adds a limit step to the query.
func (pgq *PermissionGroupQuery) Limit(limit int) *PermissionGroupQuery {
	pgq.limit = &limit
	return pgq
}

// Offset adds an offset step to the query.
func (pgq *PermissionGroupQuery) Offset(offset int) *PermissionGroupQuery {
	pgq.offset = &offset
	return pgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pgq *PermissionGroupQuery) Unique(unique bool) *PermissionGroupQuery {
	pgq.unique = &unique
	return pgq
}

// Order adds an order step to the query.
func (pgq *PermissionGroupQuery) Order(o ...OrderFunc) *PermissionGroupQuery {
	pgq.order = append(pgq.order, o...)
	return pgq
}

// QueryGroupPermissionParent chains the current query on the "group_permission_parent" edge.
func (pgq *PermissionGroupQuery) QueryGroupPermissionParent() *PermissionGroupQuery {
	query := &PermissionGroupQuery{config: pgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(permissiongroup.Table, permissiongroup.FieldID, selector),
			sqlgraph.To(permissiongroup.Table, permissiongroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permissiongroup.GroupPermissionParentTable, permissiongroup.GroupPermissionParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(pgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroupPermissionChildren chains the current query on the "group_permission_children" edge.
func (pgq *PermissionGroupQuery) QueryGroupPermissionChildren() *PermissionGroupQuery {
	query := &PermissionGroupQuery{config: pgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(permissiongroup.Table, permissiongroup.FieldID, selector),
			sqlgraph.To(permissiongroup.Table, permissiongroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, permissiongroup.GroupPermissionChildrenTable, permissiongroup.GroupPermissionChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(pgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPermissionEdges chains the current query on the "permission_edges" edge.
func (pgq *PermissionGroupQuery) QueryPermissionEdges() *PermissionQuery {
	query := &PermissionQuery{config: pgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(permissiongroup.Table, permissiongroup.FieldID, selector),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, permissiongroup.PermissionEdgesTable, permissiongroup.PermissionEdgesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PermissionGroup entity from the query.
// Returns a *NotFoundError when no PermissionGroup was found.
func (pgq *PermissionGroupQuery) First(ctx context.Context) (*PermissionGroup, error) {
	nodes, err := pgq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{permissiongroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pgq *PermissionGroupQuery) FirstX(ctx context.Context) *PermissionGroup {
	node, err := pgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PermissionGroup ID from the query.
// Returns a *NotFoundError when no PermissionGroup ID was found.
func (pgq *PermissionGroupQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pgq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{permissiongroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pgq *PermissionGroupQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PermissionGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PermissionGroup entity is found.
// Returns a *NotFoundError when no PermissionGroup entities are found.
func (pgq *PermissionGroupQuery) Only(ctx context.Context) (*PermissionGroup, error) {
	nodes, err := pgq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{permissiongroup.Label}
	default:
		return nil, &NotSingularError{permissiongroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pgq *PermissionGroupQuery) OnlyX(ctx context.Context) *PermissionGroup {
	node, err := pgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PermissionGroup ID in the query.
// Returns a *NotSingularError when more than one PermissionGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (pgq *PermissionGroupQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pgq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{permissiongroup.Label}
	default:
		err = &NotSingularError{permissiongroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pgq *PermissionGroupQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PermissionGroups.
func (pgq *PermissionGroupQuery) All(ctx context.Context) ([]*PermissionGroup, error) {
	if err := pgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pgq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pgq *PermissionGroupQuery) AllX(ctx context.Context) []*PermissionGroup {
	nodes, err := pgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PermissionGroup IDs.
func (pgq *PermissionGroupQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := pgq.Select(permissiongroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pgq *PermissionGroupQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pgq *PermissionGroupQuery) Count(ctx context.Context) (int, error) {
	if err := pgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pgq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pgq *PermissionGroupQuery) CountX(ctx context.Context) int {
	count, err := pgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pgq *PermissionGroupQuery) Exist(ctx context.Context) (bool, error) {
	if err := pgq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pgq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pgq *PermissionGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := pgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PermissionGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pgq *PermissionGroupQuery) Clone() *PermissionGroupQuery {
	if pgq == nil {
		return nil
	}
	return &PermissionGroupQuery{
		config:                      pgq.config,
		limit:                       pgq.limit,
		offset:                      pgq.offset,
		order:                       append([]OrderFunc{}, pgq.order...),
		predicates:                  append([]predicate.PermissionGroup{}, pgq.predicates...),
		withGroupPermissionParent:   pgq.withGroupPermissionParent.Clone(),
		withGroupPermissionChildren: pgq.withGroupPermissionChildren.Clone(),
		withPermissionEdges:         pgq.withPermissionEdges.Clone(),
		// clone intermediate query.
		sql:    pgq.sql.Clone(),
		path:   pgq.path,
		unique: pgq.unique,
	}
}

// WithGroupPermissionParent tells the query-builder to eager-load the nodes that are connected to
// the "group_permission_parent" edge. The optional arguments are used to configure the query builder of the edge.
func (pgq *PermissionGroupQuery) WithGroupPermissionParent(opts ...func(*PermissionGroupQuery)) *PermissionGroupQuery {
	query := &PermissionGroupQuery{config: pgq.config}
	for _, opt := range opts {
		opt(query)
	}
	pgq.withGroupPermissionParent = query
	return pgq
}

// WithGroupPermissionChildren tells the query-builder to eager-load the nodes that are connected to
// the "group_permission_children" edge. The optional arguments are used to configure the query builder of the edge.
func (pgq *PermissionGroupQuery) WithGroupPermissionChildren(opts ...func(*PermissionGroupQuery)) *PermissionGroupQuery {
	query := &PermissionGroupQuery{config: pgq.config}
	for _, opt := range opts {
		opt(query)
	}
	pgq.withGroupPermissionChildren = query
	return pgq
}

// WithPermissionEdges tells the query-builder to eager-load the nodes that are connected to
// the "permission_edges" edge. The optional arguments are used to configure the query builder of the edge.
func (pgq *PermissionGroupQuery) WithPermissionEdges(opts ...func(*PermissionQuery)) *PermissionGroupQuery {
	query := &PermissionQuery{config: pgq.config}
	for _, opt := range opts {
		opt(query)
	}
	pgq.withPermissionEdges = query
	return pgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PermissionGroup.Query().
//		GroupBy(permissiongroup.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pgq *PermissionGroupQuery) GroupBy(field string, fields ...string) *PermissionGroupGroupBy {
	grbuild := &PermissionGroupGroupBy{config: pgq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pgq.sqlQuery(ctx), nil
	}
	grbuild.label = permissiongroup.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PermissionGroup.Query().
//		Select(permissiongroup.FieldCreatedAt).
//		Scan(ctx, &v)
func (pgq *PermissionGroupQuery) Select(fields ...string) *PermissionGroupSelect {
	pgq.fields = append(pgq.fields, fields...)
	selbuild := &PermissionGroupSelect{PermissionGroupQuery: pgq}
	selbuild.label = permissiongroup.Label
	selbuild.flds, selbuild.scan = &pgq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a PermissionGroupSelect configured with the given aggregations.
func (pgq *PermissionGroupQuery) Aggregate(fns ...AggregateFunc) *PermissionGroupSelect {
	return pgq.Select().Aggregate(fns...)
}

func (pgq *PermissionGroupQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pgq.fields {
		if !permissiongroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pgq.path != nil {
		prev, err := pgq.path(ctx)
		if err != nil {
			return err
		}
		pgq.sql = prev
	}
	return nil
}

func (pgq *PermissionGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PermissionGroup, error) {
	var (
		nodes       = []*PermissionGroup{}
		_spec       = pgq.querySpec()
		loadedTypes = [3]bool{
			pgq.withGroupPermissionParent != nil,
			pgq.withGroupPermissionChildren != nil,
			pgq.withPermissionEdges != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PermissionGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PermissionGroup{config: pgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pgq.modifiers) > 0 {
		_spec.Modifiers = pgq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pgq.withGroupPermissionParent; query != nil {
		if err := pgq.loadGroupPermissionParent(ctx, query, nodes, nil,
			func(n *PermissionGroup, e *PermissionGroup) { n.Edges.GroupPermissionParent = e }); err != nil {
			return nil, err
		}
	}
	if query := pgq.withGroupPermissionChildren; query != nil {
		if err := pgq.loadGroupPermissionChildren(ctx, query, nodes,
			func(n *PermissionGroup) { n.Edges.GroupPermissionChildren = []*PermissionGroup{} },
			func(n *PermissionGroup, e *PermissionGroup) {
				n.Edges.GroupPermissionChildren = append(n.Edges.GroupPermissionChildren, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pgq.withPermissionEdges; query != nil {
		if err := pgq.loadPermissionEdges(ctx, query, nodes,
			func(n *PermissionGroup) { n.Edges.PermissionEdges = []*Permission{} },
			func(n *PermissionGroup, e *Permission) { n.Edges.PermissionEdges = append(n.Edges.PermissionEdges, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pgq.withNamedGroupPermissionChildren {
		if err := pgq.loadGroupPermissionChildren(ctx, query, nodes,
			func(n *PermissionGroup) { n.appendNamedGroupPermissionChildren(name) },
			func(n *PermissionGroup, e *PermissionGroup) { n.appendNamedGroupPermissionChildren(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pgq.withNamedPermissionEdges {
		if err := pgq.loadPermissionEdges(ctx, query, nodes,
			func(n *PermissionGroup) { n.appendNamedPermissionEdges(name) },
			func(n *PermissionGroup, e *Permission) { n.appendNamedPermissionEdges(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pgq.loadTotal {
		if err := pgq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pgq *PermissionGroupQuery) loadGroupPermissionParent(ctx context.Context, query *PermissionGroupQuery, nodes []*PermissionGroup, init func(*PermissionGroup), assign func(*PermissionGroup, *PermissionGroup)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*PermissionGroup)
	for i := range nodes {
		fk := nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(permissiongroup.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pgq *PermissionGroupQuery) loadGroupPermissionChildren(ctx context.Context, query *PermissionGroupQuery, nodes []*PermissionGroup, init func(*PermissionGroup), assign func(*PermissionGroup, *PermissionGroup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PermissionGroup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.PermissionGroup(func(s *sql.Selector) {
		s.Where(sql.InValues(permissiongroup.GroupPermissionChildrenColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pgq *PermissionGroupQuery) loadPermissionEdges(ctx context.Context, query *PermissionQuery, nodes []*PermissionGroup, init func(*PermissionGroup), assign func(*PermissionGroup, *Permission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PermissionGroup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Permission(func(s *sql.Selector) {
		s.Where(sql.InValues(permissiongroup.PermissionEdgesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.GroupID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pgq *PermissionGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pgq.querySpec()
	if len(pgq.modifiers) > 0 {
		_spec.Modifiers = pgq.modifiers
	}
	_spec.Node.Columns = pgq.fields
	if len(pgq.fields) > 0 {
		_spec.Unique = pgq.unique != nil && *pgq.unique
	}
	return sqlgraph.CountNodes(ctx, pgq.driver, _spec)
}

func (pgq *PermissionGroupQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := pgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (pgq *PermissionGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   permissiongroup.Table,
			Columns: permissiongroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: permissiongroup.FieldID,
			},
		},
		From:   pgq.sql,
		Unique: true,
	}
	if unique := pgq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pgq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissiongroup.FieldID)
		for i := range fields {
			if fields[i] != permissiongroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pgq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pgq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pgq *PermissionGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pgq.driver.Dialect())
	t1 := builder.Table(permissiongroup.Table)
	columns := pgq.fields
	if len(columns) == 0 {
		columns = permissiongroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pgq.sql != nil {
		selector = pgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pgq.unique != nil && *pgq.unique {
		selector.Distinct()
	}
	for _, p := range pgq.predicates {
		p(selector)
	}
	for _, p := range pgq.order {
		p(selector)
	}
	if offset := pgq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pgq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedGroupPermissionChildren tells the query-builder to eager-load the nodes that are connected to the "group_permission_children"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pgq *PermissionGroupQuery) WithNamedGroupPermissionChildren(name string, opts ...func(*PermissionGroupQuery)) *PermissionGroupQuery {
	query := &PermissionGroupQuery{config: pgq.config}
	for _, opt := range opts {
		opt(query)
	}
	if pgq.withNamedGroupPermissionChildren == nil {
		pgq.withNamedGroupPermissionChildren = make(map[string]*PermissionGroupQuery)
	}
	pgq.withNamedGroupPermissionChildren[name] = query
	return pgq
}

// WithNamedPermissionEdges tells the query-builder to eager-load the nodes that are connected to the "permission_edges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pgq *PermissionGroupQuery) WithNamedPermissionEdges(name string, opts ...func(*PermissionQuery)) *PermissionGroupQuery {
	query := &PermissionQuery{config: pgq.config}
	for _, opt := range opts {
		opt(query)
	}
	if pgq.withNamedPermissionEdges == nil {
		pgq.withNamedPermissionEdges = make(map[string]*PermissionQuery)
	}
	pgq.withNamedPermissionEdges[name] = query
	return pgq
}

// PermissionGroupGroupBy is the group-by builder for PermissionGroup entities.
type PermissionGroupGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pggb *PermissionGroupGroupBy) Aggregate(fns ...AggregateFunc) *PermissionGroupGroupBy {
	pggb.fns = append(pggb.fns, fns...)
	return pggb
}

// Scan applies the group-by query and scans the result into the given value.
func (pggb *PermissionGroupGroupBy) Scan(ctx context.Context, v any) error {
	query, err := pggb.path(ctx)
	if err != nil {
		return err
	}
	pggb.sql = query
	return pggb.sqlScan(ctx, v)
}

func (pggb *PermissionGroupGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range pggb.fields {
		if !permissiongroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pggb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pggb *PermissionGroupGroupBy) sqlQuery() *sql.Selector {
	selector := pggb.sql.Select()
	aggregation := make([]string, 0, len(pggb.fns))
	for _, fn := range pggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pggb.fields)+len(pggb.fns))
		for _, f := range pggb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pggb.fields...)...)
}

// PermissionGroupSelect is the builder for selecting fields of PermissionGroup entities.
type PermissionGroupSelect struct {
	*PermissionGroupQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pgs *PermissionGroupSelect) Aggregate(fns ...AggregateFunc) *PermissionGroupSelect {
	pgs.fns = append(pgs.fns, fns...)
	return pgs
}

// Scan applies the selector query and scans the result into the given value.
func (pgs *PermissionGroupSelect) Scan(ctx context.Context, v any) error {
	if err := pgs.prepareQuery(ctx); err != nil {
		return err
	}
	pgs.sql = pgs.PermissionGroupQuery.sqlQuery(ctx)
	return pgs.sqlScan(ctx, v)
}

func (pgs *PermissionGroupSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(pgs.fns))
	for _, fn := range pgs.fns {
		aggregation = append(aggregation, fn(pgs.sql))
	}
	switch n := len(*pgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		pgs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		pgs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := pgs.sql.Query()
	if err := pgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
