// Code generated by ent, DO NOT EDIT.

package outgoingemail

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the outgoingemail type in the database.
	Label = "outgoing_email"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// FieldCc holds the string denoting the cc field in the database.
	FieldCc = "cc"
	// FieldBcc holds the string denoting the bcc field in the database.
	FieldBcc = "bcc"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldCandidateID holds the string denoting the candidate_id field in the database.
	FieldCandidateID = "candidate_id"
	// FieldRecipientType holds the string denoting the recipient_type field in the database.
	FieldRecipientType = "recipient_type"
	// FieldEmailTemplateID holds the string denoting the email_template_id field in the database.
	FieldEmailTemplateID = "email_template_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// EdgeCandidateEdge holds the string denoting the candidate_edge edge name in mutations.
	EdgeCandidateEdge = "candidate_edge"
	// EdgeEventEdge holds the string denoting the event_edge edge name in mutations.
	EdgeEventEdge = "event_edge"
	// Table holds the table name of the outgoingemail in the database.
	Table = "outgoing_emails"
	// CandidateEdgeTable is the table that holds the candidate_edge relation/edge.
	CandidateEdgeTable = "outgoing_emails"
	// CandidateEdgeInverseTable is the table name for the Candidate entity.
	// It exists in this package in order to avoid circular dependency with the "candidate" package.
	CandidateEdgeInverseTable = "candidates"
	// CandidateEdgeColumn is the table column denoting the candidate_edge relation/edge.
	CandidateEdgeColumn = "candidate_id"
	// EventEdgeTable is the table that holds the event_edge relation/edge.
	EventEdgeTable = "outgoing_emails"
	// EventEdgeInverseTable is the table name for the EmailEvent entity.
	// It exists in this package in order to avoid circular dependency with the "emailevent" package.
	EventEdgeInverseTable = "email_events"
	// EventEdgeColumn is the table column denoting the event_edge relation/edge.
	EventEdgeColumn = "event_id"
)

// Columns holds all SQL columns for outgoingemail fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTo,
	FieldCc,
	FieldBcc,
	FieldSubject,
	FieldContent,
	FieldSignature,
	FieldCandidateID,
	FieldRecipientType,
	FieldEmailTemplateID,
	FieldStatus,
	FieldEvent,
	FieldEventID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	SubjectValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
)

// RecipientType defines the type for the "recipient_type" enum field.
type RecipientType string

// RecipientType values.
const (
	RecipientTypeInterviewer       RecipientType = "interviewer"
	RecipientTypeJobRequest        RecipientType = "job_request"
	RecipientTypeJobRecInCharge    RecipientType = "job_rec_in_charge"
	RecipientTypeCdJobRecInCharge  RecipientType = "cd_job_rec_in_charge"
	RecipientTypeHiringTeamManager RecipientType = "hiring_team_manager"
	RecipientTypeHiringApprover    RecipientType = "hiring_approver"
	RecipientTypeHiringTeamMember  RecipientType = "hiring_team_member"
	RecipientTypeRecLeader         RecipientType = "rec_leader"
	RecipientTypeRecMember         RecipientType = "rec_member"
	RecipientTypeRole              RecipientType = "role"
	RecipientTypeCandidate         RecipientType = "candidate"
)

func (rt RecipientType) String() string {
	return string(rt)
}

// RecipientTypeValidator is a validator for the "recipient_type" field enum values. It is called by the builders before save.
func RecipientTypeValidator(rt RecipientType) error {
	switch rt {
	case RecipientTypeInterviewer, RecipientTypeJobRequest, RecipientTypeJobRecInCharge, RecipientTypeCdJobRecInCharge, RecipientTypeHiringTeamManager, RecipientTypeHiringApprover, RecipientTypeHiringTeamMember, RecipientTypeRecLeader, RecipientTypeRecMember, RecipientTypeRole, RecipientTypeCandidate:
		return nil
	default:
		return fmt.Errorf("outgoingemail: invalid enum value for recipient_type field: %q", rt)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending Status = "pending"
	StatusSent    Status = "sent"
	StatusFailed  Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusSent, StatusFailed:
		return nil
	default:
		return fmt.Errorf("outgoingemail: invalid enum value for status field: %q", s)
	}
}

// Event defines the type for the "event" enum field.
type Event string

// Event values.
const (
	EventCandidateAppliedToKiv           Event = "candidate_applied_to_kiv"
	EventCandidateInterviewingToKiv      Event = "candidate_interviewing_to_kiv"
	EventCandidateInterviewingToOffering Event = "candidate_interviewing_to_offering"
	EventCreatedInterview                Event = "created_interview"
	EventUpdatingInterview               Event = "updating_interview"
	EventCancelInterview                 Event = "cancel_interview"
)

func (e Event) String() string {
	return string(e)
}

// EventValidator is a validator for the "event" field enum values. It is called by the builders before save.
func EventValidator(e Event) error {
	switch e {
	case EventCandidateAppliedToKiv, EventCandidateInterviewingToKiv, EventCandidateInterviewingToOffering, EventCreatedInterview, EventUpdatingInterview, EventCancelInterview:
		return nil
	default:
		return fmt.Errorf("outgoingemail: invalid enum value for event field: %q", e)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e RecipientType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *RecipientType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = RecipientType(str)
	if err := RecipientTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid RecipientType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Event) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Event) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Event(str)
	if err := EventValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Event", str)
	}
	return nil
}
