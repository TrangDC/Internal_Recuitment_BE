// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"trec/ent/migrate"

	"trec/ent/attachment"
	"trec/ent/audittrail"
	"trec/ent/candidate"
	"trec/ent/candidateinterview"
	"trec/ent/candidateinterviewer"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/candidatejobstep"
	"trec/ent/hiringjob"
	"trec/ent/skill"
	"trec/ent/team"
	"trec/ent/teammanager"
	"trec/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Attachment is the client for interacting with the Attachment builders.
	Attachment *AttachmentClient
	// AuditTrail is the client for interacting with the AuditTrail builders.
	AuditTrail *AuditTrailClient
	// Candidate is the client for interacting with the Candidate builders.
	Candidate *CandidateClient
	// CandidateInterview is the client for interacting with the CandidateInterview builders.
	CandidateInterview *CandidateInterviewClient
	// CandidateInterviewer is the client for interacting with the CandidateInterviewer builders.
	CandidateInterviewer *CandidateInterviewerClient
	// CandidateJob is the client for interacting with the CandidateJob builders.
	CandidateJob *CandidateJobClient
	// CandidateJobFeedback is the client for interacting with the CandidateJobFeedback builders.
	CandidateJobFeedback *CandidateJobFeedbackClient
	// CandidateJobStep is the client for interacting with the CandidateJobStep builders.
	CandidateJobStep *CandidateJobStepClient
	// HiringJob is the client for interacting with the HiringJob builders.
	HiringJob *HiringJobClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// Team is the client for interacting with the Team builders.
	Team *TeamClient
	// TeamManager is the client for interacting with the TeamManager builders.
	TeamManager *TeamManagerClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Attachment = NewAttachmentClient(c.config)
	c.AuditTrail = NewAuditTrailClient(c.config)
	c.Candidate = NewCandidateClient(c.config)
	c.CandidateInterview = NewCandidateInterviewClient(c.config)
	c.CandidateInterviewer = NewCandidateInterviewerClient(c.config)
	c.CandidateJob = NewCandidateJobClient(c.config)
	c.CandidateJobFeedback = NewCandidateJobFeedbackClient(c.config)
	c.CandidateJobStep = NewCandidateJobStepClient(c.config)
	c.HiringJob = NewHiringJobClient(c.config)
	c.Skill = NewSkillClient(c.config)
	c.Team = NewTeamClient(c.config)
	c.TeamManager = NewTeamManagerClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Attachment:           NewAttachmentClient(cfg),
		AuditTrail:           NewAuditTrailClient(cfg),
		Candidate:            NewCandidateClient(cfg),
		CandidateInterview:   NewCandidateInterviewClient(cfg),
		CandidateInterviewer: NewCandidateInterviewerClient(cfg),
		CandidateJob:         NewCandidateJobClient(cfg),
		CandidateJobFeedback: NewCandidateJobFeedbackClient(cfg),
		CandidateJobStep:     NewCandidateJobStepClient(cfg),
		HiringJob:            NewHiringJobClient(cfg),
		Skill:                NewSkillClient(cfg),
		Team:                 NewTeamClient(cfg),
		TeamManager:          NewTeamManagerClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Attachment:           NewAttachmentClient(cfg),
		AuditTrail:           NewAuditTrailClient(cfg),
		Candidate:            NewCandidateClient(cfg),
		CandidateInterview:   NewCandidateInterviewClient(cfg),
		CandidateInterviewer: NewCandidateInterviewerClient(cfg),
		CandidateJob:         NewCandidateJobClient(cfg),
		CandidateJobFeedback: NewCandidateJobFeedbackClient(cfg),
		CandidateJobStep:     NewCandidateJobStepClient(cfg),
		HiringJob:            NewHiringJobClient(cfg),
		Skill:                NewSkillClient(cfg),
		Team:                 NewTeamClient(cfg),
		TeamManager:          NewTeamManagerClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Attachment.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Attachment.Use(hooks...)
	c.AuditTrail.Use(hooks...)
	c.Candidate.Use(hooks...)
	c.CandidateInterview.Use(hooks...)
	c.CandidateInterviewer.Use(hooks...)
	c.CandidateJob.Use(hooks...)
	c.CandidateJobFeedback.Use(hooks...)
	c.CandidateJobStep.Use(hooks...)
	c.HiringJob.Use(hooks...)
	c.Skill.Use(hooks...)
	c.Team.Use(hooks...)
	c.TeamManager.Use(hooks...)
	c.User.Use(hooks...)
}

// AttachmentClient is a client for the Attachment schema.
type AttachmentClient struct {
	config
}

// NewAttachmentClient returns a client for the Attachment from the given config.
func NewAttachmentClient(c config) *AttachmentClient {
	return &AttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attachment.Hooks(f(g(h())))`.
func (c *AttachmentClient) Use(hooks ...Hook) {
	c.hooks.Attachment = append(c.hooks.Attachment, hooks...)
}

// Create returns a builder for creating a Attachment entity.
func (c *AttachmentClient) Create() *AttachmentCreate {
	mutation := newAttachmentMutation(c.config, OpCreate)
	return &AttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attachment entities.
func (c *AttachmentClient) CreateBulk(builders ...*AttachmentCreate) *AttachmentCreateBulk {
	return &AttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attachment.
func (c *AttachmentClient) Update() *AttachmentUpdate {
	mutation := newAttachmentMutation(c.config, OpUpdate)
	return &AttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttachmentClient) UpdateOne(a *Attachment) *AttachmentUpdateOne {
	mutation := newAttachmentMutation(c.config, OpUpdateOne, withAttachment(a))
	return &AttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttachmentClient) UpdateOneID(id uuid.UUID) *AttachmentUpdateOne {
	mutation := newAttachmentMutation(c.config, OpUpdateOne, withAttachmentID(id))
	return &AttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attachment.
func (c *AttachmentClient) Delete() *AttachmentDelete {
	mutation := newAttachmentMutation(c.config, OpDelete)
	return &AttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttachmentClient) DeleteOne(a *Attachment) *AttachmentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttachmentClient) DeleteOneID(id uuid.UUID) *AttachmentDeleteOne {
	builder := c.Delete().Where(attachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttachmentDeleteOne{builder}
}

// Query returns a query builder for Attachment.
func (c *AttachmentClient) Query() *AttachmentQuery {
	return &AttachmentQuery{
		config: c.config,
	}
}

// Get returns a Attachment entity by its id.
func (c *AttachmentClient) Get(ctx context.Context, id uuid.UUID) (*Attachment, error) {
	return c.Query().Where(attachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttachmentClient) GetX(ctx context.Context, id uuid.UUID) *Attachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateJob queries the candidate_job edge of a Attachment.
func (c *AttachmentClient) QueryCandidateJob(a *Attachment) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateJobTable, attachment.CandidateJobColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobFeedback queries the candidate_job_feedback edge of a Attachment.
func (c *AttachmentClient) QueryCandidateJobFeedback(a *Attachment) *CandidateJobFeedbackQuery {
	query := &CandidateJobFeedbackQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidatejobfeedback.Table, candidatejobfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateJobFeedbackTable, attachment.CandidateJobFeedbackColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateInterview queries the candidate_interview edge of a Attachment.
func (c *AttachmentClient) QueryCandidateInterview(a *Attachment) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateInterviewTable, attachment.CandidateInterviewColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttachmentClient) Hooks() []Hook {
	return c.hooks.Attachment
}

// AuditTrailClient is a client for the AuditTrail schema.
type AuditTrailClient struct {
	config
}

// NewAuditTrailClient returns a client for the AuditTrail from the given config.
func NewAuditTrailClient(c config) *AuditTrailClient {
	return &AuditTrailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audittrail.Hooks(f(g(h())))`.
func (c *AuditTrailClient) Use(hooks ...Hook) {
	c.hooks.AuditTrail = append(c.hooks.AuditTrail, hooks...)
}

// Create returns a builder for creating a AuditTrail entity.
func (c *AuditTrailClient) Create() *AuditTrailCreate {
	mutation := newAuditTrailMutation(c.config, OpCreate)
	return &AuditTrailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuditTrail entities.
func (c *AuditTrailClient) CreateBulk(builders ...*AuditTrailCreate) *AuditTrailCreateBulk {
	return &AuditTrailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuditTrail.
func (c *AuditTrailClient) Update() *AuditTrailUpdate {
	mutation := newAuditTrailMutation(c.config, OpUpdate)
	return &AuditTrailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditTrailClient) UpdateOne(at *AuditTrail) *AuditTrailUpdateOne {
	mutation := newAuditTrailMutation(c.config, OpUpdateOne, withAuditTrail(at))
	return &AuditTrailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditTrailClient) UpdateOneID(id uuid.UUID) *AuditTrailUpdateOne {
	mutation := newAuditTrailMutation(c.config, OpUpdateOne, withAuditTrailID(id))
	return &AuditTrailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuditTrail.
func (c *AuditTrailClient) Delete() *AuditTrailDelete {
	mutation := newAuditTrailMutation(c.config, OpDelete)
	return &AuditTrailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditTrailClient) DeleteOne(at *AuditTrail) *AuditTrailDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditTrailClient) DeleteOneID(id uuid.UUID) *AuditTrailDeleteOne {
	builder := c.Delete().Where(audittrail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditTrailDeleteOne{builder}
}

// Query returns a query builder for AuditTrail.
func (c *AuditTrailClient) Query() *AuditTrailQuery {
	return &AuditTrailQuery{
		config: c.config,
	}
}

// Get returns a AuditTrail entity by its id.
func (c *AuditTrailClient) Get(ctx context.Context, id uuid.UUID) (*AuditTrail, error) {
	return c.Query().Where(audittrail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditTrailClient) GetX(ctx context.Context, id uuid.UUID) *AuditTrail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEdge queries the user_edge edge of a AuditTrail.
func (c *AuditTrailClient) QueryUserEdge(at *AuditTrail) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(audittrail.Table, audittrail.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, audittrail.UserEdgeTable, audittrail.UserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuditTrailClient) Hooks() []Hook {
	return c.hooks.AuditTrail
}

// CandidateClient is a client for the Candidate schema.
type CandidateClient struct {
	config
}

// NewCandidateClient returns a client for the Candidate from the given config.
func NewCandidateClient(c config) *CandidateClient {
	return &CandidateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidate.Hooks(f(g(h())))`.
func (c *CandidateClient) Use(hooks ...Hook) {
	c.hooks.Candidate = append(c.hooks.Candidate, hooks...)
}

// Create returns a builder for creating a Candidate entity.
func (c *CandidateClient) Create() *CandidateCreate {
	mutation := newCandidateMutation(c.config, OpCreate)
	return &CandidateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Candidate entities.
func (c *CandidateClient) CreateBulk(builders ...*CandidateCreate) *CandidateCreateBulk {
	return &CandidateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Candidate.
func (c *CandidateClient) Update() *CandidateUpdate {
	mutation := newCandidateMutation(c.config, OpUpdate)
	return &CandidateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateClient) UpdateOne(ca *Candidate) *CandidateUpdateOne {
	mutation := newCandidateMutation(c.config, OpUpdateOne, withCandidate(ca))
	return &CandidateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateClient) UpdateOneID(id uuid.UUID) *CandidateUpdateOne {
	mutation := newCandidateMutation(c.config, OpUpdateOne, withCandidateID(id))
	return &CandidateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Candidate.
func (c *CandidateClient) Delete() *CandidateDelete {
	mutation := newCandidateMutation(c.config, OpDelete)
	return &CandidateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateClient) DeleteOne(ca *Candidate) *CandidateDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateClient) DeleteOneID(id uuid.UUID) *CandidateDeleteOne {
	builder := c.Delete().Where(candidate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateDeleteOne{builder}
}

// Query returns a query builder for Candidate.
func (c *CandidateClient) Query() *CandidateQuery {
	return &CandidateQuery{
		config: c.config,
	}
}

// Get returns a Candidate entity by its id.
func (c *CandidateClient) Get(ctx context.Context, id uuid.UUID) (*Candidate, error) {
	return c.Query().Where(candidate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateClient) GetX(ctx context.Context, id uuid.UUID) *Candidate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateJobEdges queries the candidate_job_edges edge of a Candidate.
func (c *CandidateClient) QueryCandidateJobEdges(ca *Candidate) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.CandidateJobEdgesTable, candidate.CandidateJobEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferenceUserEdge queries the reference_user_edge edge of a Candidate.
func (c *CandidateClient) QueryReferenceUserEdge(ca *Candidate) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidate.ReferenceUserEdgeTable, candidate.ReferenceUserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateClient) Hooks() []Hook {
	return c.hooks.Candidate
}

// CandidateInterviewClient is a client for the CandidateInterview schema.
type CandidateInterviewClient struct {
	config
}

// NewCandidateInterviewClient returns a client for the CandidateInterview from the given config.
func NewCandidateInterviewClient(c config) *CandidateInterviewClient {
	return &CandidateInterviewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidateinterview.Hooks(f(g(h())))`.
func (c *CandidateInterviewClient) Use(hooks ...Hook) {
	c.hooks.CandidateInterview = append(c.hooks.CandidateInterview, hooks...)
}

// Create returns a builder for creating a CandidateInterview entity.
func (c *CandidateInterviewClient) Create() *CandidateInterviewCreate {
	mutation := newCandidateInterviewMutation(c.config, OpCreate)
	return &CandidateInterviewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateInterview entities.
func (c *CandidateInterviewClient) CreateBulk(builders ...*CandidateInterviewCreate) *CandidateInterviewCreateBulk {
	return &CandidateInterviewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateInterview.
func (c *CandidateInterviewClient) Update() *CandidateInterviewUpdate {
	mutation := newCandidateInterviewMutation(c.config, OpUpdate)
	return &CandidateInterviewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateInterviewClient) UpdateOne(ci *CandidateInterview) *CandidateInterviewUpdateOne {
	mutation := newCandidateInterviewMutation(c.config, OpUpdateOne, withCandidateInterview(ci))
	return &CandidateInterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateInterviewClient) UpdateOneID(id uuid.UUID) *CandidateInterviewUpdateOne {
	mutation := newCandidateInterviewMutation(c.config, OpUpdateOne, withCandidateInterviewID(id))
	return &CandidateInterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateInterview.
func (c *CandidateInterviewClient) Delete() *CandidateInterviewDelete {
	mutation := newCandidateInterviewMutation(c.config, OpDelete)
	return &CandidateInterviewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateInterviewClient) DeleteOne(ci *CandidateInterview) *CandidateInterviewDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateInterviewClient) DeleteOneID(id uuid.UUID) *CandidateInterviewDeleteOne {
	builder := c.Delete().Where(candidateinterview.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateInterviewDeleteOne{builder}
}

// Query returns a query builder for CandidateInterview.
func (c *CandidateInterviewClient) Query() *CandidateInterviewQuery {
	return &CandidateInterviewQuery{
		config: c.config,
	}
}

// Get returns a CandidateInterview entity by its id.
func (c *CandidateInterviewClient) Get(ctx context.Context, id uuid.UUID) (*CandidateInterview, error) {
	return c.Query().Where(candidateinterview.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateInterviewClient) GetX(ctx context.Context, id uuid.UUID) *CandidateInterview {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateJobEdge queries the candidate_job_edge edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryCandidateJobEdge(ci *CandidateInterview) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidateinterview.CandidateJobEdgeTable, candidateinterview.CandidateJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryAttachmentEdges(ci *CandidateInterview) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidateinterview.AttachmentEdgesTable, candidateinterview.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviewerEdges queries the interviewer_edges edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryInterviewerEdges(ci *CandidateInterview) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, candidateinterview.InterviewerEdgesTable, candidateinterview.InterviewerEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedByEdge queries the created_by_edge edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryCreatedByEdge(ci *CandidateInterview) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidateinterview.CreatedByEdgeTable, candidateinterview.CreatedByEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserInterviewers queries the user_interviewers edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryUserInterviewers(ci *CandidateInterview) *CandidateInterviewerQuery {
	query := &CandidateInterviewerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(candidateinterviewer.Table, candidateinterviewer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, candidateinterview.UserInterviewersTable, candidateinterview.UserInterviewersColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateInterviewClient) Hooks() []Hook {
	return c.hooks.CandidateInterview
}

// CandidateInterviewerClient is a client for the CandidateInterviewer schema.
type CandidateInterviewerClient struct {
	config
}

// NewCandidateInterviewerClient returns a client for the CandidateInterviewer from the given config.
func NewCandidateInterviewerClient(c config) *CandidateInterviewerClient {
	return &CandidateInterviewerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidateinterviewer.Hooks(f(g(h())))`.
func (c *CandidateInterviewerClient) Use(hooks ...Hook) {
	c.hooks.CandidateInterviewer = append(c.hooks.CandidateInterviewer, hooks...)
}

// Create returns a builder for creating a CandidateInterviewer entity.
func (c *CandidateInterviewerClient) Create() *CandidateInterviewerCreate {
	mutation := newCandidateInterviewerMutation(c.config, OpCreate)
	return &CandidateInterviewerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateInterviewer entities.
func (c *CandidateInterviewerClient) CreateBulk(builders ...*CandidateInterviewerCreate) *CandidateInterviewerCreateBulk {
	return &CandidateInterviewerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateInterviewer.
func (c *CandidateInterviewerClient) Update() *CandidateInterviewerUpdate {
	mutation := newCandidateInterviewerMutation(c.config, OpUpdate)
	return &CandidateInterviewerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateInterviewerClient) UpdateOne(ci *CandidateInterviewer) *CandidateInterviewerUpdateOne {
	mutation := newCandidateInterviewerMutation(c.config, OpUpdateOne, withCandidateInterviewer(ci))
	return &CandidateInterviewerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateInterviewerClient) UpdateOneID(id uuid.UUID) *CandidateInterviewerUpdateOne {
	mutation := newCandidateInterviewerMutation(c.config, OpUpdateOne, withCandidateInterviewerID(id))
	return &CandidateInterviewerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateInterviewer.
func (c *CandidateInterviewerClient) Delete() *CandidateInterviewerDelete {
	mutation := newCandidateInterviewerMutation(c.config, OpDelete)
	return &CandidateInterviewerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateInterviewerClient) DeleteOne(ci *CandidateInterviewer) *CandidateInterviewerDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateInterviewerClient) DeleteOneID(id uuid.UUID) *CandidateInterviewerDeleteOne {
	builder := c.Delete().Where(candidateinterviewer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateInterviewerDeleteOne{builder}
}

// Query returns a query builder for CandidateInterviewer.
func (c *CandidateInterviewerClient) Query() *CandidateInterviewerQuery {
	return &CandidateInterviewerQuery{
		config: c.config,
	}
}

// Get returns a CandidateInterviewer entity by its id.
func (c *CandidateInterviewerClient) Get(ctx context.Context, id uuid.UUID) (*CandidateInterviewer, error) {
	return c.Query().Where(candidateinterviewer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateInterviewerClient) GetX(ctx context.Context, id uuid.UUID) *CandidateInterviewer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEdge queries the user_edge edge of a CandidateInterviewer.
func (c *CandidateInterviewerClient) QueryUserEdge(ci *CandidateInterviewer) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterviewer.Table, candidateinterviewer.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, candidateinterviewer.UserEdgeTable, candidateinterviewer.UserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviewEdge queries the interview_edge edge of a CandidateInterviewer.
func (c *CandidateInterviewerClient) QueryInterviewEdge(ci *CandidateInterviewer) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterviewer.Table, candidateinterviewer.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, candidateinterviewer.InterviewEdgeTable, candidateinterviewer.InterviewEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateInterviewerClient) Hooks() []Hook {
	return c.hooks.CandidateInterviewer
}

// CandidateJobClient is a client for the CandidateJob schema.
type CandidateJobClient struct {
	config
}

// NewCandidateJobClient returns a client for the CandidateJob from the given config.
func NewCandidateJobClient(c config) *CandidateJobClient {
	return &CandidateJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidatejob.Hooks(f(g(h())))`.
func (c *CandidateJobClient) Use(hooks ...Hook) {
	c.hooks.CandidateJob = append(c.hooks.CandidateJob, hooks...)
}

// Create returns a builder for creating a CandidateJob entity.
func (c *CandidateJobClient) Create() *CandidateJobCreate {
	mutation := newCandidateJobMutation(c.config, OpCreate)
	return &CandidateJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateJob entities.
func (c *CandidateJobClient) CreateBulk(builders ...*CandidateJobCreate) *CandidateJobCreateBulk {
	return &CandidateJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateJob.
func (c *CandidateJobClient) Update() *CandidateJobUpdate {
	mutation := newCandidateJobMutation(c.config, OpUpdate)
	return &CandidateJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateJobClient) UpdateOne(cj *CandidateJob) *CandidateJobUpdateOne {
	mutation := newCandidateJobMutation(c.config, OpUpdateOne, withCandidateJob(cj))
	return &CandidateJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateJobClient) UpdateOneID(id uuid.UUID) *CandidateJobUpdateOne {
	mutation := newCandidateJobMutation(c.config, OpUpdateOne, withCandidateJobID(id))
	return &CandidateJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateJob.
func (c *CandidateJobClient) Delete() *CandidateJobDelete {
	mutation := newCandidateJobMutation(c.config, OpDelete)
	return &CandidateJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateJobClient) DeleteOne(cj *CandidateJob) *CandidateJobDeleteOne {
	return c.DeleteOneID(cj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateJobClient) DeleteOneID(id uuid.UUID) *CandidateJobDeleteOne {
	builder := c.Delete().Where(candidatejob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateJobDeleteOne{builder}
}

// Query returns a query builder for CandidateJob.
func (c *CandidateJobClient) Query() *CandidateJobQuery {
	return &CandidateJobQuery{
		config: c.config,
	}
}

// Get returns a CandidateJob entity by its id.
func (c *CandidateJobClient) Get(ctx context.Context, id uuid.UUID) (*CandidateJob, error) {
	return c.Query().Where(candidatejob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateJobClient) GetX(ctx context.Context, id uuid.UUID) *CandidateJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateJob.
func (c *CandidateJobClient) QueryAttachmentEdges(cj *CandidateJob) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.AttachmentEdgesTable, candidatejob.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringJobEdge queries the hiring_job_edge edge of a CandidateJob.
func (c *CandidateJobClient) QueryHiringJobEdge(cj *CandidateJob) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejob.HiringJobEdgeTable, candidatejob.HiringJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobFeedback queries the candidate_job_feedback edge of a CandidateJob.
func (c *CandidateJobClient) QueryCandidateJobFeedback(cj *CandidateJob) *CandidateJobFeedbackQuery {
	query := &CandidateJobFeedbackQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(candidatejobfeedback.Table, candidatejobfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.CandidateJobFeedbackTable, candidatejob.CandidateJobFeedbackColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEdge queries the candidate_edge edge of a CandidateJob.
func (c *CandidateJobClient) QueryCandidateEdge(cj *CandidateJob) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejob.CandidateEdgeTable, candidatejob.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobInterview queries the candidate_job_interview edge of a CandidateJob.
func (c *CandidateJobClient) QueryCandidateJobInterview(cj *CandidateJob) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.CandidateJobInterviewTable, candidatejob.CandidateJobInterviewColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedByEdge queries the created_by_edge edge of a CandidateJob.
func (c *CandidateJobClient) QueryCreatedByEdge(cj *CandidateJob) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejob.CreatedByEdgeTable, candidatejob.CreatedByEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobStep queries the candidate_job_step edge of a CandidateJob.
func (c *CandidateJobClient) QueryCandidateJobStep(cj *CandidateJob) *CandidateJobStepQuery {
	query := &CandidateJobStepQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(candidatejobstep.Table, candidatejobstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.CandidateJobStepTable, candidatejob.CandidateJobStepColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateJobClient) Hooks() []Hook {
	return c.hooks.CandidateJob
}

// CandidateJobFeedbackClient is a client for the CandidateJobFeedback schema.
type CandidateJobFeedbackClient struct {
	config
}

// NewCandidateJobFeedbackClient returns a client for the CandidateJobFeedback from the given config.
func NewCandidateJobFeedbackClient(c config) *CandidateJobFeedbackClient {
	return &CandidateJobFeedbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidatejobfeedback.Hooks(f(g(h())))`.
func (c *CandidateJobFeedbackClient) Use(hooks ...Hook) {
	c.hooks.CandidateJobFeedback = append(c.hooks.CandidateJobFeedback, hooks...)
}

// Create returns a builder for creating a CandidateJobFeedback entity.
func (c *CandidateJobFeedbackClient) Create() *CandidateJobFeedbackCreate {
	mutation := newCandidateJobFeedbackMutation(c.config, OpCreate)
	return &CandidateJobFeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateJobFeedback entities.
func (c *CandidateJobFeedbackClient) CreateBulk(builders ...*CandidateJobFeedbackCreate) *CandidateJobFeedbackCreateBulk {
	return &CandidateJobFeedbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) Update() *CandidateJobFeedbackUpdate {
	mutation := newCandidateJobFeedbackMutation(c.config, OpUpdate)
	return &CandidateJobFeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateJobFeedbackClient) UpdateOne(cjf *CandidateJobFeedback) *CandidateJobFeedbackUpdateOne {
	mutation := newCandidateJobFeedbackMutation(c.config, OpUpdateOne, withCandidateJobFeedback(cjf))
	return &CandidateJobFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateJobFeedbackClient) UpdateOneID(id uuid.UUID) *CandidateJobFeedbackUpdateOne {
	mutation := newCandidateJobFeedbackMutation(c.config, OpUpdateOne, withCandidateJobFeedbackID(id))
	return &CandidateJobFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) Delete() *CandidateJobFeedbackDelete {
	mutation := newCandidateJobFeedbackMutation(c.config, OpDelete)
	return &CandidateJobFeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateJobFeedbackClient) DeleteOne(cjf *CandidateJobFeedback) *CandidateJobFeedbackDeleteOne {
	return c.DeleteOneID(cjf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateJobFeedbackClient) DeleteOneID(id uuid.UUID) *CandidateJobFeedbackDeleteOne {
	builder := c.Delete().Where(candidatejobfeedback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateJobFeedbackDeleteOne{builder}
}

// Query returns a query builder for CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) Query() *CandidateJobFeedbackQuery {
	return &CandidateJobFeedbackQuery{
		config: c.config,
	}
}

// Get returns a CandidateJobFeedback entity by its id.
func (c *CandidateJobFeedbackClient) Get(ctx context.Context, id uuid.UUID) (*CandidateJobFeedback, error) {
	return c.Query().Where(candidatejobfeedback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateJobFeedbackClient) GetX(ctx context.Context, id uuid.UUID) *CandidateJobFeedback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreatedByEdge queries the created_by_edge edge of a CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) QueryCreatedByEdge(cjf *CandidateJobFeedback) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cjf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejobfeedback.Table, candidatejobfeedback.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejobfeedback.CreatedByEdgeTable, candidatejobfeedback.CreatedByEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cjf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobEdge queries the candidate_job_edge edge of a CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) QueryCandidateJobEdge(cjf *CandidateJobFeedback) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cjf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejobfeedback.Table, candidatejobfeedback.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejobfeedback.CandidateJobEdgeTable, candidatejobfeedback.CandidateJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cjf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) QueryAttachmentEdges(cjf *CandidateJobFeedback) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cjf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejobfeedback.Table, candidatejobfeedback.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejobfeedback.AttachmentEdgesTable, candidatejobfeedback.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(cjf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateJobFeedbackClient) Hooks() []Hook {
	return c.hooks.CandidateJobFeedback
}

// CandidateJobStepClient is a client for the CandidateJobStep schema.
type CandidateJobStepClient struct {
	config
}

// NewCandidateJobStepClient returns a client for the CandidateJobStep from the given config.
func NewCandidateJobStepClient(c config) *CandidateJobStepClient {
	return &CandidateJobStepClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidatejobstep.Hooks(f(g(h())))`.
func (c *CandidateJobStepClient) Use(hooks ...Hook) {
	c.hooks.CandidateJobStep = append(c.hooks.CandidateJobStep, hooks...)
}

// Create returns a builder for creating a CandidateJobStep entity.
func (c *CandidateJobStepClient) Create() *CandidateJobStepCreate {
	mutation := newCandidateJobStepMutation(c.config, OpCreate)
	return &CandidateJobStepCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateJobStep entities.
func (c *CandidateJobStepClient) CreateBulk(builders ...*CandidateJobStepCreate) *CandidateJobStepCreateBulk {
	return &CandidateJobStepCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateJobStep.
func (c *CandidateJobStepClient) Update() *CandidateJobStepUpdate {
	mutation := newCandidateJobStepMutation(c.config, OpUpdate)
	return &CandidateJobStepUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateJobStepClient) UpdateOne(cjs *CandidateJobStep) *CandidateJobStepUpdateOne {
	mutation := newCandidateJobStepMutation(c.config, OpUpdateOne, withCandidateJobStep(cjs))
	return &CandidateJobStepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateJobStepClient) UpdateOneID(id uuid.UUID) *CandidateJobStepUpdateOne {
	mutation := newCandidateJobStepMutation(c.config, OpUpdateOne, withCandidateJobStepID(id))
	return &CandidateJobStepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateJobStep.
func (c *CandidateJobStepClient) Delete() *CandidateJobStepDelete {
	mutation := newCandidateJobStepMutation(c.config, OpDelete)
	return &CandidateJobStepDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateJobStepClient) DeleteOne(cjs *CandidateJobStep) *CandidateJobStepDeleteOne {
	return c.DeleteOneID(cjs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateJobStepClient) DeleteOneID(id uuid.UUID) *CandidateJobStepDeleteOne {
	builder := c.Delete().Where(candidatejobstep.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateJobStepDeleteOne{builder}
}

// Query returns a query builder for CandidateJobStep.
func (c *CandidateJobStepClient) Query() *CandidateJobStepQuery {
	return &CandidateJobStepQuery{
		config: c.config,
	}
}

// Get returns a CandidateJobStep entity by its id.
func (c *CandidateJobStepClient) Get(ctx context.Context, id uuid.UUID) (*CandidateJobStep, error) {
	return c.Query().Where(candidatejobstep.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateJobStepClient) GetX(ctx context.Context, id uuid.UUID) *CandidateJobStep {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateJobEdge queries the candidate_job_edge edge of a CandidateJobStep.
func (c *CandidateJobStepClient) QueryCandidateJobEdge(cjs *CandidateJobStep) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cjs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejobstep.Table, candidatejobstep.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejobstep.CandidateJobEdgeTable, candidatejobstep.CandidateJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cjs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateJobStepClient) Hooks() []Hook {
	return c.hooks.CandidateJobStep
}

// HiringJobClient is a client for the HiringJob schema.
type HiringJobClient struct {
	config
}

// NewHiringJobClient returns a client for the HiringJob from the given config.
func NewHiringJobClient(c config) *HiringJobClient {
	return &HiringJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hiringjob.Hooks(f(g(h())))`.
func (c *HiringJobClient) Use(hooks ...Hook) {
	c.hooks.HiringJob = append(c.hooks.HiringJob, hooks...)
}

// Create returns a builder for creating a HiringJob entity.
func (c *HiringJobClient) Create() *HiringJobCreate {
	mutation := newHiringJobMutation(c.config, OpCreate)
	return &HiringJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HiringJob entities.
func (c *HiringJobClient) CreateBulk(builders ...*HiringJobCreate) *HiringJobCreateBulk {
	return &HiringJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HiringJob.
func (c *HiringJobClient) Update() *HiringJobUpdate {
	mutation := newHiringJobMutation(c.config, OpUpdate)
	return &HiringJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HiringJobClient) UpdateOne(hj *HiringJob) *HiringJobUpdateOne {
	mutation := newHiringJobMutation(c.config, OpUpdateOne, withHiringJob(hj))
	return &HiringJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HiringJobClient) UpdateOneID(id uuid.UUID) *HiringJobUpdateOne {
	mutation := newHiringJobMutation(c.config, OpUpdateOne, withHiringJobID(id))
	return &HiringJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HiringJob.
func (c *HiringJobClient) Delete() *HiringJobDelete {
	mutation := newHiringJobMutation(c.config, OpDelete)
	return &HiringJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HiringJobClient) DeleteOne(hj *HiringJob) *HiringJobDeleteOne {
	return c.DeleteOneID(hj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HiringJobClient) DeleteOneID(id uuid.UUID) *HiringJobDeleteOne {
	builder := c.Delete().Where(hiringjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HiringJobDeleteOne{builder}
}

// Query returns a query builder for HiringJob.
func (c *HiringJobClient) Query() *HiringJobQuery {
	return &HiringJobQuery{
		config: c.config,
	}
}

// Get returns a HiringJob entity by its id.
func (c *HiringJobClient) Get(ctx context.Context, id uuid.UUID) (*HiringJob, error) {
	return c.Query().Where(hiringjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HiringJobClient) GetX(ctx context.Context, id uuid.UUID) *HiringJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwnerEdge queries the owner_edge edge of a HiringJob.
func (c *HiringJobClient) QueryOwnerEdge(hj *HiringJob) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hiringjob.OwnerEdgeTable, hiringjob.OwnerEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamEdge queries the team_edge edge of a HiringJob.
func (c *HiringJobClient) QueryTeamEdge(hj *HiringJob) *TeamQuery {
	query := &TeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hiringjob.TeamEdgeTable, hiringjob.TeamEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobEdges queries the candidate_job_edges edge of a HiringJob.
func (c *HiringJobClient) QueryCandidateJobEdges(hj *HiringJob) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hiringjob.CandidateJobEdgesTable, hiringjob.CandidateJobEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HiringJobClient) Hooks() []Hook {
	return c.hooks.HiringJob
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id uuid.UUID) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id uuid.UUID) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id uuid.UUID) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id uuid.UUID) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// TeamClient is a client for the Team schema.
type TeamClient struct {
	config
}

// NewTeamClient returns a client for the Team from the given config.
func NewTeamClient(c config) *TeamClient {
	return &TeamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `team.Hooks(f(g(h())))`.
func (c *TeamClient) Use(hooks ...Hook) {
	c.hooks.Team = append(c.hooks.Team, hooks...)
}

// Create returns a builder for creating a Team entity.
func (c *TeamClient) Create() *TeamCreate {
	mutation := newTeamMutation(c.config, OpCreate)
	return &TeamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Team entities.
func (c *TeamClient) CreateBulk(builders ...*TeamCreate) *TeamCreateBulk {
	return &TeamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Team.
func (c *TeamClient) Update() *TeamUpdate {
	mutation := newTeamMutation(c.config, OpUpdate)
	return &TeamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamClient) UpdateOne(t *Team) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeam(t))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamClient) UpdateOneID(id uuid.UUID) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeamID(id))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Team.
func (c *TeamClient) Delete() *TeamDelete {
	mutation := newTeamMutation(c.config, OpDelete)
	return &TeamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeamClient) DeleteOne(t *Team) *TeamDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeamClient) DeleteOneID(id uuid.UUID) *TeamDeleteOne {
	builder := c.Delete().Where(team.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamDeleteOne{builder}
}

// Query returns a query builder for Team.
func (c *TeamClient) Query() *TeamQuery {
	return &TeamQuery{
		config: c.config,
	}
}

// Get returns a Team entity by its id.
func (c *TeamClient) Get(ctx context.Context, id uuid.UUID) (*Team, error) {
	return c.Query().Where(team.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamClient) GetX(ctx context.Context, id uuid.UUID) *Team {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEdges queries the user_edges edge of a Team.
func (c *TeamClient) QueryUserEdges(t *Team) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, team.UserEdgesTable, team.UserEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamJobEdges queries the team_job_edges edge of a Team.
func (c *TeamClient) QueryTeamJobEdges(t *Team) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, team.TeamJobEdgesTable, team.TeamJobEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserTeams queries the user_teams edge of a Team.
func (c *TeamClient) QueryUserTeams(t *Team) *TeamManagerQuery {
	query := &TeamManagerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(teammanager.Table, teammanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, team.UserTeamsTable, team.UserTeamsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeamClient) Hooks() []Hook {
	return c.hooks.Team
}

// TeamManagerClient is a client for the TeamManager schema.
type TeamManagerClient struct {
	config
}

// NewTeamManagerClient returns a client for the TeamManager from the given config.
func NewTeamManagerClient(c config) *TeamManagerClient {
	return &TeamManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teammanager.Hooks(f(g(h())))`.
func (c *TeamManagerClient) Use(hooks ...Hook) {
	c.hooks.TeamManager = append(c.hooks.TeamManager, hooks...)
}

// Create returns a builder for creating a TeamManager entity.
func (c *TeamManagerClient) Create() *TeamManagerCreate {
	mutation := newTeamManagerMutation(c.config, OpCreate)
	return &TeamManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeamManager entities.
func (c *TeamManagerClient) CreateBulk(builders ...*TeamManagerCreate) *TeamManagerCreateBulk {
	return &TeamManagerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeamManager.
func (c *TeamManagerClient) Update() *TeamManagerUpdate {
	mutation := newTeamManagerMutation(c.config, OpUpdate)
	return &TeamManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamManagerClient) UpdateOne(tm *TeamManager) *TeamManagerUpdateOne {
	mutation := newTeamManagerMutation(c.config, OpUpdateOne, withTeamManager(tm))
	return &TeamManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamManagerClient) UpdateOneID(id uuid.UUID) *TeamManagerUpdateOne {
	mutation := newTeamManagerMutation(c.config, OpUpdateOne, withTeamManagerID(id))
	return &TeamManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeamManager.
func (c *TeamManagerClient) Delete() *TeamManagerDelete {
	mutation := newTeamManagerMutation(c.config, OpDelete)
	return &TeamManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeamManagerClient) DeleteOne(tm *TeamManager) *TeamManagerDeleteOne {
	return c.DeleteOneID(tm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeamManagerClient) DeleteOneID(id uuid.UUID) *TeamManagerDeleteOne {
	builder := c.Delete().Where(teammanager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamManagerDeleteOne{builder}
}

// Query returns a query builder for TeamManager.
func (c *TeamManagerClient) Query() *TeamManagerQuery {
	return &TeamManagerQuery{
		config: c.config,
	}
}

// Get returns a TeamManager entity by its id.
func (c *TeamManagerClient) Get(ctx context.Context, id uuid.UUID) (*TeamManager, error) {
	return c.Query().Where(teammanager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamManagerClient) GetX(ctx context.Context, id uuid.UUID) *TeamManager {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEdge queries the user_edge edge of a TeamManager.
func (c *TeamManagerClient) QueryUserEdge(tm *TeamManager) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammanager.Table, teammanager.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, teammanager.UserEdgeTable, teammanager.UserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(tm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamEdge queries the team_edge edge of a TeamManager.
func (c *TeamManagerClient) QueryTeamEdge(tm *TeamManager) *TeamQuery {
	query := &TeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammanager.Table, teammanager.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, teammanager.TeamEdgeTable, teammanager.TeamEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(tm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeamManagerClient) Hooks() []Hook {
	return c.hooks.TeamManager
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuditEdge queries the audit_edge edge of a User.
func (c *UserClient) QueryAuditEdge(u *User) *AuditTrailQuery {
	query := &AuditTrailQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(audittrail.Table, audittrail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuditEdgeTable, user.AuditEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringOwner queries the hiring_owner edge of a User.
func (c *UserClient) QueryHiringOwner(u *User) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HiringOwnerTable, user.HiringOwnerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamEdges queries the team_edges edge of a User.
func (c *UserClient) QueryTeamEdges(u *User) *TeamQuery {
	query := &TeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.TeamEdgesTable, user.TeamEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobFeedback queries the candidate_job_feedback edge of a User.
func (c *UserClient) QueryCandidateJobFeedback(u *User) *CandidateJobFeedbackQuery {
	query := &CandidateJobFeedbackQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidatejobfeedback.Table, candidatejobfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateJobFeedbackTable, user.CandidateJobFeedbackColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviewEdges queries the interview_edges edge of a User.
func (c *UserClient) QueryInterviewEdges(u *User) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.InterviewEdgesTable, user.InterviewEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobEdges queries the candidate_job_edges edge of a User.
func (c *UserClient) QueryCandidateJobEdges(u *User) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateJobEdgesTable, user.CandidateJobEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateInterviewEdges queries the candidate_interview_edges edge of a User.
func (c *UserClient) QueryCandidateInterviewEdges(u *User) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateInterviewEdgesTable, user.CandidateInterviewEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateReferenceEdges queries the candidate_reference_edges edge of a User.
func (c *UserClient) QueryCandidateReferenceEdges(u *User) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateReferenceEdgesTable, user.CandidateReferenceEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamUsers queries the team_users edge of a User.
func (c *UserClient) QueryTeamUsers(u *User) *TeamManagerQuery {
	query := &TeamManagerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(teammanager.Table, teammanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.TeamUsersTable, user.TeamUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviewUsers queries the interview_users edge of a User.
func (c *UserClient) QueryInterviewUsers(u *User) *CandidateInterviewerQuery {
	query := &CandidateInterviewerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidateinterviewer.Table, candidateinterviewer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.InterviewUsersTable, user.InterviewUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
