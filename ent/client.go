// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"trec/ent/migrate"

	"trec/ent/attachment"
	"trec/ent/audittrail"
	"trec/ent/candidate"
	"trec/ent/candidateaward"
	"trec/ent/candidatecertificate"
	"trec/ent/candidateeducate"
	"trec/ent/candidateexp"
	"trec/ent/candidatehistorycall"
	"trec/ent/candidateinterview"
	"trec/ent/candidateinterviewer"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/candidatejobstep"
	"trec/ent/candidatenote"
	"trec/ent/emailroleattribute"
	"trec/ent/emailtemplate"
	"trec/ent/entitypermission"
	"trec/ent/entityskill"
	"trec/ent/hiringjob"
	"trec/ent/hiringjobstep"
	"trec/ent/hiringteam"
	"trec/ent/hiringteamapprover"
	"trec/ent/hiringteammanager"
	"trec/ent/jobposition"
	"trec/ent/outgoingemail"
	"trec/ent/permission"
	"trec/ent/permissiongroup"
	"trec/ent/recteam"
	"trec/ent/role"
	"trec/ent/skill"
	"trec/ent/skilltype"
	"trec/ent/user"
	"trec/ent/userrole"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Attachment is the client for interacting with the Attachment builders.
	Attachment *AttachmentClient
	// AuditTrail is the client for interacting with the AuditTrail builders.
	AuditTrail *AuditTrailClient
	// Candidate is the client for interacting with the Candidate builders.
	Candidate *CandidateClient
	// CandidateAward is the client for interacting with the CandidateAward builders.
	CandidateAward *CandidateAwardClient
	// CandidateCertificate is the client for interacting with the CandidateCertificate builders.
	CandidateCertificate *CandidateCertificateClient
	// CandidateEducate is the client for interacting with the CandidateEducate builders.
	CandidateEducate *CandidateEducateClient
	// CandidateExp is the client for interacting with the CandidateExp builders.
	CandidateExp *CandidateExpClient
	// CandidateHistoryCall is the client for interacting with the CandidateHistoryCall builders.
	CandidateHistoryCall *CandidateHistoryCallClient
	// CandidateInterview is the client for interacting with the CandidateInterview builders.
	CandidateInterview *CandidateInterviewClient
	// CandidateInterviewer is the client for interacting with the CandidateInterviewer builders.
	CandidateInterviewer *CandidateInterviewerClient
	// CandidateJob is the client for interacting with the CandidateJob builders.
	CandidateJob *CandidateJobClient
	// CandidateJobFeedback is the client for interacting with the CandidateJobFeedback builders.
	CandidateJobFeedback *CandidateJobFeedbackClient
	// CandidateJobStep is the client for interacting with the CandidateJobStep builders.
	CandidateJobStep *CandidateJobStepClient
	// CandidateNote is the client for interacting with the CandidateNote builders.
	CandidateNote *CandidateNoteClient
	// EmailRoleAttribute is the client for interacting with the EmailRoleAttribute builders.
	EmailRoleAttribute *EmailRoleAttributeClient
	// EmailTemplate is the client for interacting with the EmailTemplate builders.
	EmailTemplate *EmailTemplateClient
	// EntityPermission is the client for interacting with the EntityPermission builders.
	EntityPermission *EntityPermissionClient
	// EntitySkill is the client for interacting with the EntitySkill builders.
	EntitySkill *EntitySkillClient
	// HiringJob is the client for interacting with the HiringJob builders.
	HiringJob *HiringJobClient
	// HiringJobStep is the client for interacting with the HiringJobStep builders.
	HiringJobStep *HiringJobStepClient
	// HiringTeam is the client for interacting with the HiringTeam builders.
	HiringTeam *HiringTeamClient
	// HiringTeamApprover is the client for interacting with the HiringTeamApprover builders.
	HiringTeamApprover *HiringTeamApproverClient
	// HiringTeamManager is the client for interacting with the HiringTeamManager builders.
	HiringTeamManager *HiringTeamManagerClient
	// JobPosition is the client for interacting with the JobPosition builders.
	JobPosition *JobPositionClient
	// OutgoingEmail is the client for interacting with the OutgoingEmail builders.
	OutgoingEmail *OutgoingEmailClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// PermissionGroup is the client for interacting with the PermissionGroup builders.
	PermissionGroup *PermissionGroupClient
	// RecTeam is the client for interacting with the RecTeam builders.
	RecTeam *RecTeamClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// SkillType is the client for interacting with the SkillType builders.
	SkillType *SkillTypeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserRole is the client for interacting with the UserRole builders.
	UserRole *UserRoleClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Attachment = NewAttachmentClient(c.config)
	c.AuditTrail = NewAuditTrailClient(c.config)
	c.Candidate = NewCandidateClient(c.config)
	c.CandidateAward = NewCandidateAwardClient(c.config)
	c.CandidateCertificate = NewCandidateCertificateClient(c.config)
	c.CandidateEducate = NewCandidateEducateClient(c.config)
	c.CandidateExp = NewCandidateExpClient(c.config)
	c.CandidateHistoryCall = NewCandidateHistoryCallClient(c.config)
	c.CandidateInterview = NewCandidateInterviewClient(c.config)
	c.CandidateInterviewer = NewCandidateInterviewerClient(c.config)
	c.CandidateJob = NewCandidateJobClient(c.config)
	c.CandidateJobFeedback = NewCandidateJobFeedbackClient(c.config)
	c.CandidateJobStep = NewCandidateJobStepClient(c.config)
	c.CandidateNote = NewCandidateNoteClient(c.config)
	c.EmailRoleAttribute = NewEmailRoleAttributeClient(c.config)
	c.EmailTemplate = NewEmailTemplateClient(c.config)
	c.EntityPermission = NewEntityPermissionClient(c.config)
	c.EntitySkill = NewEntitySkillClient(c.config)
	c.HiringJob = NewHiringJobClient(c.config)
	c.HiringJobStep = NewHiringJobStepClient(c.config)
	c.HiringTeam = NewHiringTeamClient(c.config)
	c.HiringTeamApprover = NewHiringTeamApproverClient(c.config)
	c.HiringTeamManager = NewHiringTeamManagerClient(c.config)
	c.JobPosition = NewJobPositionClient(c.config)
	c.OutgoingEmail = NewOutgoingEmailClient(c.config)
	c.Permission = NewPermissionClient(c.config)
	c.PermissionGroup = NewPermissionGroupClient(c.config)
	c.RecTeam = NewRecTeamClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.Skill = NewSkillClient(c.config)
	c.SkillType = NewSkillTypeClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserRole = NewUserRoleClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Attachment:           NewAttachmentClient(cfg),
		AuditTrail:           NewAuditTrailClient(cfg),
		Candidate:            NewCandidateClient(cfg),
		CandidateAward:       NewCandidateAwardClient(cfg),
		CandidateCertificate: NewCandidateCertificateClient(cfg),
		CandidateEducate:     NewCandidateEducateClient(cfg),
		CandidateExp:         NewCandidateExpClient(cfg),
		CandidateHistoryCall: NewCandidateHistoryCallClient(cfg),
		CandidateInterview:   NewCandidateInterviewClient(cfg),
		CandidateInterviewer: NewCandidateInterviewerClient(cfg),
		CandidateJob:         NewCandidateJobClient(cfg),
		CandidateJobFeedback: NewCandidateJobFeedbackClient(cfg),
		CandidateJobStep:     NewCandidateJobStepClient(cfg),
		CandidateNote:        NewCandidateNoteClient(cfg),
		EmailRoleAttribute:   NewEmailRoleAttributeClient(cfg),
		EmailTemplate:        NewEmailTemplateClient(cfg),
		EntityPermission:     NewEntityPermissionClient(cfg),
		EntitySkill:          NewEntitySkillClient(cfg),
		HiringJob:            NewHiringJobClient(cfg),
		HiringJobStep:        NewHiringJobStepClient(cfg),
		HiringTeam:           NewHiringTeamClient(cfg),
		HiringTeamApprover:   NewHiringTeamApproverClient(cfg),
		HiringTeamManager:    NewHiringTeamManagerClient(cfg),
		JobPosition:          NewJobPositionClient(cfg),
		OutgoingEmail:        NewOutgoingEmailClient(cfg),
		Permission:           NewPermissionClient(cfg),
		PermissionGroup:      NewPermissionGroupClient(cfg),
		RecTeam:              NewRecTeamClient(cfg),
		Role:                 NewRoleClient(cfg),
		Skill:                NewSkillClient(cfg),
		SkillType:            NewSkillTypeClient(cfg),
		User:                 NewUserClient(cfg),
		UserRole:             NewUserRoleClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Attachment:           NewAttachmentClient(cfg),
		AuditTrail:           NewAuditTrailClient(cfg),
		Candidate:            NewCandidateClient(cfg),
		CandidateAward:       NewCandidateAwardClient(cfg),
		CandidateCertificate: NewCandidateCertificateClient(cfg),
		CandidateEducate:     NewCandidateEducateClient(cfg),
		CandidateExp:         NewCandidateExpClient(cfg),
		CandidateHistoryCall: NewCandidateHistoryCallClient(cfg),
		CandidateInterview:   NewCandidateInterviewClient(cfg),
		CandidateInterviewer: NewCandidateInterviewerClient(cfg),
		CandidateJob:         NewCandidateJobClient(cfg),
		CandidateJobFeedback: NewCandidateJobFeedbackClient(cfg),
		CandidateJobStep:     NewCandidateJobStepClient(cfg),
		CandidateNote:        NewCandidateNoteClient(cfg),
		EmailRoleAttribute:   NewEmailRoleAttributeClient(cfg),
		EmailTemplate:        NewEmailTemplateClient(cfg),
		EntityPermission:     NewEntityPermissionClient(cfg),
		EntitySkill:          NewEntitySkillClient(cfg),
		HiringJob:            NewHiringJobClient(cfg),
		HiringJobStep:        NewHiringJobStepClient(cfg),
		HiringTeam:           NewHiringTeamClient(cfg),
		HiringTeamApprover:   NewHiringTeamApproverClient(cfg),
		HiringTeamManager:    NewHiringTeamManagerClient(cfg),
		JobPosition:          NewJobPositionClient(cfg),
		OutgoingEmail:        NewOutgoingEmailClient(cfg),
		Permission:           NewPermissionClient(cfg),
		PermissionGroup:      NewPermissionGroupClient(cfg),
		RecTeam:              NewRecTeamClient(cfg),
		Role:                 NewRoleClient(cfg),
		Skill:                NewSkillClient(cfg),
		SkillType:            NewSkillTypeClient(cfg),
		User:                 NewUserClient(cfg),
		UserRole:             NewUserRoleClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Attachment.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Attachment.Use(hooks...)
	c.AuditTrail.Use(hooks...)
	c.Candidate.Use(hooks...)
	c.CandidateAward.Use(hooks...)
	c.CandidateCertificate.Use(hooks...)
	c.CandidateEducate.Use(hooks...)
	c.CandidateExp.Use(hooks...)
	c.CandidateHistoryCall.Use(hooks...)
	c.CandidateInterview.Use(hooks...)
	c.CandidateInterviewer.Use(hooks...)
	c.CandidateJob.Use(hooks...)
	c.CandidateJobFeedback.Use(hooks...)
	c.CandidateJobStep.Use(hooks...)
	c.CandidateNote.Use(hooks...)
	c.EmailRoleAttribute.Use(hooks...)
	c.EmailTemplate.Use(hooks...)
	c.EntityPermission.Use(hooks...)
	c.EntitySkill.Use(hooks...)
	c.HiringJob.Use(hooks...)
	c.HiringJobStep.Use(hooks...)
	c.HiringTeam.Use(hooks...)
	c.HiringTeamApprover.Use(hooks...)
	c.HiringTeamManager.Use(hooks...)
	c.JobPosition.Use(hooks...)
	c.OutgoingEmail.Use(hooks...)
	c.Permission.Use(hooks...)
	c.PermissionGroup.Use(hooks...)
	c.RecTeam.Use(hooks...)
	c.Role.Use(hooks...)
	c.Skill.Use(hooks...)
	c.SkillType.Use(hooks...)
	c.User.Use(hooks...)
	c.UserRole.Use(hooks...)
}

// AttachmentClient is a client for the Attachment schema.
type AttachmentClient struct {
	config
}

// NewAttachmentClient returns a client for the Attachment from the given config.
func NewAttachmentClient(c config) *AttachmentClient {
	return &AttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attachment.Hooks(f(g(h())))`.
func (c *AttachmentClient) Use(hooks ...Hook) {
	c.hooks.Attachment = append(c.hooks.Attachment, hooks...)
}

// Create returns a builder for creating a Attachment entity.
func (c *AttachmentClient) Create() *AttachmentCreate {
	mutation := newAttachmentMutation(c.config, OpCreate)
	return &AttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attachment entities.
func (c *AttachmentClient) CreateBulk(builders ...*AttachmentCreate) *AttachmentCreateBulk {
	return &AttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attachment.
func (c *AttachmentClient) Update() *AttachmentUpdate {
	mutation := newAttachmentMutation(c.config, OpUpdate)
	return &AttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttachmentClient) UpdateOne(a *Attachment) *AttachmentUpdateOne {
	mutation := newAttachmentMutation(c.config, OpUpdateOne, withAttachment(a))
	return &AttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttachmentClient) UpdateOneID(id uuid.UUID) *AttachmentUpdateOne {
	mutation := newAttachmentMutation(c.config, OpUpdateOne, withAttachmentID(id))
	return &AttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attachment.
func (c *AttachmentClient) Delete() *AttachmentDelete {
	mutation := newAttachmentMutation(c.config, OpDelete)
	return &AttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttachmentClient) DeleteOne(a *Attachment) *AttachmentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttachmentClient) DeleteOneID(id uuid.UUID) *AttachmentDeleteOne {
	builder := c.Delete().Where(attachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttachmentDeleteOne{builder}
}

// Query returns a query builder for Attachment.
func (c *AttachmentClient) Query() *AttachmentQuery {
	return &AttachmentQuery{
		config: c.config,
	}
}

// Get returns a Attachment entity by its id.
func (c *AttachmentClient) Get(ctx context.Context, id uuid.UUID) (*Attachment, error) {
	return c.Query().Where(attachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttachmentClient) GetX(ctx context.Context, id uuid.UUID) *Attachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateJobEdge queries the candidate_job_edge edge of a Attachment.
func (c *AttachmentClient) QueryCandidateJobEdge(a *Attachment) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateJobEdgeTable, attachment.CandidateJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobFeedbackEdge queries the candidate_job_feedback_edge edge of a Attachment.
func (c *AttachmentClient) QueryCandidateJobFeedbackEdge(a *Attachment) *CandidateJobFeedbackQuery {
	query := &CandidateJobFeedbackQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidatejobfeedback.Table, candidatejobfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateJobFeedbackEdgeTable, attachment.CandidateJobFeedbackEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateInterviewEdge queries the candidate_interview_edge edge of a Attachment.
func (c *AttachmentClient) QueryCandidateInterviewEdge(a *Attachment) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateInterviewEdgeTable, attachment.CandidateInterviewEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEdge queries the candidate_edge edge of a Attachment.
func (c *AttachmentClient) QueryCandidateEdge(a *Attachment) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateEdgeTable, attachment.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEducateEdge queries the candidate_educate_edge edge of a Attachment.
func (c *AttachmentClient) QueryCandidateEducateEdge(a *Attachment) *CandidateEducateQuery {
	query := &CandidateEducateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidateeducate.Table, candidateeducate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateEducateEdgeTable, attachment.CandidateEducateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateAwardEdge queries the candidate_award_edge edge of a Attachment.
func (c *AttachmentClient) QueryCandidateAwardEdge(a *Attachment) *CandidateAwardQuery {
	query := &CandidateAwardQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidateaward.Table, candidateaward.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateAwardEdgeTable, attachment.CandidateAwardEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateCertificateEdge queries the candidate_certificate_edge edge of a Attachment.
func (c *AttachmentClient) QueryCandidateCertificateEdge(a *Attachment) *CandidateCertificateQuery {
	query := &CandidateCertificateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidatecertificate.Table, candidatecertificate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateCertificateEdgeTable, attachment.CandidateCertificateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateHistoryCallEdge queries the candidate_history_call_edge edge of a Attachment.
func (c *AttachmentClient) QueryCandidateHistoryCallEdge(a *Attachment) *CandidateHistoryCallQuery {
	query := &CandidateHistoryCallQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidatehistorycall.Table, candidatehistorycall.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateHistoryCallEdgeTable, attachment.CandidateHistoryCallEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateNoteEdge queries the candidate_note_edge edge of a Attachment.
func (c *AttachmentClient) QueryCandidateNoteEdge(a *Attachment) *CandidateNoteQuery {
	query := &CandidateNoteQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachment.Table, attachment.FieldID, id),
			sqlgraph.To(candidatenote.Table, candidatenote.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachment.CandidateNoteEdgeTable, attachment.CandidateNoteEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttachmentClient) Hooks() []Hook {
	return c.hooks.Attachment
}

// AuditTrailClient is a client for the AuditTrail schema.
type AuditTrailClient struct {
	config
}

// NewAuditTrailClient returns a client for the AuditTrail from the given config.
func NewAuditTrailClient(c config) *AuditTrailClient {
	return &AuditTrailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audittrail.Hooks(f(g(h())))`.
func (c *AuditTrailClient) Use(hooks ...Hook) {
	c.hooks.AuditTrail = append(c.hooks.AuditTrail, hooks...)
}

// Create returns a builder for creating a AuditTrail entity.
func (c *AuditTrailClient) Create() *AuditTrailCreate {
	mutation := newAuditTrailMutation(c.config, OpCreate)
	return &AuditTrailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuditTrail entities.
func (c *AuditTrailClient) CreateBulk(builders ...*AuditTrailCreate) *AuditTrailCreateBulk {
	return &AuditTrailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuditTrail.
func (c *AuditTrailClient) Update() *AuditTrailUpdate {
	mutation := newAuditTrailMutation(c.config, OpUpdate)
	return &AuditTrailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditTrailClient) UpdateOne(at *AuditTrail) *AuditTrailUpdateOne {
	mutation := newAuditTrailMutation(c.config, OpUpdateOne, withAuditTrail(at))
	return &AuditTrailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditTrailClient) UpdateOneID(id uuid.UUID) *AuditTrailUpdateOne {
	mutation := newAuditTrailMutation(c.config, OpUpdateOne, withAuditTrailID(id))
	return &AuditTrailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuditTrail.
func (c *AuditTrailClient) Delete() *AuditTrailDelete {
	mutation := newAuditTrailMutation(c.config, OpDelete)
	return &AuditTrailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditTrailClient) DeleteOne(at *AuditTrail) *AuditTrailDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditTrailClient) DeleteOneID(id uuid.UUID) *AuditTrailDeleteOne {
	builder := c.Delete().Where(audittrail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditTrailDeleteOne{builder}
}

// Query returns a query builder for AuditTrail.
func (c *AuditTrailClient) Query() *AuditTrailQuery {
	return &AuditTrailQuery{
		config: c.config,
	}
}

// Get returns a AuditTrail entity by its id.
func (c *AuditTrailClient) Get(ctx context.Context, id uuid.UUID) (*AuditTrail, error) {
	return c.Query().Where(audittrail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditTrailClient) GetX(ctx context.Context, id uuid.UUID) *AuditTrail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEdge queries the user_edge edge of a AuditTrail.
func (c *AuditTrailClient) QueryUserEdge(at *AuditTrail) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(audittrail.Table, audittrail.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, audittrail.UserEdgeTable, audittrail.UserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuditTrailClient) Hooks() []Hook {
	return c.hooks.AuditTrail
}

// CandidateClient is a client for the Candidate schema.
type CandidateClient struct {
	config
}

// NewCandidateClient returns a client for the Candidate from the given config.
func NewCandidateClient(c config) *CandidateClient {
	return &CandidateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidate.Hooks(f(g(h())))`.
func (c *CandidateClient) Use(hooks ...Hook) {
	c.hooks.Candidate = append(c.hooks.Candidate, hooks...)
}

// Create returns a builder for creating a Candidate entity.
func (c *CandidateClient) Create() *CandidateCreate {
	mutation := newCandidateMutation(c.config, OpCreate)
	return &CandidateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Candidate entities.
func (c *CandidateClient) CreateBulk(builders ...*CandidateCreate) *CandidateCreateBulk {
	return &CandidateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Candidate.
func (c *CandidateClient) Update() *CandidateUpdate {
	mutation := newCandidateMutation(c.config, OpUpdate)
	return &CandidateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateClient) UpdateOne(ca *Candidate) *CandidateUpdateOne {
	mutation := newCandidateMutation(c.config, OpUpdateOne, withCandidate(ca))
	return &CandidateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateClient) UpdateOneID(id uuid.UUID) *CandidateUpdateOne {
	mutation := newCandidateMutation(c.config, OpUpdateOne, withCandidateID(id))
	return &CandidateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Candidate.
func (c *CandidateClient) Delete() *CandidateDelete {
	mutation := newCandidateMutation(c.config, OpDelete)
	return &CandidateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateClient) DeleteOne(ca *Candidate) *CandidateDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateClient) DeleteOneID(id uuid.UUID) *CandidateDeleteOne {
	builder := c.Delete().Where(candidate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateDeleteOne{builder}
}

// Query returns a query builder for Candidate.
func (c *CandidateClient) Query() *CandidateQuery {
	return &CandidateQuery{
		config: c.config,
	}
}

// Get returns a Candidate entity by its id.
func (c *CandidateClient) Get(ctx context.Context, id uuid.UUID) (*Candidate, error) {
	return c.Query().Where(candidate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateClient) GetX(ctx context.Context, id uuid.UUID) *Candidate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateJobEdges queries the candidate_job_edges edge of a Candidate.
func (c *CandidateClient) QueryCandidateJobEdges(ca *Candidate) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.CandidateJobEdgesTable, candidate.CandidateJobEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferenceUserEdge queries the reference_user_edge edge of a Candidate.
func (c *CandidateClient) QueryReferenceUserEdge(ca *Candidate) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidate.ReferenceUserEdgeTable, candidate.ReferenceUserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachmentEdges queries the attachment_edges edge of a Candidate.
func (c *CandidateClient) QueryAttachmentEdges(ca *Candidate) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.AttachmentEdgesTable, candidate.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateSkillEdges queries the candidate_skill_edges edge of a Candidate.
func (c *CandidateClient) QueryCandidateSkillEdges(ca *Candidate) *EntitySkillQuery {
	query := &EntitySkillQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(entityskill.Table, entityskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.CandidateSkillEdgesTable, candidate.CandidateSkillEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateExpEdges queries the candidate_exp_edges edge of a Candidate.
func (c *CandidateClient) QueryCandidateExpEdges(ca *Candidate) *CandidateExpQuery {
	query := &CandidateExpQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(candidateexp.Table, candidateexp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.CandidateExpEdgesTable, candidate.CandidateExpEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEducateEdges queries the candidate_educate_edges edge of a Candidate.
func (c *CandidateClient) QueryCandidateEducateEdges(ca *Candidate) *CandidateEducateQuery {
	query := &CandidateEducateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(candidateeducate.Table, candidateeducate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.CandidateEducateEdgesTable, candidate.CandidateEducateEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateAwardEdges queries the candidate_award_edges edge of a Candidate.
func (c *CandidateClient) QueryCandidateAwardEdges(ca *Candidate) *CandidateAwardQuery {
	query := &CandidateAwardQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(candidateaward.Table, candidateaward.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.CandidateAwardEdgesTable, candidate.CandidateAwardEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateCertificateEdges queries the candidate_certificate_edges edge of a Candidate.
func (c *CandidateClient) QueryCandidateCertificateEdges(ca *Candidate) *CandidateCertificateQuery {
	query := &CandidateCertificateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(candidatecertificate.Table, candidatecertificate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.CandidateCertificateEdgesTable, candidate.CandidateCertificateEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateHistoryCallEdges queries the candidate_history_call_edges edge of a Candidate.
func (c *CandidateClient) QueryCandidateHistoryCallEdges(ca *Candidate) *CandidateHistoryCallQuery {
	query := &CandidateHistoryCallQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(candidatehistorycall.Table, candidatehistorycall.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.CandidateHistoryCallEdgesTable, candidate.CandidateHistoryCallEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateNoteEdges queries the candidate_note_edges edge of a Candidate.
func (c *CandidateClient) QueryCandidateNoteEdges(ca *Candidate) *CandidateNoteQuery {
	query := &CandidateNoteQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(candidatenote.Table, candidatenote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.CandidateNoteEdgesTable, candidate.CandidateNoteEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutgoingEmailEdges queries the outgoing_email_edges edge of a Candidate.
func (c *CandidateClient) QueryOutgoingEmailEdges(ca *Candidate) *OutgoingEmailQuery {
	query := &OutgoingEmailQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidate.Table, candidate.FieldID, id),
			sqlgraph.To(outgoingemail.Table, outgoingemail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidate.OutgoingEmailEdgesTable, candidate.OutgoingEmailEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateClient) Hooks() []Hook {
	return c.hooks.Candidate
}

// CandidateAwardClient is a client for the CandidateAward schema.
type CandidateAwardClient struct {
	config
}

// NewCandidateAwardClient returns a client for the CandidateAward from the given config.
func NewCandidateAwardClient(c config) *CandidateAwardClient {
	return &CandidateAwardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidateaward.Hooks(f(g(h())))`.
func (c *CandidateAwardClient) Use(hooks ...Hook) {
	c.hooks.CandidateAward = append(c.hooks.CandidateAward, hooks...)
}

// Create returns a builder for creating a CandidateAward entity.
func (c *CandidateAwardClient) Create() *CandidateAwardCreate {
	mutation := newCandidateAwardMutation(c.config, OpCreate)
	return &CandidateAwardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateAward entities.
func (c *CandidateAwardClient) CreateBulk(builders ...*CandidateAwardCreate) *CandidateAwardCreateBulk {
	return &CandidateAwardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateAward.
func (c *CandidateAwardClient) Update() *CandidateAwardUpdate {
	mutation := newCandidateAwardMutation(c.config, OpUpdate)
	return &CandidateAwardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateAwardClient) UpdateOne(ca *CandidateAward) *CandidateAwardUpdateOne {
	mutation := newCandidateAwardMutation(c.config, OpUpdateOne, withCandidateAward(ca))
	return &CandidateAwardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateAwardClient) UpdateOneID(id uuid.UUID) *CandidateAwardUpdateOne {
	mutation := newCandidateAwardMutation(c.config, OpUpdateOne, withCandidateAwardID(id))
	return &CandidateAwardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateAward.
func (c *CandidateAwardClient) Delete() *CandidateAwardDelete {
	mutation := newCandidateAwardMutation(c.config, OpDelete)
	return &CandidateAwardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateAwardClient) DeleteOne(ca *CandidateAward) *CandidateAwardDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateAwardClient) DeleteOneID(id uuid.UUID) *CandidateAwardDeleteOne {
	builder := c.Delete().Where(candidateaward.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateAwardDeleteOne{builder}
}

// Query returns a query builder for CandidateAward.
func (c *CandidateAwardClient) Query() *CandidateAwardQuery {
	return &CandidateAwardQuery{
		config: c.config,
	}
}

// Get returns a CandidateAward entity by its id.
func (c *CandidateAwardClient) Get(ctx context.Context, id uuid.UUID) (*CandidateAward, error) {
	return c.Query().Where(candidateaward.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateAwardClient) GetX(ctx context.Context, id uuid.UUID) *CandidateAward {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateAward.
func (c *CandidateAwardClient) QueryAttachmentEdges(ca *CandidateAward) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateaward.Table, candidateaward.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidateaward.AttachmentEdgesTable, candidateaward.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEdge queries the candidate_edge edge of a CandidateAward.
func (c *CandidateAwardClient) QueryCandidateEdge(ca *CandidateAward) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateaward.Table, candidateaward.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidateaward.CandidateEdgeTable, candidateaward.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateAwardClient) Hooks() []Hook {
	return c.hooks.CandidateAward
}

// CandidateCertificateClient is a client for the CandidateCertificate schema.
type CandidateCertificateClient struct {
	config
}

// NewCandidateCertificateClient returns a client for the CandidateCertificate from the given config.
func NewCandidateCertificateClient(c config) *CandidateCertificateClient {
	return &CandidateCertificateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidatecertificate.Hooks(f(g(h())))`.
func (c *CandidateCertificateClient) Use(hooks ...Hook) {
	c.hooks.CandidateCertificate = append(c.hooks.CandidateCertificate, hooks...)
}

// Create returns a builder for creating a CandidateCertificate entity.
func (c *CandidateCertificateClient) Create() *CandidateCertificateCreate {
	mutation := newCandidateCertificateMutation(c.config, OpCreate)
	return &CandidateCertificateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateCertificate entities.
func (c *CandidateCertificateClient) CreateBulk(builders ...*CandidateCertificateCreate) *CandidateCertificateCreateBulk {
	return &CandidateCertificateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateCertificate.
func (c *CandidateCertificateClient) Update() *CandidateCertificateUpdate {
	mutation := newCandidateCertificateMutation(c.config, OpUpdate)
	return &CandidateCertificateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateCertificateClient) UpdateOne(cc *CandidateCertificate) *CandidateCertificateUpdateOne {
	mutation := newCandidateCertificateMutation(c.config, OpUpdateOne, withCandidateCertificate(cc))
	return &CandidateCertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateCertificateClient) UpdateOneID(id uuid.UUID) *CandidateCertificateUpdateOne {
	mutation := newCandidateCertificateMutation(c.config, OpUpdateOne, withCandidateCertificateID(id))
	return &CandidateCertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateCertificate.
func (c *CandidateCertificateClient) Delete() *CandidateCertificateDelete {
	mutation := newCandidateCertificateMutation(c.config, OpDelete)
	return &CandidateCertificateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateCertificateClient) DeleteOne(cc *CandidateCertificate) *CandidateCertificateDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateCertificateClient) DeleteOneID(id uuid.UUID) *CandidateCertificateDeleteOne {
	builder := c.Delete().Where(candidatecertificate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateCertificateDeleteOne{builder}
}

// Query returns a query builder for CandidateCertificate.
func (c *CandidateCertificateClient) Query() *CandidateCertificateQuery {
	return &CandidateCertificateQuery{
		config: c.config,
	}
}

// Get returns a CandidateCertificate entity by its id.
func (c *CandidateCertificateClient) Get(ctx context.Context, id uuid.UUID) (*CandidateCertificate, error) {
	return c.Query().Where(candidatecertificate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateCertificateClient) GetX(ctx context.Context, id uuid.UUID) *CandidateCertificate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateCertificate.
func (c *CandidateCertificateClient) QueryAttachmentEdges(cc *CandidateCertificate) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatecertificate.Table, candidatecertificate.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatecertificate.AttachmentEdgesTable, candidatecertificate.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEdge queries the candidate_edge edge of a CandidateCertificate.
func (c *CandidateCertificateClient) QueryCandidateEdge(cc *CandidateCertificate) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatecertificate.Table, candidatecertificate.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatecertificate.CandidateEdgeTable, candidatecertificate.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateCertificateClient) Hooks() []Hook {
	return c.hooks.CandidateCertificate
}

// CandidateEducateClient is a client for the CandidateEducate schema.
type CandidateEducateClient struct {
	config
}

// NewCandidateEducateClient returns a client for the CandidateEducate from the given config.
func NewCandidateEducateClient(c config) *CandidateEducateClient {
	return &CandidateEducateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidateeducate.Hooks(f(g(h())))`.
func (c *CandidateEducateClient) Use(hooks ...Hook) {
	c.hooks.CandidateEducate = append(c.hooks.CandidateEducate, hooks...)
}

// Create returns a builder for creating a CandidateEducate entity.
func (c *CandidateEducateClient) Create() *CandidateEducateCreate {
	mutation := newCandidateEducateMutation(c.config, OpCreate)
	return &CandidateEducateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateEducate entities.
func (c *CandidateEducateClient) CreateBulk(builders ...*CandidateEducateCreate) *CandidateEducateCreateBulk {
	return &CandidateEducateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateEducate.
func (c *CandidateEducateClient) Update() *CandidateEducateUpdate {
	mutation := newCandidateEducateMutation(c.config, OpUpdate)
	return &CandidateEducateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateEducateClient) UpdateOne(ce *CandidateEducate) *CandidateEducateUpdateOne {
	mutation := newCandidateEducateMutation(c.config, OpUpdateOne, withCandidateEducate(ce))
	return &CandidateEducateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateEducateClient) UpdateOneID(id uuid.UUID) *CandidateEducateUpdateOne {
	mutation := newCandidateEducateMutation(c.config, OpUpdateOne, withCandidateEducateID(id))
	return &CandidateEducateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateEducate.
func (c *CandidateEducateClient) Delete() *CandidateEducateDelete {
	mutation := newCandidateEducateMutation(c.config, OpDelete)
	return &CandidateEducateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateEducateClient) DeleteOne(ce *CandidateEducate) *CandidateEducateDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateEducateClient) DeleteOneID(id uuid.UUID) *CandidateEducateDeleteOne {
	builder := c.Delete().Where(candidateeducate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateEducateDeleteOne{builder}
}

// Query returns a query builder for CandidateEducate.
func (c *CandidateEducateClient) Query() *CandidateEducateQuery {
	return &CandidateEducateQuery{
		config: c.config,
	}
}

// Get returns a CandidateEducate entity by its id.
func (c *CandidateEducateClient) Get(ctx context.Context, id uuid.UUID) (*CandidateEducate, error) {
	return c.Query().Where(candidateeducate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateEducateClient) GetX(ctx context.Context, id uuid.UUID) *CandidateEducate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateEducate.
func (c *CandidateEducateClient) QueryAttachmentEdges(ce *CandidateEducate) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateeducate.Table, candidateeducate.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidateeducate.AttachmentEdgesTable, candidateeducate.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEdge queries the candidate_edge edge of a CandidateEducate.
func (c *CandidateEducateClient) QueryCandidateEdge(ce *CandidateEducate) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateeducate.Table, candidateeducate.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidateeducate.CandidateEdgeTable, candidateeducate.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateEducateClient) Hooks() []Hook {
	return c.hooks.CandidateEducate
}

// CandidateExpClient is a client for the CandidateExp schema.
type CandidateExpClient struct {
	config
}

// NewCandidateExpClient returns a client for the CandidateExp from the given config.
func NewCandidateExpClient(c config) *CandidateExpClient {
	return &CandidateExpClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidateexp.Hooks(f(g(h())))`.
func (c *CandidateExpClient) Use(hooks ...Hook) {
	c.hooks.CandidateExp = append(c.hooks.CandidateExp, hooks...)
}

// Create returns a builder for creating a CandidateExp entity.
func (c *CandidateExpClient) Create() *CandidateExpCreate {
	mutation := newCandidateExpMutation(c.config, OpCreate)
	return &CandidateExpCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateExp entities.
func (c *CandidateExpClient) CreateBulk(builders ...*CandidateExpCreate) *CandidateExpCreateBulk {
	return &CandidateExpCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateExp.
func (c *CandidateExpClient) Update() *CandidateExpUpdate {
	mutation := newCandidateExpMutation(c.config, OpUpdate)
	return &CandidateExpUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateExpClient) UpdateOne(ce *CandidateExp) *CandidateExpUpdateOne {
	mutation := newCandidateExpMutation(c.config, OpUpdateOne, withCandidateExp(ce))
	return &CandidateExpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateExpClient) UpdateOneID(id uuid.UUID) *CandidateExpUpdateOne {
	mutation := newCandidateExpMutation(c.config, OpUpdateOne, withCandidateExpID(id))
	return &CandidateExpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateExp.
func (c *CandidateExpClient) Delete() *CandidateExpDelete {
	mutation := newCandidateExpMutation(c.config, OpDelete)
	return &CandidateExpDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateExpClient) DeleteOne(ce *CandidateExp) *CandidateExpDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateExpClient) DeleteOneID(id uuid.UUID) *CandidateExpDeleteOne {
	builder := c.Delete().Where(candidateexp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateExpDeleteOne{builder}
}

// Query returns a query builder for CandidateExp.
func (c *CandidateExpClient) Query() *CandidateExpQuery {
	return &CandidateExpQuery{
		config: c.config,
	}
}

// Get returns a CandidateExp entity by its id.
func (c *CandidateExpClient) Get(ctx context.Context, id uuid.UUID) (*CandidateExp, error) {
	return c.Query().Where(candidateexp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateExpClient) GetX(ctx context.Context, id uuid.UUID) *CandidateExp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateEdge queries the candidate_edge edge of a CandidateExp.
func (c *CandidateExpClient) QueryCandidateEdge(ce *CandidateExp) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateexp.Table, candidateexp.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidateexp.CandidateEdgeTable, candidateexp.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateExpClient) Hooks() []Hook {
	return c.hooks.CandidateExp
}

// CandidateHistoryCallClient is a client for the CandidateHistoryCall schema.
type CandidateHistoryCallClient struct {
	config
}

// NewCandidateHistoryCallClient returns a client for the CandidateHistoryCall from the given config.
func NewCandidateHistoryCallClient(c config) *CandidateHistoryCallClient {
	return &CandidateHistoryCallClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidatehistorycall.Hooks(f(g(h())))`.
func (c *CandidateHistoryCallClient) Use(hooks ...Hook) {
	c.hooks.CandidateHistoryCall = append(c.hooks.CandidateHistoryCall, hooks...)
}

// Create returns a builder for creating a CandidateHistoryCall entity.
func (c *CandidateHistoryCallClient) Create() *CandidateHistoryCallCreate {
	mutation := newCandidateHistoryCallMutation(c.config, OpCreate)
	return &CandidateHistoryCallCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateHistoryCall entities.
func (c *CandidateHistoryCallClient) CreateBulk(builders ...*CandidateHistoryCallCreate) *CandidateHistoryCallCreateBulk {
	return &CandidateHistoryCallCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateHistoryCall.
func (c *CandidateHistoryCallClient) Update() *CandidateHistoryCallUpdate {
	mutation := newCandidateHistoryCallMutation(c.config, OpUpdate)
	return &CandidateHistoryCallUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateHistoryCallClient) UpdateOne(chc *CandidateHistoryCall) *CandidateHistoryCallUpdateOne {
	mutation := newCandidateHistoryCallMutation(c.config, OpUpdateOne, withCandidateHistoryCall(chc))
	return &CandidateHistoryCallUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateHistoryCallClient) UpdateOneID(id uuid.UUID) *CandidateHistoryCallUpdateOne {
	mutation := newCandidateHistoryCallMutation(c.config, OpUpdateOne, withCandidateHistoryCallID(id))
	return &CandidateHistoryCallUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateHistoryCall.
func (c *CandidateHistoryCallClient) Delete() *CandidateHistoryCallDelete {
	mutation := newCandidateHistoryCallMutation(c.config, OpDelete)
	return &CandidateHistoryCallDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateHistoryCallClient) DeleteOne(chc *CandidateHistoryCall) *CandidateHistoryCallDeleteOne {
	return c.DeleteOneID(chc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateHistoryCallClient) DeleteOneID(id uuid.UUID) *CandidateHistoryCallDeleteOne {
	builder := c.Delete().Where(candidatehistorycall.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateHistoryCallDeleteOne{builder}
}

// Query returns a query builder for CandidateHistoryCall.
func (c *CandidateHistoryCallClient) Query() *CandidateHistoryCallQuery {
	return &CandidateHistoryCallQuery{
		config: c.config,
	}
}

// Get returns a CandidateHistoryCall entity by its id.
func (c *CandidateHistoryCallClient) Get(ctx context.Context, id uuid.UUID) (*CandidateHistoryCall, error) {
	return c.Query().Where(candidatehistorycall.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateHistoryCallClient) GetX(ctx context.Context, id uuid.UUID) *CandidateHistoryCall {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateHistoryCall.
func (c *CandidateHistoryCallClient) QueryAttachmentEdges(chc *CandidateHistoryCall) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := chc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatehistorycall.Table, candidatehistorycall.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatehistorycall.AttachmentEdgesTable, candidatehistorycall.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(chc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEdge queries the candidate_edge edge of a CandidateHistoryCall.
func (c *CandidateHistoryCallClient) QueryCandidateEdge(chc *CandidateHistoryCall) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := chc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatehistorycall.Table, candidatehistorycall.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatehistorycall.CandidateEdgeTable, candidatehistorycall.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(chc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedByEdge queries the created_by_edge edge of a CandidateHistoryCall.
func (c *CandidateHistoryCallClient) QueryCreatedByEdge(chc *CandidateHistoryCall) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := chc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatehistorycall.Table, candidatehistorycall.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatehistorycall.CreatedByEdgeTable, candidatehistorycall.CreatedByEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(chc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateHistoryCallClient) Hooks() []Hook {
	return c.hooks.CandidateHistoryCall
}

// CandidateInterviewClient is a client for the CandidateInterview schema.
type CandidateInterviewClient struct {
	config
}

// NewCandidateInterviewClient returns a client for the CandidateInterview from the given config.
func NewCandidateInterviewClient(c config) *CandidateInterviewClient {
	return &CandidateInterviewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidateinterview.Hooks(f(g(h())))`.
func (c *CandidateInterviewClient) Use(hooks ...Hook) {
	c.hooks.CandidateInterview = append(c.hooks.CandidateInterview, hooks...)
}

// Create returns a builder for creating a CandidateInterview entity.
func (c *CandidateInterviewClient) Create() *CandidateInterviewCreate {
	mutation := newCandidateInterviewMutation(c.config, OpCreate)
	return &CandidateInterviewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateInterview entities.
func (c *CandidateInterviewClient) CreateBulk(builders ...*CandidateInterviewCreate) *CandidateInterviewCreateBulk {
	return &CandidateInterviewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateInterview.
func (c *CandidateInterviewClient) Update() *CandidateInterviewUpdate {
	mutation := newCandidateInterviewMutation(c.config, OpUpdate)
	return &CandidateInterviewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateInterviewClient) UpdateOne(ci *CandidateInterview) *CandidateInterviewUpdateOne {
	mutation := newCandidateInterviewMutation(c.config, OpUpdateOne, withCandidateInterview(ci))
	return &CandidateInterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateInterviewClient) UpdateOneID(id uuid.UUID) *CandidateInterviewUpdateOne {
	mutation := newCandidateInterviewMutation(c.config, OpUpdateOne, withCandidateInterviewID(id))
	return &CandidateInterviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateInterview.
func (c *CandidateInterviewClient) Delete() *CandidateInterviewDelete {
	mutation := newCandidateInterviewMutation(c.config, OpDelete)
	return &CandidateInterviewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateInterviewClient) DeleteOne(ci *CandidateInterview) *CandidateInterviewDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateInterviewClient) DeleteOneID(id uuid.UUID) *CandidateInterviewDeleteOne {
	builder := c.Delete().Where(candidateinterview.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateInterviewDeleteOne{builder}
}

// Query returns a query builder for CandidateInterview.
func (c *CandidateInterviewClient) Query() *CandidateInterviewQuery {
	return &CandidateInterviewQuery{
		config: c.config,
	}
}

// Get returns a CandidateInterview entity by its id.
func (c *CandidateInterviewClient) Get(ctx context.Context, id uuid.UUID) (*CandidateInterview, error) {
	return c.Query().Where(candidateinterview.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateInterviewClient) GetX(ctx context.Context, id uuid.UUID) *CandidateInterview {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateJobEdge queries the candidate_job_edge edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryCandidateJobEdge(ci *CandidateInterview) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidateinterview.CandidateJobEdgeTable, candidateinterview.CandidateJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryAttachmentEdges(ci *CandidateInterview) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidateinterview.AttachmentEdgesTable, candidateinterview.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviewerEdges queries the interviewer_edges edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryInterviewerEdges(ci *CandidateInterview) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, candidateinterview.InterviewerEdgesTable, candidateinterview.InterviewerEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedByEdge queries the created_by_edge edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryCreatedByEdge(ci *CandidateInterview) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidateinterview.CreatedByEdgeTable, candidateinterview.CreatedByEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserInterviewers queries the user_interviewers edge of a CandidateInterview.
func (c *CandidateInterviewClient) QueryUserInterviewers(ci *CandidateInterview) *CandidateInterviewerQuery {
	query := &CandidateInterviewerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterview.Table, candidateinterview.FieldID, id),
			sqlgraph.To(candidateinterviewer.Table, candidateinterviewer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, candidateinterview.UserInterviewersTable, candidateinterview.UserInterviewersColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateInterviewClient) Hooks() []Hook {
	return c.hooks.CandidateInterview
}

// CandidateInterviewerClient is a client for the CandidateInterviewer schema.
type CandidateInterviewerClient struct {
	config
}

// NewCandidateInterviewerClient returns a client for the CandidateInterviewer from the given config.
func NewCandidateInterviewerClient(c config) *CandidateInterviewerClient {
	return &CandidateInterviewerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidateinterviewer.Hooks(f(g(h())))`.
func (c *CandidateInterviewerClient) Use(hooks ...Hook) {
	c.hooks.CandidateInterviewer = append(c.hooks.CandidateInterviewer, hooks...)
}

// Create returns a builder for creating a CandidateInterviewer entity.
func (c *CandidateInterviewerClient) Create() *CandidateInterviewerCreate {
	mutation := newCandidateInterviewerMutation(c.config, OpCreate)
	return &CandidateInterviewerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateInterviewer entities.
func (c *CandidateInterviewerClient) CreateBulk(builders ...*CandidateInterviewerCreate) *CandidateInterviewerCreateBulk {
	return &CandidateInterviewerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateInterviewer.
func (c *CandidateInterviewerClient) Update() *CandidateInterviewerUpdate {
	mutation := newCandidateInterviewerMutation(c.config, OpUpdate)
	return &CandidateInterviewerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateInterviewerClient) UpdateOne(ci *CandidateInterviewer) *CandidateInterviewerUpdateOne {
	mutation := newCandidateInterviewerMutation(c.config, OpUpdateOne, withCandidateInterviewer(ci))
	return &CandidateInterviewerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateInterviewerClient) UpdateOneID(id uuid.UUID) *CandidateInterviewerUpdateOne {
	mutation := newCandidateInterviewerMutation(c.config, OpUpdateOne, withCandidateInterviewerID(id))
	return &CandidateInterviewerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateInterviewer.
func (c *CandidateInterviewerClient) Delete() *CandidateInterviewerDelete {
	mutation := newCandidateInterviewerMutation(c.config, OpDelete)
	return &CandidateInterviewerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateInterviewerClient) DeleteOne(ci *CandidateInterviewer) *CandidateInterviewerDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateInterviewerClient) DeleteOneID(id uuid.UUID) *CandidateInterviewerDeleteOne {
	builder := c.Delete().Where(candidateinterviewer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateInterviewerDeleteOne{builder}
}

// Query returns a query builder for CandidateInterviewer.
func (c *CandidateInterviewerClient) Query() *CandidateInterviewerQuery {
	return &CandidateInterviewerQuery{
		config: c.config,
	}
}

// Get returns a CandidateInterviewer entity by its id.
func (c *CandidateInterviewerClient) Get(ctx context.Context, id uuid.UUID) (*CandidateInterviewer, error) {
	return c.Query().Where(candidateinterviewer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateInterviewerClient) GetX(ctx context.Context, id uuid.UUID) *CandidateInterviewer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEdge queries the user_edge edge of a CandidateInterviewer.
func (c *CandidateInterviewerClient) QueryUserEdge(ci *CandidateInterviewer) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterviewer.Table, candidateinterviewer.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, candidateinterviewer.UserEdgeTable, candidateinterviewer.UserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviewEdge queries the interview_edge edge of a CandidateInterviewer.
func (c *CandidateInterviewerClient) QueryInterviewEdge(ci *CandidateInterviewer) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidateinterviewer.Table, candidateinterviewer.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, candidateinterviewer.InterviewEdgeTable, candidateinterviewer.InterviewEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateInterviewerClient) Hooks() []Hook {
	return c.hooks.CandidateInterviewer
}

// CandidateJobClient is a client for the CandidateJob schema.
type CandidateJobClient struct {
	config
}

// NewCandidateJobClient returns a client for the CandidateJob from the given config.
func NewCandidateJobClient(c config) *CandidateJobClient {
	return &CandidateJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidatejob.Hooks(f(g(h())))`.
func (c *CandidateJobClient) Use(hooks ...Hook) {
	c.hooks.CandidateJob = append(c.hooks.CandidateJob, hooks...)
}

// Create returns a builder for creating a CandidateJob entity.
func (c *CandidateJobClient) Create() *CandidateJobCreate {
	mutation := newCandidateJobMutation(c.config, OpCreate)
	return &CandidateJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateJob entities.
func (c *CandidateJobClient) CreateBulk(builders ...*CandidateJobCreate) *CandidateJobCreateBulk {
	return &CandidateJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateJob.
func (c *CandidateJobClient) Update() *CandidateJobUpdate {
	mutation := newCandidateJobMutation(c.config, OpUpdate)
	return &CandidateJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateJobClient) UpdateOne(cj *CandidateJob) *CandidateJobUpdateOne {
	mutation := newCandidateJobMutation(c.config, OpUpdateOne, withCandidateJob(cj))
	return &CandidateJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateJobClient) UpdateOneID(id uuid.UUID) *CandidateJobUpdateOne {
	mutation := newCandidateJobMutation(c.config, OpUpdateOne, withCandidateJobID(id))
	return &CandidateJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateJob.
func (c *CandidateJobClient) Delete() *CandidateJobDelete {
	mutation := newCandidateJobMutation(c.config, OpDelete)
	return &CandidateJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateJobClient) DeleteOne(cj *CandidateJob) *CandidateJobDeleteOne {
	return c.DeleteOneID(cj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateJobClient) DeleteOneID(id uuid.UUID) *CandidateJobDeleteOne {
	builder := c.Delete().Where(candidatejob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateJobDeleteOne{builder}
}

// Query returns a query builder for CandidateJob.
func (c *CandidateJobClient) Query() *CandidateJobQuery {
	return &CandidateJobQuery{
		config: c.config,
	}
}

// Get returns a CandidateJob entity by its id.
func (c *CandidateJobClient) Get(ctx context.Context, id uuid.UUID) (*CandidateJob, error) {
	return c.Query().Where(candidatejob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateJobClient) GetX(ctx context.Context, id uuid.UUID) *CandidateJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateJob.
func (c *CandidateJobClient) QueryAttachmentEdges(cj *CandidateJob) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.AttachmentEdgesTable, candidatejob.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringJobEdge queries the hiring_job_edge edge of a CandidateJob.
func (c *CandidateJobClient) QueryHiringJobEdge(cj *CandidateJob) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejob.HiringJobEdgeTable, candidatejob.HiringJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobFeedback queries the candidate_job_feedback edge of a CandidateJob.
func (c *CandidateJobClient) QueryCandidateJobFeedback(cj *CandidateJob) *CandidateJobFeedbackQuery {
	query := &CandidateJobFeedbackQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(candidatejobfeedback.Table, candidatejobfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.CandidateJobFeedbackTable, candidatejob.CandidateJobFeedbackColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEdge queries the candidate_edge edge of a CandidateJob.
func (c *CandidateJobClient) QueryCandidateEdge(cj *CandidateJob) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejob.CandidateEdgeTable, candidatejob.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobInterview queries the candidate_job_interview edge of a CandidateJob.
func (c *CandidateJobClient) QueryCandidateJobInterview(cj *CandidateJob) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.CandidateJobInterviewTable, candidatejob.CandidateJobInterviewColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedByEdge queries the created_by_edge edge of a CandidateJob.
func (c *CandidateJobClient) QueryCreatedByEdge(cj *CandidateJob) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejob.CreatedByEdgeTable, candidatejob.CreatedByEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobStep queries the candidate_job_step edge of a CandidateJob.
func (c *CandidateJobClient) QueryCandidateJobStep(cj *CandidateJob) *CandidateJobStepQuery {
	query := &CandidateJobStepQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, id),
			sqlgraph.To(candidatejobstep.Table, candidatejobstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.CandidateJobStepTable, candidatejob.CandidateJobStepColumn),
		)
		fromV = sqlgraph.Neighbors(cj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateJobClient) Hooks() []Hook {
	return c.hooks.CandidateJob
}

// CandidateJobFeedbackClient is a client for the CandidateJobFeedback schema.
type CandidateJobFeedbackClient struct {
	config
}

// NewCandidateJobFeedbackClient returns a client for the CandidateJobFeedback from the given config.
func NewCandidateJobFeedbackClient(c config) *CandidateJobFeedbackClient {
	return &CandidateJobFeedbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidatejobfeedback.Hooks(f(g(h())))`.
func (c *CandidateJobFeedbackClient) Use(hooks ...Hook) {
	c.hooks.CandidateJobFeedback = append(c.hooks.CandidateJobFeedback, hooks...)
}

// Create returns a builder for creating a CandidateJobFeedback entity.
func (c *CandidateJobFeedbackClient) Create() *CandidateJobFeedbackCreate {
	mutation := newCandidateJobFeedbackMutation(c.config, OpCreate)
	return &CandidateJobFeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateJobFeedback entities.
func (c *CandidateJobFeedbackClient) CreateBulk(builders ...*CandidateJobFeedbackCreate) *CandidateJobFeedbackCreateBulk {
	return &CandidateJobFeedbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) Update() *CandidateJobFeedbackUpdate {
	mutation := newCandidateJobFeedbackMutation(c.config, OpUpdate)
	return &CandidateJobFeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateJobFeedbackClient) UpdateOne(cjf *CandidateJobFeedback) *CandidateJobFeedbackUpdateOne {
	mutation := newCandidateJobFeedbackMutation(c.config, OpUpdateOne, withCandidateJobFeedback(cjf))
	return &CandidateJobFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateJobFeedbackClient) UpdateOneID(id uuid.UUID) *CandidateJobFeedbackUpdateOne {
	mutation := newCandidateJobFeedbackMutation(c.config, OpUpdateOne, withCandidateJobFeedbackID(id))
	return &CandidateJobFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) Delete() *CandidateJobFeedbackDelete {
	mutation := newCandidateJobFeedbackMutation(c.config, OpDelete)
	return &CandidateJobFeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateJobFeedbackClient) DeleteOne(cjf *CandidateJobFeedback) *CandidateJobFeedbackDeleteOne {
	return c.DeleteOneID(cjf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateJobFeedbackClient) DeleteOneID(id uuid.UUID) *CandidateJobFeedbackDeleteOne {
	builder := c.Delete().Where(candidatejobfeedback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateJobFeedbackDeleteOne{builder}
}

// Query returns a query builder for CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) Query() *CandidateJobFeedbackQuery {
	return &CandidateJobFeedbackQuery{
		config: c.config,
	}
}

// Get returns a CandidateJobFeedback entity by its id.
func (c *CandidateJobFeedbackClient) Get(ctx context.Context, id uuid.UUID) (*CandidateJobFeedback, error) {
	return c.Query().Where(candidatejobfeedback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateJobFeedbackClient) GetX(ctx context.Context, id uuid.UUID) *CandidateJobFeedback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreatedByEdge queries the created_by_edge edge of a CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) QueryCreatedByEdge(cjf *CandidateJobFeedback) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cjf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejobfeedback.Table, candidatejobfeedback.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejobfeedback.CreatedByEdgeTable, candidatejobfeedback.CreatedByEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cjf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobEdge queries the candidate_job_edge edge of a CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) QueryCandidateJobEdge(cjf *CandidateJobFeedback) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cjf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejobfeedback.Table, candidatejobfeedback.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejobfeedback.CandidateJobEdgeTable, candidatejobfeedback.CandidateJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cjf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateJobFeedback.
func (c *CandidateJobFeedbackClient) QueryAttachmentEdges(cjf *CandidateJobFeedback) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cjf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejobfeedback.Table, candidatejobfeedback.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejobfeedback.AttachmentEdgesTable, candidatejobfeedback.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(cjf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateJobFeedbackClient) Hooks() []Hook {
	return c.hooks.CandidateJobFeedback
}

// CandidateJobStepClient is a client for the CandidateJobStep schema.
type CandidateJobStepClient struct {
	config
}

// NewCandidateJobStepClient returns a client for the CandidateJobStep from the given config.
func NewCandidateJobStepClient(c config) *CandidateJobStepClient {
	return &CandidateJobStepClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidatejobstep.Hooks(f(g(h())))`.
func (c *CandidateJobStepClient) Use(hooks ...Hook) {
	c.hooks.CandidateJobStep = append(c.hooks.CandidateJobStep, hooks...)
}

// Create returns a builder for creating a CandidateJobStep entity.
func (c *CandidateJobStepClient) Create() *CandidateJobStepCreate {
	mutation := newCandidateJobStepMutation(c.config, OpCreate)
	return &CandidateJobStepCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateJobStep entities.
func (c *CandidateJobStepClient) CreateBulk(builders ...*CandidateJobStepCreate) *CandidateJobStepCreateBulk {
	return &CandidateJobStepCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateJobStep.
func (c *CandidateJobStepClient) Update() *CandidateJobStepUpdate {
	mutation := newCandidateJobStepMutation(c.config, OpUpdate)
	return &CandidateJobStepUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateJobStepClient) UpdateOne(cjs *CandidateJobStep) *CandidateJobStepUpdateOne {
	mutation := newCandidateJobStepMutation(c.config, OpUpdateOne, withCandidateJobStep(cjs))
	return &CandidateJobStepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateJobStepClient) UpdateOneID(id uuid.UUID) *CandidateJobStepUpdateOne {
	mutation := newCandidateJobStepMutation(c.config, OpUpdateOne, withCandidateJobStepID(id))
	return &CandidateJobStepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateJobStep.
func (c *CandidateJobStepClient) Delete() *CandidateJobStepDelete {
	mutation := newCandidateJobStepMutation(c.config, OpDelete)
	return &CandidateJobStepDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateJobStepClient) DeleteOne(cjs *CandidateJobStep) *CandidateJobStepDeleteOne {
	return c.DeleteOneID(cjs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateJobStepClient) DeleteOneID(id uuid.UUID) *CandidateJobStepDeleteOne {
	builder := c.Delete().Where(candidatejobstep.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateJobStepDeleteOne{builder}
}

// Query returns a query builder for CandidateJobStep.
func (c *CandidateJobStepClient) Query() *CandidateJobStepQuery {
	return &CandidateJobStepQuery{
		config: c.config,
	}
}

// Get returns a CandidateJobStep entity by its id.
func (c *CandidateJobStepClient) Get(ctx context.Context, id uuid.UUID) (*CandidateJobStep, error) {
	return c.Query().Where(candidatejobstep.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateJobStepClient) GetX(ctx context.Context, id uuid.UUID) *CandidateJobStep {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateJobEdge queries the candidate_job_edge edge of a CandidateJobStep.
func (c *CandidateJobStepClient) QueryCandidateJobEdge(cjs *CandidateJobStep) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cjs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejobstep.Table, candidatejobstep.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejobstep.CandidateJobEdgeTable, candidatejobstep.CandidateJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cjs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateJobStepClient) Hooks() []Hook {
	return c.hooks.CandidateJobStep
}

// CandidateNoteClient is a client for the CandidateNote schema.
type CandidateNoteClient struct {
	config
}

// NewCandidateNoteClient returns a client for the CandidateNote from the given config.
func NewCandidateNoteClient(c config) *CandidateNoteClient {
	return &CandidateNoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidatenote.Hooks(f(g(h())))`.
func (c *CandidateNoteClient) Use(hooks ...Hook) {
	c.hooks.CandidateNote = append(c.hooks.CandidateNote, hooks...)
}

// Create returns a builder for creating a CandidateNote entity.
func (c *CandidateNoteClient) Create() *CandidateNoteCreate {
	mutation := newCandidateNoteMutation(c.config, OpCreate)
	return &CandidateNoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CandidateNote entities.
func (c *CandidateNoteClient) CreateBulk(builders ...*CandidateNoteCreate) *CandidateNoteCreateBulk {
	return &CandidateNoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CandidateNote.
func (c *CandidateNoteClient) Update() *CandidateNoteUpdate {
	mutation := newCandidateNoteMutation(c.config, OpUpdate)
	return &CandidateNoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateNoteClient) UpdateOne(cn *CandidateNote) *CandidateNoteUpdateOne {
	mutation := newCandidateNoteMutation(c.config, OpUpdateOne, withCandidateNote(cn))
	return &CandidateNoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateNoteClient) UpdateOneID(id uuid.UUID) *CandidateNoteUpdateOne {
	mutation := newCandidateNoteMutation(c.config, OpUpdateOne, withCandidateNoteID(id))
	return &CandidateNoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CandidateNote.
func (c *CandidateNoteClient) Delete() *CandidateNoteDelete {
	mutation := newCandidateNoteMutation(c.config, OpDelete)
	return &CandidateNoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CandidateNoteClient) DeleteOne(cn *CandidateNote) *CandidateNoteDeleteOne {
	return c.DeleteOneID(cn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CandidateNoteClient) DeleteOneID(id uuid.UUID) *CandidateNoteDeleteOne {
	builder := c.Delete().Where(candidatenote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateNoteDeleteOne{builder}
}

// Query returns a query builder for CandidateNote.
func (c *CandidateNoteClient) Query() *CandidateNoteQuery {
	return &CandidateNoteQuery{
		config: c.config,
	}
}

// Get returns a CandidateNote entity by its id.
func (c *CandidateNoteClient) Get(ctx context.Context, id uuid.UUID) (*CandidateNote, error) {
	return c.Query().Where(candidatenote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateNoteClient) GetX(ctx context.Context, id uuid.UUID) *CandidateNote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateEdge queries the candidate_edge edge of a CandidateNote.
func (c *CandidateNoteClient) QueryCandidateEdge(cn *CandidateNote) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatenote.Table, candidatenote.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatenote.CandidateEdgeTable, candidatenote.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedByEdge queries the created_by_edge edge of a CandidateNote.
func (c *CandidateNoteClient) QueryCreatedByEdge(cn *CandidateNote) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatenote.Table, candidatenote.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatenote.CreatedByEdgeTable, candidatenote.CreatedByEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(cn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachmentEdges queries the attachment_edges edge of a CandidateNote.
func (c *CandidateNoteClient) QueryAttachmentEdges(cn *CandidateNote) *AttachmentQuery {
	query := &AttachmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatenote.Table, candidatenote.FieldID, id),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatenote.AttachmentEdgesTable, candidatenote.AttachmentEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(cn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CandidateNoteClient) Hooks() []Hook {
	return c.hooks.CandidateNote
}

// EmailRoleAttributeClient is a client for the EmailRoleAttribute schema.
type EmailRoleAttributeClient struct {
	config
}

// NewEmailRoleAttributeClient returns a client for the EmailRoleAttribute from the given config.
func NewEmailRoleAttributeClient(c config) *EmailRoleAttributeClient {
	return &EmailRoleAttributeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailroleattribute.Hooks(f(g(h())))`.
func (c *EmailRoleAttributeClient) Use(hooks ...Hook) {
	c.hooks.EmailRoleAttribute = append(c.hooks.EmailRoleAttribute, hooks...)
}

// Create returns a builder for creating a EmailRoleAttribute entity.
func (c *EmailRoleAttributeClient) Create() *EmailRoleAttributeCreate {
	mutation := newEmailRoleAttributeMutation(c.config, OpCreate)
	return &EmailRoleAttributeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailRoleAttribute entities.
func (c *EmailRoleAttributeClient) CreateBulk(builders ...*EmailRoleAttributeCreate) *EmailRoleAttributeCreateBulk {
	return &EmailRoleAttributeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailRoleAttribute.
func (c *EmailRoleAttributeClient) Update() *EmailRoleAttributeUpdate {
	mutation := newEmailRoleAttributeMutation(c.config, OpUpdate)
	return &EmailRoleAttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailRoleAttributeClient) UpdateOne(era *EmailRoleAttribute) *EmailRoleAttributeUpdateOne {
	mutation := newEmailRoleAttributeMutation(c.config, OpUpdateOne, withEmailRoleAttribute(era))
	return &EmailRoleAttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailRoleAttributeClient) UpdateOneID(id uuid.UUID) *EmailRoleAttributeUpdateOne {
	mutation := newEmailRoleAttributeMutation(c.config, OpUpdateOne, withEmailRoleAttributeID(id))
	return &EmailRoleAttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailRoleAttribute.
func (c *EmailRoleAttributeClient) Delete() *EmailRoleAttributeDelete {
	mutation := newEmailRoleAttributeMutation(c.config, OpDelete)
	return &EmailRoleAttributeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailRoleAttributeClient) DeleteOne(era *EmailRoleAttribute) *EmailRoleAttributeDeleteOne {
	return c.DeleteOneID(era.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailRoleAttributeClient) DeleteOneID(id uuid.UUID) *EmailRoleAttributeDeleteOne {
	builder := c.Delete().Where(emailroleattribute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailRoleAttributeDeleteOne{builder}
}

// Query returns a query builder for EmailRoleAttribute.
func (c *EmailRoleAttributeClient) Query() *EmailRoleAttributeQuery {
	return &EmailRoleAttributeQuery{
		config: c.config,
	}
}

// Get returns a EmailRoleAttribute entity by its id.
func (c *EmailRoleAttributeClient) Get(ctx context.Context, id uuid.UUID) (*EmailRoleAttribute, error) {
	return c.Query().Where(emailroleattribute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailRoleAttributeClient) GetX(ctx context.Context, id uuid.UUID) *EmailRoleAttribute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmailTemplateEdge queries the email_template_edge edge of a EmailRoleAttribute.
func (c *EmailRoleAttributeClient) QueryEmailTemplateEdge(era *EmailRoleAttribute) *EmailTemplateQuery {
	query := &EmailTemplateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := era.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailroleattribute.Table, emailroleattribute.FieldID, id),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailroleattribute.EmailTemplateEdgeTable, emailroleattribute.EmailTemplateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(era.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleEdge queries the role_edge edge of a EmailRoleAttribute.
func (c *EmailRoleAttributeClient) QueryRoleEdge(era *EmailRoleAttribute) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := era.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailroleattribute.Table, emailroleattribute.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailroleattribute.RoleEdgeTable, emailroleattribute.RoleEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(era.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailRoleAttributeClient) Hooks() []Hook {
	return c.hooks.EmailRoleAttribute
}

// EmailTemplateClient is a client for the EmailTemplate schema.
type EmailTemplateClient struct {
	config
}

// NewEmailTemplateClient returns a client for the EmailTemplate from the given config.
func NewEmailTemplateClient(c config) *EmailTemplateClient {
	return &EmailTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailtemplate.Hooks(f(g(h())))`.
func (c *EmailTemplateClient) Use(hooks ...Hook) {
	c.hooks.EmailTemplate = append(c.hooks.EmailTemplate, hooks...)
}

// Create returns a builder for creating a EmailTemplate entity.
func (c *EmailTemplateClient) Create() *EmailTemplateCreate {
	mutation := newEmailTemplateMutation(c.config, OpCreate)
	return &EmailTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailTemplate entities.
func (c *EmailTemplateClient) CreateBulk(builders ...*EmailTemplateCreate) *EmailTemplateCreateBulk {
	return &EmailTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailTemplate.
func (c *EmailTemplateClient) Update() *EmailTemplateUpdate {
	mutation := newEmailTemplateMutation(c.config, OpUpdate)
	return &EmailTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailTemplateClient) UpdateOne(et *EmailTemplate) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplate(et))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailTemplateClient) UpdateOneID(id uuid.UUID) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplateID(id))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailTemplate.
func (c *EmailTemplateClient) Delete() *EmailTemplateDelete {
	mutation := newEmailTemplateMutation(c.config, OpDelete)
	return &EmailTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailTemplateClient) DeleteOne(et *EmailTemplate) *EmailTemplateDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailTemplateClient) DeleteOneID(id uuid.UUID) *EmailTemplateDeleteOne {
	builder := c.Delete().Where(emailtemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailTemplateDeleteOne{builder}
}

// Query returns a query builder for EmailTemplate.
func (c *EmailTemplateClient) Query() *EmailTemplateQuery {
	return &EmailTemplateQuery{
		config: c.config,
	}
}

// Get returns a EmailTemplate entity by its id.
func (c *EmailTemplateClient) Get(ctx context.Context, id uuid.UUID) (*EmailTemplate, error) {
	return c.Query().Where(emailtemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailTemplateClient) GetX(ctx context.Context, id uuid.UUID) *EmailTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoleEdges queries the role_edges edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryRoleEdges(et *EmailTemplate) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, emailtemplate.RoleEdgesTable, emailtemplate.RoleEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleEmailTemplates queries the role_email_templates edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryRoleEmailTemplates(et *EmailTemplate) *EmailRoleAttributeQuery {
	query := &EmailRoleAttributeQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(emailroleattribute.Table, emailroleattribute.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, emailtemplate.RoleEmailTemplatesTable, emailtemplate.RoleEmailTemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailTemplateClient) Hooks() []Hook {
	return c.hooks.EmailTemplate
}

// EntityPermissionClient is a client for the EntityPermission schema.
type EntityPermissionClient struct {
	config
}

// NewEntityPermissionClient returns a client for the EntityPermission from the given config.
func NewEntityPermissionClient(c config) *EntityPermissionClient {
	return &EntityPermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitypermission.Hooks(f(g(h())))`.
func (c *EntityPermissionClient) Use(hooks ...Hook) {
	c.hooks.EntityPermission = append(c.hooks.EntityPermission, hooks...)
}

// Create returns a builder for creating a EntityPermission entity.
func (c *EntityPermissionClient) Create() *EntityPermissionCreate {
	mutation := newEntityPermissionMutation(c.config, OpCreate)
	return &EntityPermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntityPermission entities.
func (c *EntityPermissionClient) CreateBulk(builders ...*EntityPermissionCreate) *EntityPermissionCreateBulk {
	return &EntityPermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntityPermission.
func (c *EntityPermissionClient) Update() *EntityPermissionUpdate {
	mutation := newEntityPermissionMutation(c.config, OpUpdate)
	return &EntityPermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntityPermissionClient) UpdateOne(ep *EntityPermission) *EntityPermissionUpdateOne {
	mutation := newEntityPermissionMutation(c.config, OpUpdateOne, withEntityPermission(ep))
	return &EntityPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntityPermissionClient) UpdateOneID(id uuid.UUID) *EntityPermissionUpdateOne {
	mutation := newEntityPermissionMutation(c.config, OpUpdateOne, withEntityPermissionID(id))
	return &EntityPermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntityPermission.
func (c *EntityPermissionClient) Delete() *EntityPermissionDelete {
	mutation := newEntityPermissionMutation(c.config, OpDelete)
	return &EntityPermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntityPermissionClient) DeleteOne(ep *EntityPermission) *EntityPermissionDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntityPermissionClient) DeleteOneID(id uuid.UUID) *EntityPermissionDeleteOne {
	builder := c.Delete().Where(entitypermission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntityPermissionDeleteOne{builder}
}

// Query returns a query builder for EntityPermission.
func (c *EntityPermissionClient) Query() *EntityPermissionQuery {
	return &EntityPermissionQuery{
		config: c.config,
	}
}

// Get returns a EntityPermission entity by its id.
func (c *EntityPermissionClient) Get(ctx context.Context, id uuid.UUID) (*EntityPermission, error) {
	return c.Query().Where(entitypermission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntityPermissionClient) GetX(ctx context.Context, id uuid.UUID) *EntityPermission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPermissionEdges queries the permission_edges edge of a EntityPermission.
func (c *EntityPermissionClient) QueryPermissionEdges(ep *EntityPermission) *PermissionQuery {
	query := &PermissionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitypermission.Table, entitypermission.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entitypermission.PermissionEdgesTable, entitypermission.PermissionEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserEdge queries the user_edge edge of a EntityPermission.
func (c *EntityPermissionClient) QueryUserEdge(ep *EntityPermission) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitypermission.Table, entitypermission.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entitypermission.UserEdgeTable, entitypermission.UserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleEdge queries the role_edge edge of a EntityPermission.
func (c *EntityPermissionClient) QueryRoleEdge(ep *EntityPermission) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitypermission.Table, entitypermission.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entitypermission.RoleEdgeTable, entitypermission.RoleEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntityPermissionClient) Hooks() []Hook {
	return c.hooks.EntityPermission
}

// EntitySkillClient is a client for the EntitySkill schema.
type EntitySkillClient struct {
	config
}

// NewEntitySkillClient returns a client for the EntitySkill from the given config.
func NewEntitySkillClient(c config) *EntitySkillClient {
	return &EntitySkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entityskill.Hooks(f(g(h())))`.
func (c *EntitySkillClient) Use(hooks ...Hook) {
	c.hooks.EntitySkill = append(c.hooks.EntitySkill, hooks...)
}

// Create returns a builder for creating a EntitySkill entity.
func (c *EntitySkillClient) Create() *EntitySkillCreate {
	mutation := newEntitySkillMutation(c.config, OpCreate)
	return &EntitySkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntitySkill entities.
func (c *EntitySkillClient) CreateBulk(builders ...*EntitySkillCreate) *EntitySkillCreateBulk {
	return &EntitySkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntitySkill.
func (c *EntitySkillClient) Update() *EntitySkillUpdate {
	mutation := newEntitySkillMutation(c.config, OpUpdate)
	return &EntitySkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntitySkillClient) UpdateOne(es *EntitySkill) *EntitySkillUpdateOne {
	mutation := newEntitySkillMutation(c.config, OpUpdateOne, withEntitySkill(es))
	return &EntitySkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntitySkillClient) UpdateOneID(id uuid.UUID) *EntitySkillUpdateOne {
	mutation := newEntitySkillMutation(c.config, OpUpdateOne, withEntitySkillID(id))
	return &EntitySkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntitySkill.
func (c *EntitySkillClient) Delete() *EntitySkillDelete {
	mutation := newEntitySkillMutation(c.config, OpDelete)
	return &EntitySkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntitySkillClient) DeleteOne(es *EntitySkill) *EntitySkillDeleteOne {
	return c.DeleteOneID(es.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntitySkillClient) DeleteOneID(id uuid.UUID) *EntitySkillDeleteOne {
	builder := c.Delete().Where(entityskill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntitySkillDeleteOne{builder}
}

// Query returns a query builder for EntitySkill.
func (c *EntitySkillClient) Query() *EntitySkillQuery {
	return &EntitySkillQuery{
		config: c.config,
	}
}

// Get returns a EntitySkill entity by its id.
func (c *EntitySkillClient) Get(ctx context.Context, id uuid.UUID) (*EntitySkill, error) {
	return c.Query().Where(entityskill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntitySkillClient) GetX(ctx context.Context, id uuid.UUID) *EntitySkill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkillEdge queries the skill_edge edge of a EntitySkill.
func (c *EntitySkillClient) QuerySkillEdge(es *EntitySkill) *SkillQuery {
	query := &SkillQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entityskill.Table, entityskill.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entityskill.SkillEdgeTable, entityskill.SkillEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringJobEdge queries the hiring_job_edge edge of a EntitySkill.
func (c *EntitySkillClient) QueryHiringJobEdge(es *EntitySkill) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entityskill.Table, entityskill.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entityskill.HiringJobEdgeTable, entityskill.HiringJobEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateEdge queries the candidate_edge edge of a EntitySkill.
func (c *EntitySkillClient) QueryCandidateEdge(es *EntitySkill) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entityskill.Table, entityskill.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entityskill.CandidateEdgeTable, entityskill.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntitySkillClient) Hooks() []Hook {
	return c.hooks.EntitySkill
}

// HiringJobClient is a client for the HiringJob schema.
type HiringJobClient struct {
	config
}

// NewHiringJobClient returns a client for the HiringJob from the given config.
func NewHiringJobClient(c config) *HiringJobClient {
	return &HiringJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hiringjob.Hooks(f(g(h())))`.
func (c *HiringJobClient) Use(hooks ...Hook) {
	c.hooks.HiringJob = append(c.hooks.HiringJob, hooks...)
}

// Create returns a builder for creating a HiringJob entity.
func (c *HiringJobClient) Create() *HiringJobCreate {
	mutation := newHiringJobMutation(c.config, OpCreate)
	return &HiringJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HiringJob entities.
func (c *HiringJobClient) CreateBulk(builders ...*HiringJobCreate) *HiringJobCreateBulk {
	return &HiringJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HiringJob.
func (c *HiringJobClient) Update() *HiringJobUpdate {
	mutation := newHiringJobMutation(c.config, OpUpdate)
	return &HiringJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HiringJobClient) UpdateOne(hj *HiringJob) *HiringJobUpdateOne {
	mutation := newHiringJobMutation(c.config, OpUpdateOne, withHiringJob(hj))
	return &HiringJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HiringJobClient) UpdateOneID(id uuid.UUID) *HiringJobUpdateOne {
	mutation := newHiringJobMutation(c.config, OpUpdateOne, withHiringJobID(id))
	return &HiringJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HiringJob.
func (c *HiringJobClient) Delete() *HiringJobDelete {
	mutation := newHiringJobMutation(c.config, OpDelete)
	return &HiringJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HiringJobClient) DeleteOne(hj *HiringJob) *HiringJobDeleteOne {
	return c.DeleteOneID(hj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HiringJobClient) DeleteOneID(id uuid.UUID) *HiringJobDeleteOne {
	builder := c.Delete().Where(hiringjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HiringJobDeleteOne{builder}
}

// Query returns a query builder for HiringJob.
func (c *HiringJobClient) Query() *HiringJobQuery {
	return &HiringJobQuery{
		config: c.config,
	}
}

// Get returns a HiringJob entity by its id.
func (c *HiringJobClient) Get(ctx context.Context, id uuid.UUID) (*HiringJob, error) {
	return c.Query().Where(hiringjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HiringJobClient) GetX(ctx context.Context, id uuid.UUID) *HiringJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwnerEdge queries the owner_edge edge of a HiringJob.
func (c *HiringJobClient) QueryOwnerEdge(hj *HiringJob) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hiringjob.OwnerEdgeTable, hiringjob.OwnerEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobEdges queries the candidate_job_edges edge of a HiringJob.
func (c *HiringJobClient) QueryCandidateJobEdges(hj *HiringJob) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hiringjob.CandidateJobEdgesTable, hiringjob.CandidateJobEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringJobSkillEdges queries the hiring_job_skill_edges edge of a HiringJob.
func (c *HiringJobClient) QueryHiringJobSkillEdges(hj *HiringJob) *EntitySkillQuery {
	query := &EntitySkillQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(entityskill.Table, entityskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hiringjob.HiringJobSkillEdgesTable, hiringjob.HiringJobSkillEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringTeamEdge queries the hiring_team_edge edge of a HiringJob.
func (c *HiringJobClient) QueryHiringTeamEdge(hj *HiringJob) *HiringTeamQuery {
	query := &HiringTeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(hiringteam.Table, hiringteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hiringjob.HiringTeamEdgeTable, hiringjob.HiringTeamEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobPositionEdge queries the job_position_edge edge of a HiringJob.
func (c *HiringJobClient) QueryJobPositionEdge(hj *HiringJob) *JobPositionQuery {
	query := &JobPositionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hiringjob.JobPositionEdgeTable, hiringjob.JobPositionEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalUsers queries the approval_users edge of a HiringJob.
func (c *HiringJobClient) QueryApprovalUsers(hj *HiringJob) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hiringjob.ApprovalUsersTable, hiringjob.ApprovalUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecTeamEdge queries the rec_team_edge edge of a HiringJob.
func (c *HiringJobClient) QueryRecTeamEdge(hj *HiringJob) *RecTeamQuery {
	query := &RecTeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(recteam.Table, recteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hiringjob.RecTeamEdgeTable, hiringjob.RecTeamEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecInChargeEdge queries the rec_in_charge_edge edge of a HiringJob.
func (c *HiringJobClient) QueryRecInChargeEdge(hj *HiringJob) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hiringjob.RecInChargeEdgeTable, hiringjob.RecInChargeEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalSteps queries the approval_steps edge of a HiringJob.
func (c *HiringJobClient) QueryApprovalSteps(hj *HiringJob) *HiringJobStepQuery {
	query := &HiringJobStepQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjob.Table, hiringjob.FieldID, id),
			sqlgraph.To(hiringjobstep.Table, hiringjobstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hiringjob.ApprovalStepsTable, hiringjob.ApprovalStepsColumn),
		)
		fromV = sqlgraph.Neighbors(hj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HiringJobClient) Hooks() []Hook {
	return c.hooks.HiringJob
}

// HiringJobStepClient is a client for the HiringJobStep schema.
type HiringJobStepClient struct {
	config
}

// NewHiringJobStepClient returns a client for the HiringJobStep from the given config.
func NewHiringJobStepClient(c config) *HiringJobStepClient {
	return &HiringJobStepClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hiringjobstep.Hooks(f(g(h())))`.
func (c *HiringJobStepClient) Use(hooks ...Hook) {
	c.hooks.HiringJobStep = append(c.hooks.HiringJobStep, hooks...)
}

// Create returns a builder for creating a HiringJobStep entity.
func (c *HiringJobStepClient) Create() *HiringJobStepCreate {
	mutation := newHiringJobStepMutation(c.config, OpCreate)
	return &HiringJobStepCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HiringJobStep entities.
func (c *HiringJobStepClient) CreateBulk(builders ...*HiringJobStepCreate) *HiringJobStepCreateBulk {
	return &HiringJobStepCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HiringJobStep.
func (c *HiringJobStepClient) Update() *HiringJobStepUpdate {
	mutation := newHiringJobStepMutation(c.config, OpUpdate)
	return &HiringJobStepUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HiringJobStepClient) UpdateOne(hjs *HiringJobStep) *HiringJobStepUpdateOne {
	mutation := newHiringJobStepMutation(c.config, OpUpdateOne, withHiringJobStep(hjs))
	return &HiringJobStepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HiringJobStepClient) UpdateOneID(id uuid.UUID) *HiringJobStepUpdateOne {
	mutation := newHiringJobStepMutation(c.config, OpUpdateOne, withHiringJobStepID(id))
	return &HiringJobStepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HiringJobStep.
func (c *HiringJobStepClient) Delete() *HiringJobStepDelete {
	mutation := newHiringJobStepMutation(c.config, OpDelete)
	return &HiringJobStepDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HiringJobStepClient) DeleteOne(hjs *HiringJobStep) *HiringJobStepDeleteOne {
	return c.DeleteOneID(hjs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HiringJobStepClient) DeleteOneID(id uuid.UUID) *HiringJobStepDeleteOne {
	builder := c.Delete().Where(hiringjobstep.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HiringJobStepDeleteOne{builder}
}

// Query returns a query builder for HiringJobStep.
func (c *HiringJobStepClient) Query() *HiringJobStepQuery {
	return &HiringJobStepQuery{
		config: c.config,
	}
}

// Get returns a HiringJobStep entity by its id.
func (c *HiringJobStepClient) Get(ctx context.Context, id uuid.UUID) (*HiringJobStep, error) {
	return c.Query().Where(hiringjobstep.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HiringJobStepClient) GetX(ctx context.Context, id uuid.UUID) *HiringJobStep {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApprovalJob queries the approval_job edge of a HiringJobStep.
func (c *HiringJobStepClient) QueryApprovalJob(hjs *HiringJobStep) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hjs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjobstep.Table, hiringjobstep.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringjobstep.ApprovalJobTable, hiringjobstep.ApprovalJobColumn),
		)
		fromV = sqlgraph.Neighbors(hjs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalUser queries the approval_user edge of a HiringJobStep.
func (c *HiringJobStepClient) QueryApprovalUser(hjs *HiringJobStep) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hjs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjobstep.Table, hiringjobstep.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringjobstep.ApprovalUserTable, hiringjobstep.ApprovalUserColumn),
		)
		fromV = sqlgraph.Neighbors(hjs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HiringJobStepClient) Hooks() []Hook {
	return c.hooks.HiringJobStep
}

// HiringTeamClient is a client for the HiringTeam schema.
type HiringTeamClient struct {
	config
}

// NewHiringTeamClient returns a client for the HiringTeam from the given config.
func NewHiringTeamClient(c config) *HiringTeamClient {
	return &HiringTeamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hiringteam.Hooks(f(g(h())))`.
func (c *HiringTeamClient) Use(hooks ...Hook) {
	c.hooks.HiringTeam = append(c.hooks.HiringTeam, hooks...)
}

// Create returns a builder for creating a HiringTeam entity.
func (c *HiringTeamClient) Create() *HiringTeamCreate {
	mutation := newHiringTeamMutation(c.config, OpCreate)
	return &HiringTeamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HiringTeam entities.
func (c *HiringTeamClient) CreateBulk(builders ...*HiringTeamCreate) *HiringTeamCreateBulk {
	return &HiringTeamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HiringTeam.
func (c *HiringTeamClient) Update() *HiringTeamUpdate {
	mutation := newHiringTeamMutation(c.config, OpUpdate)
	return &HiringTeamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HiringTeamClient) UpdateOne(ht *HiringTeam) *HiringTeamUpdateOne {
	mutation := newHiringTeamMutation(c.config, OpUpdateOne, withHiringTeam(ht))
	return &HiringTeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HiringTeamClient) UpdateOneID(id uuid.UUID) *HiringTeamUpdateOne {
	mutation := newHiringTeamMutation(c.config, OpUpdateOne, withHiringTeamID(id))
	return &HiringTeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HiringTeam.
func (c *HiringTeamClient) Delete() *HiringTeamDelete {
	mutation := newHiringTeamMutation(c.config, OpDelete)
	return &HiringTeamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HiringTeamClient) DeleteOne(ht *HiringTeam) *HiringTeamDeleteOne {
	return c.DeleteOneID(ht.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HiringTeamClient) DeleteOneID(id uuid.UUID) *HiringTeamDeleteOne {
	builder := c.Delete().Where(hiringteam.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HiringTeamDeleteOne{builder}
}

// Query returns a query builder for HiringTeam.
func (c *HiringTeamClient) Query() *HiringTeamQuery {
	return &HiringTeamQuery{
		config: c.config,
	}
}

// Get returns a HiringTeam entity by its id.
func (c *HiringTeamClient) Get(ctx context.Context, id uuid.UUID) (*HiringTeam, error) {
	return c.Query().Where(hiringteam.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HiringTeamClient) GetX(ctx context.Context, id uuid.UUID) *HiringTeam {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHiringTeamJobEdges queries the hiring_team_job_edges edge of a HiringTeam.
func (c *HiringTeamClient) QueryHiringTeamJobEdges(ht *HiringTeam) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteam.Table, hiringteam.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hiringteam.HiringTeamJobEdgesTable, hiringteam.HiringTeamJobEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringMemberEdges queries the hiring_member_edges edge of a HiringTeam.
func (c *HiringTeamClient) QueryHiringMemberEdges(ht *HiringTeam) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteam.Table, hiringteam.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hiringteam.HiringMemberEdgesTable, hiringteam.HiringMemberEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApproversUsers queries the approvers_users edge of a HiringTeam.
func (c *HiringTeamClient) QueryApproversUsers(ht *HiringTeam) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteam.Table, hiringteam.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hiringteam.ApproversUsersTable, hiringteam.ApproversUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserEdges queries the user_edges edge of a HiringTeam.
func (c *HiringTeamClient) QueryUserEdges(ht *HiringTeam) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteam.Table, hiringteam.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hiringteam.UserEdgesTable, hiringteam.UserEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringTeamApprovers queries the hiring_team_approvers edge of a HiringTeam.
func (c *HiringTeamClient) QueryHiringTeamApprovers(ht *HiringTeam) *HiringTeamApproverQuery {
	query := &HiringTeamApproverQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteam.Table, hiringteam.FieldID, id),
			sqlgraph.To(hiringteamapprover.Table, hiringteamapprover.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hiringteam.HiringTeamApproversTable, hiringteam.HiringTeamApproversColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserHiringTeams queries the user_hiring_teams edge of a HiringTeam.
func (c *HiringTeamClient) QueryUserHiringTeams(ht *HiringTeam) *HiringTeamManagerQuery {
	query := &HiringTeamManagerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteam.Table, hiringteam.FieldID, id),
			sqlgraph.To(hiringteammanager.Table, hiringteammanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hiringteam.UserHiringTeamsTable, hiringteam.UserHiringTeamsColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HiringTeamClient) Hooks() []Hook {
	return c.hooks.HiringTeam
}

// HiringTeamApproverClient is a client for the HiringTeamApprover schema.
type HiringTeamApproverClient struct {
	config
}

// NewHiringTeamApproverClient returns a client for the HiringTeamApprover from the given config.
func NewHiringTeamApproverClient(c config) *HiringTeamApproverClient {
	return &HiringTeamApproverClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hiringteamapprover.Hooks(f(g(h())))`.
func (c *HiringTeamApproverClient) Use(hooks ...Hook) {
	c.hooks.HiringTeamApprover = append(c.hooks.HiringTeamApprover, hooks...)
}

// Create returns a builder for creating a HiringTeamApprover entity.
func (c *HiringTeamApproverClient) Create() *HiringTeamApproverCreate {
	mutation := newHiringTeamApproverMutation(c.config, OpCreate)
	return &HiringTeamApproverCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HiringTeamApprover entities.
func (c *HiringTeamApproverClient) CreateBulk(builders ...*HiringTeamApproverCreate) *HiringTeamApproverCreateBulk {
	return &HiringTeamApproverCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HiringTeamApprover.
func (c *HiringTeamApproverClient) Update() *HiringTeamApproverUpdate {
	mutation := newHiringTeamApproverMutation(c.config, OpUpdate)
	return &HiringTeamApproverUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HiringTeamApproverClient) UpdateOne(hta *HiringTeamApprover) *HiringTeamApproverUpdateOne {
	mutation := newHiringTeamApproverMutation(c.config, OpUpdateOne, withHiringTeamApprover(hta))
	return &HiringTeamApproverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HiringTeamApproverClient) UpdateOneID(id uuid.UUID) *HiringTeamApproverUpdateOne {
	mutation := newHiringTeamApproverMutation(c.config, OpUpdateOne, withHiringTeamApproverID(id))
	return &HiringTeamApproverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HiringTeamApprover.
func (c *HiringTeamApproverClient) Delete() *HiringTeamApproverDelete {
	mutation := newHiringTeamApproverMutation(c.config, OpDelete)
	return &HiringTeamApproverDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HiringTeamApproverClient) DeleteOne(hta *HiringTeamApprover) *HiringTeamApproverDeleteOne {
	return c.DeleteOneID(hta.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HiringTeamApproverClient) DeleteOneID(id uuid.UUID) *HiringTeamApproverDeleteOne {
	builder := c.Delete().Where(hiringteamapprover.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HiringTeamApproverDeleteOne{builder}
}

// Query returns a query builder for HiringTeamApprover.
func (c *HiringTeamApproverClient) Query() *HiringTeamApproverQuery {
	return &HiringTeamApproverQuery{
		config: c.config,
	}
}

// Get returns a HiringTeamApprover entity by its id.
func (c *HiringTeamApproverClient) Get(ctx context.Context, id uuid.UUID) (*HiringTeamApprover, error) {
	return c.Query().Where(hiringteamapprover.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HiringTeamApproverClient) GetX(ctx context.Context, id uuid.UUID) *HiringTeamApprover {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEdge queries the user_edge edge of a HiringTeamApprover.
func (c *HiringTeamApproverClient) QueryUserEdge(hta *HiringTeamApprover) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hta.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteamapprover.Table, hiringteamapprover.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringteamapprover.UserEdgeTable, hiringteamapprover.UserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(hta.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringTeamEdge queries the hiring_team_edge edge of a HiringTeamApprover.
func (c *HiringTeamApproverClient) QueryHiringTeamEdge(hta *HiringTeamApprover) *HiringTeamQuery {
	query := &HiringTeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hta.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteamapprover.Table, hiringteamapprover.FieldID, id),
			sqlgraph.To(hiringteam.Table, hiringteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringteamapprover.HiringTeamEdgeTable, hiringteamapprover.HiringTeamEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(hta.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HiringTeamApproverClient) Hooks() []Hook {
	return c.hooks.HiringTeamApprover
}

// HiringTeamManagerClient is a client for the HiringTeamManager schema.
type HiringTeamManagerClient struct {
	config
}

// NewHiringTeamManagerClient returns a client for the HiringTeamManager from the given config.
func NewHiringTeamManagerClient(c config) *HiringTeamManagerClient {
	return &HiringTeamManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hiringteammanager.Hooks(f(g(h())))`.
func (c *HiringTeamManagerClient) Use(hooks ...Hook) {
	c.hooks.HiringTeamManager = append(c.hooks.HiringTeamManager, hooks...)
}

// Create returns a builder for creating a HiringTeamManager entity.
func (c *HiringTeamManagerClient) Create() *HiringTeamManagerCreate {
	mutation := newHiringTeamManagerMutation(c.config, OpCreate)
	return &HiringTeamManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HiringTeamManager entities.
func (c *HiringTeamManagerClient) CreateBulk(builders ...*HiringTeamManagerCreate) *HiringTeamManagerCreateBulk {
	return &HiringTeamManagerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HiringTeamManager.
func (c *HiringTeamManagerClient) Update() *HiringTeamManagerUpdate {
	mutation := newHiringTeamManagerMutation(c.config, OpUpdate)
	return &HiringTeamManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HiringTeamManagerClient) UpdateOne(htm *HiringTeamManager) *HiringTeamManagerUpdateOne {
	mutation := newHiringTeamManagerMutation(c.config, OpUpdateOne, withHiringTeamManager(htm))
	return &HiringTeamManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HiringTeamManagerClient) UpdateOneID(id uuid.UUID) *HiringTeamManagerUpdateOne {
	mutation := newHiringTeamManagerMutation(c.config, OpUpdateOne, withHiringTeamManagerID(id))
	return &HiringTeamManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HiringTeamManager.
func (c *HiringTeamManagerClient) Delete() *HiringTeamManagerDelete {
	mutation := newHiringTeamManagerMutation(c.config, OpDelete)
	return &HiringTeamManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HiringTeamManagerClient) DeleteOne(htm *HiringTeamManager) *HiringTeamManagerDeleteOne {
	return c.DeleteOneID(htm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HiringTeamManagerClient) DeleteOneID(id uuid.UUID) *HiringTeamManagerDeleteOne {
	builder := c.Delete().Where(hiringteammanager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HiringTeamManagerDeleteOne{builder}
}

// Query returns a query builder for HiringTeamManager.
func (c *HiringTeamManagerClient) Query() *HiringTeamManagerQuery {
	return &HiringTeamManagerQuery{
		config: c.config,
	}
}

// Get returns a HiringTeamManager entity by its id.
func (c *HiringTeamManagerClient) Get(ctx context.Context, id uuid.UUID) (*HiringTeamManager, error) {
	return c.Query().Where(hiringteammanager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HiringTeamManagerClient) GetX(ctx context.Context, id uuid.UUID) *HiringTeamManager {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEdge queries the user_edge edge of a HiringTeamManager.
func (c *HiringTeamManagerClient) QueryUserEdge(htm *HiringTeamManager) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteammanager.Table, hiringteammanager.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringteammanager.UserEdgeTable, hiringteammanager.UserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(htm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringTeamEdge queries the hiring_team_edge edge of a HiringTeamManager.
func (c *HiringTeamManagerClient) QueryHiringTeamEdge(htm *HiringTeamManager) *HiringTeamQuery {
	query := &HiringTeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteammanager.Table, hiringteammanager.FieldID, id),
			sqlgraph.To(hiringteam.Table, hiringteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringteammanager.HiringTeamEdgeTable, hiringteammanager.HiringTeamEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(htm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HiringTeamManagerClient) Hooks() []Hook {
	return c.hooks.HiringTeamManager
}

// JobPositionClient is a client for the JobPosition schema.
type JobPositionClient struct {
	config
}

// NewJobPositionClient returns a client for the JobPosition from the given config.
func NewJobPositionClient(c config) *JobPositionClient {
	return &JobPositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobposition.Hooks(f(g(h())))`.
func (c *JobPositionClient) Use(hooks ...Hook) {
	c.hooks.JobPosition = append(c.hooks.JobPosition, hooks...)
}

// Create returns a builder for creating a JobPosition entity.
func (c *JobPositionClient) Create() *JobPositionCreate {
	mutation := newJobPositionMutation(c.config, OpCreate)
	return &JobPositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobPosition entities.
func (c *JobPositionClient) CreateBulk(builders ...*JobPositionCreate) *JobPositionCreateBulk {
	return &JobPositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobPosition.
func (c *JobPositionClient) Update() *JobPositionUpdate {
	mutation := newJobPositionMutation(c.config, OpUpdate)
	return &JobPositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobPositionClient) UpdateOne(jp *JobPosition) *JobPositionUpdateOne {
	mutation := newJobPositionMutation(c.config, OpUpdateOne, withJobPosition(jp))
	return &JobPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobPositionClient) UpdateOneID(id uuid.UUID) *JobPositionUpdateOne {
	mutation := newJobPositionMutation(c.config, OpUpdateOne, withJobPositionID(id))
	return &JobPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobPosition.
func (c *JobPositionClient) Delete() *JobPositionDelete {
	mutation := newJobPositionMutation(c.config, OpDelete)
	return &JobPositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobPositionClient) DeleteOne(jp *JobPosition) *JobPositionDeleteOne {
	return c.DeleteOneID(jp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobPositionClient) DeleteOneID(id uuid.UUID) *JobPositionDeleteOne {
	builder := c.Delete().Where(jobposition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobPositionDeleteOne{builder}
}

// Query returns a query builder for JobPosition.
func (c *JobPositionClient) Query() *JobPositionQuery {
	return &JobPositionQuery{
		config: c.config,
	}
}

// Get returns a JobPosition entity by its id.
func (c *JobPositionClient) Get(ctx context.Context, id uuid.UUID) (*JobPosition, error) {
	return c.Query().Where(jobposition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobPositionClient) GetX(ctx context.Context, id uuid.UUID) *JobPosition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHiringJobPositionEdges queries the hiring_job_position_edges edge of a JobPosition.
func (c *JobPositionClient) QueryHiringJobPositionEdges(jp *JobPosition) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.HiringJobPositionEdgesTable, jobposition.HiringJobPositionEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobPositionClient) Hooks() []Hook {
	return c.hooks.JobPosition
}

// OutgoingEmailClient is a client for the OutgoingEmail schema.
type OutgoingEmailClient struct {
	config
}

// NewOutgoingEmailClient returns a client for the OutgoingEmail from the given config.
func NewOutgoingEmailClient(c config) *OutgoingEmailClient {
	return &OutgoingEmailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `outgoingemail.Hooks(f(g(h())))`.
func (c *OutgoingEmailClient) Use(hooks ...Hook) {
	c.hooks.OutgoingEmail = append(c.hooks.OutgoingEmail, hooks...)
}

// Create returns a builder for creating a OutgoingEmail entity.
func (c *OutgoingEmailClient) Create() *OutgoingEmailCreate {
	mutation := newOutgoingEmailMutation(c.config, OpCreate)
	return &OutgoingEmailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OutgoingEmail entities.
func (c *OutgoingEmailClient) CreateBulk(builders ...*OutgoingEmailCreate) *OutgoingEmailCreateBulk {
	return &OutgoingEmailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OutgoingEmail.
func (c *OutgoingEmailClient) Update() *OutgoingEmailUpdate {
	mutation := newOutgoingEmailMutation(c.config, OpUpdate)
	return &OutgoingEmailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OutgoingEmailClient) UpdateOne(oe *OutgoingEmail) *OutgoingEmailUpdateOne {
	mutation := newOutgoingEmailMutation(c.config, OpUpdateOne, withOutgoingEmail(oe))
	return &OutgoingEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OutgoingEmailClient) UpdateOneID(id uuid.UUID) *OutgoingEmailUpdateOne {
	mutation := newOutgoingEmailMutation(c.config, OpUpdateOne, withOutgoingEmailID(id))
	return &OutgoingEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OutgoingEmail.
func (c *OutgoingEmailClient) Delete() *OutgoingEmailDelete {
	mutation := newOutgoingEmailMutation(c.config, OpDelete)
	return &OutgoingEmailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OutgoingEmailClient) DeleteOne(oe *OutgoingEmail) *OutgoingEmailDeleteOne {
	return c.DeleteOneID(oe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OutgoingEmailClient) DeleteOneID(id uuid.UUID) *OutgoingEmailDeleteOne {
	builder := c.Delete().Where(outgoingemail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OutgoingEmailDeleteOne{builder}
}

// Query returns a query builder for OutgoingEmail.
func (c *OutgoingEmailClient) Query() *OutgoingEmailQuery {
	return &OutgoingEmailQuery{
		config: c.config,
	}
}

// Get returns a OutgoingEmail entity by its id.
func (c *OutgoingEmailClient) Get(ctx context.Context, id uuid.UUID) (*OutgoingEmail, error) {
	return c.Query().Where(outgoingemail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OutgoingEmailClient) GetX(ctx context.Context, id uuid.UUID) *OutgoingEmail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidateEdge queries the candidate_edge edge of a OutgoingEmail.
func (c *OutgoingEmailClient) QueryCandidateEdge(oe *OutgoingEmail) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(outgoingemail.Table, outgoingemail.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, outgoingemail.CandidateEdgeTable, outgoingemail.CandidateEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(oe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OutgoingEmailClient) Hooks() []Hook {
	return c.hooks.OutgoingEmail
}

// PermissionClient is a client for the Permission schema.
type PermissionClient struct {
	config
}

// NewPermissionClient returns a client for the Permission from the given config.
func NewPermissionClient(c config) *PermissionClient {
	return &PermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permission.Hooks(f(g(h())))`.
func (c *PermissionClient) Use(hooks ...Hook) {
	c.hooks.Permission = append(c.hooks.Permission, hooks...)
}

// Create returns a builder for creating a Permission entity.
func (c *PermissionClient) Create() *PermissionCreate {
	mutation := newPermissionMutation(c.config, OpCreate)
	return &PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Permission entities.
func (c *PermissionClient) CreateBulk(builders ...*PermissionCreate) *PermissionCreateBulk {
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Permission.
func (c *PermissionClient) Update() *PermissionUpdate {
	mutation := newPermissionMutation(c.config, OpUpdate)
	return &PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionClient) UpdateOne(pe *Permission) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermission(pe))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionClient) UpdateOneID(id uuid.UUID) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermissionID(id))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Permission.
func (c *PermissionClient) Delete() *PermissionDelete {
	mutation := newPermissionMutation(c.config, OpDelete)
	return &PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionClient) DeleteOne(pe *Permission) *PermissionDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermissionClient) DeleteOneID(id uuid.UUID) *PermissionDeleteOne {
	builder := c.Delete().Where(permission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDeleteOne{builder}
}

// Query returns a query builder for Permission.
func (c *PermissionClient) Query() *PermissionQuery {
	return &PermissionQuery{
		config: c.config,
	}
}

// Get returns a Permission entity by its id.
func (c *PermissionClient) Get(ctx context.Context, id uuid.UUID) (*Permission, error) {
	return c.Query().Where(permission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionClient) GetX(ctx context.Context, id uuid.UUID) *Permission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroupPermissionEdge queries the group_permission_edge edge of a Permission.
func (c *PermissionClient) QueryGroupPermissionEdge(pe *Permission) *PermissionGroupQuery {
	query := &PermissionGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(permissiongroup.Table, permissiongroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permission.GroupPermissionEdgeTable, permission.GroupPermissionEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPermissionEdge queries the user_permission_edge edge of a Permission.
func (c *PermissionClient) QueryUserPermissionEdge(pe *Permission) *EntityPermissionQuery {
	query := &EntityPermissionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(entitypermission.Table, entitypermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, permission.UserPermissionEdgeTable, permission.UserPermissionEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionClient) Hooks() []Hook {
	return c.hooks.Permission
}

// PermissionGroupClient is a client for the PermissionGroup schema.
type PermissionGroupClient struct {
	config
}

// NewPermissionGroupClient returns a client for the PermissionGroup from the given config.
func NewPermissionGroupClient(c config) *PermissionGroupClient {
	return &PermissionGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permissiongroup.Hooks(f(g(h())))`.
func (c *PermissionGroupClient) Use(hooks ...Hook) {
	c.hooks.PermissionGroup = append(c.hooks.PermissionGroup, hooks...)
}

// Create returns a builder for creating a PermissionGroup entity.
func (c *PermissionGroupClient) Create() *PermissionGroupCreate {
	mutation := newPermissionGroupMutation(c.config, OpCreate)
	return &PermissionGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PermissionGroup entities.
func (c *PermissionGroupClient) CreateBulk(builders ...*PermissionGroupCreate) *PermissionGroupCreateBulk {
	return &PermissionGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PermissionGroup.
func (c *PermissionGroupClient) Update() *PermissionGroupUpdate {
	mutation := newPermissionGroupMutation(c.config, OpUpdate)
	return &PermissionGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionGroupClient) UpdateOne(pg *PermissionGroup) *PermissionGroupUpdateOne {
	mutation := newPermissionGroupMutation(c.config, OpUpdateOne, withPermissionGroup(pg))
	return &PermissionGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionGroupClient) UpdateOneID(id uuid.UUID) *PermissionGroupUpdateOne {
	mutation := newPermissionGroupMutation(c.config, OpUpdateOne, withPermissionGroupID(id))
	return &PermissionGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PermissionGroup.
func (c *PermissionGroupClient) Delete() *PermissionGroupDelete {
	mutation := newPermissionGroupMutation(c.config, OpDelete)
	return &PermissionGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionGroupClient) DeleteOne(pg *PermissionGroup) *PermissionGroupDeleteOne {
	return c.DeleteOneID(pg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermissionGroupClient) DeleteOneID(id uuid.UUID) *PermissionGroupDeleteOne {
	builder := c.Delete().Where(permissiongroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionGroupDeleteOne{builder}
}

// Query returns a query builder for PermissionGroup.
func (c *PermissionGroupClient) Query() *PermissionGroupQuery {
	return &PermissionGroupQuery{
		config: c.config,
	}
}

// Get returns a PermissionGroup entity by its id.
func (c *PermissionGroupClient) Get(ctx context.Context, id uuid.UUID) (*PermissionGroup, error) {
	return c.Query().Where(permissiongroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionGroupClient) GetX(ctx context.Context, id uuid.UUID) *PermissionGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroupPermissionParent queries the group_permission_parent edge of a PermissionGroup.
func (c *PermissionGroupClient) QueryGroupPermissionParent(pg *PermissionGroup) *PermissionGroupQuery {
	query := &PermissionGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissiongroup.Table, permissiongroup.FieldID, id),
			sqlgraph.To(permissiongroup.Table, permissiongroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permissiongroup.GroupPermissionParentTable, permissiongroup.GroupPermissionParentColumn),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupPermissionChildren queries the group_permission_children edge of a PermissionGroup.
func (c *PermissionGroupClient) QueryGroupPermissionChildren(pg *PermissionGroup) *PermissionGroupQuery {
	query := &PermissionGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissiongroup.Table, permissiongroup.FieldID, id),
			sqlgraph.To(permissiongroup.Table, permissiongroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, permissiongroup.GroupPermissionChildrenTable, permissiongroup.GroupPermissionChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissionEdges queries the permission_edges edge of a PermissionGroup.
func (c *PermissionGroupClient) QueryPermissionEdges(pg *PermissionGroup) *PermissionQuery {
	query := &PermissionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissiongroup.Table, permissiongroup.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, permissiongroup.PermissionEdgesTable, permissiongroup.PermissionEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionGroupClient) Hooks() []Hook {
	return c.hooks.PermissionGroup
}

// RecTeamClient is a client for the RecTeam schema.
type RecTeamClient struct {
	config
}

// NewRecTeamClient returns a client for the RecTeam from the given config.
func NewRecTeamClient(c config) *RecTeamClient {
	return &RecTeamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recteam.Hooks(f(g(h())))`.
func (c *RecTeamClient) Use(hooks ...Hook) {
	c.hooks.RecTeam = append(c.hooks.RecTeam, hooks...)
}

// Create returns a builder for creating a RecTeam entity.
func (c *RecTeamClient) Create() *RecTeamCreate {
	mutation := newRecTeamMutation(c.config, OpCreate)
	return &RecTeamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecTeam entities.
func (c *RecTeamClient) CreateBulk(builders ...*RecTeamCreate) *RecTeamCreateBulk {
	return &RecTeamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecTeam.
func (c *RecTeamClient) Update() *RecTeamUpdate {
	mutation := newRecTeamMutation(c.config, OpUpdate)
	return &RecTeamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecTeamClient) UpdateOne(rt *RecTeam) *RecTeamUpdateOne {
	mutation := newRecTeamMutation(c.config, OpUpdateOne, withRecTeam(rt))
	return &RecTeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecTeamClient) UpdateOneID(id uuid.UUID) *RecTeamUpdateOne {
	mutation := newRecTeamMutation(c.config, OpUpdateOne, withRecTeamID(id))
	return &RecTeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecTeam.
func (c *RecTeamClient) Delete() *RecTeamDelete {
	mutation := newRecTeamMutation(c.config, OpDelete)
	return &RecTeamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecTeamClient) DeleteOne(rt *RecTeam) *RecTeamDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecTeamClient) DeleteOneID(id uuid.UUID) *RecTeamDeleteOne {
	builder := c.Delete().Where(recteam.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecTeamDeleteOne{builder}
}

// Query returns a query builder for RecTeam.
func (c *RecTeamClient) Query() *RecTeamQuery {
	return &RecTeamQuery{
		config: c.config,
	}
}

// Get returns a RecTeam entity by its id.
func (c *RecTeamClient) Get(ctx context.Context, id uuid.UUID) (*RecTeam, error) {
	return c.Query().Where(recteam.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecTeamClient) GetX(ctx context.Context, id uuid.UUID) *RecTeam {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecMemberEdges queries the rec_member_edges edge of a RecTeam.
func (c *RecTeamClient) QueryRecMemberEdges(rt *RecTeam) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recteam.Table, recteam.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recteam.RecMemberEdgesTable, recteam.RecMemberEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecTeamJobEdges queries the rec_team_job_edges edge of a RecTeam.
func (c *RecTeamClient) QueryRecTeamJobEdges(rt *RecTeam) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recteam.Table, recteam.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recteam.RecTeamJobEdgesTable, recteam.RecTeamJobEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecLeaderEdge queries the rec_leader_edge edge of a RecTeam.
func (c *RecTeamClient) QueryRecLeaderEdge(rt *RecTeam) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recteam.Table, recteam.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, recteam.RecLeaderEdgeTable, recteam.RecLeaderEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecTeamClient) Hooks() []Hook {
	return c.hooks.RecTeam
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id uuid.UUID) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id uuid.UUID) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id uuid.UUID) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id uuid.UUID) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRolePermissionEdges queries the role_permission_edges edge of a Role.
func (c *RoleClient) QueryRolePermissionEdges(r *Role) *EntityPermissionQuery {
	query := &EntityPermissionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(entitypermission.Table, entitypermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.RolePermissionEdgesTable, role.RolePermissionEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserEdges queries the user_edges edge of a Role.
func (c *RoleClient) QueryUserEdges(r *Role) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.UserEdgesTable, role.UserEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailTemplateEdges queries the email_template_edges edge of a Role.
func (c *RoleClient) QueryEmailTemplateEdges(r *Role) *EmailTemplateQuery {
	query := &EmailTemplateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, role.EmailTemplateEdgesTable, role.EmailTemplateEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRoles queries the user_roles edge of a Role.
func (c *RoleClient) QueryUserRoles(r *Role) *UserRoleQuery {
	query := &UserRoleQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, role.UserRolesTable, role.UserRolesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailTemplateRoles queries the email_template_roles edge of a Role.
func (c *RoleClient) QueryEmailTemplateRoles(r *Role) *EmailRoleAttributeQuery {
	query := &EmailRoleAttributeQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(emailroleattribute.Table, emailroleattribute.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, role.EmailTemplateRolesTable, role.EmailTemplateRolesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id uuid.UUID) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id uuid.UUID) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id uuid.UUID) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id uuid.UUID) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkillTypeEdge queries the skill_type_edge edge of a Skill.
func (c *SkillClient) QuerySkillTypeEdge(s *Skill) *SkillTypeQuery {
	query := &SkillTypeQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(skilltype.Table, skilltype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, skill.SkillTypeEdgeTable, skill.SkillTypeEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEntitySkillEdges queries the entity_skill_edges edge of a Skill.
func (c *SkillClient) QueryEntitySkillEdges(s *Skill) *EntitySkillQuery {
	query := &EntitySkillQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(entityskill.Table, entityskill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skill.EntitySkillEdgesTable, skill.EntitySkillEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// SkillTypeClient is a client for the SkillType schema.
type SkillTypeClient struct {
	config
}

// NewSkillTypeClient returns a client for the SkillType from the given config.
func NewSkillTypeClient(c config) *SkillTypeClient {
	return &SkillTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skilltype.Hooks(f(g(h())))`.
func (c *SkillTypeClient) Use(hooks ...Hook) {
	c.hooks.SkillType = append(c.hooks.SkillType, hooks...)
}

// Create returns a builder for creating a SkillType entity.
func (c *SkillTypeClient) Create() *SkillTypeCreate {
	mutation := newSkillTypeMutation(c.config, OpCreate)
	return &SkillTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkillType entities.
func (c *SkillTypeClient) CreateBulk(builders ...*SkillTypeCreate) *SkillTypeCreateBulk {
	return &SkillTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkillType.
func (c *SkillTypeClient) Update() *SkillTypeUpdate {
	mutation := newSkillTypeMutation(c.config, OpUpdate)
	return &SkillTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillTypeClient) UpdateOne(st *SkillType) *SkillTypeUpdateOne {
	mutation := newSkillTypeMutation(c.config, OpUpdateOne, withSkillType(st))
	return &SkillTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillTypeClient) UpdateOneID(id uuid.UUID) *SkillTypeUpdateOne {
	mutation := newSkillTypeMutation(c.config, OpUpdateOne, withSkillTypeID(id))
	return &SkillTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkillType.
func (c *SkillTypeClient) Delete() *SkillTypeDelete {
	mutation := newSkillTypeMutation(c.config, OpDelete)
	return &SkillTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillTypeClient) DeleteOne(st *SkillType) *SkillTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillTypeClient) DeleteOneID(id uuid.UUID) *SkillTypeDeleteOne {
	builder := c.Delete().Where(skilltype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillTypeDeleteOne{builder}
}

// Query returns a query builder for SkillType.
func (c *SkillTypeClient) Query() *SkillTypeQuery {
	return &SkillTypeQuery{
		config: c.config,
	}
}

// Get returns a SkillType entity by its id.
func (c *SkillTypeClient) Get(ctx context.Context, id uuid.UUID) (*SkillType, error) {
	return c.Query().Where(skilltype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillTypeClient) GetX(ctx context.Context, id uuid.UUID) *SkillType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkillEdges queries the skill_edges edge of a SkillType.
func (c *SkillTypeClient) QuerySkillEdges(st *SkillType) *SkillQuery {
	query := &SkillQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skilltype.Table, skilltype.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skilltype.SkillEdgesTable, skilltype.SkillEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillTypeClient) Hooks() []Hook {
	return c.hooks.SkillType
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuditEdge queries the audit_edge edge of a User.
func (c *UserClient) QueryAuditEdge(u *User) *AuditTrailQuery {
	query := &AuditTrailQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(audittrail.Table, audittrail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuditEdgeTable, user.AuditEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringOwner queries the hiring_owner edge of a User.
func (c *UserClient) QueryHiringOwner(u *User) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HiringOwnerTable, user.HiringOwnerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobFeedback queries the candidate_job_feedback edge of a User.
func (c *UserClient) QueryCandidateJobFeedback(u *User) *CandidateJobFeedbackQuery {
	query := &CandidateJobFeedbackQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidatejobfeedback.Table, candidatejobfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateJobFeedbackTable, user.CandidateJobFeedbackColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviewEdges queries the interview_edges edge of a User.
func (c *UserClient) QueryInterviewEdges(u *User) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.InterviewEdgesTable, user.InterviewEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateJobEdges queries the candidate_job_edges edge of a User.
func (c *UserClient) QueryCandidateJobEdges(u *User) *CandidateJobQuery {
	query := &CandidateJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateJobEdgesTable, user.CandidateJobEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateInterviewEdges queries the candidate_interview_edges edge of a User.
func (c *UserClient) QueryCandidateInterviewEdges(u *User) *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateInterviewEdgesTable, user.CandidateInterviewEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateReferenceEdges queries the candidate_reference_edges edge of a User.
func (c *UserClient) QueryCandidateReferenceEdges(u *User) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateReferenceEdgesTable, user.CandidateReferenceEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPermissionEdges queries the user_permission_edges edge of a User.
func (c *UserClient) QueryUserPermissionEdges(u *User) *EntityPermissionQuery {
	query := &EntityPermissionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(entitypermission.Table, entitypermission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserPermissionEdgesTable, user.UserPermissionEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleEdges queries the role_edges edge of a User.
func (c *UserClient) QueryRoleEdges(u *User) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.RoleEdgesTable, user.RoleEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringTeamEdges queries the hiring_team_edges edge of a User.
func (c *UserClient) QueryHiringTeamEdges(u *User) *HiringTeamQuery {
	query := &HiringTeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringteam.Table, hiringteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.HiringTeamEdgesTable, user.HiringTeamEdgesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberOfHiringTeamEdges queries the member_of_hiring_team_edges edge of a User.
func (c *UserClient) QueryMemberOfHiringTeamEdges(u *User) *HiringTeamQuery {
	query := &HiringTeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringteam.Table, hiringteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.MemberOfHiringTeamEdgesTable, user.MemberOfHiringTeamEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApproversHiringTeams queries the approvers_hiring_teams edge of a User.
func (c *UserClient) QueryApproversHiringTeams(u *User) *HiringTeamQuery {
	query := &HiringTeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringteam.Table, hiringteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.ApproversHiringTeamsTable, user.ApproversHiringTeamsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLeaderRecEdge queries the leader_rec_edge edge of a User.
func (c *UserClient) QueryLeaderRecEdge(u *User) *RecTeamQuery {
	query := &RecTeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(recteam.Table, recteam.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.LeaderRecEdgeTable, user.LeaderRecEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecTeams queries the rec_teams edge of a User.
func (c *UserClient) QueryRecTeams(u *User) *RecTeamQuery {
	query := &RecTeamQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(recteam.Table, recteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.RecTeamsTable, user.RecTeamsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateNoteEdges queries the candidate_note_edges edge of a User.
func (c *UserClient) QueryCandidateNoteEdges(u *User) *CandidateNoteQuery {
	query := &CandidateNoteQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidatenote.Table, candidatenote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateNoteEdgesTable, user.CandidateNoteEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCandidateHistoryCallEdges queries the candidate_history_call_edges edge of a User.
func (c *UserClient) QueryCandidateHistoryCallEdges(u *User) *CandidateHistoryCallQuery {
	query := &CandidateHistoryCallQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidatehistorycall.Table, candidatehistorycall.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateHistoryCallEdgesTable, user.CandidateHistoryCallEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalJobs queries the approval_jobs edge of a User.
func (c *UserClient) QueryApprovalJobs(u *User) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.ApprovalJobsTable, user.ApprovalJobsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringJobRecEdges queries the hiring_job_rec_edges edge of a User.
func (c *UserClient) QueryHiringJobRecEdges(u *User) *HiringJobQuery {
	query := &HiringJobQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HiringJobRecEdgesTable, user.HiringJobRecEdgesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInterviewUsers queries the interview_users edge of a User.
func (c *UserClient) QueryInterviewUsers(u *User) *CandidateInterviewerQuery {
	query := &CandidateInterviewerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(candidateinterviewer.Table, candidateinterviewer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.InterviewUsersTable, user.InterviewUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleUsers queries the role_users edge of a User.
func (c *UserClient) QueryRoleUsers(u *User) *UserRoleQuery {
	query := &UserRoleQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.RoleUsersTable, user.RoleUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringTeamUsers queries the hiring_team_users edge of a User.
func (c *UserClient) QueryHiringTeamUsers(u *User) *HiringTeamManagerQuery {
	query := &HiringTeamManagerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringteammanager.Table, hiringteammanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.HiringTeamUsersTable, user.HiringTeamUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHiringTeamApprovers queries the hiring_team_approvers edge of a User.
func (c *UserClient) QueryHiringTeamApprovers(u *User) *HiringTeamApproverQuery {
	query := &HiringTeamApproverQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringteamapprover.Table, hiringteamapprover.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.HiringTeamApproversTable, user.HiringTeamApproversColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalSteps queries the approval_steps edge of a User.
func (c *UserClient) QueryApprovalSteps(u *User) *HiringJobStepQuery {
	query := &HiringJobStepQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hiringjobstep.Table, hiringjobstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ApprovalStepsTable, user.ApprovalStepsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserRoleClient is a client for the UserRole schema.
type UserRoleClient struct {
	config
}

// NewUserRoleClient returns a client for the UserRole from the given config.
func NewUserRoleClient(c config) *UserRoleClient {
	return &UserRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userrole.Hooks(f(g(h())))`.
func (c *UserRoleClient) Use(hooks ...Hook) {
	c.hooks.UserRole = append(c.hooks.UserRole, hooks...)
}

// Create returns a builder for creating a UserRole entity.
func (c *UserRoleClient) Create() *UserRoleCreate {
	mutation := newUserRoleMutation(c.config, OpCreate)
	return &UserRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserRole entities.
func (c *UserRoleClient) CreateBulk(builders ...*UserRoleCreate) *UserRoleCreateBulk {
	return &UserRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserRole.
func (c *UserRoleClient) Update() *UserRoleUpdate {
	mutation := newUserRoleMutation(c.config, OpUpdate)
	return &UserRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserRoleClient) UpdateOne(ur *UserRole) *UserRoleUpdateOne {
	mutation := newUserRoleMutation(c.config, OpUpdateOne, withUserRole(ur))
	return &UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserRoleClient) UpdateOneID(id uuid.UUID) *UserRoleUpdateOne {
	mutation := newUserRoleMutation(c.config, OpUpdateOne, withUserRoleID(id))
	return &UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserRole.
func (c *UserRoleClient) Delete() *UserRoleDelete {
	mutation := newUserRoleMutation(c.config, OpDelete)
	return &UserRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserRoleClient) DeleteOne(ur *UserRole) *UserRoleDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserRoleClient) DeleteOneID(id uuid.UUID) *UserRoleDeleteOne {
	builder := c.Delete().Where(userrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserRoleDeleteOne{builder}
}

// Query returns a query builder for UserRole.
func (c *UserRoleClient) Query() *UserRoleQuery {
	return &UserRoleQuery{
		config: c.config,
	}
}

// Get returns a UserRole entity by its id.
func (c *UserRoleClient) Get(ctx context.Context, id uuid.UUID) (*UserRole, error) {
	return c.Query().Where(userrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserRoleClient) GetX(ctx context.Context, id uuid.UUID) *UserRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserEdge queries the user_edge edge of a UserRole.
func (c *UserRoleClient) QueryUserEdge(ur *UserRole) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userrole.Table, userrole.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userrole.UserEdgeTable, userrole.UserEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleEdge queries the role_edge edge of a UserRole.
func (c *UserRoleClient) QueryRoleEdge(ur *UserRole) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userrole.Table, userrole.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userrole.RoleEdgeTable, userrole.RoleEdgeColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserRoleClient) Hooks() []Hook {
	return c.hooks.UserRole
}
