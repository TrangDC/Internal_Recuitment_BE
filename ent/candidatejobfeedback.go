// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CandidateJobFeedback is the model entity for the CandidateJobFeedback schema.
type CandidateJobFeedback struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CandidateJobID holds the value of the "candidate_job_id" field.
	CandidateJobID uuid.UUID `json:"candidate_job_id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// CandidateJobStatus holds the value of the "candidate_job_status" field.
	CandidateJobStatus candidatejobfeedback.CandidateJobStatus `json:"candidate_job_status,omitempty"`
	// Feedback holds the value of the "feedback" field.
	Feedback string `json:"feedback,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CandidateJobFeedbackQuery when eager-loading is set.
	Edges CandidateJobFeedbackEdges `json:"edges"`
}

// CandidateJobFeedbackEdges holds the relations/edges for other nodes in the graph.
type CandidateJobFeedbackEdges struct {
	// CreatedByEdge holds the value of the created_by_edge edge.
	CreatedByEdge *User `json:"created_by_edge,omitempty"`
	// CandidateJobEdge holds the value of the candidate_job_edge edge.
	CandidateJobEdge *CandidateJob `json:"candidate_job_edge,omitempty"`
	// AttachmentEdges holds the value of the attachment_edges edge.
	AttachmentEdges []*Attachment `json:"attachment_edges,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedAttachmentEdges map[string][]*Attachment
}

// CreatedByEdgeOrErr returns the CreatedByEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateJobFeedbackEdges) CreatedByEdgeOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreatedByEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedByEdge, nil
	}
	return nil, &NotLoadedError{edge: "created_by_edge"}
}

// CandidateJobEdgeOrErr returns the CandidateJobEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateJobFeedbackEdges) CandidateJobEdgeOrErr() (*CandidateJob, error) {
	if e.loadedTypes[1] {
		if e.CandidateJobEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatejob.Label}
		}
		return e.CandidateJobEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_edge"}
}

// AttachmentEdgesOrErr returns the AttachmentEdges value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateJobFeedbackEdges) AttachmentEdgesOrErr() ([]*Attachment, error) {
	if e.loadedTypes[2] {
		return e.AttachmentEdges, nil
	}
	return nil, &NotLoadedError{edge: "attachment_edges"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CandidateJobFeedback) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case candidatejobfeedback.FieldCandidateJobStatus, candidatejobfeedback.FieldFeedback:
			values[i] = new(sql.NullString)
		case candidatejobfeedback.FieldCreatedAt, candidatejobfeedback.FieldUpdatedAt, candidatejobfeedback.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case candidatejobfeedback.FieldID, candidatejobfeedback.FieldCandidateJobID, candidatejobfeedback.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CandidateJobFeedback", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CandidateJobFeedback fields.
func (cjf *CandidateJobFeedback) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case candidatejobfeedback.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cjf.ID = *value
			}
		case candidatejobfeedback.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cjf.CreatedAt = value.Time
			}
		case candidatejobfeedback.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cjf.UpdatedAt = value.Time
			}
		case candidatejobfeedback.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cjf.DeletedAt = value.Time
			}
		case candidatejobfeedback.FieldCandidateJobID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_job_id", values[i])
			} else if value != nil {
				cjf.CandidateJobID = *value
			}
		case candidatejobfeedback.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				cjf.CreatedBy = *value
			}
		case candidatejobfeedback.FieldCandidateJobStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_job_status", values[i])
			} else if value.Valid {
				cjf.CandidateJobStatus = candidatejobfeedback.CandidateJobStatus(value.String)
			}
		case candidatejobfeedback.FieldFeedback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feedback", values[i])
			} else if value.Valid {
				cjf.Feedback = value.String
			}
		}
	}
	return nil
}

// QueryCreatedByEdge queries the "created_by_edge" edge of the CandidateJobFeedback entity.
func (cjf *CandidateJobFeedback) QueryCreatedByEdge() *UserQuery {
	return (&CandidateJobFeedbackClient{config: cjf.config}).QueryCreatedByEdge(cjf)
}

// QueryCandidateJobEdge queries the "candidate_job_edge" edge of the CandidateJobFeedback entity.
func (cjf *CandidateJobFeedback) QueryCandidateJobEdge() *CandidateJobQuery {
	return (&CandidateJobFeedbackClient{config: cjf.config}).QueryCandidateJobEdge(cjf)
}

// QueryAttachmentEdges queries the "attachment_edges" edge of the CandidateJobFeedback entity.
func (cjf *CandidateJobFeedback) QueryAttachmentEdges() *AttachmentQuery {
	return (&CandidateJobFeedbackClient{config: cjf.config}).QueryAttachmentEdges(cjf)
}

// Update returns a builder for updating this CandidateJobFeedback.
// Note that you need to call CandidateJobFeedback.Unwrap() before calling this method if this CandidateJobFeedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (cjf *CandidateJobFeedback) Update() *CandidateJobFeedbackUpdateOne {
	return (&CandidateJobFeedbackClient{config: cjf.config}).UpdateOne(cjf)
}

// Unwrap unwraps the CandidateJobFeedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cjf *CandidateJobFeedback) Unwrap() *CandidateJobFeedback {
	_tx, ok := cjf.config.driver.(*txDriver)
	if !ok {
		panic("ent: CandidateJobFeedback is not a transactional entity")
	}
	cjf.config.driver = _tx.drv
	return cjf
}

// String implements the fmt.Stringer.
func (cjf *CandidateJobFeedback) String() string {
	var builder strings.Builder
	builder.WriteString("CandidateJobFeedback(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cjf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cjf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cjf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(cjf.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("candidate_job_id=")
	builder.WriteString(fmt.Sprintf("%v", cjf.CandidateJobID))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", cjf.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("candidate_job_status=")
	builder.WriteString(fmt.Sprintf("%v", cjf.CandidateJobStatus))
	builder.WriteString(", ")
	builder.WriteString("feedback=")
	builder.WriteString(cjf.Feedback)
	builder.WriteByte(')')
	return builder.String()
}

// NamedAttachmentEdges returns the AttachmentEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cjf *CandidateJobFeedback) NamedAttachmentEdges(name string) ([]*Attachment, error) {
	if cjf.Edges.namedAttachmentEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cjf.Edges.namedAttachmentEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cjf *CandidateJobFeedback) appendNamedAttachmentEdges(name string, edges ...*Attachment) {
	if cjf.Edges.namedAttachmentEdges == nil {
		cjf.Edges.namedAttachmentEdges = make(map[string][]*Attachment)
	}
	if len(edges) == 0 {
		cjf.Edges.namedAttachmentEdges[name] = []*Attachment{}
	} else {
		cjf.Edges.namedAttachmentEdges[name] = append(cjf.Edges.namedAttachmentEdges[name], edges...)
	}
}

// CandidateJobFeedbacks is a parsable slice of CandidateJobFeedback.
type CandidateJobFeedbacks []*CandidateJobFeedback

func (cjf CandidateJobFeedbacks) config(cfg config) {
	for _i := range cjf {
		cjf[_i].config = cfg
	}
}
