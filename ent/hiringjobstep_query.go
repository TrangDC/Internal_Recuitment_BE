// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"trec/ent/hiringjob"
	"trec/ent/hiringjobstep"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HiringJobStepQuery is the builder for querying HiringJobStep entities.
type HiringJobStepQuery struct {
	config
	limit             *int
	offset            *int
	unique            *bool
	order             []OrderFunc
	fields            []string
	predicates        []predicate.HiringJobStep
	withHiringJobEdge *HiringJobQuery
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*HiringJobStep) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HiringJobStepQuery builder.
func (hjsq *HiringJobStepQuery) Where(ps ...predicate.HiringJobStep) *HiringJobStepQuery {
	hjsq.predicates = append(hjsq.predicates, ps...)
	return hjsq
}

// Limit adds a limit step to the query.
func (hjsq *HiringJobStepQuery) Limit(limit int) *HiringJobStepQuery {
	hjsq.limit = &limit
	return hjsq
}

// Offset adds an offset step to the query.
func (hjsq *HiringJobStepQuery) Offset(offset int) *HiringJobStepQuery {
	hjsq.offset = &offset
	return hjsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hjsq *HiringJobStepQuery) Unique(unique bool) *HiringJobStepQuery {
	hjsq.unique = &unique
	return hjsq
}

// Order adds an order step to the query.
func (hjsq *HiringJobStepQuery) Order(o ...OrderFunc) *HiringJobStepQuery {
	hjsq.order = append(hjsq.order, o...)
	return hjsq
}

// QueryHiringJobEdge chains the current query on the "hiring_job_edge" edge.
func (hjsq *HiringJobStepQuery) QueryHiringJobEdge() *HiringJobQuery {
	query := &HiringJobQuery{config: hjsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hjsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hjsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringjobstep.Table, hiringjobstep.FieldID, selector),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hiringjobstep.HiringJobEdgeTable, hiringjobstep.HiringJobEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(hjsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HiringJobStep entity from the query.
// Returns a *NotFoundError when no HiringJobStep was found.
func (hjsq *HiringJobStepQuery) First(ctx context.Context) (*HiringJobStep, error) {
	nodes, err := hjsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hiringjobstep.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hjsq *HiringJobStepQuery) FirstX(ctx context.Context) *HiringJobStep {
	node, err := hjsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HiringJobStep ID from the query.
// Returns a *NotFoundError when no HiringJobStep ID was found.
func (hjsq *HiringJobStepQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hjsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hiringjobstep.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hjsq *HiringJobStepQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := hjsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HiringJobStep entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HiringJobStep entity is found.
// Returns a *NotFoundError when no HiringJobStep entities are found.
func (hjsq *HiringJobStepQuery) Only(ctx context.Context) (*HiringJobStep, error) {
	nodes, err := hjsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hiringjobstep.Label}
	default:
		return nil, &NotSingularError{hiringjobstep.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hjsq *HiringJobStepQuery) OnlyX(ctx context.Context) *HiringJobStep {
	node, err := hjsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HiringJobStep ID in the query.
// Returns a *NotSingularError when more than one HiringJobStep ID is found.
// Returns a *NotFoundError when no entities are found.
func (hjsq *HiringJobStepQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = hjsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hiringjobstep.Label}
	default:
		err = &NotSingularError{hiringjobstep.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hjsq *HiringJobStepQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := hjsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HiringJobSteps.
func (hjsq *HiringJobStepQuery) All(ctx context.Context) ([]*HiringJobStep, error) {
	if err := hjsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return hjsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (hjsq *HiringJobStepQuery) AllX(ctx context.Context) []*HiringJobStep {
	nodes, err := hjsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HiringJobStep IDs.
func (hjsq *HiringJobStepQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := hjsq.Select(hiringjobstep.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hjsq *HiringJobStepQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := hjsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hjsq *HiringJobStepQuery) Count(ctx context.Context) (int, error) {
	if err := hjsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return hjsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (hjsq *HiringJobStepQuery) CountX(ctx context.Context) int {
	count, err := hjsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hjsq *HiringJobStepQuery) Exist(ctx context.Context) (bool, error) {
	if err := hjsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return hjsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (hjsq *HiringJobStepQuery) ExistX(ctx context.Context) bool {
	exist, err := hjsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HiringJobStepQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hjsq *HiringJobStepQuery) Clone() *HiringJobStepQuery {
	if hjsq == nil {
		return nil
	}
	return &HiringJobStepQuery{
		config:            hjsq.config,
		limit:             hjsq.limit,
		offset:            hjsq.offset,
		order:             append([]OrderFunc{}, hjsq.order...),
		predicates:        append([]predicate.HiringJobStep{}, hjsq.predicates...),
		withHiringJobEdge: hjsq.withHiringJobEdge.Clone(),
		// clone intermediate query.
		sql:    hjsq.sql.Clone(),
		path:   hjsq.path,
		unique: hjsq.unique,
	}
}

// WithHiringJobEdge tells the query-builder to eager-load the nodes that are connected to
// the "hiring_job_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (hjsq *HiringJobStepQuery) WithHiringJobEdge(opts ...func(*HiringJobQuery)) *HiringJobStepQuery {
	query := &HiringJobQuery{config: hjsq.config}
	for _, opt := range opts {
		opt(query)
	}
	hjsq.withHiringJobEdge = query
	return hjsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HiringJobID uuid.UUID `json:"hiring_job_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HiringJobStep.Query().
//		GroupBy(hiringjobstep.FieldHiringJobID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hjsq *HiringJobStepQuery) GroupBy(field string, fields ...string) *HiringJobStepGroupBy {
	grbuild := &HiringJobStepGroupBy{config: hjsq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := hjsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return hjsq.sqlQuery(ctx), nil
	}
	grbuild.label = hiringjobstep.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HiringJobID uuid.UUID `json:"hiring_job_id,omitempty"`
//	}
//
//	client.HiringJobStep.Query().
//		Select(hiringjobstep.FieldHiringJobID).
//		Scan(ctx, &v)
func (hjsq *HiringJobStepQuery) Select(fields ...string) *HiringJobStepSelect {
	hjsq.fields = append(hjsq.fields, fields...)
	selbuild := &HiringJobStepSelect{HiringJobStepQuery: hjsq}
	selbuild.label = hiringjobstep.Label
	selbuild.flds, selbuild.scan = &hjsq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a HiringJobStepSelect configured with the given aggregations.
func (hjsq *HiringJobStepQuery) Aggregate(fns ...AggregateFunc) *HiringJobStepSelect {
	return hjsq.Select().Aggregate(fns...)
}

func (hjsq *HiringJobStepQuery) prepareQuery(ctx context.Context) error {
	for _, f := range hjsq.fields {
		if !hiringjobstep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hjsq.path != nil {
		prev, err := hjsq.path(ctx)
		if err != nil {
			return err
		}
		hjsq.sql = prev
	}
	return nil
}

func (hjsq *HiringJobStepQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HiringJobStep, error) {
	var (
		nodes       = []*HiringJobStep{}
		_spec       = hjsq.querySpec()
		loadedTypes = [1]bool{
			hjsq.withHiringJobEdge != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HiringJobStep).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HiringJobStep{config: hjsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(hjsq.modifiers) > 0 {
		_spec.Modifiers = hjsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hjsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hjsq.withHiringJobEdge; query != nil {
		if err := hjsq.loadHiringJobEdge(ctx, query, nodes, nil,
			func(n *HiringJobStep, e *HiringJob) { n.Edges.HiringJobEdge = e }); err != nil {
			return nil, err
		}
	}
	for i := range hjsq.loadTotal {
		if err := hjsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hjsq *HiringJobStepQuery) loadHiringJobEdge(ctx context.Context, query *HiringJobQuery, nodes []*HiringJobStep, init func(*HiringJobStep), assign func(*HiringJobStep, *HiringJob)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HiringJobStep)
	for i := range nodes {
		fk := nodes[i].HiringJobID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(hiringjob.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hiring_job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (hjsq *HiringJobStepQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hjsq.querySpec()
	if len(hjsq.modifiers) > 0 {
		_spec.Modifiers = hjsq.modifiers
	}
	_spec.Node.Columns = hjsq.fields
	if len(hjsq.fields) > 0 {
		_spec.Unique = hjsq.unique != nil && *hjsq.unique
	}
	return sqlgraph.CountNodes(ctx, hjsq.driver, _spec)
}

func (hjsq *HiringJobStepQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := hjsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (hjsq *HiringJobStepQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringjobstep.Table,
			Columns: hiringjobstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringjobstep.FieldID,
			},
		},
		From:   hjsq.sql,
		Unique: true,
	}
	if unique := hjsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := hjsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hiringjobstep.FieldID)
		for i := range fields {
			if fields[i] != hiringjobstep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hjsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hjsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hjsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hjsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hjsq *HiringJobStepQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hjsq.driver.Dialect())
	t1 := builder.Table(hiringjobstep.Table)
	columns := hjsq.fields
	if len(columns) == 0 {
		columns = hiringjobstep.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hjsq.sql != nil {
		selector = hjsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hjsq.unique != nil && *hjsq.unique {
		selector.Distinct()
	}
	for _, p := range hjsq.predicates {
		p(selector)
	}
	for _, p := range hjsq.order {
		p(selector)
	}
	if offset := hjsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hjsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HiringJobStepGroupBy is the group-by builder for HiringJobStep entities.
type HiringJobStepGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hjsgb *HiringJobStepGroupBy) Aggregate(fns ...AggregateFunc) *HiringJobStepGroupBy {
	hjsgb.fns = append(hjsgb.fns, fns...)
	return hjsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (hjsgb *HiringJobStepGroupBy) Scan(ctx context.Context, v any) error {
	query, err := hjsgb.path(ctx)
	if err != nil {
		return err
	}
	hjsgb.sql = query
	return hjsgb.sqlScan(ctx, v)
}

func (hjsgb *HiringJobStepGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range hjsgb.fields {
		if !hiringjobstep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := hjsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hjsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (hjsgb *HiringJobStepGroupBy) sqlQuery() *sql.Selector {
	selector := hjsgb.sql.Select()
	aggregation := make([]string, 0, len(hjsgb.fns))
	for _, fn := range hjsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(hjsgb.fields)+len(hjsgb.fns))
		for _, f := range hjsgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(hjsgb.fields...)...)
}

// HiringJobStepSelect is the builder for selecting fields of HiringJobStep entities.
type HiringJobStepSelect struct {
	*HiringJobStepQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hjss *HiringJobStepSelect) Aggregate(fns ...AggregateFunc) *HiringJobStepSelect {
	hjss.fns = append(hjss.fns, fns...)
	return hjss
}

// Scan applies the selector query and scans the result into the given value.
func (hjss *HiringJobStepSelect) Scan(ctx context.Context, v any) error {
	if err := hjss.prepareQuery(ctx); err != nil {
		return err
	}
	hjss.sql = hjss.HiringJobStepQuery.sqlQuery(ctx)
	return hjss.sqlScan(ctx, v)
}

func (hjss *HiringJobStepSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(hjss.fns))
	for _, fn := range hjss.fns {
		aggregation = append(aggregation, fn(hjss.sql))
	}
	switch n := len(*hjss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		hjss.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		hjss.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := hjss.sql.Query()
	if err := hjss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
