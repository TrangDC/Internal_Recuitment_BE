// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/entitypermission"
	"trec/ent/permission"
	"trec/ent/role"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EntityPermissionCreate is the builder for creating a EntityPermission entity.
type EntityPermissionCreate struct {
	config
	mutation *EntityPermissionMutation
	hooks    []Hook
}

// SetEntityID sets the "entity_id" field.
func (epc *EntityPermissionCreate) SetEntityID(u uuid.UUID) *EntityPermissionCreate {
	epc.mutation.SetEntityID(u)
	return epc
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillableEntityID(u *uuid.UUID) *EntityPermissionCreate {
	if u != nil {
		epc.SetEntityID(*u)
	}
	return epc
}

// SetPermissionID sets the "permission_id" field.
func (epc *EntityPermissionCreate) SetPermissionID(u uuid.UUID) *EntityPermissionCreate {
	epc.mutation.SetPermissionID(u)
	return epc
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillablePermissionID(u *uuid.UUID) *EntityPermissionCreate {
	if u != nil {
		epc.SetPermissionID(*u)
	}
	return epc
}

// SetForOwner sets the "for_owner" field.
func (epc *EntityPermissionCreate) SetForOwner(b bool) *EntityPermissionCreate {
	epc.mutation.SetForOwner(b)
	return epc
}

// SetNillableForOwner sets the "for_owner" field if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillableForOwner(b *bool) *EntityPermissionCreate {
	if b != nil {
		epc.SetForOwner(*b)
	}
	return epc
}

// SetForTeam sets the "for_team" field.
func (epc *EntityPermissionCreate) SetForTeam(b bool) *EntityPermissionCreate {
	epc.mutation.SetForTeam(b)
	return epc
}

// SetNillableForTeam sets the "for_team" field if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillableForTeam(b *bool) *EntityPermissionCreate {
	if b != nil {
		epc.SetForTeam(*b)
	}
	return epc
}

// SetForAll sets the "for_all" field.
func (epc *EntityPermissionCreate) SetForAll(b bool) *EntityPermissionCreate {
	epc.mutation.SetForAll(b)
	return epc
}

// SetNillableForAll sets the "for_all" field if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillableForAll(b *bool) *EntityPermissionCreate {
	if b != nil {
		epc.SetForAll(*b)
	}
	return epc
}

// SetEntityType sets the "entity_type" field.
func (epc *EntityPermissionCreate) SetEntityType(et entitypermission.EntityType) *EntityPermissionCreate {
	epc.mutation.SetEntityType(et)
	return epc
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillableEntityType(et *entitypermission.EntityType) *EntityPermissionCreate {
	if et != nil {
		epc.SetEntityType(*et)
	}
	return epc
}

// SetCreatedAt sets the "created_at" field.
func (epc *EntityPermissionCreate) SetCreatedAt(t time.Time) *EntityPermissionCreate {
	epc.mutation.SetCreatedAt(t)
	return epc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillableCreatedAt(t *time.Time) *EntityPermissionCreate {
	if t != nil {
		epc.SetCreatedAt(*t)
	}
	return epc
}

// SetUpdatedAt sets the "updated_at" field.
func (epc *EntityPermissionCreate) SetUpdatedAt(t time.Time) *EntityPermissionCreate {
	epc.mutation.SetUpdatedAt(t)
	return epc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillableUpdatedAt(t *time.Time) *EntityPermissionCreate {
	if t != nil {
		epc.SetUpdatedAt(*t)
	}
	return epc
}

// SetID sets the "id" field.
func (epc *EntityPermissionCreate) SetID(u uuid.UUID) *EntityPermissionCreate {
	epc.mutation.SetID(u)
	return epc
}

// SetPermissionEdgesID sets the "permission_edges" edge to the Permission entity by ID.
func (epc *EntityPermissionCreate) SetPermissionEdgesID(id uuid.UUID) *EntityPermissionCreate {
	epc.mutation.SetPermissionEdgesID(id)
	return epc
}

// SetNillablePermissionEdgesID sets the "permission_edges" edge to the Permission entity by ID if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillablePermissionEdgesID(id *uuid.UUID) *EntityPermissionCreate {
	if id != nil {
		epc = epc.SetPermissionEdgesID(*id)
	}
	return epc
}

// SetPermissionEdges sets the "permission_edges" edge to the Permission entity.
func (epc *EntityPermissionCreate) SetPermissionEdges(p *Permission) *EntityPermissionCreate {
	return epc.SetPermissionEdgesID(p.ID)
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (epc *EntityPermissionCreate) SetUserEdgeID(id uuid.UUID) *EntityPermissionCreate {
	epc.mutation.SetUserEdgeID(id)
	return epc
}

// SetNillableUserEdgeID sets the "user_edge" edge to the User entity by ID if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillableUserEdgeID(id *uuid.UUID) *EntityPermissionCreate {
	if id != nil {
		epc = epc.SetUserEdgeID(*id)
	}
	return epc
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (epc *EntityPermissionCreate) SetUserEdge(u *User) *EntityPermissionCreate {
	return epc.SetUserEdgeID(u.ID)
}

// SetRoleEdgeID sets the "role_edge" edge to the Role entity by ID.
func (epc *EntityPermissionCreate) SetRoleEdgeID(id uuid.UUID) *EntityPermissionCreate {
	epc.mutation.SetRoleEdgeID(id)
	return epc
}

// SetNillableRoleEdgeID sets the "role_edge" edge to the Role entity by ID if the given value is not nil.
func (epc *EntityPermissionCreate) SetNillableRoleEdgeID(id *uuid.UUID) *EntityPermissionCreate {
	if id != nil {
		epc = epc.SetRoleEdgeID(*id)
	}
	return epc
}

// SetRoleEdge sets the "role_edge" edge to the Role entity.
func (epc *EntityPermissionCreate) SetRoleEdge(r *Role) *EntityPermissionCreate {
	return epc.SetRoleEdgeID(r.ID)
}

// Mutation returns the EntityPermissionMutation object of the builder.
func (epc *EntityPermissionCreate) Mutation() *EntityPermissionMutation {
	return epc.mutation
}

// Save creates the EntityPermission in the database.
func (epc *EntityPermissionCreate) Save(ctx context.Context) (*EntityPermission, error) {
	var (
		err  error
		node *EntityPermission
	)
	epc.defaults()
	if len(epc.hooks) == 0 {
		if err = epc.check(); err != nil {
			return nil, err
		}
		node, err = epc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityPermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = epc.check(); err != nil {
				return nil, err
			}
			epc.mutation = mutation
			if node, err = epc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(epc.hooks) - 1; i >= 0; i-- {
			if epc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = epc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, epc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EntityPermission)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EntityPermissionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (epc *EntityPermissionCreate) SaveX(ctx context.Context) *EntityPermission {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epc *EntityPermissionCreate) Exec(ctx context.Context) error {
	_, err := epc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epc *EntityPermissionCreate) ExecX(ctx context.Context) {
	if err := epc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epc *EntityPermissionCreate) defaults() {
	if _, ok := epc.mutation.ForOwner(); !ok {
		v := entitypermission.DefaultForOwner
		epc.mutation.SetForOwner(v)
	}
	if _, ok := epc.mutation.ForTeam(); !ok {
		v := entitypermission.DefaultForTeam
		epc.mutation.SetForTeam(v)
	}
	if _, ok := epc.mutation.ForAll(); !ok {
		v := entitypermission.DefaultForAll
		epc.mutation.SetForAll(v)
	}
	if _, ok := epc.mutation.CreatedAt(); !ok {
		v := entitypermission.DefaultCreatedAt()
		epc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epc *EntityPermissionCreate) check() error {
	if _, ok := epc.mutation.ForOwner(); !ok {
		return &ValidationError{Name: "for_owner", err: errors.New(`ent: missing required field "EntityPermission.for_owner"`)}
	}
	if _, ok := epc.mutation.ForTeam(); !ok {
		return &ValidationError{Name: "for_team", err: errors.New(`ent: missing required field "EntityPermission.for_team"`)}
	}
	if _, ok := epc.mutation.ForAll(); !ok {
		return &ValidationError{Name: "for_all", err: errors.New(`ent: missing required field "EntityPermission.for_all"`)}
	}
	if v, ok := epc.mutation.EntityType(); ok {
		if err := entitypermission.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "EntityPermission.entity_type": %w`, err)}
		}
	}
	if _, ok := epc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EntityPermission.created_at"`)}
	}
	return nil
}

func (epc *EntityPermissionCreate) sqlSave(ctx context.Context) (*EntityPermission, error) {
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (epc *EntityPermissionCreate) createSpec() (*EntityPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &EntityPermission{config: epc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entitypermission.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entitypermission.FieldID,
			},
		}
	)
	if id, ok := epc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := epc.mutation.ForOwner(); ok {
		_spec.SetField(entitypermission.FieldForOwner, field.TypeBool, value)
		_node.ForOwner = value
	}
	if value, ok := epc.mutation.ForTeam(); ok {
		_spec.SetField(entitypermission.FieldForTeam, field.TypeBool, value)
		_node.ForTeam = value
	}
	if value, ok := epc.mutation.ForAll(); ok {
		_spec.SetField(entitypermission.FieldForAll, field.TypeBool, value)
		_node.ForAll = value
	}
	if value, ok := epc.mutation.EntityType(); ok {
		_spec.SetField(entitypermission.FieldEntityType, field.TypeEnum, value)
		_node.EntityType = value
	}
	if value, ok := epc.mutation.CreatedAt(); ok {
		_spec.SetField(entitypermission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := epc.mutation.UpdatedAt(); ok {
		_spec.SetField(entitypermission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := epc.mutation.PermissionEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitypermission.PermissionEdgesTable,
			Columns: []string{entitypermission.PermissionEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PermissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitypermission.UserEdgeTable,
			Columns: []string{entitypermission.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.RoleEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitypermission.RoleEdgeTable,
			Columns: []string{entitypermission.RoleEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntityPermissionCreateBulk is the builder for creating many EntityPermission entities in bulk.
type EntityPermissionCreateBulk struct {
	config
	builders []*EntityPermissionCreate
}

// Save creates the EntityPermission entities in the database.
func (epcb *EntityPermissionCreateBulk) Save(ctx context.Context) ([]*EntityPermission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*EntityPermission, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epcb *EntityPermissionCreateBulk) SaveX(ctx context.Context) []*EntityPermission {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epcb *EntityPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := epcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcb *EntityPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := epcb.Exec(ctx); err != nil {
		panic(err)
	}
}
