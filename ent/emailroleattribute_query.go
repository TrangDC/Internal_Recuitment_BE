// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"trec/ent/emailroleattribute"
	"trec/ent/emailtemplate"
	"trec/ent/predicate"
	"trec/ent/role"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EmailRoleAttributeQuery is the builder for querying EmailRoleAttribute entities.
type EmailRoleAttributeQuery struct {
	config
	limit                 *int
	offset                *int
	unique                *bool
	order                 []OrderFunc
	fields                []string
	predicates            []predicate.EmailRoleAttribute
	withEmailTemplateEdge *EmailTemplateQuery
	withRoleEdge          *RoleQuery
	modifiers             []func(*sql.Selector)
	loadTotal             []func(context.Context, []*EmailRoleAttribute) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmailRoleAttributeQuery builder.
func (eraq *EmailRoleAttributeQuery) Where(ps ...predicate.EmailRoleAttribute) *EmailRoleAttributeQuery {
	eraq.predicates = append(eraq.predicates, ps...)
	return eraq
}

// Limit adds a limit step to the query.
func (eraq *EmailRoleAttributeQuery) Limit(limit int) *EmailRoleAttributeQuery {
	eraq.limit = &limit
	return eraq
}

// Offset adds an offset step to the query.
func (eraq *EmailRoleAttributeQuery) Offset(offset int) *EmailRoleAttributeQuery {
	eraq.offset = &offset
	return eraq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eraq *EmailRoleAttributeQuery) Unique(unique bool) *EmailRoleAttributeQuery {
	eraq.unique = &unique
	return eraq
}

// Order adds an order step to the query.
func (eraq *EmailRoleAttributeQuery) Order(o ...OrderFunc) *EmailRoleAttributeQuery {
	eraq.order = append(eraq.order, o...)
	return eraq
}

// QueryEmailTemplateEdge chains the current query on the "email_template_edge" edge.
func (eraq *EmailRoleAttributeQuery) QueryEmailTemplateEdge() *EmailTemplateQuery {
	query := &EmailTemplateQuery{config: eraq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eraq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eraq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailroleattribute.Table, emailroleattribute.FieldID, selector),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailroleattribute.EmailTemplateEdgeTable, emailroleattribute.EmailTemplateEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eraq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleEdge chains the current query on the "role_edge" edge.
func (eraq *EmailRoleAttributeQuery) QueryRoleEdge() *RoleQuery {
	query := &RoleQuery{config: eraq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eraq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eraq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailroleattribute.Table, emailroleattribute.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailroleattribute.RoleEdgeTable, emailroleattribute.RoleEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eraq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EmailRoleAttribute entity from the query.
// Returns a *NotFoundError when no EmailRoleAttribute was found.
func (eraq *EmailRoleAttributeQuery) First(ctx context.Context) (*EmailRoleAttribute, error) {
	nodes, err := eraq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{emailroleattribute.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eraq *EmailRoleAttributeQuery) FirstX(ctx context.Context) *EmailRoleAttribute {
	node, err := eraq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EmailRoleAttribute ID from the query.
// Returns a *NotFoundError when no EmailRoleAttribute ID was found.
func (eraq *EmailRoleAttributeQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eraq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{emailroleattribute.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eraq *EmailRoleAttributeQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := eraq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EmailRoleAttribute entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EmailRoleAttribute entity is found.
// Returns a *NotFoundError when no EmailRoleAttribute entities are found.
func (eraq *EmailRoleAttributeQuery) Only(ctx context.Context) (*EmailRoleAttribute, error) {
	nodes, err := eraq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{emailroleattribute.Label}
	default:
		return nil, &NotSingularError{emailroleattribute.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eraq *EmailRoleAttributeQuery) OnlyX(ctx context.Context) *EmailRoleAttribute {
	node, err := eraq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EmailRoleAttribute ID in the query.
// Returns a *NotSingularError when more than one EmailRoleAttribute ID is found.
// Returns a *NotFoundError when no entities are found.
func (eraq *EmailRoleAttributeQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = eraq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{emailroleattribute.Label}
	default:
		err = &NotSingularError{emailroleattribute.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eraq *EmailRoleAttributeQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := eraq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EmailRoleAttributes.
func (eraq *EmailRoleAttributeQuery) All(ctx context.Context) ([]*EmailRoleAttribute, error) {
	if err := eraq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return eraq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eraq *EmailRoleAttributeQuery) AllX(ctx context.Context) []*EmailRoleAttribute {
	nodes, err := eraq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EmailRoleAttribute IDs.
func (eraq *EmailRoleAttributeQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := eraq.Select(emailroleattribute.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eraq *EmailRoleAttributeQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := eraq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eraq *EmailRoleAttributeQuery) Count(ctx context.Context) (int, error) {
	if err := eraq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return eraq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eraq *EmailRoleAttributeQuery) CountX(ctx context.Context) int {
	count, err := eraq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eraq *EmailRoleAttributeQuery) Exist(ctx context.Context) (bool, error) {
	if err := eraq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return eraq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eraq *EmailRoleAttributeQuery) ExistX(ctx context.Context) bool {
	exist, err := eraq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmailRoleAttributeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eraq *EmailRoleAttributeQuery) Clone() *EmailRoleAttributeQuery {
	if eraq == nil {
		return nil
	}
	return &EmailRoleAttributeQuery{
		config:                eraq.config,
		limit:                 eraq.limit,
		offset:                eraq.offset,
		order:                 append([]OrderFunc{}, eraq.order...),
		predicates:            append([]predicate.EmailRoleAttribute{}, eraq.predicates...),
		withEmailTemplateEdge: eraq.withEmailTemplateEdge.Clone(),
		withRoleEdge:          eraq.withRoleEdge.Clone(),
		// clone intermediate query.
		sql:    eraq.sql.Clone(),
		path:   eraq.path,
		unique: eraq.unique,
	}
}

// WithEmailTemplateEdge tells the query-builder to eager-load the nodes that are connected to
// the "email_template_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (eraq *EmailRoleAttributeQuery) WithEmailTemplateEdge(opts ...func(*EmailTemplateQuery)) *EmailRoleAttributeQuery {
	query := &EmailTemplateQuery{config: eraq.config}
	for _, opt := range opts {
		opt(query)
	}
	eraq.withEmailTemplateEdge = query
	return eraq
}

// WithRoleEdge tells the query-builder to eager-load the nodes that are connected to
// the "role_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (eraq *EmailRoleAttributeQuery) WithRoleEdge(opts ...func(*RoleQuery)) *EmailRoleAttributeQuery {
	query := &RoleQuery{config: eraq.config}
	for _, opt := range opts {
		opt(query)
	}
	eraq.withRoleEdge = query
	return eraq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EmailRoleAttribute.Query().
//		GroupBy(emailroleattribute.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eraq *EmailRoleAttributeQuery) GroupBy(field string, fields ...string) *EmailRoleAttributeGroupBy {
	grbuild := &EmailRoleAttributeGroupBy{config: eraq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eraq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eraq.sqlQuery(ctx), nil
	}
	grbuild.label = emailroleattribute.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.EmailRoleAttribute.Query().
//		Select(emailroleattribute.FieldCreatedAt).
//		Scan(ctx, &v)
func (eraq *EmailRoleAttributeQuery) Select(fields ...string) *EmailRoleAttributeSelect {
	eraq.fields = append(eraq.fields, fields...)
	selbuild := &EmailRoleAttributeSelect{EmailRoleAttributeQuery: eraq}
	selbuild.label = emailroleattribute.Label
	selbuild.flds, selbuild.scan = &eraq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a EmailRoleAttributeSelect configured with the given aggregations.
func (eraq *EmailRoleAttributeQuery) Aggregate(fns ...AggregateFunc) *EmailRoleAttributeSelect {
	return eraq.Select().Aggregate(fns...)
}

func (eraq *EmailRoleAttributeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range eraq.fields {
		if !emailroleattribute.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eraq.path != nil {
		prev, err := eraq.path(ctx)
		if err != nil {
			return err
		}
		eraq.sql = prev
	}
	return nil
}

func (eraq *EmailRoleAttributeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EmailRoleAttribute, error) {
	var (
		nodes       = []*EmailRoleAttribute{}
		_spec       = eraq.querySpec()
		loadedTypes = [2]bool{
			eraq.withEmailTemplateEdge != nil,
			eraq.withRoleEdge != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EmailRoleAttribute).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EmailRoleAttribute{config: eraq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eraq.modifiers) > 0 {
		_spec.Modifiers = eraq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eraq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eraq.withEmailTemplateEdge; query != nil {
		if err := eraq.loadEmailTemplateEdge(ctx, query, nodes, nil,
			func(n *EmailRoleAttribute, e *EmailTemplate) { n.Edges.EmailTemplateEdge = e }); err != nil {
			return nil, err
		}
	}
	if query := eraq.withRoleEdge; query != nil {
		if err := eraq.loadRoleEdge(ctx, query, nodes, nil,
			func(n *EmailRoleAttribute, e *Role) { n.Edges.RoleEdge = e }); err != nil {
			return nil, err
		}
	}
	for i := range eraq.loadTotal {
		if err := eraq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eraq *EmailRoleAttributeQuery) loadEmailTemplateEdge(ctx context.Context, query *EmailTemplateQuery, nodes []*EmailRoleAttribute, init func(*EmailRoleAttribute), assign func(*EmailRoleAttribute, *EmailTemplate)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EmailRoleAttribute)
	for i := range nodes {
		fk := nodes[i].EmailTemplateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(emailtemplate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "email_template_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eraq *EmailRoleAttributeQuery) loadRoleEdge(ctx context.Context, query *RoleQuery, nodes []*EmailRoleAttribute, init func(*EmailRoleAttribute), assign func(*EmailRoleAttribute, *Role)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EmailRoleAttribute)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eraq *EmailRoleAttributeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eraq.querySpec()
	if len(eraq.modifiers) > 0 {
		_spec.Modifiers = eraq.modifiers
	}
	_spec.Node.Columns = eraq.fields
	if len(eraq.fields) > 0 {
		_spec.Unique = eraq.unique != nil && *eraq.unique
	}
	return sqlgraph.CountNodes(ctx, eraq.driver, _spec)
}

func (eraq *EmailRoleAttributeQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := eraq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (eraq *EmailRoleAttributeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailroleattribute.Table,
			Columns: emailroleattribute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailroleattribute.FieldID,
			},
		},
		From:   eraq.sql,
		Unique: true,
	}
	if unique := eraq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := eraq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailroleattribute.FieldID)
		for i := range fields {
			if fields[i] != emailroleattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eraq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eraq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eraq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eraq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eraq *EmailRoleAttributeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eraq.driver.Dialect())
	t1 := builder.Table(emailroleattribute.Table)
	columns := eraq.fields
	if len(columns) == 0 {
		columns = emailroleattribute.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eraq.sql != nil {
		selector = eraq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eraq.unique != nil && *eraq.unique {
		selector.Distinct()
	}
	for _, p := range eraq.predicates {
		p(selector)
	}
	for _, p := range eraq.order {
		p(selector)
	}
	if offset := eraq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eraq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EmailRoleAttributeGroupBy is the group-by builder for EmailRoleAttribute entities.
type EmailRoleAttributeGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eragb *EmailRoleAttributeGroupBy) Aggregate(fns ...AggregateFunc) *EmailRoleAttributeGroupBy {
	eragb.fns = append(eragb.fns, fns...)
	return eragb
}

// Scan applies the group-by query and scans the result into the given value.
func (eragb *EmailRoleAttributeGroupBy) Scan(ctx context.Context, v any) error {
	query, err := eragb.path(ctx)
	if err != nil {
		return err
	}
	eragb.sql = query
	return eragb.sqlScan(ctx, v)
}

func (eragb *EmailRoleAttributeGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range eragb.fields {
		if !emailroleattribute.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := eragb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eragb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (eragb *EmailRoleAttributeGroupBy) sqlQuery() *sql.Selector {
	selector := eragb.sql.Select()
	aggregation := make([]string, 0, len(eragb.fns))
	for _, fn := range eragb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(eragb.fields)+len(eragb.fns))
		for _, f := range eragb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(eragb.fields...)...)
}

// EmailRoleAttributeSelect is the builder for selecting fields of EmailRoleAttribute entities.
type EmailRoleAttributeSelect struct {
	*EmailRoleAttributeQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eras *EmailRoleAttributeSelect) Aggregate(fns ...AggregateFunc) *EmailRoleAttributeSelect {
	eras.fns = append(eras.fns, fns...)
	return eras
}

// Scan applies the selector query and scans the result into the given value.
func (eras *EmailRoleAttributeSelect) Scan(ctx context.Context, v any) error {
	if err := eras.prepareQuery(ctx); err != nil {
		return err
	}
	eras.sql = eras.EmailRoleAttributeQuery.sqlQuery(ctx)
	return eras.sqlScan(ctx, v)
}

func (eras *EmailRoleAttributeSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(eras.fns))
	for _, fn := range eras.fns {
		aggregation = append(aggregation, fn(eras.sql))
	}
	switch n := len(*eras.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		eras.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		eras.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := eras.sql.Query()
	if err := eras.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
