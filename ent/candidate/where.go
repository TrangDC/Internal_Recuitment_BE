// Code generated by ent, DO NOT EDIT.

package candidate

import (
	"time"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// Dob applies equality check predicate on the "dob" field. It's identical to DobEQ.
func Dob(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDob), v))
	})
}

// IsBlacklist applies equality check predicate on the "is_blacklist" field. It's identical to IsBlacklistEQ.
func IsBlacklist(v bool) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsBlacklist), v))
	})
}

// LastApplyDate applies equality check predicate on the "last_apply_date" field. It's identical to LastApplyDateEQ.
func LastApplyDate(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastApplyDate), v))
	})
}

// ReferenceValue applies equality check predicate on the "reference_value" field. It's identical to ReferenceValueEQ.
func ReferenceValue(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceValue), v))
	})
}

// ReferenceUID applies equality check predicate on the "reference_uid" field. It's identical to ReferenceUIDEQ.
func ReferenceUID(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceUID), v))
	})
}

// RecruitTime applies equality check predicate on the "recruit_time" field. It's identical to RecruitTimeEQ.
func RecruitTime(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecruitTime), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// DobEQ applies the EQ predicate on the "dob" field.
func DobEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDob), v))
	})
}

// DobNEQ applies the NEQ predicate on the "dob" field.
func DobNEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDob), v))
	})
}

// DobIn applies the In predicate on the "dob" field.
func DobIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDob), v...))
	})
}

// DobNotIn applies the NotIn predicate on the "dob" field.
func DobNotIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDob), v...))
	})
}

// DobGT applies the GT predicate on the "dob" field.
func DobGT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDob), v))
	})
}

// DobGTE applies the GTE predicate on the "dob" field.
func DobGTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDob), v))
	})
}

// DobLT applies the LT predicate on the "dob" field.
func DobLT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDob), v))
	})
}

// DobLTE applies the LTE predicate on the "dob" field.
func DobLTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDob), v))
	})
}

// DobIsNil applies the IsNil predicate on the "dob" field.
func DobIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDob)))
	})
}

// DobNotNil applies the NotNil predicate on the "dob" field.
func DobNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDob)))
	})
}

// IsBlacklistEQ applies the EQ predicate on the "is_blacklist" field.
func IsBlacklistEQ(v bool) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsBlacklist), v))
	})
}

// IsBlacklistNEQ applies the NEQ predicate on the "is_blacklist" field.
func IsBlacklistNEQ(v bool) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsBlacklist), v))
	})
}

// LastApplyDateEQ applies the EQ predicate on the "last_apply_date" field.
func LastApplyDateEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateNEQ applies the NEQ predicate on the "last_apply_date" field.
func LastApplyDateNEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateIn applies the In predicate on the "last_apply_date" field.
func LastApplyDateIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastApplyDate), v...))
	})
}

// LastApplyDateNotIn applies the NotIn predicate on the "last_apply_date" field.
func LastApplyDateNotIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastApplyDate), v...))
	})
}

// LastApplyDateGT applies the GT predicate on the "last_apply_date" field.
func LastApplyDateGT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateGTE applies the GTE predicate on the "last_apply_date" field.
func LastApplyDateGTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateLT applies the LT predicate on the "last_apply_date" field.
func LastApplyDateLT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateLTE applies the LTE predicate on the "last_apply_date" field.
func LastApplyDateLTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateIsNil applies the IsNil predicate on the "last_apply_date" field.
func LastApplyDateIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastApplyDate)))
	})
}

// LastApplyDateNotNil applies the NotNil predicate on the "last_apply_date" field.
func LastApplyDateNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastApplyDate)))
	})
}

// ReferenceTypeEQ applies the EQ predicate on the "reference_type" field.
func ReferenceTypeEQ(v ReferenceType) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceType), v))
	})
}

// ReferenceTypeNEQ applies the NEQ predicate on the "reference_type" field.
func ReferenceTypeNEQ(v ReferenceType) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferenceType), v))
	})
}

// ReferenceTypeIn applies the In predicate on the "reference_type" field.
func ReferenceTypeIn(vs ...ReferenceType) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReferenceType), v...))
	})
}

// ReferenceTypeNotIn applies the NotIn predicate on the "reference_type" field.
func ReferenceTypeNotIn(vs ...ReferenceType) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReferenceType), v...))
	})
}

// ReferenceValueEQ applies the EQ predicate on the "reference_value" field.
func ReferenceValueEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueNEQ applies the NEQ predicate on the "reference_value" field.
func ReferenceValueNEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueIn applies the In predicate on the "reference_value" field.
func ReferenceValueIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReferenceValue), v...))
	})
}

// ReferenceValueNotIn applies the NotIn predicate on the "reference_value" field.
func ReferenceValueNotIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReferenceValue), v...))
	})
}

// ReferenceValueGT applies the GT predicate on the "reference_value" field.
func ReferenceValueGT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueGTE applies the GTE predicate on the "reference_value" field.
func ReferenceValueGTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueLT applies the LT predicate on the "reference_value" field.
func ReferenceValueLT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueLTE applies the LTE predicate on the "reference_value" field.
func ReferenceValueLTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueContains applies the Contains predicate on the "reference_value" field.
func ReferenceValueContains(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueHasPrefix applies the HasPrefix predicate on the "reference_value" field.
func ReferenceValueHasPrefix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueHasSuffix applies the HasSuffix predicate on the "reference_value" field.
func ReferenceValueHasSuffix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueIsNil applies the IsNil predicate on the "reference_value" field.
func ReferenceValueIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReferenceValue)))
	})
}

// ReferenceValueNotNil applies the NotNil predicate on the "reference_value" field.
func ReferenceValueNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReferenceValue)))
	})
}

// ReferenceValueEqualFold applies the EqualFold predicate on the "reference_value" field.
func ReferenceValueEqualFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReferenceValue), v))
	})
}

// ReferenceValueContainsFold applies the ContainsFold predicate on the "reference_value" field.
func ReferenceValueContainsFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReferenceValue), v))
	})
}

// ReferenceUIDEQ applies the EQ predicate on the "reference_uid" field.
func ReferenceUIDEQ(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceUID), v))
	})
}

// ReferenceUIDNEQ applies the NEQ predicate on the "reference_uid" field.
func ReferenceUIDNEQ(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferenceUID), v))
	})
}

// ReferenceUIDIn applies the In predicate on the "reference_uid" field.
func ReferenceUIDIn(vs ...uuid.UUID) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReferenceUID), v...))
	})
}

// ReferenceUIDNotIn applies the NotIn predicate on the "reference_uid" field.
func ReferenceUIDNotIn(vs ...uuid.UUID) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReferenceUID), v...))
	})
}

// ReferenceUIDIsNil applies the IsNil predicate on the "reference_uid" field.
func ReferenceUIDIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReferenceUID)))
	})
}

// ReferenceUIDNotNil applies the NotNil predicate on the "reference_uid" field.
func ReferenceUIDNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReferenceUID)))
	})
}

// RecruitTimeEQ applies the EQ predicate on the "recruit_time" field.
func RecruitTimeEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecruitTime), v))
	})
}

// RecruitTimeNEQ applies the NEQ predicate on the "recruit_time" field.
func RecruitTimeNEQ(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecruitTime), v))
	})
}

// RecruitTimeIn applies the In predicate on the "recruit_time" field.
func RecruitTimeIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecruitTime), v...))
	})
}

// RecruitTimeNotIn applies the NotIn predicate on the "recruit_time" field.
func RecruitTimeNotIn(vs ...time.Time) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecruitTime), v...))
	})
}

// RecruitTimeGT applies the GT predicate on the "recruit_time" field.
func RecruitTimeGT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecruitTime), v))
	})
}

// RecruitTimeGTE applies the GTE predicate on the "recruit_time" field.
func RecruitTimeGTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecruitTime), v))
	})
}

// RecruitTimeLT applies the LT predicate on the "recruit_time" field.
func RecruitTimeLT(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecruitTime), v))
	})
}

// RecruitTimeLTE applies the LTE predicate on the "recruit_time" field.
func RecruitTimeLTE(v time.Time) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecruitTime), v))
	})
}

// RecruitTimeIsNil applies the IsNil predicate on the "recruit_time" field.
func RecruitTimeIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecruitTime)))
	})
}

// RecruitTimeNotNil applies the NotNil predicate on the "recruit_time" field.
func RecruitTimeNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecruitTime)))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatar), v))
	})
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...uuid.UUID) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvatar), v...))
	})
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...uuid.UUID) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvatar), v...))
	})
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatar), v))
	})
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatar), v))
	})
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatar), v))
	})
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v uuid.UUID) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatar), v))
	})
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvatar)))
	})
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvatar)))
	})
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountry), v))
	})
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCountry), v...))
	})
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCountry), v...))
	})
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountry), v))
	})
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountry), v))
	})
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountry), v))
	})
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountry), v))
	})
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountry), v))
	})
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountry), v))
	})
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountry), v))
	})
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCountry)))
	})
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCountry)))
	})
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountry), v))
	})
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountry), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddress)))
	})
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddress)))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.Candidate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Candidate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// HasCandidateJobEdges applies the HasEdge predicate on the "candidate_job_edges" edge.
func HasCandidateJobEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateJobEdgesTable, CandidateJobEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateJobEdgesWith applies the HasEdge predicate on the "candidate_job_edges" edge with a given conditions (other predicates).
func HasCandidateJobEdgesWith(preds ...predicate.CandidateJob) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateJobEdgesTable, CandidateJobEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReferenceUserEdge applies the HasEdge predicate on the "reference_user_edge" edge.
func HasReferenceUserEdge() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReferenceUserEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReferenceUserEdgeTable, ReferenceUserEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferenceUserEdgeWith applies the HasEdge predicate on the "reference_user_edge" edge with a given conditions (other predicates).
func HasReferenceUserEdgeWith(preds ...predicate.User) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReferenceUserEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReferenceUserEdgeTable, ReferenceUserEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttachmentEdges applies the HasEdge predicate on the "attachment_edges" edge.
func HasAttachmentEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentEdgesTable, AttachmentEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentEdgesWith applies the HasEdge predicate on the "attachment_edges" edge with a given conditions (other predicates).
func HasAttachmentEdgesWith(preds ...predicate.Attachment) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentEdgesTable, AttachmentEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateSkillEdges applies the HasEdge predicate on the "candidate_skill_edges" edge.
func HasCandidateSkillEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateSkillEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateSkillEdgesTable, CandidateSkillEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateSkillEdgesWith applies the HasEdge predicate on the "candidate_skill_edges" edge with a given conditions (other predicates).
func HasCandidateSkillEdgesWith(preds ...predicate.EntitySkill) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateSkillEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateSkillEdgesTable, CandidateSkillEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateExpEdges applies the HasEdge predicate on the "candidate_exp_edges" edge.
func HasCandidateExpEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateExpEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateExpEdgesTable, CandidateExpEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateExpEdgesWith applies the HasEdge predicate on the "candidate_exp_edges" edge with a given conditions (other predicates).
func HasCandidateExpEdgesWith(preds ...predicate.CandidateExp) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateExpEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateExpEdgesTable, CandidateExpEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateEducateEdges applies the HasEdge predicate on the "candidate_educate_edges" edge.
func HasCandidateEducateEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateEducateEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateEducateEdgesTable, CandidateEducateEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateEducateEdgesWith applies the HasEdge predicate on the "candidate_educate_edges" edge with a given conditions (other predicates).
func HasCandidateEducateEdgesWith(preds ...predicate.CandidateEducate) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateEducateEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateEducateEdgesTable, CandidateEducateEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateAwardEdges applies the HasEdge predicate on the "candidate_award_edges" edge.
func HasCandidateAwardEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateAwardEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateAwardEdgesTable, CandidateAwardEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateAwardEdgesWith applies the HasEdge predicate on the "candidate_award_edges" edge with a given conditions (other predicates).
func HasCandidateAwardEdgesWith(preds ...predicate.CandidateAward) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateAwardEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateAwardEdgesTable, CandidateAwardEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateCertificateEdges applies the HasEdge predicate on the "candidate_certificate_edges" edge.
func HasCandidateCertificateEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateCertificateEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateCertificateEdgesTable, CandidateCertificateEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateCertificateEdgesWith applies the HasEdge predicate on the "candidate_certificate_edges" edge with a given conditions (other predicates).
func HasCandidateCertificateEdgesWith(preds ...predicate.CandidateCertificate) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateCertificateEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateCertificateEdgesTable, CandidateCertificateEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateHistoryCallEdges applies the HasEdge predicate on the "candidate_history_call_edges" edge.
func HasCandidateHistoryCallEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateHistoryCallEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateHistoryCallEdgesTable, CandidateHistoryCallEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateHistoryCallEdgesWith applies the HasEdge predicate on the "candidate_history_call_edges" edge with a given conditions (other predicates).
func HasCandidateHistoryCallEdgesWith(preds ...predicate.CandidateHistoryCall) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateHistoryCallEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateHistoryCallEdgesTable, CandidateHistoryCallEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateNoteEdges applies the HasEdge predicate on the "candidate_note_edges" edge.
func HasCandidateNoteEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateNoteEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateNoteEdgesTable, CandidateNoteEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateNoteEdgesWith applies the HasEdge predicate on the "candidate_note_edges" edge with a given conditions (other predicates).
func HasCandidateNoteEdgesWith(preds ...predicate.CandidateNote) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateNoteEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateNoteEdgesTable, CandidateNoteEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutgoingEmailEdges applies the HasEdge predicate on the "outgoing_email_edges" edge.
func HasOutgoingEmailEdges() predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OutgoingEmailEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OutgoingEmailEdgesTable, OutgoingEmailEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutgoingEmailEdgesWith applies the HasEdge predicate on the "outgoing_email_edges" edge with a given conditions (other predicates).
func HasOutgoingEmailEdgesWith(preds ...predicate.OutgoingEmail) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OutgoingEmailEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OutgoingEmailEdgesTable, OutgoingEmailEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Candidate) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Candidate) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Candidate) predicate.Candidate {
	return predicate.Candidate(func(s *sql.Selector) {
		p(s.Not())
	})
}
