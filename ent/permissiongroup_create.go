// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/permission"
	"trec/ent/permissiongroup"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PermissionGroupCreate is the builder for creating a PermissionGroup entity.
type PermissionGroupCreate struct {
	config
	mutation *PermissionGroupMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pgc *PermissionGroupCreate) SetCreatedAt(t time.Time) *PermissionGroupCreate {
	pgc.mutation.SetCreatedAt(t)
	return pgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pgc *PermissionGroupCreate) SetNillableCreatedAt(t *time.Time) *PermissionGroupCreate {
	if t != nil {
		pgc.SetCreatedAt(*t)
	}
	return pgc
}

// SetUpdatedAt sets the "updated_at" field.
func (pgc *PermissionGroupCreate) SetUpdatedAt(t time.Time) *PermissionGroupCreate {
	pgc.mutation.SetUpdatedAt(t)
	return pgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pgc *PermissionGroupCreate) SetNillableUpdatedAt(t *time.Time) *PermissionGroupCreate {
	if t != nil {
		pgc.SetUpdatedAt(*t)
	}
	return pgc
}

// SetDeletedAt sets the "deleted_at" field.
func (pgc *PermissionGroupCreate) SetDeletedAt(t time.Time) *PermissionGroupCreate {
	pgc.mutation.SetDeletedAt(t)
	return pgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pgc *PermissionGroupCreate) SetNillableDeletedAt(t *time.Time) *PermissionGroupCreate {
	if t != nil {
		pgc.SetDeletedAt(*t)
	}
	return pgc
}

// SetTitle sets the "title" field.
func (pgc *PermissionGroupCreate) SetTitle(s string) *PermissionGroupCreate {
	pgc.mutation.SetTitle(s)
	return pgc
}

// SetParentID sets the "parent_id" field.
func (pgc *PermissionGroupCreate) SetParentID(u uuid.UUID) *PermissionGroupCreate {
	pgc.mutation.SetParentID(u)
	return pgc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pgc *PermissionGroupCreate) SetNillableParentID(u *uuid.UUID) *PermissionGroupCreate {
	if u != nil {
		pgc.SetParentID(*u)
	}
	return pgc
}

// SetGroupType sets the "group_type" field.
func (pgc *PermissionGroupCreate) SetGroupType(pt permissiongroup.GroupType) *PermissionGroupCreate {
	pgc.mutation.SetGroupType(pt)
	return pgc
}

// SetNillableGroupType sets the "group_type" field if the given value is not nil.
func (pgc *PermissionGroupCreate) SetNillableGroupType(pt *permissiongroup.GroupType) *PermissionGroupCreate {
	if pt != nil {
		pgc.SetGroupType(*pt)
	}
	return pgc
}

// SetOrderID sets the "order_id" field.
func (pgc *PermissionGroupCreate) SetOrderID(i int) *PermissionGroupCreate {
	pgc.mutation.SetOrderID(i)
	return pgc
}

// SetID sets the "id" field.
func (pgc *PermissionGroupCreate) SetID(u uuid.UUID) *PermissionGroupCreate {
	pgc.mutation.SetID(u)
	return pgc
}

// SetGroupPermissionParentID sets the "group_permission_parent" edge to the PermissionGroup entity by ID.
func (pgc *PermissionGroupCreate) SetGroupPermissionParentID(id uuid.UUID) *PermissionGroupCreate {
	pgc.mutation.SetGroupPermissionParentID(id)
	return pgc
}

// SetNillableGroupPermissionParentID sets the "group_permission_parent" edge to the PermissionGroup entity by ID if the given value is not nil.
func (pgc *PermissionGroupCreate) SetNillableGroupPermissionParentID(id *uuid.UUID) *PermissionGroupCreate {
	if id != nil {
		pgc = pgc.SetGroupPermissionParentID(*id)
	}
	return pgc
}

// SetGroupPermissionParent sets the "group_permission_parent" edge to the PermissionGroup entity.
func (pgc *PermissionGroupCreate) SetGroupPermissionParent(p *PermissionGroup) *PermissionGroupCreate {
	return pgc.SetGroupPermissionParentID(p.ID)
}

// AddGroupPermissionChildIDs adds the "group_permission_children" edge to the PermissionGroup entity by IDs.
func (pgc *PermissionGroupCreate) AddGroupPermissionChildIDs(ids ...uuid.UUID) *PermissionGroupCreate {
	pgc.mutation.AddGroupPermissionChildIDs(ids...)
	return pgc
}

// AddGroupPermissionChildren adds the "group_permission_children" edges to the PermissionGroup entity.
func (pgc *PermissionGroupCreate) AddGroupPermissionChildren(p ...*PermissionGroup) *PermissionGroupCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pgc.AddGroupPermissionChildIDs(ids...)
}

// AddPermissionEdgeIDs adds the "permission_edges" edge to the Permission entity by IDs.
func (pgc *PermissionGroupCreate) AddPermissionEdgeIDs(ids ...uuid.UUID) *PermissionGroupCreate {
	pgc.mutation.AddPermissionEdgeIDs(ids...)
	return pgc
}

// AddPermissionEdges adds the "permission_edges" edges to the Permission entity.
func (pgc *PermissionGroupCreate) AddPermissionEdges(p ...*Permission) *PermissionGroupCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pgc.AddPermissionEdgeIDs(ids...)
}

// Mutation returns the PermissionGroupMutation object of the builder.
func (pgc *PermissionGroupCreate) Mutation() *PermissionGroupMutation {
	return pgc.mutation
}

// Save creates the PermissionGroup in the database.
func (pgc *PermissionGroupCreate) Save(ctx context.Context) (*PermissionGroup, error) {
	var (
		err  error
		node *PermissionGroup
	)
	pgc.defaults()
	if len(pgc.hooks) == 0 {
		if err = pgc.check(); err != nil {
			return nil, err
		}
		node, err = pgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pgc.check(); err != nil {
				return nil, err
			}
			pgc.mutation = mutation
			if node, err = pgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pgc.hooks) - 1; i >= 0; i-- {
			if pgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pgc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pgc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PermissionGroup)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PermissionGroupMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pgc *PermissionGroupCreate) SaveX(ctx context.Context) *PermissionGroup {
	v, err := pgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgc *PermissionGroupCreate) Exec(ctx context.Context) error {
	_, err := pgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgc *PermissionGroupCreate) ExecX(ctx context.Context) {
	if err := pgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgc *PermissionGroupCreate) defaults() {
	if _, ok := pgc.mutation.CreatedAt(); !ok {
		v := permissiongroup.DefaultCreatedAt()
		pgc.mutation.SetCreatedAt(v)
	}
	if _, ok := pgc.mutation.GroupType(); !ok {
		v := permissiongroup.DefaultGroupType
		pgc.mutation.SetGroupType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgc *PermissionGroupCreate) check() error {
	if _, ok := pgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PermissionGroup.created_at"`)}
	}
	if _, ok := pgc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "PermissionGroup.title"`)}
	}
	if _, ok := pgc.mutation.GroupType(); !ok {
		return &ValidationError{Name: "group_type", err: errors.New(`ent: missing required field "PermissionGroup.group_type"`)}
	}
	if v, ok := pgc.mutation.GroupType(); ok {
		if err := permissiongroup.GroupTypeValidator(v); err != nil {
			return &ValidationError{Name: "group_type", err: fmt.Errorf(`ent: validator failed for field "PermissionGroup.group_type": %w`, err)}
		}
	}
	if _, ok := pgc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "PermissionGroup.order_id"`)}
	}
	return nil
}

func (pgc *PermissionGroupCreate) sqlSave(ctx context.Context) (*PermissionGroup, error) {
	_node, _spec := pgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pgc *PermissionGroupCreate) createSpec() (*PermissionGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &PermissionGroup{config: pgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: permissiongroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: permissiongroup.FieldID,
			},
		}
	)
	if id, ok := pgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pgc.mutation.CreatedAt(); ok {
		_spec.SetField(permissiongroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pgc.mutation.UpdatedAt(); ok {
		_spec.SetField(permissiongroup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pgc.mutation.DeletedAt(); ok {
		_spec.SetField(permissiongroup.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pgc.mutation.Title(); ok {
		_spec.SetField(permissiongroup.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pgc.mutation.GroupType(); ok {
		_spec.SetField(permissiongroup.FieldGroupType, field.TypeEnum, value)
		_node.GroupType = value
	}
	if value, ok := pgc.mutation.OrderID(); ok {
		_spec.SetField(permissiongroup.FieldOrderID, field.TypeInt, value)
		_node.OrderID = value
	}
	if nodes := pgc.mutation.GroupPermissionParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissiongroup.GroupPermissionParentTable,
			Columns: []string{permissiongroup.GroupPermissionParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: permissiongroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pgc.mutation.GroupPermissionChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permissiongroup.GroupPermissionChildrenTable,
			Columns: []string{permissiongroup.GroupPermissionChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: permissiongroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pgc.mutation.PermissionEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permissiongroup.PermissionEdgesTable,
			Columns: []string{permissiongroup.PermissionEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PermissionGroupCreateBulk is the builder for creating many PermissionGroup entities in bulk.
type PermissionGroupCreateBulk struct {
	config
	builders []*PermissionGroupCreate
}

// Save creates the PermissionGroup entities in the database.
func (pgcb *PermissionGroupCreateBulk) Save(ctx context.Context) ([]*PermissionGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pgcb.builders))
	nodes := make([]*PermissionGroup, len(pgcb.builders))
	mutators := make([]Mutator, len(pgcb.builders))
	for i := range pgcb.builders {
		func(i int, root context.Context) {
			builder := pgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pgcb *PermissionGroupCreateBulk) SaveX(ctx context.Context) []*PermissionGroup {
	v, err := pgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgcb *PermissionGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := pgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgcb *PermissionGroupCreateBulk) ExecX(ctx context.Context) {
	if err := pgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
