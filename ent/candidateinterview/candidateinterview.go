// Code generated by ent, DO NOT EDIT.

package candidateinterview

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the candidateinterview type in the database.
	Label = "candidate_interview"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldCandidateJobStatus holds the string denoting the candidate_job_status field in the database.
	FieldCandidateJobStatus = "candidate_job_status"
	// FieldCandidateJobID holds the string denoting the candidate_job_id field in the database.
	FieldCandidateJobID = "candidate_job_id"
	// FieldInterviewDate holds the string denoting the interview_date field in the database.
	FieldInterviewDate = "interview_date"
	// FieldStartFrom holds the string denoting the start_from field in the database.
	FieldStartFrom = "start_from"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldMeetingLink holds the string denoting the meeting_link field in the database.
	FieldMeetingLink = "meeting_link"
	// EdgeCandidateJobEdge holds the string denoting the candidate_job_edge edge name in mutations.
	EdgeCandidateJobEdge = "candidate_job_edge"
	// EdgeAttachmentEdges holds the string denoting the attachment_edges edge name in mutations.
	EdgeAttachmentEdges = "attachment_edges"
	// EdgeInterviewerEdges holds the string denoting the interviewer_edges edge name in mutations.
	EdgeInterviewerEdges = "interviewer_edges"
	// EdgeCreatedByEdge holds the string denoting the created_by_edge edge name in mutations.
	EdgeCreatedByEdge = "created_by_edge"
	// EdgeUserInterviewers holds the string denoting the user_interviewers edge name in mutations.
	EdgeUserInterviewers = "user_interviewers"
	// Table holds the table name of the candidateinterview in the database.
	Table = "candidate_interviews"
	// CandidateJobEdgeTable is the table that holds the candidate_job_edge relation/edge.
	CandidateJobEdgeTable = "candidate_interviews"
	// CandidateJobEdgeInverseTable is the table name for the CandidateJob entity.
	// It exists in this package in order to avoid circular dependency with the "candidatejob" package.
	CandidateJobEdgeInverseTable = "candidate_jobs"
	// CandidateJobEdgeColumn is the table column denoting the candidate_job_edge relation/edge.
	CandidateJobEdgeColumn = "candidate_job_id"
	// AttachmentEdgesTable is the table that holds the attachment_edges relation/edge.
	AttachmentEdgesTable = "attachments"
	// AttachmentEdgesInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AttachmentEdgesInverseTable = "attachments"
	// AttachmentEdgesColumn is the table column denoting the attachment_edges relation/edge.
	AttachmentEdgesColumn = "relation_id"
	// InterviewerEdgesTable is the table that holds the interviewer_edges relation/edge. The primary key declared below.
	InterviewerEdgesTable = "candidate_interviewers"
	// InterviewerEdgesInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	InterviewerEdgesInverseTable = "users"
	// CreatedByEdgeTable is the table that holds the created_by_edge relation/edge.
	CreatedByEdgeTable = "candidate_interviews"
	// CreatedByEdgeInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByEdgeInverseTable = "users"
	// CreatedByEdgeColumn is the table column denoting the created_by_edge relation/edge.
	CreatedByEdgeColumn = "created_by"
	// UserInterviewersTable is the table that holds the user_interviewers relation/edge.
	UserInterviewersTable = "candidate_interviewers"
	// UserInterviewersInverseTable is the table name for the CandidateInterviewer entity.
	// It exists in this package in order to avoid circular dependency with the "candidateinterviewer" package.
	UserInterviewersInverseTable = "candidate_interviewers"
	// UserInterviewersColumn is the table column denoting the user_interviewers relation/edge.
	UserInterviewersColumn = "candidate_interview_id"
)

// Columns holds all SQL columns for candidateinterview fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTitle,
	FieldCandidateJobStatus,
	FieldCandidateJobID,
	FieldInterviewDate,
	FieldStartFrom,
	FieldEndAt,
	FieldCreatedBy,
	FieldDescription,
	FieldStatus,
	FieldLocation,
	FieldMeetingLink,
}

var (
	// InterviewerEdgesPrimaryKey and InterviewerEdgesColumn2 are the table columns denoting the
	// primary key for the interviewer_edges relation (M2M).
	InterviewerEdgesPrimaryKey = []string{"user_id", "candidate_interview_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
)

// CandidateJobStatus defines the type for the "candidate_job_status" enum field.
type CandidateJobStatus string

// CandidateJobStatusApplied is the default value of the CandidateJobStatus enum.
const DefaultCandidateJobStatus = CandidateJobStatusApplied

// CandidateJobStatus values.
const (
	CandidateJobStatusApplied         CandidateJobStatus = "applied"
	CandidateJobStatusInterviewing    CandidateJobStatus = "interviewing"
	CandidateJobStatusOffering        CandidateJobStatus = "offering"
	CandidateJobStatusHired           CandidateJobStatus = "hired"
	CandidateJobStatusFailedCv        CandidateJobStatus = "failed_cv"
	CandidateJobStatusFailedInterview CandidateJobStatus = "failed_interview"
	CandidateJobStatusOfferLost       CandidateJobStatus = "offer_lost"
	CandidateJobStatusExStaff         CandidateJobStatus = "ex_staff"
)

func (cjs CandidateJobStatus) String() string {
	return string(cjs)
}

// CandidateJobStatusValidator is a validator for the "candidate_job_status" field enum values. It is called by the builders before save.
func CandidateJobStatusValidator(cjs CandidateJobStatus) error {
	switch cjs {
	case CandidateJobStatusApplied, CandidateJobStatusInterviewing, CandidateJobStatusOffering, CandidateJobStatusHired, CandidateJobStatusFailedCv, CandidateJobStatusFailedInterview, CandidateJobStatusOfferLost, CandidateJobStatusExStaff:
		return nil
	default:
		return fmt.Errorf("candidateinterview: invalid enum value for candidate_job_status field: %q", cjs)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusInvitedToInterview is the default value of the Status enum.
const DefaultStatus = StatusInvitedToInterview

// Status values.
const (
	StatusInvitedToInterview Status = "invited_to_interview"
	StatusInterviewing       Status = "interviewing"
	StatusDone               Status = "done"
	StatusCancelled          Status = "cancelled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusInvitedToInterview, StatusInterviewing, StatusDone, StatusCancelled:
		return nil
	default:
		return fmt.Errorf("candidateinterview: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e CandidateJobStatus) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *CandidateJobStatus) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = CandidateJobStatus(str)
	if err := CandidateJobStatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid CandidateJobStatus", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
