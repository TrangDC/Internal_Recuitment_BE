// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidatecertificate"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateCertificateUpdate is the builder for updating CandidateCertificate entities.
type CandidateCertificateUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateCertificateMutation
}

// Where appends a list predicates to the CandidateCertificateUpdate builder.
func (ccu *CandidateCertificateUpdate) Where(ps ...predicate.CandidateCertificate) *CandidateCertificateUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *CandidateCertificateUpdate) SetUpdatedAt(t time.Time) *CandidateCertificateUpdate {
	ccu.mutation.SetUpdatedAt(t)
	return ccu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccu *CandidateCertificateUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateCertificateUpdate {
	if t != nil {
		ccu.SetUpdatedAt(*t)
	}
	return ccu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ccu *CandidateCertificateUpdate) ClearUpdatedAt() *CandidateCertificateUpdate {
	ccu.mutation.ClearUpdatedAt()
	return ccu
}

// SetDeletedAt sets the "deleted_at" field.
func (ccu *CandidateCertificateUpdate) SetDeletedAt(t time.Time) *CandidateCertificateUpdate {
	ccu.mutation.SetDeletedAt(t)
	return ccu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccu *CandidateCertificateUpdate) SetNillableDeletedAt(t *time.Time) *CandidateCertificateUpdate {
	if t != nil {
		ccu.SetDeletedAt(*t)
	}
	return ccu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccu *CandidateCertificateUpdate) ClearDeletedAt() *CandidateCertificateUpdate {
	ccu.mutation.ClearDeletedAt()
	return ccu
}

// SetCandidateID sets the "candidate_id" field.
func (ccu *CandidateCertificateUpdate) SetCandidateID(u uuid.UUID) *CandidateCertificateUpdate {
	ccu.mutation.SetCandidateID(u)
	return ccu
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (ccu *CandidateCertificateUpdate) SetNillableCandidateID(u *uuid.UUID) *CandidateCertificateUpdate {
	if u != nil {
		ccu.SetCandidateID(*u)
	}
	return ccu
}

// ClearCandidateID clears the value of the "candidate_id" field.
func (ccu *CandidateCertificateUpdate) ClearCandidateID() *CandidateCertificateUpdate {
	ccu.mutation.ClearCandidateID()
	return ccu
}

// SetName sets the "name" field.
func (ccu *CandidateCertificateUpdate) SetName(s string) *CandidateCertificateUpdate {
	ccu.mutation.SetName(s)
	return ccu
}

// SetScore sets the "score" field.
func (ccu *CandidateCertificateUpdate) SetScore(s string) *CandidateCertificateUpdate {
	ccu.mutation.SetScore(s)
	return ccu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ccu *CandidateCertificateUpdate) SetNillableScore(s *string) *CandidateCertificateUpdate {
	if s != nil {
		ccu.SetScore(*s)
	}
	return ccu
}

// ClearScore clears the value of the "score" field.
func (ccu *CandidateCertificateUpdate) ClearScore() *CandidateCertificateUpdate {
	ccu.mutation.ClearScore()
	return ccu
}

// SetAchievedDate sets the "achieved_date" field.
func (ccu *CandidateCertificateUpdate) SetAchievedDate(t time.Time) *CandidateCertificateUpdate {
	ccu.mutation.SetAchievedDate(t)
	return ccu
}

// SetNillableAchievedDate sets the "achieved_date" field if the given value is not nil.
func (ccu *CandidateCertificateUpdate) SetNillableAchievedDate(t *time.Time) *CandidateCertificateUpdate {
	if t != nil {
		ccu.SetAchievedDate(*t)
	}
	return ccu
}

// ClearAchievedDate clears the value of the "achieved_date" field.
func (ccu *CandidateCertificateUpdate) ClearAchievedDate() *CandidateCertificateUpdate {
	ccu.mutation.ClearAchievedDate()
	return ccu
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (ccu *CandidateCertificateUpdate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateCertificateUpdate {
	ccu.mutation.AddAttachmentEdgeIDs(ids...)
	return ccu
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (ccu *CandidateCertificateUpdate) AddAttachmentEdges(a ...*Attachment) *CandidateCertificateUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ccu.AddAttachmentEdgeIDs(ids...)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (ccu *CandidateCertificateUpdate) SetCandidateEdgeID(id uuid.UUID) *CandidateCertificateUpdate {
	ccu.mutation.SetCandidateEdgeID(id)
	return ccu
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (ccu *CandidateCertificateUpdate) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateCertificateUpdate {
	if id != nil {
		ccu = ccu.SetCandidateEdgeID(*id)
	}
	return ccu
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (ccu *CandidateCertificateUpdate) SetCandidateEdge(c *Candidate) *CandidateCertificateUpdate {
	return ccu.SetCandidateEdgeID(c.ID)
}

// Mutation returns the CandidateCertificateMutation object of the builder.
func (ccu *CandidateCertificateUpdate) Mutation() *CandidateCertificateMutation {
	return ccu.mutation
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (ccu *CandidateCertificateUpdate) ClearAttachmentEdges() *CandidateCertificateUpdate {
	ccu.mutation.ClearAttachmentEdges()
	return ccu
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (ccu *CandidateCertificateUpdate) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateCertificateUpdate {
	ccu.mutation.RemoveAttachmentEdgeIDs(ids...)
	return ccu
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (ccu *CandidateCertificateUpdate) RemoveAttachmentEdges(a ...*Attachment) *CandidateCertificateUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ccu.RemoveAttachmentEdgeIDs(ids...)
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (ccu *CandidateCertificateUpdate) ClearCandidateEdge() *CandidateCertificateUpdate {
	ccu.mutation.ClearCandidateEdge()
	return ccu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CandidateCertificateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ccu.hooks) == 0 {
		if err = ccu.check(); err != nil {
			return 0, err
		}
		affected, err = ccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateCertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccu.check(); err != nil {
				return 0, err
			}
			ccu.mutation = mutation
			affected, err = ccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccu.hooks) - 1; i >= 0; i-- {
			if ccu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CandidateCertificateUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CandidateCertificateUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CandidateCertificateUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccu *CandidateCertificateUpdate) check() error {
	if v, ok := ccu.mutation.Name(); ok {
		if err := candidatecertificate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CandidateCertificate.name": %w`, err)}
		}
	}
	if v, ok := ccu.mutation.Score(); ok {
		if err := candidatecertificate.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "CandidateCertificate.score": %w`, err)}
		}
	}
	return nil
}

func (ccu *CandidateCertificateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatecertificate.Table,
			Columns: candidatecertificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatecertificate.FieldID,
			},
		},
	}
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatecertificate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ccu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidatecertificate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ccu.mutation.DeletedAt(); ok {
		_spec.SetField(candidatecertificate.FieldDeletedAt, field.TypeTime, value)
	}
	if ccu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidatecertificate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ccu.mutation.Name(); ok {
		_spec.SetField(candidatecertificate.FieldName, field.TypeString, value)
	}
	if value, ok := ccu.mutation.Score(); ok {
		_spec.SetField(candidatecertificate.FieldScore, field.TypeString, value)
	}
	if ccu.mutation.ScoreCleared() {
		_spec.ClearField(candidatecertificate.FieldScore, field.TypeString)
	}
	if value, ok := ccu.mutation.AchievedDate(); ok {
		_spec.SetField(candidatecertificate.FieldAchievedDate, field.TypeTime, value)
	}
	if ccu.mutation.AchievedDateCleared() {
		_spec.ClearField(candidatecertificate.FieldAchievedDate, field.TypeTime)
	}
	if ccu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatecertificate.AttachmentEdgesTable,
			Columns: []string{candidatecertificate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !ccu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatecertificate.AttachmentEdgesTable,
			Columns: []string{candidatecertificate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatecertificate.AttachmentEdgesTable,
			Columns: []string{candidatecertificate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatecertificate.CandidateEdgeTable,
			Columns: []string{candidatecertificate.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatecertificate.CandidateEdgeTable,
			Columns: []string{candidatecertificate.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidatecertificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateCertificateUpdateOne is the builder for updating a single CandidateCertificate entity.
type CandidateCertificateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateCertificateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *CandidateCertificateUpdateOne) SetUpdatedAt(t time.Time) *CandidateCertificateUpdateOne {
	ccuo.mutation.SetUpdatedAt(t)
	return ccuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccuo *CandidateCertificateUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateCertificateUpdateOne {
	if t != nil {
		ccuo.SetUpdatedAt(*t)
	}
	return ccuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ccuo *CandidateCertificateUpdateOne) ClearUpdatedAt() *CandidateCertificateUpdateOne {
	ccuo.mutation.ClearUpdatedAt()
	return ccuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ccuo *CandidateCertificateUpdateOne) SetDeletedAt(t time.Time) *CandidateCertificateUpdateOne {
	ccuo.mutation.SetDeletedAt(t)
	return ccuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccuo *CandidateCertificateUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateCertificateUpdateOne {
	if t != nil {
		ccuo.SetDeletedAt(*t)
	}
	return ccuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccuo *CandidateCertificateUpdateOne) ClearDeletedAt() *CandidateCertificateUpdateOne {
	ccuo.mutation.ClearDeletedAt()
	return ccuo
}

// SetCandidateID sets the "candidate_id" field.
func (ccuo *CandidateCertificateUpdateOne) SetCandidateID(u uuid.UUID) *CandidateCertificateUpdateOne {
	ccuo.mutation.SetCandidateID(u)
	return ccuo
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (ccuo *CandidateCertificateUpdateOne) SetNillableCandidateID(u *uuid.UUID) *CandidateCertificateUpdateOne {
	if u != nil {
		ccuo.SetCandidateID(*u)
	}
	return ccuo
}

// ClearCandidateID clears the value of the "candidate_id" field.
func (ccuo *CandidateCertificateUpdateOne) ClearCandidateID() *CandidateCertificateUpdateOne {
	ccuo.mutation.ClearCandidateID()
	return ccuo
}

// SetName sets the "name" field.
func (ccuo *CandidateCertificateUpdateOne) SetName(s string) *CandidateCertificateUpdateOne {
	ccuo.mutation.SetName(s)
	return ccuo
}

// SetScore sets the "score" field.
func (ccuo *CandidateCertificateUpdateOne) SetScore(s string) *CandidateCertificateUpdateOne {
	ccuo.mutation.SetScore(s)
	return ccuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ccuo *CandidateCertificateUpdateOne) SetNillableScore(s *string) *CandidateCertificateUpdateOne {
	if s != nil {
		ccuo.SetScore(*s)
	}
	return ccuo
}

// ClearScore clears the value of the "score" field.
func (ccuo *CandidateCertificateUpdateOne) ClearScore() *CandidateCertificateUpdateOne {
	ccuo.mutation.ClearScore()
	return ccuo
}

// SetAchievedDate sets the "achieved_date" field.
func (ccuo *CandidateCertificateUpdateOne) SetAchievedDate(t time.Time) *CandidateCertificateUpdateOne {
	ccuo.mutation.SetAchievedDate(t)
	return ccuo
}

// SetNillableAchievedDate sets the "achieved_date" field if the given value is not nil.
func (ccuo *CandidateCertificateUpdateOne) SetNillableAchievedDate(t *time.Time) *CandidateCertificateUpdateOne {
	if t != nil {
		ccuo.SetAchievedDate(*t)
	}
	return ccuo
}

// ClearAchievedDate clears the value of the "achieved_date" field.
func (ccuo *CandidateCertificateUpdateOne) ClearAchievedDate() *CandidateCertificateUpdateOne {
	ccuo.mutation.ClearAchievedDate()
	return ccuo
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (ccuo *CandidateCertificateUpdateOne) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateCertificateUpdateOne {
	ccuo.mutation.AddAttachmentEdgeIDs(ids...)
	return ccuo
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (ccuo *CandidateCertificateUpdateOne) AddAttachmentEdges(a ...*Attachment) *CandidateCertificateUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ccuo.AddAttachmentEdgeIDs(ids...)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (ccuo *CandidateCertificateUpdateOne) SetCandidateEdgeID(id uuid.UUID) *CandidateCertificateUpdateOne {
	ccuo.mutation.SetCandidateEdgeID(id)
	return ccuo
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (ccuo *CandidateCertificateUpdateOne) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateCertificateUpdateOne {
	if id != nil {
		ccuo = ccuo.SetCandidateEdgeID(*id)
	}
	return ccuo
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (ccuo *CandidateCertificateUpdateOne) SetCandidateEdge(c *Candidate) *CandidateCertificateUpdateOne {
	return ccuo.SetCandidateEdgeID(c.ID)
}

// Mutation returns the CandidateCertificateMutation object of the builder.
func (ccuo *CandidateCertificateUpdateOne) Mutation() *CandidateCertificateMutation {
	return ccuo.mutation
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (ccuo *CandidateCertificateUpdateOne) ClearAttachmentEdges() *CandidateCertificateUpdateOne {
	ccuo.mutation.ClearAttachmentEdges()
	return ccuo
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (ccuo *CandidateCertificateUpdateOne) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateCertificateUpdateOne {
	ccuo.mutation.RemoveAttachmentEdgeIDs(ids...)
	return ccuo
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (ccuo *CandidateCertificateUpdateOne) RemoveAttachmentEdges(a ...*Attachment) *CandidateCertificateUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ccuo.RemoveAttachmentEdgeIDs(ids...)
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (ccuo *CandidateCertificateUpdateOne) ClearCandidateEdge() *CandidateCertificateUpdateOne {
	ccuo.mutation.ClearCandidateEdge()
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CandidateCertificateUpdateOne) Select(field string, fields ...string) *CandidateCertificateUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CandidateCertificate entity.
func (ccuo *CandidateCertificateUpdateOne) Save(ctx context.Context) (*CandidateCertificate, error) {
	var (
		err  error
		node *CandidateCertificate
	)
	if len(ccuo.hooks) == 0 {
		if err = ccuo.check(); err != nil {
			return nil, err
		}
		node, err = ccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateCertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccuo.check(); err != nil {
				return nil, err
			}
			ccuo.mutation = mutation
			node, err = ccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccuo.hooks) - 1; i >= 0; i-- {
			if ccuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateCertificate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateCertificateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CandidateCertificateUpdateOne) SaveX(ctx context.Context) *CandidateCertificate {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CandidateCertificateUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CandidateCertificateUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *CandidateCertificateUpdateOne) check() error {
	if v, ok := ccuo.mutation.Name(); ok {
		if err := candidatecertificate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CandidateCertificate.name": %w`, err)}
		}
	}
	if v, ok := ccuo.mutation.Score(); ok {
		if err := candidatecertificate.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "CandidateCertificate.score": %w`, err)}
		}
	}
	return nil
}

func (ccuo *CandidateCertificateUpdateOne) sqlSave(ctx context.Context) (_node *CandidateCertificate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatecertificate.Table,
			Columns: candidatecertificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatecertificate.FieldID,
			},
		},
	}
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CandidateCertificate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidatecertificate.FieldID)
		for _, f := range fields {
			if !candidatecertificate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidatecertificate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatecertificate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ccuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidatecertificate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ccuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidatecertificate.FieldDeletedAt, field.TypeTime, value)
	}
	if ccuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidatecertificate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ccuo.mutation.Name(); ok {
		_spec.SetField(candidatecertificate.FieldName, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.Score(); ok {
		_spec.SetField(candidatecertificate.FieldScore, field.TypeString, value)
	}
	if ccuo.mutation.ScoreCleared() {
		_spec.ClearField(candidatecertificate.FieldScore, field.TypeString)
	}
	if value, ok := ccuo.mutation.AchievedDate(); ok {
		_spec.SetField(candidatecertificate.FieldAchievedDate, field.TypeTime, value)
	}
	if ccuo.mutation.AchievedDateCleared() {
		_spec.ClearField(candidatecertificate.FieldAchievedDate, field.TypeTime)
	}
	if ccuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatecertificate.AttachmentEdgesTable,
			Columns: []string{candidatecertificate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !ccuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatecertificate.AttachmentEdgesTable,
			Columns: []string{candidatecertificate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatecertificate.AttachmentEdgesTable,
			Columns: []string{candidatecertificate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatecertificate.CandidateEdgeTable,
			Columns: []string{candidatecertificate.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatecertificate.CandidateEdgeTable,
			Columns: []string{candidatecertificate.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CandidateCertificate{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidatecertificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
