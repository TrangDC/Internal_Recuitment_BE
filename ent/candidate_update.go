// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidateaward"
	"trec/ent/candidatecertificate"
	"trec/ent/candidateeducate"
	"trec/ent/candidateexp"
	"trec/ent/candidatejob"
	"trec/ent/entityskill"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateUpdate is the builder for updating Candidate entities.
type CandidateUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateMutation
}

// Where appends a list predicates to the CandidateUpdate builder.
func (cu *CandidateUpdate) Where(ps ...predicate.Candidate) *CandidateUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CandidateUpdate) SetUpdatedAt(t time.Time) *CandidateUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CandidateUpdate) ClearUpdatedAt() *CandidateUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CandidateUpdate) SetDeletedAt(t time.Time) *CandidateUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableDeletedAt(t *time.Time) *CandidateUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CandidateUpdate) ClearDeletedAt() *CandidateUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetName sets the "name" field.
func (cu *CandidateUpdate) SetName(s string) *CandidateUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CandidateUpdate) SetEmail(s string) *CandidateUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetPhone sets the "phone" field.
func (cu *CandidateUpdate) SetPhone(s string) *CandidateUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetDob sets the "dob" field.
func (cu *CandidateUpdate) SetDob(t time.Time) *CandidateUpdate {
	cu.mutation.SetDob(t)
	return cu
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableDob(t *time.Time) *CandidateUpdate {
	if t != nil {
		cu.SetDob(*t)
	}
	return cu
}

// ClearDob clears the value of the "dob" field.
func (cu *CandidateUpdate) ClearDob() *CandidateUpdate {
	cu.mutation.ClearDob()
	return cu
}

// SetIsBlacklist sets the "is_blacklist" field.
func (cu *CandidateUpdate) SetIsBlacklist(b bool) *CandidateUpdate {
	cu.mutation.SetIsBlacklist(b)
	return cu
}

// SetNillableIsBlacklist sets the "is_blacklist" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableIsBlacklist(b *bool) *CandidateUpdate {
	if b != nil {
		cu.SetIsBlacklist(*b)
	}
	return cu
}

// SetLastApplyDate sets the "last_apply_date" field.
func (cu *CandidateUpdate) SetLastApplyDate(t time.Time) *CandidateUpdate {
	cu.mutation.SetLastApplyDate(t)
	return cu
}

// SetNillableLastApplyDate sets the "last_apply_date" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableLastApplyDate(t *time.Time) *CandidateUpdate {
	if t != nil {
		cu.SetLastApplyDate(*t)
	}
	return cu
}

// ClearLastApplyDate clears the value of the "last_apply_date" field.
func (cu *CandidateUpdate) ClearLastApplyDate() *CandidateUpdate {
	cu.mutation.ClearLastApplyDate()
	return cu
}

// SetReferenceType sets the "reference_type" field.
func (cu *CandidateUpdate) SetReferenceType(ct candidate.ReferenceType) *CandidateUpdate {
	cu.mutation.SetReferenceType(ct)
	return cu
}

// SetNillableReferenceType sets the "reference_type" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableReferenceType(ct *candidate.ReferenceType) *CandidateUpdate {
	if ct != nil {
		cu.SetReferenceType(*ct)
	}
	return cu
}

// SetReferenceValue sets the "reference_value" field.
func (cu *CandidateUpdate) SetReferenceValue(s string) *CandidateUpdate {
	cu.mutation.SetReferenceValue(s)
	return cu
}

// SetNillableReferenceValue sets the "reference_value" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableReferenceValue(s *string) *CandidateUpdate {
	if s != nil {
		cu.SetReferenceValue(*s)
	}
	return cu
}

// ClearReferenceValue clears the value of the "reference_value" field.
func (cu *CandidateUpdate) ClearReferenceValue() *CandidateUpdate {
	cu.mutation.ClearReferenceValue()
	return cu
}

// SetReferenceUID sets the "reference_uid" field.
func (cu *CandidateUpdate) SetReferenceUID(u uuid.UUID) *CandidateUpdate {
	cu.mutation.SetReferenceUID(u)
	return cu
}

// SetNillableReferenceUID sets the "reference_uid" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableReferenceUID(u *uuid.UUID) *CandidateUpdate {
	if u != nil {
		cu.SetReferenceUID(*u)
	}
	return cu
}

// ClearReferenceUID clears the value of the "reference_uid" field.
func (cu *CandidateUpdate) ClearReferenceUID() *CandidateUpdate {
	cu.mutation.ClearReferenceUID()
	return cu
}

// SetRecruitTime sets the "recruit_time" field.
func (cu *CandidateUpdate) SetRecruitTime(t time.Time) *CandidateUpdate {
	cu.mutation.SetRecruitTime(t)
	return cu
}

// SetNillableRecruitTime sets the "recruit_time" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableRecruitTime(t *time.Time) *CandidateUpdate {
	if t != nil {
		cu.SetRecruitTime(*t)
	}
	return cu
}

// ClearRecruitTime clears the value of the "recruit_time" field.
func (cu *CandidateUpdate) ClearRecruitTime() *CandidateUpdate {
	cu.mutation.ClearRecruitTime()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CandidateUpdate) SetDescription(s string) *CandidateUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableDescription(s *string) *CandidateUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CandidateUpdate) ClearDescription() *CandidateUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetCountry sets the "country" field.
func (cu *CandidateUpdate) SetCountry(s string) *CandidateUpdate {
	cu.mutation.SetCountry(s)
	return cu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableCountry(s *string) *CandidateUpdate {
	if s != nil {
		cu.SetCountry(*s)
	}
	return cu
}

// ClearCountry clears the value of the "country" field.
func (cu *CandidateUpdate) ClearCountry() *CandidateUpdate {
	cu.mutation.ClearCountry()
	return cu
}

// SetAddress sets the "address" field.
func (cu *CandidateUpdate) SetAddress(s string) *CandidateUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableAddress(s *string) *CandidateUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// ClearAddress clears the value of the "address" field.
func (cu *CandidateUpdate) ClearAddress() *CandidateUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// AddCandidateJobEdgeIDs adds the "candidate_job_edges" edge to the CandidateJob entity by IDs.
func (cu *CandidateUpdate) AddCandidateJobEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.AddCandidateJobEdgeIDs(ids...)
	return cu
}

// AddCandidateJobEdges adds the "candidate_job_edges" edges to the CandidateJob entity.
func (cu *CandidateUpdate) AddCandidateJobEdges(c ...*CandidateJob) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCandidateJobEdgeIDs(ids...)
}

// SetReferenceUserEdgeID sets the "reference_user_edge" edge to the User entity by ID.
func (cu *CandidateUpdate) SetReferenceUserEdgeID(id uuid.UUID) *CandidateUpdate {
	cu.mutation.SetReferenceUserEdgeID(id)
	return cu
}

// SetNillableReferenceUserEdgeID sets the "reference_user_edge" edge to the User entity by ID if the given value is not nil.
func (cu *CandidateUpdate) SetNillableReferenceUserEdgeID(id *uuid.UUID) *CandidateUpdate {
	if id != nil {
		cu = cu.SetReferenceUserEdgeID(*id)
	}
	return cu
}

// SetReferenceUserEdge sets the "reference_user_edge" edge to the User entity.
func (cu *CandidateUpdate) SetReferenceUserEdge(u *User) *CandidateUpdate {
	return cu.SetReferenceUserEdgeID(u.ID)
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (cu *CandidateUpdate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.AddAttachmentEdgeIDs(ids...)
	return cu
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (cu *CandidateUpdate) AddAttachmentEdges(a ...*Attachment) *CandidateUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAttachmentEdgeIDs(ids...)
}

// AddCandidateSkillEdgeIDs adds the "candidate_skill_edges" edge to the EntitySkill entity by IDs.
func (cu *CandidateUpdate) AddCandidateSkillEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.AddCandidateSkillEdgeIDs(ids...)
	return cu
}

// AddCandidateSkillEdges adds the "candidate_skill_edges" edges to the EntitySkill entity.
func (cu *CandidateUpdate) AddCandidateSkillEdges(e ...*EntitySkill) *CandidateUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddCandidateSkillEdgeIDs(ids...)
}

// AddCandidateExpEdgeIDs adds the "candidate_exp_edges" edge to the CandidateExp entity by IDs.
func (cu *CandidateUpdate) AddCandidateExpEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.AddCandidateExpEdgeIDs(ids...)
	return cu
}

// AddCandidateExpEdges adds the "candidate_exp_edges" edges to the CandidateExp entity.
func (cu *CandidateUpdate) AddCandidateExpEdges(c ...*CandidateExp) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCandidateExpEdgeIDs(ids...)
}

// AddCandidateEducateEdgeIDs adds the "candidate_educate_edges" edge to the CandidateEducate entity by IDs.
func (cu *CandidateUpdate) AddCandidateEducateEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.AddCandidateEducateEdgeIDs(ids...)
	return cu
}

// AddCandidateEducateEdges adds the "candidate_educate_edges" edges to the CandidateEducate entity.
func (cu *CandidateUpdate) AddCandidateEducateEdges(c ...*CandidateEducate) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCandidateEducateEdgeIDs(ids...)
}

// AddCandidateAwardEdgeIDs adds the "candidate_award_edges" edge to the CandidateAward entity by IDs.
func (cu *CandidateUpdate) AddCandidateAwardEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.AddCandidateAwardEdgeIDs(ids...)
	return cu
}

// AddCandidateAwardEdges adds the "candidate_award_edges" edges to the CandidateAward entity.
func (cu *CandidateUpdate) AddCandidateAwardEdges(c ...*CandidateAward) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCandidateAwardEdgeIDs(ids...)
}

// AddCandidateCertificateEdgeIDs adds the "candidate_certificate_edges" edge to the CandidateCertificate entity by IDs.
func (cu *CandidateUpdate) AddCandidateCertificateEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.AddCandidateCertificateEdgeIDs(ids...)
	return cu
}

// AddCandidateCertificateEdges adds the "candidate_certificate_edges" edges to the CandidateCertificate entity.
func (cu *CandidateUpdate) AddCandidateCertificateEdges(c ...*CandidateCertificate) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCandidateCertificateEdgeIDs(ids...)
}

// Mutation returns the CandidateMutation object of the builder.
func (cu *CandidateUpdate) Mutation() *CandidateMutation {
	return cu.mutation
}

// ClearCandidateJobEdges clears all "candidate_job_edges" edges to the CandidateJob entity.
func (cu *CandidateUpdate) ClearCandidateJobEdges() *CandidateUpdate {
	cu.mutation.ClearCandidateJobEdges()
	return cu
}

// RemoveCandidateJobEdgeIDs removes the "candidate_job_edges" edge to CandidateJob entities by IDs.
func (cu *CandidateUpdate) RemoveCandidateJobEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.RemoveCandidateJobEdgeIDs(ids...)
	return cu
}

// RemoveCandidateJobEdges removes "candidate_job_edges" edges to CandidateJob entities.
func (cu *CandidateUpdate) RemoveCandidateJobEdges(c ...*CandidateJob) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCandidateJobEdgeIDs(ids...)
}

// ClearReferenceUserEdge clears the "reference_user_edge" edge to the User entity.
func (cu *CandidateUpdate) ClearReferenceUserEdge() *CandidateUpdate {
	cu.mutation.ClearReferenceUserEdge()
	return cu
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (cu *CandidateUpdate) ClearAttachmentEdges() *CandidateUpdate {
	cu.mutation.ClearAttachmentEdges()
	return cu
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (cu *CandidateUpdate) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.RemoveAttachmentEdgeIDs(ids...)
	return cu
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (cu *CandidateUpdate) RemoveAttachmentEdges(a ...*Attachment) *CandidateUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAttachmentEdgeIDs(ids...)
}

// ClearCandidateSkillEdges clears all "candidate_skill_edges" edges to the EntitySkill entity.
func (cu *CandidateUpdate) ClearCandidateSkillEdges() *CandidateUpdate {
	cu.mutation.ClearCandidateSkillEdges()
	return cu
}

// RemoveCandidateSkillEdgeIDs removes the "candidate_skill_edges" edge to EntitySkill entities by IDs.
func (cu *CandidateUpdate) RemoveCandidateSkillEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.RemoveCandidateSkillEdgeIDs(ids...)
	return cu
}

// RemoveCandidateSkillEdges removes "candidate_skill_edges" edges to EntitySkill entities.
func (cu *CandidateUpdate) RemoveCandidateSkillEdges(e ...*EntitySkill) *CandidateUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveCandidateSkillEdgeIDs(ids...)
}

// ClearCandidateExpEdges clears all "candidate_exp_edges" edges to the CandidateExp entity.
func (cu *CandidateUpdate) ClearCandidateExpEdges() *CandidateUpdate {
	cu.mutation.ClearCandidateExpEdges()
	return cu
}

// RemoveCandidateExpEdgeIDs removes the "candidate_exp_edges" edge to CandidateExp entities by IDs.
func (cu *CandidateUpdate) RemoveCandidateExpEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.RemoveCandidateExpEdgeIDs(ids...)
	return cu
}

// RemoveCandidateExpEdges removes "candidate_exp_edges" edges to CandidateExp entities.
func (cu *CandidateUpdate) RemoveCandidateExpEdges(c ...*CandidateExp) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCandidateExpEdgeIDs(ids...)
}

// ClearCandidateEducateEdges clears all "candidate_educate_edges" edges to the CandidateEducate entity.
func (cu *CandidateUpdate) ClearCandidateEducateEdges() *CandidateUpdate {
	cu.mutation.ClearCandidateEducateEdges()
	return cu
}

// RemoveCandidateEducateEdgeIDs removes the "candidate_educate_edges" edge to CandidateEducate entities by IDs.
func (cu *CandidateUpdate) RemoveCandidateEducateEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.RemoveCandidateEducateEdgeIDs(ids...)
	return cu
}

// RemoveCandidateEducateEdges removes "candidate_educate_edges" edges to CandidateEducate entities.
func (cu *CandidateUpdate) RemoveCandidateEducateEdges(c ...*CandidateEducate) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCandidateEducateEdgeIDs(ids...)
}

// ClearCandidateAwardEdges clears all "candidate_award_edges" edges to the CandidateAward entity.
func (cu *CandidateUpdate) ClearCandidateAwardEdges() *CandidateUpdate {
	cu.mutation.ClearCandidateAwardEdges()
	return cu
}

// RemoveCandidateAwardEdgeIDs removes the "candidate_award_edges" edge to CandidateAward entities by IDs.
func (cu *CandidateUpdate) RemoveCandidateAwardEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.RemoveCandidateAwardEdgeIDs(ids...)
	return cu
}

// RemoveCandidateAwardEdges removes "candidate_award_edges" edges to CandidateAward entities.
func (cu *CandidateUpdate) RemoveCandidateAwardEdges(c ...*CandidateAward) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCandidateAwardEdgeIDs(ids...)
}

// ClearCandidateCertificateEdges clears all "candidate_certificate_edges" edges to the CandidateCertificate entity.
func (cu *CandidateUpdate) ClearCandidateCertificateEdges() *CandidateUpdate {
	cu.mutation.ClearCandidateCertificateEdges()
	return cu
}

// RemoveCandidateCertificateEdgeIDs removes the "candidate_certificate_edges" edge to CandidateCertificate entities by IDs.
func (cu *CandidateUpdate) RemoveCandidateCertificateEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.RemoveCandidateCertificateEdgeIDs(ids...)
	return cu
}

// RemoveCandidateCertificateEdges removes "candidate_certificate_edges" edges to CandidateCertificate entities.
func (cu *CandidateUpdate) RemoveCandidateCertificateEdges(c ...*CandidateCertificate) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCandidateCertificateEdgeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CandidateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CandidateUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CandidateUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CandidateUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CandidateUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := candidate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Candidate.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := candidate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Candidate.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Phone(); ok {
		if err := candidate.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Candidate.phone": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ReferenceType(); ok {
		if err := candidate.ReferenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "reference_type", err: fmt.Errorf(`ent: validator failed for field "Candidate.reference_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ReferenceValue(); ok {
		if err := candidate.ReferenceValueValidator(v); err != nil {
			return &ValidationError{Name: "reference_value", err: fmt.Errorf(`ent: validator failed for field "Candidate.reference_value": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Description(); ok {
		if err := candidate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Candidate.description": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Country(); ok {
		if err := candidate.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Candidate.country": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Address(); ok {
		if err := candidate.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Candidate.address": %w`, err)}
		}
	}
	return nil
}

func (cu *CandidateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidate.Table,
			Columns: candidate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidate.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidate.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(candidate.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(candidate.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(candidate.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.SetField(candidate.FieldPhone, field.TypeString, value)
	}
	if value, ok := cu.mutation.Dob(); ok {
		_spec.SetField(candidate.FieldDob, field.TypeTime, value)
	}
	if cu.mutation.DobCleared() {
		_spec.ClearField(candidate.FieldDob, field.TypeTime)
	}
	if value, ok := cu.mutation.IsBlacklist(); ok {
		_spec.SetField(candidate.FieldIsBlacklist, field.TypeBool, value)
	}
	if value, ok := cu.mutation.LastApplyDate(); ok {
		_spec.SetField(candidate.FieldLastApplyDate, field.TypeTime, value)
	}
	if cu.mutation.LastApplyDateCleared() {
		_spec.ClearField(candidate.FieldLastApplyDate, field.TypeTime)
	}
	if value, ok := cu.mutation.ReferenceType(); ok {
		_spec.SetField(candidate.FieldReferenceType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.ReferenceValue(); ok {
		_spec.SetField(candidate.FieldReferenceValue, field.TypeString, value)
	}
	if cu.mutation.ReferenceValueCleared() {
		_spec.ClearField(candidate.FieldReferenceValue, field.TypeString)
	}
	if value, ok := cu.mutation.RecruitTime(); ok {
		_spec.SetField(candidate.FieldRecruitTime, field.TypeTime, value)
	}
	if cu.mutation.RecruitTimeCleared() {
		_spec.ClearField(candidate.FieldRecruitTime, field.TypeTime)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(candidate.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(candidate.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Country(); ok {
		_spec.SetField(candidate.FieldCountry, field.TypeString, value)
	}
	if cu.mutation.CountryCleared() {
		_spec.ClearField(candidate.FieldCountry, field.TypeString)
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.SetField(candidate.FieldAddress, field.TypeString, value)
	}
	if cu.mutation.AddressCleared() {
		_spec.ClearField(candidate.FieldAddress, field.TypeString)
	}
	if cu.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCandidateJobEdgesIDs(); len(nodes) > 0 && !cu.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CandidateJobEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ReferenceUserEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidate.ReferenceUserEdgeTable,
			Columns: []string{candidate.ReferenceUserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ReferenceUserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidate.ReferenceUserEdgeTable,
			Columns: []string{candidate.ReferenceUserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.AttachmentEdgesTable,
			Columns: []string{candidate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !cu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.AttachmentEdgesTable,
			Columns: []string{candidate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.AttachmentEdgesTable,
			Columns: []string{candidate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CandidateSkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateSkillEdgesTable,
			Columns: []string{candidate.CandidateSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCandidateSkillEdgesIDs(); len(nodes) > 0 && !cu.mutation.CandidateSkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateSkillEdgesTable,
			Columns: []string{candidate.CandidateSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CandidateSkillEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateSkillEdgesTable,
			Columns: []string{candidate.CandidateSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CandidateExpEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateExpEdgesTable,
			Columns: []string{candidate.CandidateExpEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateexp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCandidateExpEdgesIDs(); len(nodes) > 0 && !cu.mutation.CandidateExpEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateExpEdgesTable,
			Columns: []string{candidate.CandidateExpEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateexp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CandidateExpEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateExpEdgesTable,
			Columns: []string{candidate.CandidateExpEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateexp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CandidateEducateEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateEducateEdgesTable,
			Columns: []string{candidate.CandidateEducateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateeducate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCandidateEducateEdgesIDs(); len(nodes) > 0 && !cu.mutation.CandidateEducateEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateEducateEdgesTable,
			Columns: []string{candidate.CandidateEducateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateeducate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CandidateEducateEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateEducateEdgesTable,
			Columns: []string{candidate.CandidateEducateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateeducate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CandidateAwardEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateAwardEdgesTable,
			Columns: []string{candidate.CandidateAwardEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateaward.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCandidateAwardEdgesIDs(); len(nodes) > 0 && !cu.mutation.CandidateAwardEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateAwardEdgesTable,
			Columns: []string{candidate.CandidateAwardEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateaward.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CandidateAwardEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateAwardEdgesTable,
			Columns: []string{candidate.CandidateAwardEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateaward.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CandidateCertificateEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateCertificateEdgesTable,
			Columns: []string{candidate.CandidateCertificateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatecertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCandidateCertificateEdgesIDs(); len(nodes) > 0 && !cu.mutation.CandidateCertificateEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateCertificateEdgesTable,
			Columns: []string{candidate.CandidateCertificateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatecertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CandidateCertificateEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateCertificateEdgesTable,
			Columns: []string{candidate.CandidateCertificateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatecertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateUpdateOne is the builder for updating a single Candidate entity.
type CandidateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CandidateUpdateOne) SetUpdatedAt(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CandidateUpdateOne) ClearUpdatedAt() *CandidateUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CandidateUpdateOne) SetDeletedAt(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CandidateUpdateOne) ClearDeletedAt() *CandidateUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CandidateUpdateOne) SetName(s string) *CandidateUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CandidateUpdateOne) SetEmail(s string) *CandidateUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *CandidateUpdateOne) SetPhone(s string) *CandidateUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetDob sets the "dob" field.
func (cuo *CandidateUpdateOne) SetDob(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetDob(t)
	return cuo
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableDob(t *time.Time) *CandidateUpdateOne {
	if t != nil {
		cuo.SetDob(*t)
	}
	return cuo
}

// ClearDob clears the value of the "dob" field.
func (cuo *CandidateUpdateOne) ClearDob() *CandidateUpdateOne {
	cuo.mutation.ClearDob()
	return cuo
}

// SetIsBlacklist sets the "is_blacklist" field.
func (cuo *CandidateUpdateOne) SetIsBlacklist(b bool) *CandidateUpdateOne {
	cuo.mutation.SetIsBlacklist(b)
	return cuo
}

// SetNillableIsBlacklist sets the "is_blacklist" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableIsBlacklist(b *bool) *CandidateUpdateOne {
	if b != nil {
		cuo.SetIsBlacklist(*b)
	}
	return cuo
}

// SetLastApplyDate sets the "last_apply_date" field.
func (cuo *CandidateUpdateOne) SetLastApplyDate(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetLastApplyDate(t)
	return cuo
}

// SetNillableLastApplyDate sets the "last_apply_date" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableLastApplyDate(t *time.Time) *CandidateUpdateOne {
	if t != nil {
		cuo.SetLastApplyDate(*t)
	}
	return cuo
}

// ClearLastApplyDate clears the value of the "last_apply_date" field.
func (cuo *CandidateUpdateOne) ClearLastApplyDate() *CandidateUpdateOne {
	cuo.mutation.ClearLastApplyDate()
	return cuo
}

// SetReferenceType sets the "reference_type" field.
func (cuo *CandidateUpdateOne) SetReferenceType(ct candidate.ReferenceType) *CandidateUpdateOne {
	cuo.mutation.SetReferenceType(ct)
	return cuo
}

// SetNillableReferenceType sets the "reference_type" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableReferenceType(ct *candidate.ReferenceType) *CandidateUpdateOne {
	if ct != nil {
		cuo.SetReferenceType(*ct)
	}
	return cuo
}

// SetReferenceValue sets the "reference_value" field.
func (cuo *CandidateUpdateOne) SetReferenceValue(s string) *CandidateUpdateOne {
	cuo.mutation.SetReferenceValue(s)
	return cuo
}

// SetNillableReferenceValue sets the "reference_value" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableReferenceValue(s *string) *CandidateUpdateOne {
	if s != nil {
		cuo.SetReferenceValue(*s)
	}
	return cuo
}

// ClearReferenceValue clears the value of the "reference_value" field.
func (cuo *CandidateUpdateOne) ClearReferenceValue() *CandidateUpdateOne {
	cuo.mutation.ClearReferenceValue()
	return cuo
}

// SetReferenceUID sets the "reference_uid" field.
func (cuo *CandidateUpdateOne) SetReferenceUID(u uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.SetReferenceUID(u)
	return cuo
}

// SetNillableReferenceUID sets the "reference_uid" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableReferenceUID(u *uuid.UUID) *CandidateUpdateOne {
	if u != nil {
		cuo.SetReferenceUID(*u)
	}
	return cuo
}

// ClearReferenceUID clears the value of the "reference_uid" field.
func (cuo *CandidateUpdateOne) ClearReferenceUID() *CandidateUpdateOne {
	cuo.mutation.ClearReferenceUID()
	return cuo
}

// SetRecruitTime sets the "recruit_time" field.
func (cuo *CandidateUpdateOne) SetRecruitTime(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetRecruitTime(t)
	return cuo
}

// SetNillableRecruitTime sets the "recruit_time" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableRecruitTime(t *time.Time) *CandidateUpdateOne {
	if t != nil {
		cuo.SetRecruitTime(*t)
	}
	return cuo
}

// ClearRecruitTime clears the value of the "recruit_time" field.
func (cuo *CandidateUpdateOne) ClearRecruitTime() *CandidateUpdateOne {
	cuo.mutation.ClearRecruitTime()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CandidateUpdateOne) SetDescription(s string) *CandidateUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableDescription(s *string) *CandidateUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CandidateUpdateOne) ClearDescription() *CandidateUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetCountry sets the "country" field.
func (cuo *CandidateUpdateOne) SetCountry(s string) *CandidateUpdateOne {
	cuo.mutation.SetCountry(s)
	return cuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableCountry(s *string) *CandidateUpdateOne {
	if s != nil {
		cuo.SetCountry(*s)
	}
	return cuo
}

// ClearCountry clears the value of the "country" field.
func (cuo *CandidateUpdateOne) ClearCountry() *CandidateUpdateOne {
	cuo.mutation.ClearCountry()
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *CandidateUpdateOne) SetAddress(s string) *CandidateUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableAddress(s *string) *CandidateUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// ClearAddress clears the value of the "address" field.
func (cuo *CandidateUpdateOne) ClearAddress() *CandidateUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// AddCandidateJobEdgeIDs adds the "candidate_job_edges" edge to the CandidateJob entity by IDs.
func (cuo *CandidateUpdateOne) AddCandidateJobEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.AddCandidateJobEdgeIDs(ids...)
	return cuo
}

// AddCandidateJobEdges adds the "candidate_job_edges" edges to the CandidateJob entity.
func (cuo *CandidateUpdateOne) AddCandidateJobEdges(c ...*CandidateJob) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCandidateJobEdgeIDs(ids...)
}

// SetReferenceUserEdgeID sets the "reference_user_edge" edge to the User entity by ID.
func (cuo *CandidateUpdateOne) SetReferenceUserEdgeID(id uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.SetReferenceUserEdgeID(id)
	return cuo
}

// SetNillableReferenceUserEdgeID sets the "reference_user_edge" edge to the User entity by ID if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableReferenceUserEdgeID(id *uuid.UUID) *CandidateUpdateOne {
	if id != nil {
		cuo = cuo.SetReferenceUserEdgeID(*id)
	}
	return cuo
}

// SetReferenceUserEdge sets the "reference_user_edge" edge to the User entity.
func (cuo *CandidateUpdateOne) SetReferenceUserEdge(u *User) *CandidateUpdateOne {
	return cuo.SetReferenceUserEdgeID(u.ID)
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (cuo *CandidateUpdateOne) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.AddAttachmentEdgeIDs(ids...)
	return cuo
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (cuo *CandidateUpdateOne) AddAttachmentEdges(a ...*Attachment) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAttachmentEdgeIDs(ids...)
}

// AddCandidateSkillEdgeIDs adds the "candidate_skill_edges" edge to the EntitySkill entity by IDs.
func (cuo *CandidateUpdateOne) AddCandidateSkillEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.AddCandidateSkillEdgeIDs(ids...)
	return cuo
}

// AddCandidateSkillEdges adds the "candidate_skill_edges" edges to the EntitySkill entity.
func (cuo *CandidateUpdateOne) AddCandidateSkillEdges(e ...*EntitySkill) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddCandidateSkillEdgeIDs(ids...)
}

// AddCandidateExpEdgeIDs adds the "candidate_exp_edges" edge to the CandidateExp entity by IDs.
func (cuo *CandidateUpdateOne) AddCandidateExpEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.AddCandidateExpEdgeIDs(ids...)
	return cuo
}

// AddCandidateExpEdges adds the "candidate_exp_edges" edges to the CandidateExp entity.
func (cuo *CandidateUpdateOne) AddCandidateExpEdges(c ...*CandidateExp) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCandidateExpEdgeIDs(ids...)
}

// AddCandidateEducateEdgeIDs adds the "candidate_educate_edges" edge to the CandidateEducate entity by IDs.
func (cuo *CandidateUpdateOne) AddCandidateEducateEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.AddCandidateEducateEdgeIDs(ids...)
	return cuo
}

// AddCandidateEducateEdges adds the "candidate_educate_edges" edges to the CandidateEducate entity.
func (cuo *CandidateUpdateOne) AddCandidateEducateEdges(c ...*CandidateEducate) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCandidateEducateEdgeIDs(ids...)
}

// AddCandidateAwardEdgeIDs adds the "candidate_award_edges" edge to the CandidateAward entity by IDs.
func (cuo *CandidateUpdateOne) AddCandidateAwardEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.AddCandidateAwardEdgeIDs(ids...)
	return cuo
}

// AddCandidateAwardEdges adds the "candidate_award_edges" edges to the CandidateAward entity.
func (cuo *CandidateUpdateOne) AddCandidateAwardEdges(c ...*CandidateAward) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCandidateAwardEdgeIDs(ids...)
}

// AddCandidateCertificateEdgeIDs adds the "candidate_certificate_edges" edge to the CandidateCertificate entity by IDs.
func (cuo *CandidateUpdateOne) AddCandidateCertificateEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.AddCandidateCertificateEdgeIDs(ids...)
	return cuo
}

// AddCandidateCertificateEdges adds the "candidate_certificate_edges" edges to the CandidateCertificate entity.
func (cuo *CandidateUpdateOne) AddCandidateCertificateEdges(c ...*CandidateCertificate) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCandidateCertificateEdgeIDs(ids...)
}

// Mutation returns the CandidateMutation object of the builder.
func (cuo *CandidateUpdateOne) Mutation() *CandidateMutation {
	return cuo.mutation
}

// ClearCandidateJobEdges clears all "candidate_job_edges" edges to the CandidateJob entity.
func (cuo *CandidateUpdateOne) ClearCandidateJobEdges() *CandidateUpdateOne {
	cuo.mutation.ClearCandidateJobEdges()
	return cuo
}

// RemoveCandidateJobEdgeIDs removes the "candidate_job_edges" edge to CandidateJob entities by IDs.
func (cuo *CandidateUpdateOne) RemoveCandidateJobEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.RemoveCandidateJobEdgeIDs(ids...)
	return cuo
}

// RemoveCandidateJobEdges removes "candidate_job_edges" edges to CandidateJob entities.
func (cuo *CandidateUpdateOne) RemoveCandidateJobEdges(c ...*CandidateJob) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCandidateJobEdgeIDs(ids...)
}

// ClearReferenceUserEdge clears the "reference_user_edge" edge to the User entity.
func (cuo *CandidateUpdateOne) ClearReferenceUserEdge() *CandidateUpdateOne {
	cuo.mutation.ClearReferenceUserEdge()
	return cuo
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (cuo *CandidateUpdateOne) ClearAttachmentEdges() *CandidateUpdateOne {
	cuo.mutation.ClearAttachmentEdges()
	return cuo
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (cuo *CandidateUpdateOne) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.RemoveAttachmentEdgeIDs(ids...)
	return cuo
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (cuo *CandidateUpdateOne) RemoveAttachmentEdges(a ...*Attachment) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAttachmentEdgeIDs(ids...)
}

// ClearCandidateSkillEdges clears all "candidate_skill_edges" edges to the EntitySkill entity.
func (cuo *CandidateUpdateOne) ClearCandidateSkillEdges() *CandidateUpdateOne {
	cuo.mutation.ClearCandidateSkillEdges()
	return cuo
}

// RemoveCandidateSkillEdgeIDs removes the "candidate_skill_edges" edge to EntitySkill entities by IDs.
func (cuo *CandidateUpdateOne) RemoveCandidateSkillEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.RemoveCandidateSkillEdgeIDs(ids...)
	return cuo
}

// RemoveCandidateSkillEdges removes "candidate_skill_edges" edges to EntitySkill entities.
func (cuo *CandidateUpdateOne) RemoveCandidateSkillEdges(e ...*EntitySkill) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveCandidateSkillEdgeIDs(ids...)
}

// ClearCandidateExpEdges clears all "candidate_exp_edges" edges to the CandidateExp entity.
func (cuo *CandidateUpdateOne) ClearCandidateExpEdges() *CandidateUpdateOne {
	cuo.mutation.ClearCandidateExpEdges()
	return cuo
}

// RemoveCandidateExpEdgeIDs removes the "candidate_exp_edges" edge to CandidateExp entities by IDs.
func (cuo *CandidateUpdateOne) RemoveCandidateExpEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.RemoveCandidateExpEdgeIDs(ids...)
	return cuo
}

// RemoveCandidateExpEdges removes "candidate_exp_edges" edges to CandidateExp entities.
func (cuo *CandidateUpdateOne) RemoveCandidateExpEdges(c ...*CandidateExp) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCandidateExpEdgeIDs(ids...)
}

// ClearCandidateEducateEdges clears all "candidate_educate_edges" edges to the CandidateEducate entity.
func (cuo *CandidateUpdateOne) ClearCandidateEducateEdges() *CandidateUpdateOne {
	cuo.mutation.ClearCandidateEducateEdges()
	return cuo
}

// RemoveCandidateEducateEdgeIDs removes the "candidate_educate_edges" edge to CandidateEducate entities by IDs.
func (cuo *CandidateUpdateOne) RemoveCandidateEducateEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.RemoveCandidateEducateEdgeIDs(ids...)
	return cuo
}

// RemoveCandidateEducateEdges removes "candidate_educate_edges" edges to CandidateEducate entities.
func (cuo *CandidateUpdateOne) RemoveCandidateEducateEdges(c ...*CandidateEducate) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCandidateEducateEdgeIDs(ids...)
}

// ClearCandidateAwardEdges clears all "candidate_award_edges" edges to the CandidateAward entity.
func (cuo *CandidateUpdateOne) ClearCandidateAwardEdges() *CandidateUpdateOne {
	cuo.mutation.ClearCandidateAwardEdges()
	return cuo
}

// RemoveCandidateAwardEdgeIDs removes the "candidate_award_edges" edge to CandidateAward entities by IDs.
func (cuo *CandidateUpdateOne) RemoveCandidateAwardEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.RemoveCandidateAwardEdgeIDs(ids...)
	return cuo
}

// RemoveCandidateAwardEdges removes "candidate_award_edges" edges to CandidateAward entities.
func (cuo *CandidateUpdateOne) RemoveCandidateAwardEdges(c ...*CandidateAward) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCandidateAwardEdgeIDs(ids...)
}

// ClearCandidateCertificateEdges clears all "candidate_certificate_edges" edges to the CandidateCertificate entity.
func (cuo *CandidateUpdateOne) ClearCandidateCertificateEdges() *CandidateUpdateOne {
	cuo.mutation.ClearCandidateCertificateEdges()
	return cuo
}

// RemoveCandidateCertificateEdgeIDs removes the "candidate_certificate_edges" edge to CandidateCertificate entities by IDs.
func (cuo *CandidateUpdateOne) RemoveCandidateCertificateEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.RemoveCandidateCertificateEdgeIDs(ids...)
	return cuo
}

// RemoveCandidateCertificateEdges removes "candidate_certificate_edges" edges to CandidateCertificate entities.
func (cuo *CandidateUpdateOne) RemoveCandidateCertificateEdges(c ...*CandidateCertificate) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCandidateCertificateEdgeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CandidateUpdateOne) Select(field string, fields ...string) *CandidateUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Candidate entity.
func (cuo *CandidateUpdateOne) Save(ctx context.Context) (*Candidate, error) {
	var (
		err  error
		node *Candidate
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Candidate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CandidateUpdateOne) SaveX(ctx context.Context) *Candidate {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CandidateUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CandidateUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CandidateUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := candidate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Candidate.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := candidate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Candidate.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Phone(); ok {
		if err := candidate.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Candidate.phone": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ReferenceType(); ok {
		if err := candidate.ReferenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "reference_type", err: fmt.Errorf(`ent: validator failed for field "Candidate.reference_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ReferenceValue(); ok {
		if err := candidate.ReferenceValueValidator(v); err != nil {
			return &ValidationError{Name: "reference_value", err: fmt.Errorf(`ent: validator failed for field "Candidate.reference_value": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Description(); ok {
		if err := candidate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Candidate.description": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Country(); ok {
		if err := candidate.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Candidate.country": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Address(); ok {
		if err := candidate.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Candidate.address": %w`, err)}
		}
	}
	return nil
}

func (cuo *CandidateUpdateOne) sqlSave(ctx context.Context) (_node *Candidate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidate.Table,
			Columns: candidate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidate.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Candidate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidate.FieldID)
		for _, f := range fields {
			if !candidate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidate.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidate.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(candidate.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(candidate.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.SetField(candidate.FieldPhone, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Dob(); ok {
		_spec.SetField(candidate.FieldDob, field.TypeTime, value)
	}
	if cuo.mutation.DobCleared() {
		_spec.ClearField(candidate.FieldDob, field.TypeTime)
	}
	if value, ok := cuo.mutation.IsBlacklist(); ok {
		_spec.SetField(candidate.FieldIsBlacklist, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.LastApplyDate(); ok {
		_spec.SetField(candidate.FieldLastApplyDate, field.TypeTime, value)
	}
	if cuo.mutation.LastApplyDateCleared() {
		_spec.ClearField(candidate.FieldLastApplyDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.ReferenceType(); ok {
		_spec.SetField(candidate.FieldReferenceType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.ReferenceValue(); ok {
		_spec.SetField(candidate.FieldReferenceValue, field.TypeString, value)
	}
	if cuo.mutation.ReferenceValueCleared() {
		_spec.ClearField(candidate.FieldReferenceValue, field.TypeString)
	}
	if value, ok := cuo.mutation.RecruitTime(); ok {
		_spec.SetField(candidate.FieldRecruitTime, field.TypeTime, value)
	}
	if cuo.mutation.RecruitTimeCleared() {
		_spec.ClearField(candidate.FieldRecruitTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(candidate.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(candidate.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Country(); ok {
		_spec.SetField(candidate.FieldCountry, field.TypeString, value)
	}
	if cuo.mutation.CountryCleared() {
		_spec.ClearField(candidate.FieldCountry, field.TypeString)
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.SetField(candidate.FieldAddress, field.TypeString, value)
	}
	if cuo.mutation.AddressCleared() {
		_spec.ClearField(candidate.FieldAddress, field.TypeString)
	}
	if cuo.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCandidateJobEdgesIDs(); len(nodes) > 0 && !cuo.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CandidateJobEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ReferenceUserEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidate.ReferenceUserEdgeTable,
			Columns: []string{candidate.ReferenceUserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ReferenceUserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidate.ReferenceUserEdgeTable,
			Columns: []string{candidate.ReferenceUserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.AttachmentEdgesTable,
			Columns: []string{candidate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !cuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.AttachmentEdgesTable,
			Columns: []string{candidate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.AttachmentEdgesTable,
			Columns: []string{candidate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CandidateSkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateSkillEdgesTable,
			Columns: []string{candidate.CandidateSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCandidateSkillEdgesIDs(); len(nodes) > 0 && !cuo.mutation.CandidateSkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateSkillEdgesTable,
			Columns: []string{candidate.CandidateSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CandidateSkillEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateSkillEdgesTable,
			Columns: []string{candidate.CandidateSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CandidateExpEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateExpEdgesTable,
			Columns: []string{candidate.CandidateExpEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateexp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCandidateExpEdgesIDs(); len(nodes) > 0 && !cuo.mutation.CandidateExpEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateExpEdgesTable,
			Columns: []string{candidate.CandidateExpEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateexp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CandidateExpEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateExpEdgesTable,
			Columns: []string{candidate.CandidateExpEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateexp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CandidateEducateEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateEducateEdgesTable,
			Columns: []string{candidate.CandidateEducateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateeducate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCandidateEducateEdgesIDs(); len(nodes) > 0 && !cuo.mutation.CandidateEducateEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateEducateEdgesTable,
			Columns: []string{candidate.CandidateEducateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateeducate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CandidateEducateEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateEducateEdgesTable,
			Columns: []string{candidate.CandidateEducateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateeducate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CandidateAwardEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateAwardEdgesTable,
			Columns: []string{candidate.CandidateAwardEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateaward.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCandidateAwardEdgesIDs(); len(nodes) > 0 && !cuo.mutation.CandidateAwardEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateAwardEdgesTable,
			Columns: []string{candidate.CandidateAwardEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateaward.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CandidateAwardEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateAwardEdgesTable,
			Columns: []string{candidate.CandidateAwardEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateaward.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CandidateCertificateEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateCertificateEdgesTable,
			Columns: []string{candidate.CandidateCertificateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatecertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCandidateCertificateEdgesIDs(); len(nodes) > 0 && !cuo.mutation.CandidateCertificateEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateCertificateEdgesTable,
			Columns: []string{candidate.CandidateCertificateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatecertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CandidateCertificateEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateCertificateEdgesTable,
			Columns: []string{candidate.CandidateCertificateEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatecertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Candidate{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
