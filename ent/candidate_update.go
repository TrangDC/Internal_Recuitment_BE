// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/candidate"
	"trec/ent/candidatejob"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateUpdate is the builder for updating Candidate entities.
type CandidateUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateMutation
}

// Where appends a list predicates to the CandidateUpdate builder.
func (cu *CandidateUpdate) Where(ps ...predicate.Candidate) *CandidateUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CandidateUpdate) SetUpdatedAt(t time.Time) *CandidateUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CandidateUpdate) ClearUpdatedAt() *CandidateUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CandidateUpdate) SetDeletedAt(t time.Time) *CandidateUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableDeletedAt(t *time.Time) *CandidateUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CandidateUpdate) ClearDeletedAt() *CandidateUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetName sets the "name" field.
func (cu *CandidateUpdate) SetName(s string) *CandidateUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CandidateUpdate) SetEmail(s string) *CandidateUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetPhone sets the "phone" field.
func (cu *CandidateUpdate) SetPhone(s string) *CandidateUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetDob sets the "dob" field.
func (cu *CandidateUpdate) SetDob(t time.Time) *CandidateUpdate {
	cu.mutation.SetDob(t)
	return cu
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableDob(t *time.Time) *CandidateUpdate {
	if t != nil {
		cu.SetDob(*t)
	}
	return cu
}

// ClearDob clears the value of the "dob" field.
func (cu *CandidateUpdate) ClearDob() *CandidateUpdate {
	cu.mutation.ClearDob()
	return cu
}

// SetIsBlacklist sets the "is_blacklist" field.
func (cu *CandidateUpdate) SetIsBlacklist(b bool) *CandidateUpdate {
	cu.mutation.SetIsBlacklist(b)
	return cu
}

// SetNillableIsBlacklist sets the "is_blacklist" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableIsBlacklist(b *bool) *CandidateUpdate {
	if b != nil {
		cu.SetIsBlacklist(*b)
	}
	return cu
}

// SetLastApplyDate sets the "last_apply_date" field.
func (cu *CandidateUpdate) SetLastApplyDate(t time.Time) *CandidateUpdate {
	cu.mutation.SetLastApplyDate(t)
	return cu
}

// SetNillableLastApplyDate sets the "last_apply_date" field if the given value is not nil.
func (cu *CandidateUpdate) SetNillableLastApplyDate(t *time.Time) *CandidateUpdate {
	if t != nil {
		cu.SetLastApplyDate(*t)
	}
	return cu
}

// ClearLastApplyDate clears the value of the "last_apply_date" field.
func (cu *CandidateUpdate) ClearLastApplyDate() *CandidateUpdate {
	cu.mutation.ClearLastApplyDate()
	return cu
}

// AddCandidateJobEdgeIDs adds the "candidate_job_edges" edge to the CandidateJob entity by IDs.
func (cu *CandidateUpdate) AddCandidateJobEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.AddCandidateJobEdgeIDs(ids...)
	return cu
}

// AddCandidateJobEdges adds the "candidate_job_edges" edges to the CandidateJob entity.
func (cu *CandidateUpdate) AddCandidateJobEdges(c ...*CandidateJob) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCandidateJobEdgeIDs(ids...)
}

// Mutation returns the CandidateMutation object of the builder.
func (cu *CandidateUpdate) Mutation() *CandidateMutation {
	return cu.mutation
}

// ClearCandidateJobEdges clears all "candidate_job_edges" edges to the CandidateJob entity.
func (cu *CandidateUpdate) ClearCandidateJobEdges() *CandidateUpdate {
	cu.mutation.ClearCandidateJobEdges()
	return cu
}

// RemoveCandidateJobEdgeIDs removes the "candidate_job_edges" edge to CandidateJob entities by IDs.
func (cu *CandidateUpdate) RemoveCandidateJobEdgeIDs(ids ...uuid.UUID) *CandidateUpdate {
	cu.mutation.RemoveCandidateJobEdgeIDs(ids...)
	return cu
}

// RemoveCandidateJobEdges removes "candidate_job_edges" edges to CandidateJob entities.
func (cu *CandidateUpdate) RemoveCandidateJobEdges(c ...*CandidateJob) *CandidateUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCandidateJobEdgeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CandidateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CandidateUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CandidateUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CandidateUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CandidateUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := candidate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Candidate.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := candidate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Candidate.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Phone(); ok {
		if err := candidate.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Candidate.phone": %w`, err)}
		}
	}
	return nil
}

func (cu *CandidateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidate.Table,
			Columns: candidate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidate.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidate.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(candidate.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(candidate.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(candidate.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.SetField(candidate.FieldPhone, field.TypeString, value)
	}
	if value, ok := cu.mutation.Dob(); ok {
		_spec.SetField(candidate.FieldDob, field.TypeTime, value)
	}
	if cu.mutation.DobCleared() {
		_spec.ClearField(candidate.FieldDob, field.TypeTime)
	}
	if value, ok := cu.mutation.IsBlacklist(); ok {
		_spec.SetField(candidate.FieldIsBlacklist, field.TypeBool, value)
	}
	if value, ok := cu.mutation.LastApplyDate(); ok {
		_spec.SetField(candidate.FieldLastApplyDate, field.TypeTime, value)
	}
	if cu.mutation.LastApplyDateCleared() {
		_spec.ClearField(candidate.FieldLastApplyDate, field.TypeTime)
	}
	if cu.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCandidateJobEdgesIDs(); len(nodes) > 0 && !cu.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CandidateJobEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateUpdateOne is the builder for updating a single Candidate entity.
type CandidateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CandidateUpdateOne) SetUpdatedAt(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CandidateUpdateOne) ClearUpdatedAt() *CandidateUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CandidateUpdateOne) SetDeletedAt(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CandidateUpdateOne) ClearDeletedAt() *CandidateUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CandidateUpdateOne) SetName(s string) *CandidateUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CandidateUpdateOne) SetEmail(s string) *CandidateUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *CandidateUpdateOne) SetPhone(s string) *CandidateUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetDob sets the "dob" field.
func (cuo *CandidateUpdateOne) SetDob(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetDob(t)
	return cuo
}

// SetNillableDob sets the "dob" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableDob(t *time.Time) *CandidateUpdateOne {
	if t != nil {
		cuo.SetDob(*t)
	}
	return cuo
}

// ClearDob clears the value of the "dob" field.
func (cuo *CandidateUpdateOne) ClearDob() *CandidateUpdateOne {
	cuo.mutation.ClearDob()
	return cuo
}

// SetIsBlacklist sets the "is_blacklist" field.
func (cuo *CandidateUpdateOne) SetIsBlacklist(b bool) *CandidateUpdateOne {
	cuo.mutation.SetIsBlacklist(b)
	return cuo
}

// SetNillableIsBlacklist sets the "is_blacklist" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableIsBlacklist(b *bool) *CandidateUpdateOne {
	if b != nil {
		cuo.SetIsBlacklist(*b)
	}
	return cuo
}

// SetLastApplyDate sets the "last_apply_date" field.
func (cuo *CandidateUpdateOne) SetLastApplyDate(t time.Time) *CandidateUpdateOne {
	cuo.mutation.SetLastApplyDate(t)
	return cuo
}

// SetNillableLastApplyDate sets the "last_apply_date" field if the given value is not nil.
func (cuo *CandidateUpdateOne) SetNillableLastApplyDate(t *time.Time) *CandidateUpdateOne {
	if t != nil {
		cuo.SetLastApplyDate(*t)
	}
	return cuo
}

// ClearLastApplyDate clears the value of the "last_apply_date" field.
func (cuo *CandidateUpdateOne) ClearLastApplyDate() *CandidateUpdateOne {
	cuo.mutation.ClearLastApplyDate()
	return cuo
}

// AddCandidateJobEdgeIDs adds the "candidate_job_edges" edge to the CandidateJob entity by IDs.
func (cuo *CandidateUpdateOne) AddCandidateJobEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.AddCandidateJobEdgeIDs(ids...)
	return cuo
}

// AddCandidateJobEdges adds the "candidate_job_edges" edges to the CandidateJob entity.
func (cuo *CandidateUpdateOne) AddCandidateJobEdges(c ...*CandidateJob) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCandidateJobEdgeIDs(ids...)
}

// Mutation returns the CandidateMutation object of the builder.
func (cuo *CandidateUpdateOne) Mutation() *CandidateMutation {
	return cuo.mutation
}

// ClearCandidateJobEdges clears all "candidate_job_edges" edges to the CandidateJob entity.
func (cuo *CandidateUpdateOne) ClearCandidateJobEdges() *CandidateUpdateOne {
	cuo.mutation.ClearCandidateJobEdges()
	return cuo
}

// RemoveCandidateJobEdgeIDs removes the "candidate_job_edges" edge to CandidateJob entities by IDs.
func (cuo *CandidateUpdateOne) RemoveCandidateJobEdgeIDs(ids ...uuid.UUID) *CandidateUpdateOne {
	cuo.mutation.RemoveCandidateJobEdgeIDs(ids...)
	return cuo
}

// RemoveCandidateJobEdges removes "candidate_job_edges" edges to CandidateJob entities.
func (cuo *CandidateUpdateOne) RemoveCandidateJobEdges(c ...*CandidateJob) *CandidateUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCandidateJobEdgeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CandidateUpdateOne) Select(field string, fields ...string) *CandidateUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Candidate entity.
func (cuo *CandidateUpdateOne) Save(ctx context.Context) (*Candidate, error) {
	var (
		err  error
		node *Candidate
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Candidate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CandidateUpdateOne) SaveX(ctx context.Context) *Candidate {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CandidateUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CandidateUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CandidateUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := candidate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Candidate.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := candidate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Candidate.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Phone(); ok {
		if err := candidate.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Candidate.phone": %w`, err)}
		}
	}
	return nil
}

func (cuo *CandidateUpdateOne) sqlSave(ctx context.Context) (_node *Candidate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidate.Table,
			Columns: candidate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidate.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Candidate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidate.FieldID)
		for _, f := range fields {
			if !candidate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidate.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidate.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(candidate.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(candidate.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.SetField(candidate.FieldPhone, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Dob(); ok {
		_spec.SetField(candidate.FieldDob, field.TypeTime, value)
	}
	if cuo.mutation.DobCleared() {
		_spec.ClearField(candidate.FieldDob, field.TypeTime)
	}
	if value, ok := cuo.mutation.IsBlacklist(); ok {
		_spec.SetField(candidate.FieldIsBlacklist, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.LastApplyDate(); ok {
		_spec.SetField(candidate.FieldLastApplyDate, field.TypeTime, value)
	}
	if cuo.mutation.LastApplyDateCleared() {
		_spec.ClearField(candidate.FieldLastApplyDate, field.TypeTime)
	}
	if cuo.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCandidateJobEdgesIDs(); len(nodes) > 0 && !cuo.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CandidateJobEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Candidate{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
