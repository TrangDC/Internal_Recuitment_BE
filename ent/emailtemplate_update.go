// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/emailevent"
	"trec/ent/emailroleattribute"
	"trec/ent/emailtemplate"
	"trec/ent/predicate"
	"trec/ent/role"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EmailTemplateUpdate is the builder for updating EmailTemplate entities.
type EmailTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// Where appends a list predicates to the EmailTemplateUpdate builder.
func (etu *EmailTemplateUpdate) Where(ps ...predicate.EmailTemplate) *EmailTemplateUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// SetUpdatedAt sets the "updated_at" field.
func (etu *EmailTemplateUpdate) SetUpdatedAt(t time.Time) *EmailTemplateUpdate {
	etu.mutation.SetUpdatedAt(t)
	return etu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableUpdatedAt(t *time.Time) *EmailTemplateUpdate {
	if t != nil {
		etu.SetUpdatedAt(*t)
	}
	return etu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (etu *EmailTemplateUpdate) ClearUpdatedAt() *EmailTemplateUpdate {
	etu.mutation.ClearUpdatedAt()
	return etu
}

// SetDeletedAt sets the "deleted_at" field.
func (etu *EmailTemplateUpdate) SetDeletedAt(t time.Time) *EmailTemplateUpdate {
	etu.mutation.SetDeletedAt(t)
	return etu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableDeletedAt(t *time.Time) *EmailTemplateUpdate {
	if t != nil {
		etu.SetDeletedAt(*t)
	}
	return etu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (etu *EmailTemplateUpdate) ClearDeletedAt() *EmailTemplateUpdate {
	etu.mutation.ClearDeletedAt()
	return etu
}

// SetEvent sets the "event" field.
func (etu *EmailTemplateUpdate) SetEvent(e emailtemplate.Event) *EmailTemplateUpdate {
	etu.mutation.SetEvent(e)
	return etu
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableEvent(e *emailtemplate.Event) *EmailTemplateUpdate {
	if e != nil {
		etu.SetEvent(*e)
	}
	return etu
}

// ClearEvent clears the value of the "event" field.
func (etu *EmailTemplateUpdate) ClearEvent() *EmailTemplateUpdate {
	etu.mutation.ClearEvent()
	return etu
}

// SetSendTo sets the "send_to" field.
func (etu *EmailTemplateUpdate) SetSendTo(s []string) *EmailTemplateUpdate {
	etu.mutation.SetSendTo(s)
	return etu
}

// AppendSendTo appends s to the "send_to" field.
func (etu *EmailTemplateUpdate) AppendSendTo(s []string) *EmailTemplateUpdate {
	etu.mutation.AppendSendTo(s)
	return etu
}

// SetCc sets the "cc" field.
func (etu *EmailTemplateUpdate) SetCc(s []string) *EmailTemplateUpdate {
	etu.mutation.SetCc(s)
	return etu
}

// AppendCc appends s to the "cc" field.
func (etu *EmailTemplateUpdate) AppendCc(s []string) *EmailTemplateUpdate {
	etu.mutation.AppendCc(s)
	return etu
}

// SetBcc sets the "bcc" field.
func (etu *EmailTemplateUpdate) SetBcc(s []string) *EmailTemplateUpdate {
	etu.mutation.SetBcc(s)
	return etu
}

// AppendBcc appends s to the "bcc" field.
func (etu *EmailTemplateUpdate) AppendBcc(s []string) *EmailTemplateUpdate {
	etu.mutation.AppendBcc(s)
	return etu
}

// SetSubject sets the "subject" field.
func (etu *EmailTemplateUpdate) SetSubject(s string) *EmailTemplateUpdate {
	etu.mutation.SetSubject(s)
	return etu
}

// SetContent sets the "content" field.
func (etu *EmailTemplateUpdate) SetContent(s string) *EmailTemplateUpdate {
	etu.mutation.SetContent(s)
	return etu
}

// SetSignature sets the "signature" field.
func (etu *EmailTemplateUpdate) SetSignature(s string) *EmailTemplateUpdate {
	etu.mutation.SetSignature(s)
	return etu
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableSignature(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetSignature(*s)
	}
	return etu
}

// ClearSignature clears the value of the "signature" field.
func (etu *EmailTemplateUpdate) ClearSignature() *EmailTemplateUpdate {
	etu.mutation.ClearSignature()
	return etu
}

// SetStatus sets the "status" field.
func (etu *EmailTemplateUpdate) SetStatus(e emailtemplate.Status) *EmailTemplateUpdate {
	etu.mutation.SetStatus(e)
	return etu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableStatus(e *emailtemplate.Status) *EmailTemplateUpdate {
	if e != nil {
		etu.SetStatus(*e)
	}
	return etu
}

// SetEventID sets the "event_id" field.
func (etu *EmailTemplateUpdate) SetEventID(u uuid.UUID) *EmailTemplateUpdate {
	etu.mutation.SetEventID(u)
	return etu
}

// AddRoleEdgeIDs adds the "role_edges" edge to the Role entity by IDs.
func (etu *EmailTemplateUpdate) AddRoleEdgeIDs(ids ...uuid.UUID) *EmailTemplateUpdate {
	etu.mutation.AddRoleEdgeIDs(ids...)
	return etu
}

// AddRoleEdges adds the "role_edges" edges to the Role entity.
func (etu *EmailTemplateUpdate) AddRoleEdges(r ...*Role) *EmailTemplateUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.AddRoleEdgeIDs(ids...)
}

// SetEventEdgeID sets the "event_edge" edge to the EmailEvent entity by ID.
func (etu *EmailTemplateUpdate) SetEventEdgeID(id uuid.UUID) *EmailTemplateUpdate {
	etu.mutation.SetEventEdgeID(id)
	return etu
}

// SetEventEdge sets the "event_edge" edge to the EmailEvent entity.
func (etu *EmailTemplateUpdate) SetEventEdge(e *EmailEvent) *EmailTemplateUpdate {
	return etu.SetEventEdgeID(e.ID)
}

// AddRoleEmailTemplateIDs adds the "role_email_templates" edge to the EmailRoleAttribute entity by IDs.
func (etu *EmailTemplateUpdate) AddRoleEmailTemplateIDs(ids ...uuid.UUID) *EmailTemplateUpdate {
	etu.mutation.AddRoleEmailTemplateIDs(ids...)
	return etu
}

// AddRoleEmailTemplates adds the "role_email_templates" edges to the EmailRoleAttribute entity.
func (etu *EmailTemplateUpdate) AddRoleEmailTemplates(e ...*EmailRoleAttribute) *EmailTemplateUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.AddRoleEmailTemplateIDs(ids...)
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etu *EmailTemplateUpdate) Mutation() *EmailTemplateMutation {
	return etu.mutation
}

// ClearRoleEdges clears all "role_edges" edges to the Role entity.
func (etu *EmailTemplateUpdate) ClearRoleEdges() *EmailTemplateUpdate {
	etu.mutation.ClearRoleEdges()
	return etu
}

// RemoveRoleEdgeIDs removes the "role_edges" edge to Role entities by IDs.
func (etu *EmailTemplateUpdate) RemoveRoleEdgeIDs(ids ...uuid.UUID) *EmailTemplateUpdate {
	etu.mutation.RemoveRoleEdgeIDs(ids...)
	return etu
}

// RemoveRoleEdges removes "role_edges" edges to Role entities.
func (etu *EmailTemplateUpdate) RemoveRoleEdges(r ...*Role) *EmailTemplateUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etu.RemoveRoleEdgeIDs(ids...)
}

// ClearEventEdge clears the "event_edge" edge to the EmailEvent entity.
func (etu *EmailTemplateUpdate) ClearEventEdge() *EmailTemplateUpdate {
	etu.mutation.ClearEventEdge()
	return etu
}

// ClearRoleEmailTemplates clears all "role_email_templates" edges to the EmailRoleAttribute entity.
func (etu *EmailTemplateUpdate) ClearRoleEmailTemplates() *EmailTemplateUpdate {
	etu.mutation.ClearRoleEmailTemplates()
	return etu
}

// RemoveRoleEmailTemplateIDs removes the "role_email_templates" edge to EmailRoleAttribute entities by IDs.
func (etu *EmailTemplateUpdate) RemoveRoleEmailTemplateIDs(ids ...uuid.UUID) *EmailTemplateUpdate {
	etu.mutation.RemoveRoleEmailTemplateIDs(ids...)
	return etu
}

// RemoveRoleEmailTemplates removes "role_email_templates" edges to EmailRoleAttribute entities.
func (etu *EmailTemplateUpdate) RemoveRoleEmailTemplates(e ...*EmailRoleAttribute) *EmailTemplateUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.RemoveRoleEmailTemplateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EmailTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(etu.hooks) == 0 {
		if err = etu.check(); err != nil {
			return 0, err
		}
		affected, err = etu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etu.check(); err != nil {
				return 0, err
			}
			etu.mutation = mutation
			affected, err = etu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(etu.hooks) - 1; i >= 0; i-- {
			if etu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = etu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EmailTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EmailTemplateUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EmailTemplateUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etu *EmailTemplateUpdate) check() error {
	if v, ok := etu.mutation.Event(); ok {
		if err := emailtemplate.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.event": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Content(); ok {
		if err := emailtemplate.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.content": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Status(); ok {
		if err := emailtemplate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.status": %w`, err)}
		}
	}
	if _, ok := etu.mutation.EventEdgeID(); etu.mutation.EventEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailTemplate.event_edge"`)
	}
	return nil
}

func (etu *EmailTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailtemplate.Table,
			Columns: emailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailtemplate.FieldID,
			},
		},
	}
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if etu.mutation.UpdatedAtCleared() {
		_spec.ClearField(emailtemplate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := etu.mutation.DeletedAt(); ok {
		_spec.SetField(emailtemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if etu.mutation.DeletedAtCleared() {
		_spec.ClearField(emailtemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := etu.mutation.Event(); ok {
		_spec.SetField(emailtemplate.FieldEvent, field.TypeEnum, value)
	}
	if etu.mutation.EventCleared() {
		_spec.ClearField(emailtemplate.FieldEvent, field.TypeEnum)
	}
	if value, ok := etu.mutation.SendTo(); ok {
		_spec.SetField(emailtemplate.FieldSendTo, field.TypeJSON, value)
	}
	if value, ok := etu.mutation.AppendedSendTo(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, emailtemplate.FieldSendTo, value)
		})
	}
	if value, ok := etu.mutation.Cc(); ok {
		_spec.SetField(emailtemplate.FieldCc, field.TypeJSON, value)
	}
	if value, ok := etu.mutation.AppendedCc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, emailtemplate.FieldCc, value)
		})
	}
	if value, ok := etu.mutation.Bcc(); ok {
		_spec.SetField(emailtemplate.FieldBcc, field.TypeJSON, value)
	}
	if value, ok := etu.mutation.AppendedBcc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, emailtemplate.FieldBcc, value)
		})
	}
	if value, ok := etu.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
	}
	if value, ok := etu.mutation.Content(); ok {
		_spec.SetField(emailtemplate.FieldContent, field.TypeString, value)
	}
	if value, ok := etu.mutation.Signature(); ok {
		_spec.SetField(emailtemplate.FieldSignature, field.TypeString, value)
	}
	if etu.mutation.SignatureCleared() {
		_spec.ClearField(emailtemplate.FieldSignature, field.TypeString)
	}
	if value, ok := etu.mutation.Status(); ok {
		_spec.SetField(emailtemplate.FieldStatus, field.TypeEnum, value)
	}
	if etu.mutation.RoleEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailtemplate.RoleEdgesTable,
			Columns: emailtemplate.RoleEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		createE := &EmailRoleAttributeCreate{config: etu.config, mutation: newEmailRoleAttributeMutation(etu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedRoleEdgesIDs(); len(nodes) > 0 && !etu.mutation.RoleEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailtemplate.RoleEdgesTable,
			Columns: emailtemplate.RoleEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EmailRoleAttributeCreate{config: etu.config, mutation: newEmailRoleAttributeMutation(etu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RoleEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailtemplate.RoleEdgesTable,
			Columns: emailtemplate.RoleEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EmailRoleAttributeCreate{config: etu.config, mutation: newEmailRoleAttributeMutation(etu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.EventEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailtemplate.EventEdgeTable,
			Columns: []string{emailtemplate.EventEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailevent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.EventEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailtemplate.EventEdgeTable,
			Columns: []string{emailtemplate.EventEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailevent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.RoleEmailTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.RoleEmailTemplatesTable,
			Columns: []string{emailtemplate.RoleEmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailroleattribute.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedRoleEmailTemplatesIDs(); len(nodes) > 0 && !etu.mutation.RoleEmailTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.RoleEmailTemplatesTable,
			Columns: []string{emailtemplate.RoleEmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailroleattribute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RoleEmailTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.RoleEmailTemplatesTable,
			Columns: []string{emailtemplate.RoleEmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailroleattribute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EmailTemplateUpdateOne is the builder for updating a single EmailTemplate entity.
type EmailTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (etuo *EmailTemplateUpdateOne) SetUpdatedAt(t time.Time) *EmailTemplateUpdateOne {
	etuo.mutation.SetUpdatedAt(t)
	return etuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableUpdatedAt(t *time.Time) *EmailTemplateUpdateOne {
	if t != nil {
		etuo.SetUpdatedAt(*t)
	}
	return etuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (etuo *EmailTemplateUpdateOne) ClearUpdatedAt() *EmailTemplateUpdateOne {
	etuo.mutation.ClearUpdatedAt()
	return etuo
}

// SetDeletedAt sets the "deleted_at" field.
func (etuo *EmailTemplateUpdateOne) SetDeletedAt(t time.Time) *EmailTemplateUpdateOne {
	etuo.mutation.SetDeletedAt(t)
	return etuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableDeletedAt(t *time.Time) *EmailTemplateUpdateOne {
	if t != nil {
		etuo.SetDeletedAt(*t)
	}
	return etuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (etuo *EmailTemplateUpdateOne) ClearDeletedAt() *EmailTemplateUpdateOne {
	etuo.mutation.ClearDeletedAt()
	return etuo
}

// SetEvent sets the "event" field.
func (etuo *EmailTemplateUpdateOne) SetEvent(e emailtemplate.Event) *EmailTemplateUpdateOne {
	etuo.mutation.SetEvent(e)
	return etuo
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableEvent(e *emailtemplate.Event) *EmailTemplateUpdateOne {
	if e != nil {
		etuo.SetEvent(*e)
	}
	return etuo
}

// ClearEvent clears the value of the "event" field.
func (etuo *EmailTemplateUpdateOne) ClearEvent() *EmailTemplateUpdateOne {
	etuo.mutation.ClearEvent()
	return etuo
}

// SetSendTo sets the "send_to" field.
func (etuo *EmailTemplateUpdateOne) SetSendTo(s []string) *EmailTemplateUpdateOne {
	etuo.mutation.SetSendTo(s)
	return etuo
}

// AppendSendTo appends s to the "send_to" field.
func (etuo *EmailTemplateUpdateOne) AppendSendTo(s []string) *EmailTemplateUpdateOne {
	etuo.mutation.AppendSendTo(s)
	return etuo
}

// SetCc sets the "cc" field.
func (etuo *EmailTemplateUpdateOne) SetCc(s []string) *EmailTemplateUpdateOne {
	etuo.mutation.SetCc(s)
	return etuo
}

// AppendCc appends s to the "cc" field.
func (etuo *EmailTemplateUpdateOne) AppendCc(s []string) *EmailTemplateUpdateOne {
	etuo.mutation.AppendCc(s)
	return etuo
}

// SetBcc sets the "bcc" field.
func (etuo *EmailTemplateUpdateOne) SetBcc(s []string) *EmailTemplateUpdateOne {
	etuo.mutation.SetBcc(s)
	return etuo
}

// AppendBcc appends s to the "bcc" field.
func (etuo *EmailTemplateUpdateOne) AppendBcc(s []string) *EmailTemplateUpdateOne {
	etuo.mutation.AppendBcc(s)
	return etuo
}

// SetSubject sets the "subject" field.
func (etuo *EmailTemplateUpdateOne) SetSubject(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetSubject(s)
	return etuo
}

// SetContent sets the "content" field.
func (etuo *EmailTemplateUpdateOne) SetContent(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetContent(s)
	return etuo
}

// SetSignature sets the "signature" field.
func (etuo *EmailTemplateUpdateOne) SetSignature(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetSignature(s)
	return etuo
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableSignature(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetSignature(*s)
	}
	return etuo
}

// ClearSignature clears the value of the "signature" field.
func (etuo *EmailTemplateUpdateOne) ClearSignature() *EmailTemplateUpdateOne {
	etuo.mutation.ClearSignature()
	return etuo
}

// SetStatus sets the "status" field.
func (etuo *EmailTemplateUpdateOne) SetStatus(e emailtemplate.Status) *EmailTemplateUpdateOne {
	etuo.mutation.SetStatus(e)
	return etuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableStatus(e *emailtemplate.Status) *EmailTemplateUpdateOne {
	if e != nil {
		etuo.SetStatus(*e)
	}
	return etuo
}

// SetEventID sets the "event_id" field.
func (etuo *EmailTemplateUpdateOne) SetEventID(u uuid.UUID) *EmailTemplateUpdateOne {
	etuo.mutation.SetEventID(u)
	return etuo
}

// AddRoleEdgeIDs adds the "role_edges" edge to the Role entity by IDs.
func (etuo *EmailTemplateUpdateOne) AddRoleEdgeIDs(ids ...uuid.UUID) *EmailTemplateUpdateOne {
	etuo.mutation.AddRoleEdgeIDs(ids...)
	return etuo
}

// AddRoleEdges adds the "role_edges" edges to the Role entity.
func (etuo *EmailTemplateUpdateOne) AddRoleEdges(r ...*Role) *EmailTemplateUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.AddRoleEdgeIDs(ids...)
}

// SetEventEdgeID sets the "event_edge" edge to the EmailEvent entity by ID.
func (etuo *EmailTemplateUpdateOne) SetEventEdgeID(id uuid.UUID) *EmailTemplateUpdateOne {
	etuo.mutation.SetEventEdgeID(id)
	return etuo
}

// SetEventEdge sets the "event_edge" edge to the EmailEvent entity.
func (etuo *EmailTemplateUpdateOne) SetEventEdge(e *EmailEvent) *EmailTemplateUpdateOne {
	return etuo.SetEventEdgeID(e.ID)
}

// AddRoleEmailTemplateIDs adds the "role_email_templates" edge to the EmailRoleAttribute entity by IDs.
func (etuo *EmailTemplateUpdateOne) AddRoleEmailTemplateIDs(ids ...uuid.UUID) *EmailTemplateUpdateOne {
	etuo.mutation.AddRoleEmailTemplateIDs(ids...)
	return etuo
}

// AddRoleEmailTemplates adds the "role_email_templates" edges to the EmailRoleAttribute entity.
func (etuo *EmailTemplateUpdateOne) AddRoleEmailTemplates(e ...*EmailRoleAttribute) *EmailTemplateUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.AddRoleEmailTemplateIDs(ids...)
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etuo *EmailTemplateUpdateOne) Mutation() *EmailTemplateMutation {
	return etuo.mutation
}

// ClearRoleEdges clears all "role_edges" edges to the Role entity.
func (etuo *EmailTemplateUpdateOne) ClearRoleEdges() *EmailTemplateUpdateOne {
	etuo.mutation.ClearRoleEdges()
	return etuo
}

// RemoveRoleEdgeIDs removes the "role_edges" edge to Role entities by IDs.
func (etuo *EmailTemplateUpdateOne) RemoveRoleEdgeIDs(ids ...uuid.UUID) *EmailTemplateUpdateOne {
	etuo.mutation.RemoveRoleEdgeIDs(ids...)
	return etuo
}

// RemoveRoleEdges removes "role_edges" edges to Role entities.
func (etuo *EmailTemplateUpdateOne) RemoveRoleEdges(r ...*Role) *EmailTemplateUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etuo.RemoveRoleEdgeIDs(ids...)
}

// ClearEventEdge clears the "event_edge" edge to the EmailEvent entity.
func (etuo *EmailTemplateUpdateOne) ClearEventEdge() *EmailTemplateUpdateOne {
	etuo.mutation.ClearEventEdge()
	return etuo
}

// ClearRoleEmailTemplates clears all "role_email_templates" edges to the EmailRoleAttribute entity.
func (etuo *EmailTemplateUpdateOne) ClearRoleEmailTemplates() *EmailTemplateUpdateOne {
	etuo.mutation.ClearRoleEmailTemplates()
	return etuo
}

// RemoveRoleEmailTemplateIDs removes the "role_email_templates" edge to EmailRoleAttribute entities by IDs.
func (etuo *EmailTemplateUpdateOne) RemoveRoleEmailTemplateIDs(ids ...uuid.UUID) *EmailTemplateUpdateOne {
	etuo.mutation.RemoveRoleEmailTemplateIDs(ids...)
	return etuo
}

// RemoveRoleEmailTemplates removes "role_email_templates" edges to EmailRoleAttribute entities.
func (etuo *EmailTemplateUpdateOne) RemoveRoleEmailTemplates(e ...*EmailRoleAttribute) *EmailTemplateUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.RemoveRoleEmailTemplateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EmailTemplateUpdateOne) Select(field string, fields ...string) *EmailTemplateUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EmailTemplate entity.
func (etuo *EmailTemplateUpdateOne) Save(ctx context.Context) (*EmailTemplate, error) {
	var (
		err  error
		node *EmailTemplate
	)
	if len(etuo.hooks) == 0 {
		if err = etuo.check(); err != nil {
			return nil, err
		}
		node, err = etuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etuo.check(); err != nil {
				return nil, err
			}
			etuo.mutation = mutation
			node, err = etuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(etuo.hooks) - 1; i >= 0; i-- {
			if etuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = etuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, etuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EmailTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EmailTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) SaveX(ctx context.Context) *EmailTemplate {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EmailTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etuo *EmailTemplateUpdateOne) check() error {
	if v, ok := etuo.mutation.Event(); ok {
		if err := emailtemplate.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.event": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Content(); ok {
		if err := emailtemplate.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.content": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Status(); ok {
		if err := emailtemplate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.status": %w`, err)}
		}
	}
	if _, ok := etuo.mutation.EventEdgeID(); etuo.mutation.EventEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailTemplate.event_edge"`)
	}
	return nil
}

func (etuo *EmailTemplateUpdateOne) sqlSave(ctx context.Context) (_node *EmailTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailtemplate.Table,
			Columns: emailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailtemplate.FieldID,
			},
		},
	}
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailtemplate.FieldID)
		for _, f := range fields {
			if !emailtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if etuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(emailtemplate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := etuo.mutation.DeletedAt(); ok {
		_spec.SetField(emailtemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if etuo.mutation.DeletedAtCleared() {
		_spec.ClearField(emailtemplate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := etuo.mutation.Event(); ok {
		_spec.SetField(emailtemplate.FieldEvent, field.TypeEnum, value)
	}
	if etuo.mutation.EventCleared() {
		_spec.ClearField(emailtemplate.FieldEvent, field.TypeEnum)
	}
	if value, ok := etuo.mutation.SendTo(); ok {
		_spec.SetField(emailtemplate.FieldSendTo, field.TypeJSON, value)
	}
	if value, ok := etuo.mutation.AppendedSendTo(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, emailtemplate.FieldSendTo, value)
		})
	}
	if value, ok := etuo.mutation.Cc(); ok {
		_spec.SetField(emailtemplate.FieldCc, field.TypeJSON, value)
	}
	if value, ok := etuo.mutation.AppendedCc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, emailtemplate.FieldCc, value)
		})
	}
	if value, ok := etuo.mutation.Bcc(); ok {
		_spec.SetField(emailtemplate.FieldBcc, field.TypeJSON, value)
	}
	if value, ok := etuo.mutation.AppendedBcc(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, emailtemplate.FieldBcc, value)
		})
	}
	if value, ok := etuo.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Content(); ok {
		_spec.SetField(emailtemplate.FieldContent, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Signature(); ok {
		_spec.SetField(emailtemplate.FieldSignature, field.TypeString, value)
	}
	if etuo.mutation.SignatureCleared() {
		_spec.ClearField(emailtemplate.FieldSignature, field.TypeString)
	}
	if value, ok := etuo.mutation.Status(); ok {
		_spec.SetField(emailtemplate.FieldStatus, field.TypeEnum, value)
	}
	if etuo.mutation.RoleEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailtemplate.RoleEdgesTable,
			Columns: emailtemplate.RoleEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		createE := &EmailRoleAttributeCreate{config: etuo.config, mutation: newEmailRoleAttributeMutation(etuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedRoleEdgesIDs(); len(nodes) > 0 && !etuo.mutation.RoleEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailtemplate.RoleEdgesTable,
			Columns: emailtemplate.RoleEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EmailRoleAttributeCreate{config: etuo.config, mutation: newEmailRoleAttributeMutation(etuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RoleEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   emailtemplate.RoleEdgesTable,
			Columns: emailtemplate.RoleEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EmailRoleAttributeCreate{config: etuo.config, mutation: newEmailRoleAttributeMutation(etuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.EventEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailtemplate.EventEdgeTable,
			Columns: []string{emailtemplate.EventEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailevent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.EventEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailtemplate.EventEdgeTable,
			Columns: []string{emailtemplate.EventEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailevent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.RoleEmailTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.RoleEmailTemplatesTable,
			Columns: []string{emailtemplate.RoleEmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailroleattribute.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedRoleEmailTemplatesIDs(); len(nodes) > 0 && !etuo.mutation.RoleEmailTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.RoleEmailTemplatesTable,
			Columns: []string{emailtemplate.RoleEmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailroleattribute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RoleEmailTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.RoleEmailTemplatesTable,
			Columns: []string{emailtemplate.RoleEmailTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailroleattribute.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmailTemplate{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
