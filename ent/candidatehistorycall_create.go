// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidatehistorycall"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateHistoryCallCreate is the builder for creating a CandidateHistoryCall entity.
type CandidateHistoryCallCreate struct {
	config
	mutation *CandidateHistoryCallMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (chcc *CandidateHistoryCallCreate) SetCreatedAt(t time.Time) *CandidateHistoryCallCreate {
	chcc.mutation.SetCreatedAt(t)
	return chcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableCreatedAt(t *time.Time) *CandidateHistoryCallCreate {
	if t != nil {
		chcc.SetCreatedAt(*t)
	}
	return chcc
}

// SetUpdatedAt sets the "updated_at" field.
func (chcc *CandidateHistoryCallCreate) SetUpdatedAt(t time.Time) *CandidateHistoryCallCreate {
	chcc.mutation.SetUpdatedAt(t)
	return chcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableUpdatedAt(t *time.Time) *CandidateHistoryCallCreate {
	if t != nil {
		chcc.SetUpdatedAt(*t)
	}
	return chcc
}

// SetDeletedAt sets the "deleted_at" field.
func (chcc *CandidateHistoryCallCreate) SetDeletedAt(t time.Time) *CandidateHistoryCallCreate {
	chcc.mutation.SetDeletedAt(t)
	return chcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableDeletedAt(t *time.Time) *CandidateHistoryCallCreate {
	if t != nil {
		chcc.SetDeletedAt(*t)
	}
	return chcc
}

// SetCandidateID sets the "candidate_id" field.
func (chcc *CandidateHistoryCallCreate) SetCandidateID(u uuid.UUID) *CandidateHistoryCallCreate {
	chcc.mutation.SetCandidateID(u)
	return chcc
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableCandidateID(u *uuid.UUID) *CandidateHistoryCallCreate {
	if u != nil {
		chcc.SetCandidateID(*u)
	}
	return chcc
}

// SetContactTo sets the "contact_to" field.
func (chcc *CandidateHistoryCallCreate) SetContactTo(s string) *CandidateHistoryCallCreate {
	chcc.mutation.SetContactTo(s)
	return chcc
}

// SetNillableContactTo sets the "contact_to" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableContactTo(s *string) *CandidateHistoryCallCreate {
	if s != nil {
		chcc.SetContactTo(*s)
	}
	return chcc
}

// SetDescription sets the "description" field.
func (chcc *CandidateHistoryCallCreate) SetDescription(s string) *CandidateHistoryCallCreate {
	chcc.mutation.SetDescription(s)
	return chcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableDescription(s *string) *CandidateHistoryCallCreate {
	if s != nil {
		chcc.SetDescription(*s)
	}
	return chcc
}

// SetType sets the "type" field.
func (chcc *CandidateHistoryCallCreate) SetType(c candidatehistorycall.Type) *CandidateHistoryCallCreate {
	chcc.mutation.SetType(c)
	return chcc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableType(c *candidatehistorycall.Type) *CandidateHistoryCallCreate {
	if c != nil {
		chcc.SetType(*c)
	}
	return chcc
}

// SetDate sets the "date" field.
func (chcc *CandidateHistoryCallCreate) SetDate(t time.Time) *CandidateHistoryCallCreate {
	chcc.mutation.SetDate(t)
	return chcc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableDate(t *time.Time) *CandidateHistoryCallCreate {
	if t != nil {
		chcc.SetDate(*t)
	}
	return chcc
}

// SetStartTime sets the "start_time" field.
func (chcc *CandidateHistoryCallCreate) SetStartTime(t time.Time) *CandidateHistoryCallCreate {
	chcc.mutation.SetStartTime(t)
	return chcc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableStartTime(t *time.Time) *CandidateHistoryCallCreate {
	if t != nil {
		chcc.SetStartTime(*t)
	}
	return chcc
}

// SetEndTime sets the "end_time" field.
func (chcc *CandidateHistoryCallCreate) SetEndTime(t time.Time) *CandidateHistoryCallCreate {
	chcc.mutation.SetEndTime(t)
	return chcc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableEndTime(t *time.Time) *CandidateHistoryCallCreate {
	if t != nil {
		chcc.SetEndTime(*t)
	}
	return chcc
}

// SetID sets the "id" field.
func (chcc *CandidateHistoryCallCreate) SetID(u uuid.UUID) *CandidateHistoryCallCreate {
	chcc.mutation.SetID(u)
	return chcc
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (chcc *CandidateHistoryCallCreate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateHistoryCallCreate {
	chcc.mutation.AddAttachmentEdgeIDs(ids...)
	return chcc
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (chcc *CandidateHistoryCallCreate) AddAttachmentEdges(a ...*Attachment) *CandidateHistoryCallCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return chcc.AddAttachmentEdgeIDs(ids...)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (chcc *CandidateHistoryCallCreate) SetCandidateEdgeID(id uuid.UUID) *CandidateHistoryCallCreate {
	chcc.mutation.SetCandidateEdgeID(id)
	return chcc
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (chcc *CandidateHistoryCallCreate) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateHistoryCallCreate {
	if id != nil {
		chcc = chcc.SetCandidateEdgeID(*id)
	}
	return chcc
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (chcc *CandidateHistoryCallCreate) SetCandidateEdge(c *Candidate) *CandidateHistoryCallCreate {
	return chcc.SetCandidateEdgeID(c.ID)
}

// Mutation returns the CandidateHistoryCallMutation object of the builder.
func (chcc *CandidateHistoryCallCreate) Mutation() *CandidateHistoryCallMutation {
	return chcc.mutation
}

// Save creates the CandidateHistoryCall in the database.
func (chcc *CandidateHistoryCallCreate) Save(ctx context.Context) (*CandidateHistoryCall, error) {
	var (
		err  error
		node *CandidateHistoryCall
	)
	chcc.defaults()
	if len(chcc.hooks) == 0 {
		if err = chcc.check(); err != nil {
			return nil, err
		}
		node, err = chcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateHistoryCallMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = chcc.check(); err != nil {
				return nil, err
			}
			chcc.mutation = mutation
			if node, err = chcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(chcc.hooks) - 1; i >= 0; i-- {
			if chcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = chcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, chcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateHistoryCall)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateHistoryCallMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (chcc *CandidateHistoryCallCreate) SaveX(ctx context.Context) *CandidateHistoryCall {
	v, err := chcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chcc *CandidateHistoryCallCreate) Exec(ctx context.Context) error {
	_, err := chcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcc *CandidateHistoryCallCreate) ExecX(ctx context.Context) {
	if err := chcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chcc *CandidateHistoryCallCreate) defaults() {
	if _, ok := chcc.mutation.CreatedAt(); !ok {
		v := candidatehistorycall.DefaultCreatedAt()
		chcc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chcc *CandidateHistoryCallCreate) check() error {
	if _, ok := chcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CandidateHistoryCall.created_at"`)}
	}
	if v, ok := chcc.mutation.ContactTo(); ok {
		if err := candidatehistorycall.ContactToValidator(v); err != nil {
			return &ValidationError{Name: "contact_to", err: fmt.Errorf(`ent: validator failed for field "CandidateHistoryCall.contact_to": %w`, err)}
		}
	}
	if v, ok := chcc.mutation.Description(); ok {
		if err := candidatehistorycall.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "CandidateHistoryCall.description": %w`, err)}
		}
	}
	if v, ok := chcc.mutation.GetType(); ok {
		if err := candidatehistorycall.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CandidateHistoryCall.type": %w`, err)}
		}
	}
	return nil
}

func (chcc *CandidateHistoryCallCreate) sqlSave(ctx context.Context) (*CandidateHistoryCall, error) {
	_node, _spec := chcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, chcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (chcc *CandidateHistoryCallCreate) createSpec() (*CandidateHistoryCall, *sqlgraph.CreateSpec) {
	var (
		_node = &CandidateHistoryCall{config: chcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: candidatehistorycall.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatehistorycall.FieldID,
			},
		}
	)
	if id, ok := chcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := chcc.mutation.CreatedAt(); ok {
		_spec.SetField(candidatehistorycall.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := chcc.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatehistorycall.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := chcc.mutation.DeletedAt(); ok {
		_spec.SetField(candidatehistorycall.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := chcc.mutation.ContactTo(); ok {
		_spec.SetField(candidatehistorycall.FieldContactTo, field.TypeString, value)
		_node.ContactTo = value
	}
	if value, ok := chcc.mutation.Description(); ok {
		_spec.SetField(candidatehistorycall.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := chcc.mutation.GetType(); ok {
		_spec.SetField(candidatehistorycall.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := chcc.mutation.Date(); ok {
		_spec.SetField(candidatehistorycall.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := chcc.mutation.StartTime(); ok {
		_spec.SetField(candidatehistorycall.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := chcc.mutation.EndTime(); ok {
		_spec.SetField(candidatehistorycall.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := chcc.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatehistorycall.AttachmentEdgesTable,
			Columns: []string{candidatehistorycall.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := chcc.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatehistorycall.CandidateEdgeTable,
			Columns: []string{candidatehistorycall.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CandidateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CandidateHistoryCallCreateBulk is the builder for creating many CandidateHistoryCall entities in bulk.
type CandidateHistoryCallCreateBulk struct {
	config
	builders []*CandidateHistoryCallCreate
}

// Save creates the CandidateHistoryCall entities in the database.
func (chccb *CandidateHistoryCallCreateBulk) Save(ctx context.Context) ([]*CandidateHistoryCall, error) {
	specs := make([]*sqlgraph.CreateSpec, len(chccb.builders))
	nodes := make([]*CandidateHistoryCall, len(chccb.builders))
	mutators := make([]Mutator, len(chccb.builders))
	for i := range chccb.builders {
		func(i int, root context.Context) {
			builder := chccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CandidateHistoryCallMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, chccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, chccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, chccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (chccb *CandidateHistoryCallCreateBulk) SaveX(ctx context.Context) []*CandidateHistoryCall {
	v, err := chccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chccb *CandidateHistoryCallCreateBulk) Exec(ctx context.Context) error {
	_, err := chccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chccb *CandidateHistoryCallCreateBulk) ExecX(ctx context.Context) {
	if err := chccb.Exec(ctx); err != nil {
		panic(err)
	}
}
