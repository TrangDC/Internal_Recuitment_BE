// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/hiringteam"
	"trec/ent/hiringteammanager"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HiringTeamManagerUpdate is the builder for updating HiringTeamManager entities.
type HiringTeamManagerUpdate struct {
	config
	hooks    []Hook
	mutation *HiringTeamManagerMutation
}

// Where appends a list predicates to the HiringTeamManagerUpdate builder.
func (htmu *HiringTeamManagerUpdate) Where(ps ...predicate.HiringTeamManager) *HiringTeamManagerUpdate {
	htmu.mutation.Where(ps...)
	return htmu
}

// SetUpdatedAt sets the "updated_at" field.
func (htmu *HiringTeamManagerUpdate) SetUpdatedAt(t time.Time) *HiringTeamManagerUpdate {
	htmu.mutation.SetUpdatedAt(t)
	return htmu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (htmu *HiringTeamManagerUpdate) SetNillableUpdatedAt(t *time.Time) *HiringTeamManagerUpdate {
	if t != nil {
		htmu.SetUpdatedAt(*t)
	}
	return htmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (htmu *HiringTeamManagerUpdate) ClearUpdatedAt() *HiringTeamManagerUpdate {
	htmu.mutation.ClearUpdatedAt()
	return htmu
}

// SetDeletedAt sets the "deleted_at" field.
func (htmu *HiringTeamManagerUpdate) SetDeletedAt(t time.Time) *HiringTeamManagerUpdate {
	htmu.mutation.SetDeletedAt(t)
	return htmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (htmu *HiringTeamManagerUpdate) SetNillableDeletedAt(t *time.Time) *HiringTeamManagerUpdate {
	if t != nil {
		htmu.SetDeletedAt(*t)
	}
	return htmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (htmu *HiringTeamManagerUpdate) ClearDeletedAt() *HiringTeamManagerUpdate {
	htmu.mutation.ClearDeletedAt()
	return htmu
}

// SetHiringTeamID sets the "hiring_team_id" field.
func (htmu *HiringTeamManagerUpdate) SetHiringTeamID(u uuid.UUID) *HiringTeamManagerUpdate {
	htmu.mutation.SetHiringTeamID(u)
	return htmu
}

// SetUserID sets the "user_id" field.
func (htmu *HiringTeamManagerUpdate) SetUserID(u uuid.UUID) *HiringTeamManagerUpdate {
	htmu.mutation.SetUserID(u)
	return htmu
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (htmu *HiringTeamManagerUpdate) SetUserEdgeID(id uuid.UUID) *HiringTeamManagerUpdate {
	htmu.mutation.SetUserEdgeID(id)
	return htmu
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (htmu *HiringTeamManagerUpdate) SetUserEdge(u *User) *HiringTeamManagerUpdate {
	return htmu.SetUserEdgeID(u.ID)
}

// SetHiringTeamEdgeID sets the "hiring_team_edge" edge to the HiringTeam entity by ID.
func (htmu *HiringTeamManagerUpdate) SetHiringTeamEdgeID(id uuid.UUID) *HiringTeamManagerUpdate {
	htmu.mutation.SetHiringTeamEdgeID(id)
	return htmu
}

// SetHiringTeamEdge sets the "hiring_team_edge" edge to the HiringTeam entity.
func (htmu *HiringTeamManagerUpdate) SetHiringTeamEdge(h *HiringTeam) *HiringTeamManagerUpdate {
	return htmu.SetHiringTeamEdgeID(h.ID)
}

// Mutation returns the HiringTeamManagerMutation object of the builder.
func (htmu *HiringTeamManagerUpdate) Mutation() *HiringTeamManagerMutation {
	return htmu.mutation
}

// ClearUserEdge clears the "user_edge" edge to the User entity.
func (htmu *HiringTeamManagerUpdate) ClearUserEdge() *HiringTeamManagerUpdate {
	htmu.mutation.ClearUserEdge()
	return htmu
}

// ClearHiringTeamEdge clears the "hiring_team_edge" edge to the HiringTeam entity.
func (htmu *HiringTeamManagerUpdate) ClearHiringTeamEdge() *HiringTeamManagerUpdate {
	htmu.mutation.ClearHiringTeamEdge()
	return htmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htmu *HiringTeamManagerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(htmu.hooks) == 0 {
		if err = htmu.check(); err != nil {
			return 0, err
		}
		affected, err = htmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiringTeamManagerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = htmu.check(); err != nil {
				return 0, err
			}
			htmu.mutation = mutation
			affected, err = htmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(htmu.hooks) - 1; i >= 0; i-- {
			if htmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = htmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, htmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (htmu *HiringTeamManagerUpdate) SaveX(ctx context.Context) int {
	affected, err := htmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htmu *HiringTeamManagerUpdate) Exec(ctx context.Context) error {
	_, err := htmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htmu *HiringTeamManagerUpdate) ExecX(ctx context.Context) {
	if err := htmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htmu *HiringTeamManagerUpdate) check() error {
	if _, ok := htmu.mutation.UserEdgeID(); htmu.mutation.UserEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringTeamManager.user_edge"`)
	}
	if _, ok := htmu.mutation.HiringTeamEdgeID(); htmu.mutation.HiringTeamEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringTeamManager.hiring_team_edge"`)
	}
	return nil
}

func (htmu *HiringTeamManagerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringteammanager.Table,
			Columns: hiringteammanager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringteammanager.FieldID,
			},
		},
	}
	if ps := htmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htmu.mutation.UpdatedAt(); ok {
		_spec.SetField(hiringteammanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if htmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(hiringteammanager.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := htmu.mutation.DeletedAt(); ok {
		_spec.SetField(hiringteammanager.FieldDeletedAt, field.TypeTime, value)
	}
	if htmu.mutation.DeletedAtCleared() {
		_spec.ClearField(hiringteammanager.FieldDeletedAt, field.TypeTime)
	}
	if htmu.mutation.UserEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.UserEdgeTable,
			Columns: []string{hiringteammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htmu.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.UserEdgeTable,
			Columns: []string{hiringteammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htmu.mutation.HiringTeamEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.HiringTeamEdgeTable,
			Columns: []string{hiringteammanager.HiringTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htmu.mutation.HiringTeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.HiringTeamEdgeTable,
			Columns: []string{hiringteammanager.HiringTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hiringteammanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HiringTeamManagerUpdateOne is the builder for updating a single HiringTeamManager entity.
type HiringTeamManagerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HiringTeamManagerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (htmuo *HiringTeamManagerUpdateOne) SetUpdatedAt(t time.Time) *HiringTeamManagerUpdateOne {
	htmuo.mutation.SetUpdatedAt(t)
	return htmuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (htmuo *HiringTeamManagerUpdateOne) SetNillableUpdatedAt(t *time.Time) *HiringTeamManagerUpdateOne {
	if t != nil {
		htmuo.SetUpdatedAt(*t)
	}
	return htmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (htmuo *HiringTeamManagerUpdateOne) ClearUpdatedAt() *HiringTeamManagerUpdateOne {
	htmuo.mutation.ClearUpdatedAt()
	return htmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (htmuo *HiringTeamManagerUpdateOne) SetDeletedAt(t time.Time) *HiringTeamManagerUpdateOne {
	htmuo.mutation.SetDeletedAt(t)
	return htmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (htmuo *HiringTeamManagerUpdateOne) SetNillableDeletedAt(t *time.Time) *HiringTeamManagerUpdateOne {
	if t != nil {
		htmuo.SetDeletedAt(*t)
	}
	return htmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (htmuo *HiringTeamManagerUpdateOne) ClearDeletedAt() *HiringTeamManagerUpdateOne {
	htmuo.mutation.ClearDeletedAt()
	return htmuo
}

// SetHiringTeamID sets the "hiring_team_id" field.
func (htmuo *HiringTeamManagerUpdateOne) SetHiringTeamID(u uuid.UUID) *HiringTeamManagerUpdateOne {
	htmuo.mutation.SetHiringTeamID(u)
	return htmuo
}

// SetUserID sets the "user_id" field.
func (htmuo *HiringTeamManagerUpdateOne) SetUserID(u uuid.UUID) *HiringTeamManagerUpdateOne {
	htmuo.mutation.SetUserID(u)
	return htmuo
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (htmuo *HiringTeamManagerUpdateOne) SetUserEdgeID(id uuid.UUID) *HiringTeamManagerUpdateOne {
	htmuo.mutation.SetUserEdgeID(id)
	return htmuo
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (htmuo *HiringTeamManagerUpdateOne) SetUserEdge(u *User) *HiringTeamManagerUpdateOne {
	return htmuo.SetUserEdgeID(u.ID)
}

// SetHiringTeamEdgeID sets the "hiring_team_edge" edge to the HiringTeam entity by ID.
func (htmuo *HiringTeamManagerUpdateOne) SetHiringTeamEdgeID(id uuid.UUID) *HiringTeamManagerUpdateOne {
	htmuo.mutation.SetHiringTeamEdgeID(id)
	return htmuo
}

// SetHiringTeamEdge sets the "hiring_team_edge" edge to the HiringTeam entity.
func (htmuo *HiringTeamManagerUpdateOne) SetHiringTeamEdge(h *HiringTeam) *HiringTeamManagerUpdateOne {
	return htmuo.SetHiringTeamEdgeID(h.ID)
}

// Mutation returns the HiringTeamManagerMutation object of the builder.
func (htmuo *HiringTeamManagerUpdateOne) Mutation() *HiringTeamManagerMutation {
	return htmuo.mutation
}

// ClearUserEdge clears the "user_edge" edge to the User entity.
func (htmuo *HiringTeamManagerUpdateOne) ClearUserEdge() *HiringTeamManagerUpdateOne {
	htmuo.mutation.ClearUserEdge()
	return htmuo
}

// ClearHiringTeamEdge clears the "hiring_team_edge" edge to the HiringTeam entity.
func (htmuo *HiringTeamManagerUpdateOne) ClearHiringTeamEdge() *HiringTeamManagerUpdateOne {
	htmuo.mutation.ClearHiringTeamEdge()
	return htmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htmuo *HiringTeamManagerUpdateOne) Select(field string, fields ...string) *HiringTeamManagerUpdateOne {
	htmuo.fields = append([]string{field}, fields...)
	return htmuo
}

// Save executes the query and returns the updated HiringTeamManager entity.
func (htmuo *HiringTeamManagerUpdateOne) Save(ctx context.Context) (*HiringTeamManager, error) {
	var (
		err  error
		node *HiringTeamManager
	)
	if len(htmuo.hooks) == 0 {
		if err = htmuo.check(); err != nil {
			return nil, err
		}
		node, err = htmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiringTeamManagerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = htmuo.check(); err != nil {
				return nil, err
			}
			htmuo.mutation = mutation
			node, err = htmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(htmuo.hooks) - 1; i >= 0; i-- {
			if htmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = htmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, htmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HiringTeamManager)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HiringTeamManagerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (htmuo *HiringTeamManagerUpdateOne) SaveX(ctx context.Context) *HiringTeamManager {
	node, err := htmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htmuo *HiringTeamManagerUpdateOne) Exec(ctx context.Context) error {
	_, err := htmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htmuo *HiringTeamManagerUpdateOne) ExecX(ctx context.Context) {
	if err := htmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htmuo *HiringTeamManagerUpdateOne) check() error {
	if _, ok := htmuo.mutation.UserEdgeID(); htmuo.mutation.UserEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringTeamManager.user_edge"`)
	}
	if _, ok := htmuo.mutation.HiringTeamEdgeID(); htmuo.mutation.HiringTeamEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringTeamManager.hiring_team_edge"`)
	}
	return nil
}

func (htmuo *HiringTeamManagerUpdateOne) sqlSave(ctx context.Context) (_node *HiringTeamManager, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringteammanager.Table,
			Columns: hiringteammanager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringteammanager.FieldID,
			},
		},
	}
	id, ok := htmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HiringTeamManager.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hiringteammanager.FieldID)
		for _, f := range fields {
			if !hiringteammanager.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hiringteammanager.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hiringteammanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if htmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hiringteammanager.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := htmuo.mutation.DeletedAt(); ok {
		_spec.SetField(hiringteammanager.FieldDeletedAt, field.TypeTime, value)
	}
	if htmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(hiringteammanager.FieldDeletedAt, field.TypeTime)
	}
	if htmuo.mutation.UserEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.UserEdgeTable,
			Columns: []string{hiringteammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htmuo.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.UserEdgeTable,
			Columns: []string{hiringteammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htmuo.mutation.HiringTeamEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.HiringTeamEdgeTable,
			Columns: []string{hiringteammanager.HiringTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htmuo.mutation.HiringTeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteammanager.HiringTeamEdgeTable,
			Columns: []string{hiringteammanager.HiringTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HiringTeamManager{config: htmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hiringteammanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
