// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidateinterview"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/candidatejobstep"
	"trec/ent/hiringjob"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateJobQuery is the builder for querying CandidateJob entities.
type CandidateJobQuery struct {
	config
	limit                          *int
	offset                         *int
	unique                         *bool
	order                          []OrderFunc
	fields                         []string
	predicates                     []predicate.CandidateJob
	withAttachmentEdges            *AttachmentQuery
	withHiringJobEdge              *HiringJobQuery
	withCandidateJobFeedback       *CandidateJobFeedbackQuery
	withCandidateEdge              *CandidateQuery
	withCandidateJobInterview      *CandidateInterviewQuery
	withCreatedByEdge              *UserQuery
	withCandidateJobStep           *CandidateJobStepQuery
	modifiers                      []func(*sql.Selector)
	loadTotal                      []func(context.Context, []*CandidateJob) error
	withNamedAttachmentEdges       map[string]*AttachmentQuery
	withNamedCandidateJobFeedback  map[string]*CandidateJobFeedbackQuery
	withNamedCandidateJobInterview map[string]*CandidateInterviewQuery
	withNamedCandidateJobStep      map[string]*CandidateJobStepQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CandidateJobQuery builder.
func (cjq *CandidateJobQuery) Where(ps ...predicate.CandidateJob) *CandidateJobQuery {
	cjq.predicates = append(cjq.predicates, ps...)
	return cjq
}

// Limit adds a limit step to the query.
func (cjq *CandidateJobQuery) Limit(limit int) *CandidateJobQuery {
	cjq.limit = &limit
	return cjq
}

// Offset adds an offset step to the query.
func (cjq *CandidateJobQuery) Offset(offset int) *CandidateJobQuery {
	cjq.offset = &offset
	return cjq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cjq *CandidateJobQuery) Unique(unique bool) *CandidateJobQuery {
	cjq.unique = &unique
	return cjq
}

// Order adds an order step to the query.
func (cjq *CandidateJobQuery) Order(o ...OrderFunc) *CandidateJobQuery {
	cjq.order = append(cjq.order, o...)
	return cjq
}

// QueryAttachmentEdges chains the current query on the "attachment_edges" edge.
func (cjq *CandidateJobQuery) QueryAttachmentEdges() *AttachmentQuery {
	query := &AttachmentQuery{config: cjq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cjq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, selector),
			sqlgraph.To(attachment.Table, attachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.AttachmentEdgesTable, candidatejob.AttachmentEdgesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cjq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHiringJobEdge chains the current query on the "hiring_job_edge" edge.
func (cjq *CandidateJobQuery) QueryHiringJobEdge() *HiringJobQuery {
	query := &HiringJobQuery{config: cjq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cjq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, selector),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejob.HiringJobEdgeTable, candidatejob.HiringJobEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(cjq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCandidateJobFeedback chains the current query on the "candidate_job_feedback" edge.
func (cjq *CandidateJobQuery) QueryCandidateJobFeedback() *CandidateJobFeedbackQuery {
	query := &CandidateJobFeedbackQuery{config: cjq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cjq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, selector),
			sqlgraph.To(candidatejobfeedback.Table, candidatejobfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.CandidateJobFeedbackTable, candidatejob.CandidateJobFeedbackColumn),
		)
		fromU = sqlgraph.SetNeighbors(cjq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCandidateEdge chains the current query on the "candidate_edge" edge.
func (cjq *CandidateJobQuery) QueryCandidateEdge() *CandidateQuery {
	query := &CandidateQuery{config: cjq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cjq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, selector),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejob.CandidateEdgeTable, candidatejob.CandidateEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(cjq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCandidateJobInterview chains the current query on the "candidate_job_interview" edge.
func (cjq *CandidateJobQuery) QueryCandidateJobInterview() *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: cjq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cjq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, selector),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.CandidateJobInterviewTable, candidatejob.CandidateJobInterviewColumn),
		)
		fromU = sqlgraph.SetNeighbors(cjq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedByEdge chains the current query on the "created_by_edge" edge.
func (cjq *CandidateJobQuery) QueryCreatedByEdge() *UserQuery {
	query := &UserQuery{config: cjq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cjq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejob.CreatedByEdgeTable, candidatejob.CreatedByEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(cjq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCandidateJobStep chains the current query on the "candidate_job_step" edge.
func (cjq *CandidateJobQuery) QueryCandidateJobStep() *CandidateJobStepQuery {
	query := &CandidateJobStepQuery{config: cjq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cjq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejob.Table, candidatejob.FieldID, selector),
			sqlgraph.To(candidatejobstep.Table, candidatejobstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, candidatejob.CandidateJobStepTable, candidatejob.CandidateJobStepColumn),
		)
		fromU = sqlgraph.SetNeighbors(cjq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CandidateJob entity from the query.
// Returns a *NotFoundError when no CandidateJob was found.
func (cjq *CandidateJobQuery) First(ctx context.Context) (*CandidateJob, error) {
	nodes, err := cjq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{candidatejob.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cjq *CandidateJobQuery) FirstX(ctx context.Context) *CandidateJob {
	node, err := cjq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CandidateJob ID from the query.
// Returns a *NotFoundError when no CandidateJob ID was found.
func (cjq *CandidateJobQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cjq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{candidatejob.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cjq *CandidateJobQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cjq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CandidateJob entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CandidateJob entity is found.
// Returns a *NotFoundError when no CandidateJob entities are found.
func (cjq *CandidateJobQuery) Only(ctx context.Context) (*CandidateJob, error) {
	nodes, err := cjq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{candidatejob.Label}
	default:
		return nil, &NotSingularError{candidatejob.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cjq *CandidateJobQuery) OnlyX(ctx context.Context) *CandidateJob {
	node, err := cjq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CandidateJob ID in the query.
// Returns a *NotSingularError when more than one CandidateJob ID is found.
// Returns a *NotFoundError when no entities are found.
func (cjq *CandidateJobQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cjq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{candidatejob.Label}
	default:
		err = &NotSingularError{candidatejob.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cjq *CandidateJobQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cjq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CandidateJobs.
func (cjq *CandidateJobQuery) All(ctx context.Context) ([]*CandidateJob, error) {
	if err := cjq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cjq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cjq *CandidateJobQuery) AllX(ctx context.Context) []*CandidateJob {
	nodes, err := cjq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CandidateJob IDs.
func (cjq *CandidateJobQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := cjq.Select(candidatejob.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cjq *CandidateJobQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cjq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cjq *CandidateJobQuery) Count(ctx context.Context) (int, error) {
	if err := cjq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cjq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cjq *CandidateJobQuery) CountX(ctx context.Context) int {
	count, err := cjq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cjq *CandidateJobQuery) Exist(ctx context.Context) (bool, error) {
	if err := cjq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cjq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cjq *CandidateJobQuery) ExistX(ctx context.Context) bool {
	exist, err := cjq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CandidateJobQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cjq *CandidateJobQuery) Clone() *CandidateJobQuery {
	if cjq == nil {
		return nil
	}
	return &CandidateJobQuery{
		config:                    cjq.config,
		limit:                     cjq.limit,
		offset:                    cjq.offset,
		order:                     append([]OrderFunc{}, cjq.order...),
		predicates:                append([]predicate.CandidateJob{}, cjq.predicates...),
		withAttachmentEdges:       cjq.withAttachmentEdges.Clone(),
		withHiringJobEdge:         cjq.withHiringJobEdge.Clone(),
		withCandidateJobFeedback:  cjq.withCandidateJobFeedback.Clone(),
		withCandidateEdge:         cjq.withCandidateEdge.Clone(),
		withCandidateJobInterview: cjq.withCandidateJobInterview.Clone(),
		withCreatedByEdge:         cjq.withCreatedByEdge.Clone(),
		withCandidateJobStep:      cjq.withCandidateJobStep.Clone(),
		// clone intermediate query.
		sql:    cjq.sql.Clone(),
		path:   cjq.path,
		unique: cjq.unique,
	}
}

// WithAttachmentEdges tells the query-builder to eager-load the nodes that are connected to
// the "attachment_edges" edge. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithAttachmentEdges(opts ...func(*AttachmentQuery)) *CandidateJobQuery {
	query := &AttachmentQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	cjq.withAttachmentEdges = query
	return cjq
}

// WithHiringJobEdge tells the query-builder to eager-load the nodes that are connected to
// the "hiring_job_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithHiringJobEdge(opts ...func(*HiringJobQuery)) *CandidateJobQuery {
	query := &HiringJobQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	cjq.withHiringJobEdge = query
	return cjq
}

// WithCandidateJobFeedback tells the query-builder to eager-load the nodes that are connected to
// the "candidate_job_feedback" edge. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithCandidateJobFeedback(opts ...func(*CandidateJobFeedbackQuery)) *CandidateJobQuery {
	query := &CandidateJobFeedbackQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	cjq.withCandidateJobFeedback = query
	return cjq
}

// WithCandidateEdge tells the query-builder to eager-load the nodes that are connected to
// the "candidate_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithCandidateEdge(opts ...func(*CandidateQuery)) *CandidateJobQuery {
	query := &CandidateQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	cjq.withCandidateEdge = query
	return cjq
}

// WithCandidateJobInterview tells the query-builder to eager-load the nodes that are connected to
// the "candidate_job_interview" edge. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithCandidateJobInterview(opts ...func(*CandidateInterviewQuery)) *CandidateJobQuery {
	query := &CandidateInterviewQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	cjq.withCandidateJobInterview = query
	return cjq
}

// WithCreatedByEdge tells the query-builder to eager-load the nodes that are connected to
// the "created_by_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithCreatedByEdge(opts ...func(*UserQuery)) *CandidateJobQuery {
	query := &UserQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	cjq.withCreatedByEdge = query
	return cjq
}

// WithCandidateJobStep tells the query-builder to eager-load the nodes that are connected to
// the "candidate_job_step" edge. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithCandidateJobStep(opts ...func(*CandidateJobStepQuery)) *CandidateJobQuery {
	query := &CandidateJobStepQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	cjq.withCandidateJobStep = query
	return cjq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CandidateJob.Query().
//		GroupBy(candidatejob.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cjq *CandidateJobQuery) GroupBy(field string, fields ...string) *CandidateJobGroupBy {
	grbuild := &CandidateJobGroupBy{config: cjq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cjq.sqlQuery(ctx), nil
	}
	grbuild.label = candidatejob.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.CandidateJob.Query().
//		Select(candidatejob.FieldCreatedAt).
//		Scan(ctx, &v)
func (cjq *CandidateJobQuery) Select(fields ...string) *CandidateJobSelect {
	cjq.fields = append(cjq.fields, fields...)
	selbuild := &CandidateJobSelect{CandidateJobQuery: cjq}
	selbuild.label = candidatejob.Label
	selbuild.flds, selbuild.scan = &cjq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a CandidateJobSelect configured with the given aggregations.
func (cjq *CandidateJobQuery) Aggregate(fns ...AggregateFunc) *CandidateJobSelect {
	return cjq.Select().Aggregate(fns...)
}

func (cjq *CandidateJobQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cjq.fields {
		if !candidatejob.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cjq.path != nil {
		prev, err := cjq.path(ctx)
		if err != nil {
			return err
		}
		cjq.sql = prev
	}
	return nil
}

func (cjq *CandidateJobQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CandidateJob, error) {
	var (
		nodes       = []*CandidateJob{}
		_spec       = cjq.querySpec()
		loadedTypes = [7]bool{
			cjq.withAttachmentEdges != nil,
			cjq.withHiringJobEdge != nil,
			cjq.withCandidateJobFeedback != nil,
			cjq.withCandidateEdge != nil,
			cjq.withCandidateJobInterview != nil,
			cjq.withCreatedByEdge != nil,
			cjq.withCandidateJobStep != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CandidateJob).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CandidateJob{config: cjq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cjq.modifiers) > 0 {
		_spec.Modifiers = cjq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cjq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cjq.withAttachmentEdges; query != nil {
		if err := cjq.loadAttachmentEdges(ctx, query, nodes,
			func(n *CandidateJob) { n.Edges.AttachmentEdges = []*Attachment{} },
			func(n *CandidateJob, e *Attachment) { n.Edges.AttachmentEdges = append(n.Edges.AttachmentEdges, e) }); err != nil {
			return nil, err
		}
	}
	if query := cjq.withHiringJobEdge; query != nil {
		if err := cjq.loadHiringJobEdge(ctx, query, nodes, nil,
			func(n *CandidateJob, e *HiringJob) { n.Edges.HiringJobEdge = e }); err != nil {
			return nil, err
		}
	}
	if query := cjq.withCandidateJobFeedback; query != nil {
		if err := cjq.loadCandidateJobFeedback(ctx, query, nodes,
			func(n *CandidateJob) { n.Edges.CandidateJobFeedback = []*CandidateJobFeedback{} },
			func(n *CandidateJob, e *CandidateJobFeedback) {
				n.Edges.CandidateJobFeedback = append(n.Edges.CandidateJobFeedback, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cjq.withCandidateEdge; query != nil {
		if err := cjq.loadCandidateEdge(ctx, query, nodes, nil,
			func(n *CandidateJob, e *Candidate) { n.Edges.CandidateEdge = e }); err != nil {
			return nil, err
		}
	}
	if query := cjq.withCandidateJobInterview; query != nil {
		if err := cjq.loadCandidateJobInterview(ctx, query, nodes,
			func(n *CandidateJob) { n.Edges.CandidateJobInterview = []*CandidateInterview{} },
			func(n *CandidateJob, e *CandidateInterview) {
				n.Edges.CandidateJobInterview = append(n.Edges.CandidateJobInterview, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cjq.withCreatedByEdge; query != nil {
		if err := cjq.loadCreatedByEdge(ctx, query, nodes, nil,
			func(n *CandidateJob, e *User) { n.Edges.CreatedByEdge = e }); err != nil {
			return nil, err
		}
	}
	if query := cjq.withCandidateJobStep; query != nil {
		if err := cjq.loadCandidateJobStep(ctx, query, nodes,
			func(n *CandidateJob) { n.Edges.CandidateJobStep = []*CandidateJobStep{} },
			func(n *CandidateJob, e *CandidateJobStep) {
				n.Edges.CandidateJobStep = append(n.Edges.CandidateJobStep, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cjq.withNamedAttachmentEdges {
		if err := cjq.loadAttachmentEdges(ctx, query, nodes,
			func(n *CandidateJob) { n.appendNamedAttachmentEdges(name) },
			func(n *CandidateJob, e *Attachment) { n.appendNamedAttachmentEdges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cjq.withNamedCandidateJobFeedback {
		if err := cjq.loadCandidateJobFeedback(ctx, query, nodes,
			func(n *CandidateJob) { n.appendNamedCandidateJobFeedback(name) },
			func(n *CandidateJob, e *CandidateJobFeedback) { n.appendNamedCandidateJobFeedback(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cjq.withNamedCandidateJobInterview {
		if err := cjq.loadCandidateJobInterview(ctx, query, nodes,
			func(n *CandidateJob) { n.appendNamedCandidateJobInterview(name) },
			func(n *CandidateJob, e *CandidateInterview) { n.appendNamedCandidateJobInterview(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cjq.withNamedCandidateJobStep {
		if err := cjq.loadCandidateJobStep(ctx, query, nodes,
			func(n *CandidateJob) { n.appendNamedCandidateJobStep(name) },
			func(n *CandidateJob, e *CandidateJobStep) { n.appendNamedCandidateJobStep(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cjq.loadTotal {
		if err := cjq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cjq *CandidateJobQuery) loadAttachmentEdges(ctx context.Context, query *AttachmentQuery, nodes []*CandidateJob, init func(*CandidateJob), assign func(*CandidateJob, *Attachment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*CandidateJob)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Attachment(func(s *sql.Selector) {
		s.Where(sql.InValues(candidatejob.AttachmentEdgesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RelationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "relation_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cjq *CandidateJobQuery) loadHiringJobEdge(ctx context.Context, query *HiringJobQuery, nodes []*CandidateJob, init func(*CandidateJob), assign func(*CandidateJob, *HiringJob)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CandidateJob)
	for i := range nodes {
		fk := nodes[i].HiringJobID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(hiringjob.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hiring_job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cjq *CandidateJobQuery) loadCandidateJobFeedback(ctx context.Context, query *CandidateJobFeedbackQuery, nodes []*CandidateJob, init func(*CandidateJob), assign func(*CandidateJob, *CandidateJobFeedback)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*CandidateJob)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.InValues(candidatejob.CandidateJobFeedbackColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CandidateJobID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "candidate_job_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cjq *CandidateJobQuery) loadCandidateEdge(ctx context.Context, query *CandidateQuery, nodes []*CandidateJob, init func(*CandidateJob), assign func(*CandidateJob, *Candidate)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CandidateJob)
	for i := range nodes {
		fk := nodes[i].CandidateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(candidate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "candidate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cjq *CandidateJobQuery) loadCandidateJobInterview(ctx context.Context, query *CandidateInterviewQuery, nodes []*CandidateJob, init func(*CandidateJob), assign func(*CandidateJob, *CandidateInterview)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*CandidateJob)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.CandidateInterview(func(s *sql.Selector) {
		s.Where(sql.InValues(candidatejob.CandidateJobInterviewColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CandidateJobID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "candidate_job_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cjq *CandidateJobQuery) loadCreatedByEdge(ctx context.Context, query *UserQuery, nodes []*CandidateJob, init func(*CandidateJob), assign func(*CandidateJob, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CandidateJob)
	for i := range nodes {
		fk := nodes[i].CreatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cjq *CandidateJobQuery) loadCandidateJobStep(ctx context.Context, query *CandidateJobStepQuery, nodes []*CandidateJob, init func(*CandidateJob), assign func(*CandidateJob, *CandidateJobStep)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*CandidateJob)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.CandidateJobStep(func(s *sql.Selector) {
		s.Where(sql.InValues(candidatejob.CandidateJobStepColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CandidateJobID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "candidate_job_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cjq *CandidateJobQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cjq.querySpec()
	if len(cjq.modifiers) > 0 {
		_spec.Modifiers = cjq.modifiers
	}
	_spec.Node.Columns = cjq.fields
	if len(cjq.fields) > 0 {
		_spec.Unique = cjq.unique != nil && *cjq.unique
	}
	return sqlgraph.CountNodes(ctx, cjq.driver, _spec)
}

func (cjq *CandidateJobQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := cjq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (cjq *CandidateJobQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatejob.Table,
			Columns: candidatejob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatejob.FieldID,
			},
		},
		From:   cjq.sql,
		Unique: true,
	}
	if unique := cjq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cjq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidatejob.FieldID)
		for i := range fields {
			if fields[i] != candidatejob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cjq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cjq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cjq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cjq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cjq *CandidateJobQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cjq.driver.Dialect())
	t1 := builder.Table(candidatejob.Table)
	columns := cjq.fields
	if len(columns) == 0 {
		columns = candidatejob.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cjq.sql != nil {
		selector = cjq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cjq.unique != nil && *cjq.unique {
		selector.Distinct()
	}
	for _, p := range cjq.predicates {
		p(selector)
	}
	for _, p := range cjq.order {
		p(selector)
	}
	if offset := cjq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cjq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAttachmentEdges tells the query-builder to eager-load the nodes that are connected to the "attachment_edges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithNamedAttachmentEdges(name string, opts ...func(*AttachmentQuery)) *CandidateJobQuery {
	query := &AttachmentQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	if cjq.withNamedAttachmentEdges == nil {
		cjq.withNamedAttachmentEdges = make(map[string]*AttachmentQuery)
	}
	cjq.withNamedAttachmentEdges[name] = query
	return cjq
}

// WithNamedCandidateJobFeedback tells the query-builder to eager-load the nodes that are connected to the "candidate_job_feedback"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithNamedCandidateJobFeedback(name string, opts ...func(*CandidateJobFeedbackQuery)) *CandidateJobQuery {
	query := &CandidateJobFeedbackQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	if cjq.withNamedCandidateJobFeedback == nil {
		cjq.withNamedCandidateJobFeedback = make(map[string]*CandidateJobFeedbackQuery)
	}
	cjq.withNamedCandidateJobFeedback[name] = query
	return cjq
}

// WithNamedCandidateJobInterview tells the query-builder to eager-load the nodes that are connected to the "candidate_job_interview"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithNamedCandidateJobInterview(name string, opts ...func(*CandidateInterviewQuery)) *CandidateJobQuery {
	query := &CandidateInterviewQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	if cjq.withNamedCandidateJobInterview == nil {
		cjq.withNamedCandidateJobInterview = make(map[string]*CandidateInterviewQuery)
	}
	cjq.withNamedCandidateJobInterview[name] = query
	return cjq
}

// WithNamedCandidateJobStep tells the query-builder to eager-load the nodes that are connected to the "candidate_job_step"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cjq *CandidateJobQuery) WithNamedCandidateJobStep(name string, opts ...func(*CandidateJobStepQuery)) *CandidateJobQuery {
	query := &CandidateJobStepQuery{config: cjq.config}
	for _, opt := range opts {
		opt(query)
	}
	if cjq.withNamedCandidateJobStep == nil {
		cjq.withNamedCandidateJobStep = make(map[string]*CandidateJobStepQuery)
	}
	cjq.withNamedCandidateJobStep[name] = query
	return cjq
}

// CandidateJobGroupBy is the group-by builder for CandidateJob entities.
type CandidateJobGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cjgb *CandidateJobGroupBy) Aggregate(fns ...AggregateFunc) *CandidateJobGroupBy {
	cjgb.fns = append(cjgb.fns, fns...)
	return cjgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cjgb *CandidateJobGroupBy) Scan(ctx context.Context, v any) error {
	query, err := cjgb.path(ctx)
	if err != nil {
		return err
	}
	cjgb.sql = query
	return cjgb.sqlScan(ctx, v)
}

func (cjgb *CandidateJobGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range cjgb.fields {
		if !candidatejob.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cjgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cjgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cjgb *CandidateJobGroupBy) sqlQuery() *sql.Selector {
	selector := cjgb.sql.Select()
	aggregation := make([]string, 0, len(cjgb.fns))
	for _, fn := range cjgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cjgb.fields)+len(cjgb.fns))
		for _, f := range cjgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cjgb.fields...)...)
}

// CandidateJobSelect is the builder for selecting fields of CandidateJob entities.
type CandidateJobSelect struct {
	*CandidateJobQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cjs *CandidateJobSelect) Aggregate(fns ...AggregateFunc) *CandidateJobSelect {
	cjs.fns = append(cjs.fns, fns...)
	return cjs
}

// Scan applies the selector query and scans the result into the given value.
func (cjs *CandidateJobSelect) Scan(ctx context.Context, v any) error {
	if err := cjs.prepareQuery(ctx); err != nil {
		return err
	}
	cjs.sql = cjs.CandidateJobQuery.sqlQuery(ctx)
	return cjs.sqlScan(ctx, v)
}

func (cjs *CandidateJobSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(cjs.fns))
	for _, fn := range cjs.fns {
		aggregation = append(aggregation, fn(cjs.sql))
	}
	switch n := len(*cjs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		cjs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		cjs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := cjs.sql.Query()
	if err := cjs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
