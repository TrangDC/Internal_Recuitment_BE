// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"trec/ent/audittrail"
	"trec/ent/candidateinterview"
	"trec/ent/candidateinterviewer"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/hiringjob"
	"trec/ent/predicate"
	"trec/ent/team"
	"trec/ent/teammanager"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	limit                            *int
	offset                           *int
	unique                           *bool
	order                            []OrderFunc
	fields                           []string
	predicates                       []predicate.User
	withAuditEdge                    *AuditTrailQuery
	withHiringOwner                  *HiringJobQuery
	withTeamEdges                    *TeamQuery
	withCandidateJobFeedback         *CandidateJobFeedbackQuery
	withInterviewEdges               *CandidateInterviewQuery
	withCandidateJobEdges            *CandidateJobQuery
	withCandidateInterviewEdges      *CandidateInterviewQuery
	withTeamUsers                    *TeamManagerQuery
	withInterviewUsers               *CandidateInterviewerQuery
	modifiers                        []func(*sql.Selector)
	loadTotal                        []func(context.Context, []*User) error
	withNamedAuditEdge               map[string]*AuditTrailQuery
	withNamedHiringOwner             map[string]*HiringJobQuery
	withNamedTeamEdges               map[string]*TeamQuery
	withNamedCandidateJobFeedback    map[string]*CandidateJobFeedbackQuery
	withNamedInterviewEdges          map[string]*CandidateInterviewQuery
	withNamedCandidateJobEdges       map[string]*CandidateJobQuery
	withNamedCandidateInterviewEdges map[string]*CandidateInterviewQuery
	withNamedTeamUsers               map[string]*TeamManagerQuery
	withNamedInterviewUsers          map[string]*CandidateInterviewerQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit adds a limit step to the query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.limit = &limit
	return uq
}

// Offset adds an offset step to the query.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.unique = &unique
	return uq
}

// Order adds an order step to the query.
func (uq *UserQuery) Order(o ...OrderFunc) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryAuditEdge chains the current query on the "audit_edge" edge.
func (uq *UserQuery) QueryAuditEdge() *AuditTrailQuery {
	query := &AuditTrailQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(audittrail.Table, audittrail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuditEdgeTable, user.AuditEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHiringOwner chains the current query on the "hiring_owner" edge.
func (uq *UserQuery) QueryHiringOwner() *HiringJobQuery {
	query := &HiringJobQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HiringOwnerTable, user.HiringOwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeamEdges chains the current query on the "team_edges" edge.
func (uq *UserQuery) QueryTeamEdges() *TeamQuery {
	query := &TeamQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.TeamEdgesTable, user.TeamEdgesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCandidateJobFeedback chains the current query on the "candidate_job_feedback" edge.
func (uq *UserQuery) QueryCandidateJobFeedback() *CandidateJobFeedbackQuery {
	query := &CandidateJobFeedbackQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(candidatejobfeedback.Table, candidatejobfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateJobFeedbackTable, user.CandidateJobFeedbackColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInterviewEdges chains the current query on the "interview_edges" edge.
func (uq *UserQuery) QueryInterviewEdges() *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.InterviewEdgesTable, user.InterviewEdgesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCandidateJobEdges chains the current query on the "candidate_job_edges" edge.
func (uq *UserQuery) QueryCandidateJobEdges() *CandidateJobQuery {
	query := &CandidateJobQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateJobEdgesTable, user.CandidateJobEdgesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCandidateInterviewEdges chains the current query on the "candidate_interview_edges" edge.
func (uq *UserQuery) QueryCandidateInterviewEdges() *CandidateInterviewQuery {
	query := &CandidateInterviewQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(candidateinterview.Table, candidateinterview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CandidateInterviewEdgesTable, user.CandidateInterviewEdgesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeamUsers chains the current query on the "team_users" edge.
func (uq *UserQuery) QueryTeamUsers() *TeamManagerQuery {
	query := &TeamManagerQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(teammanager.Table, teammanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.TeamUsersTable, user.TeamUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInterviewUsers chains the current query on the "interview_users" edge.
func (uq *UserQuery) QueryInterviewUsers() *CandidateInterviewerQuery {
	query := &CandidateInterviewerQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(candidateinterviewer.Table, candidateinterviewer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.InterviewUsersTable, user.InterviewUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return uq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return uq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	if err := uq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return uq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                      uq.config,
		limit:                       uq.limit,
		offset:                      uq.offset,
		order:                       append([]OrderFunc{}, uq.order...),
		predicates:                  append([]predicate.User{}, uq.predicates...),
		withAuditEdge:               uq.withAuditEdge.Clone(),
		withHiringOwner:             uq.withHiringOwner.Clone(),
		withTeamEdges:               uq.withTeamEdges.Clone(),
		withCandidateJobFeedback:    uq.withCandidateJobFeedback.Clone(),
		withInterviewEdges:          uq.withInterviewEdges.Clone(),
		withCandidateJobEdges:       uq.withCandidateJobEdges.Clone(),
		withCandidateInterviewEdges: uq.withCandidateInterviewEdges.Clone(),
		withTeamUsers:               uq.withTeamUsers.Clone(),
		withInterviewUsers:          uq.withInterviewUsers.Clone(),
		// clone intermediate query.
		sql:    uq.sql.Clone(),
		path:   uq.path,
		unique: uq.unique,
	}
}

// WithAuditEdge tells the query-builder to eager-load the nodes that are connected to
// the "audit_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAuditEdge(opts ...func(*AuditTrailQuery)) *UserQuery {
	query := &AuditTrailQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withAuditEdge = query
	return uq
}

// WithHiringOwner tells the query-builder to eager-load the nodes that are connected to
// the "hiring_owner" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithHiringOwner(opts ...func(*HiringJobQuery)) *UserQuery {
	query := &HiringJobQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withHiringOwner = query
	return uq
}

// WithTeamEdges tells the query-builder to eager-load the nodes that are connected to
// the "team_edges" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTeamEdges(opts ...func(*TeamQuery)) *UserQuery {
	query := &TeamQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withTeamEdges = query
	return uq
}

// WithCandidateJobFeedback tells the query-builder to eager-load the nodes that are connected to
// the "candidate_job_feedback" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCandidateJobFeedback(opts ...func(*CandidateJobFeedbackQuery)) *UserQuery {
	query := &CandidateJobFeedbackQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withCandidateJobFeedback = query
	return uq
}

// WithInterviewEdges tells the query-builder to eager-load the nodes that are connected to
// the "interview_edges" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithInterviewEdges(opts ...func(*CandidateInterviewQuery)) *UserQuery {
	query := &CandidateInterviewQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withInterviewEdges = query
	return uq
}

// WithCandidateJobEdges tells the query-builder to eager-load the nodes that are connected to
// the "candidate_job_edges" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCandidateJobEdges(opts ...func(*CandidateJobQuery)) *UserQuery {
	query := &CandidateJobQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withCandidateJobEdges = query
	return uq
}

// WithCandidateInterviewEdges tells the query-builder to eager-load the nodes that are connected to
// the "candidate_interview_edges" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCandidateInterviewEdges(opts ...func(*CandidateInterviewQuery)) *UserQuery {
	query := &CandidateInterviewQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withCandidateInterviewEdges = query
	return uq
}

// WithTeamUsers tells the query-builder to eager-load the nodes that are connected to
// the "team_users" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTeamUsers(opts ...func(*TeamManagerQuery)) *UserQuery {
	query := &TeamManagerQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withTeamUsers = query
	return uq
}

// WithInterviewUsers tells the query-builder to eager-load the nodes that are connected to
// the "interview_users" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithInterviewUsers(opts ...func(*CandidateInterviewerQuery)) *UserQuery {
	query := &CandidateInterviewerQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withInterviewUsers = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	grbuild := &UserGroupBy{config: uq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uq.sqlQuery(ctx), nil
	}
	grbuild.label = user.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldCreatedAt).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.fields = append(uq.fields, fields...)
	selbuild := &UserSelect{UserQuery: uq}
	selbuild.label = user.Label
	selbuild.flds, selbuild.scan = &uq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range uq.fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [9]bool{
			uq.withAuditEdge != nil,
			uq.withHiringOwner != nil,
			uq.withTeamEdges != nil,
			uq.withCandidateJobFeedback != nil,
			uq.withInterviewEdges != nil,
			uq.withCandidateJobEdges != nil,
			uq.withCandidateInterviewEdges != nil,
			uq.withTeamUsers != nil,
			uq.withInterviewUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withAuditEdge; query != nil {
		if err := uq.loadAuditEdge(ctx, query, nodes,
			func(n *User) { n.Edges.AuditEdge = []*AuditTrail{} },
			func(n *User, e *AuditTrail) { n.Edges.AuditEdge = append(n.Edges.AuditEdge, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withHiringOwner; query != nil {
		if err := uq.loadHiringOwner(ctx, query, nodes,
			func(n *User) { n.Edges.HiringOwner = []*HiringJob{} },
			func(n *User, e *HiringJob) { n.Edges.HiringOwner = append(n.Edges.HiringOwner, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withTeamEdges; query != nil {
		if err := uq.loadTeamEdges(ctx, query, nodes,
			func(n *User) { n.Edges.TeamEdges = []*Team{} },
			func(n *User, e *Team) { n.Edges.TeamEdges = append(n.Edges.TeamEdges, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCandidateJobFeedback; query != nil {
		if err := uq.loadCandidateJobFeedback(ctx, query, nodes,
			func(n *User) { n.Edges.CandidateJobFeedback = []*CandidateJobFeedback{} },
			func(n *User, e *CandidateJobFeedback) {
				n.Edges.CandidateJobFeedback = append(n.Edges.CandidateJobFeedback, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withInterviewEdges; query != nil {
		if err := uq.loadInterviewEdges(ctx, query, nodes,
			func(n *User) { n.Edges.InterviewEdges = []*CandidateInterview{} },
			func(n *User, e *CandidateInterview) { n.Edges.InterviewEdges = append(n.Edges.InterviewEdges, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCandidateJobEdges; query != nil {
		if err := uq.loadCandidateJobEdges(ctx, query, nodes,
			func(n *User) { n.Edges.CandidateJobEdges = []*CandidateJob{} },
			func(n *User, e *CandidateJob) { n.Edges.CandidateJobEdges = append(n.Edges.CandidateJobEdges, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCandidateInterviewEdges; query != nil {
		if err := uq.loadCandidateInterviewEdges(ctx, query, nodes,
			func(n *User) { n.Edges.CandidateInterviewEdges = []*CandidateInterview{} },
			func(n *User, e *CandidateInterview) {
				n.Edges.CandidateInterviewEdges = append(n.Edges.CandidateInterviewEdges, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withTeamUsers; query != nil {
		if err := uq.loadTeamUsers(ctx, query, nodes,
			func(n *User) { n.Edges.TeamUsers = []*TeamManager{} },
			func(n *User, e *TeamManager) { n.Edges.TeamUsers = append(n.Edges.TeamUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withInterviewUsers; query != nil {
		if err := uq.loadInterviewUsers(ctx, query, nodes,
			func(n *User) { n.Edges.InterviewUsers = []*CandidateInterviewer{} },
			func(n *User, e *CandidateInterviewer) { n.Edges.InterviewUsers = append(n.Edges.InterviewUsers, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedAuditEdge {
		if err := uq.loadAuditEdge(ctx, query, nodes,
			func(n *User) { n.appendNamedAuditEdge(name) },
			func(n *User, e *AuditTrail) { n.appendNamedAuditEdge(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedHiringOwner {
		if err := uq.loadHiringOwner(ctx, query, nodes,
			func(n *User) { n.appendNamedHiringOwner(name) },
			func(n *User, e *HiringJob) { n.appendNamedHiringOwner(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedTeamEdges {
		if err := uq.loadTeamEdges(ctx, query, nodes,
			func(n *User) { n.appendNamedTeamEdges(name) },
			func(n *User, e *Team) { n.appendNamedTeamEdges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedCandidateJobFeedback {
		if err := uq.loadCandidateJobFeedback(ctx, query, nodes,
			func(n *User) { n.appendNamedCandidateJobFeedback(name) },
			func(n *User, e *CandidateJobFeedback) { n.appendNamedCandidateJobFeedback(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedInterviewEdges {
		if err := uq.loadInterviewEdges(ctx, query, nodes,
			func(n *User) { n.appendNamedInterviewEdges(name) },
			func(n *User, e *CandidateInterview) { n.appendNamedInterviewEdges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedCandidateJobEdges {
		if err := uq.loadCandidateJobEdges(ctx, query, nodes,
			func(n *User) { n.appendNamedCandidateJobEdges(name) },
			func(n *User, e *CandidateJob) { n.appendNamedCandidateJobEdges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedCandidateInterviewEdges {
		if err := uq.loadCandidateInterviewEdges(ctx, query, nodes,
			func(n *User) { n.appendNamedCandidateInterviewEdges(name) },
			func(n *User, e *CandidateInterview) { n.appendNamedCandidateInterviewEdges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedTeamUsers {
		if err := uq.loadTeamUsers(ctx, query, nodes,
			func(n *User) { n.appendNamedTeamUsers(name) },
			func(n *User, e *TeamManager) { n.appendNamedTeamUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedInterviewUsers {
		if err := uq.loadInterviewUsers(ctx, query, nodes,
			func(n *User) { n.appendNamedInterviewUsers(name) },
			func(n *User, e *CandidateInterviewer) { n.appendNamedInterviewUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range uq.loadTotal {
		if err := uq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadAuditEdge(ctx context.Context, query *AuditTrailQuery, nodes []*User, init func(*User), assign func(*User, *AuditTrail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.InValues(user.AuditEdgeColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadHiringOwner(ctx context.Context, query *HiringJobQuery, nodes []*User, init func(*User), assign func(*User, *HiringJob)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.InValues(user.HiringOwnerColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadTeamEdges(ctx context.Context, query *TeamQuery, nodes []*User, init func(*User), assign func(*User, *Team)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*User)
	nids := make(map[uuid.UUID]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.TeamEdgesTable)
		s.Join(joinT).On(s.C(team.FieldID), joinT.C(user.TeamEdgesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.TeamEdgesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.TeamEdgesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "team_edges" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadCandidateJobFeedback(ctx context.Context, query *CandidateJobFeedbackQuery, nodes []*User, init func(*User), assign func(*User, *CandidateJobFeedback)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.InValues(user.CandidateJobFeedbackColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadInterviewEdges(ctx context.Context, query *CandidateInterviewQuery, nodes []*User, init func(*User), assign func(*User, *CandidateInterview)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*User)
	nids := make(map[uuid.UUID]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.InterviewEdgesTable)
		s.Join(joinT).On(s.C(candidateinterview.FieldID), joinT.C(user.InterviewEdgesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.InterviewEdgesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.InterviewEdgesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "interview_edges" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadCandidateJobEdges(ctx context.Context, query *CandidateJobQuery, nodes []*User, init func(*User), assign func(*User, *CandidateJob)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.CandidateJob(func(s *sql.Selector) {
		s.Where(sql.InValues(user.CandidateJobEdgesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCandidateInterviewEdges(ctx context.Context, query *CandidateInterviewQuery, nodes []*User, init func(*User), assign func(*User, *CandidateInterview)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.CandidateInterview(func(s *sql.Selector) {
		s.Where(sql.InValues(user.CandidateInterviewEdgesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatedBy
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadTeamUsers(ctx context.Context, query *TeamManagerQuery, nodes []*User, init func(*User), assign func(*User, *TeamManager)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.TeamManager(func(s *sql.Selector) {
		s.Where(sql.InValues(user.TeamUsersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadInterviewUsers(ctx context.Context, query *CandidateInterviewerQuery, nodes []*User, init func(*User), assign func(*User, *CandidateInterviewer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.CandidateInterviewer(func(s *sql.Selector) {
		s.Where(sql.InValues(user.InterviewUsersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	_spec.Node.Columns = uq.fields
	if len(uq.fields) > 0 {
		_spec.Unique = uq.unique != nil && *uq.unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
		From:   uq.sql,
		Unique: true,
	}
	if unique := uq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := uq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.unique != nil && *uq.unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAuditEdge tells the query-builder to eager-load the nodes that are connected to the "audit_edge"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedAuditEdge(name string, opts ...func(*AuditTrailQuery)) *UserQuery {
	query := &AuditTrailQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedAuditEdge == nil {
		uq.withNamedAuditEdge = make(map[string]*AuditTrailQuery)
	}
	uq.withNamedAuditEdge[name] = query
	return uq
}

// WithNamedHiringOwner tells the query-builder to eager-load the nodes that are connected to the "hiring_owner"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedHiringOwner(name string, opts ...func(*HiringJobQuery)) *UserQuery {
	query := &HiringJobQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedHiringOwner == nil {
		uq.withNamedHiringOwner = make(map[string]*HiringJobQuery)
	}
	uq.withNamedHiringOwner[name] = query
	return uq
}

// WithNamedTeamEdges tells the query-builder to eager-load the nodes that are connected to the "team_edges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedTeamEdges(name string, opts ...func(*TeamQuery)) *UserQuery {
	query := &TeamQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedTeamEdges == nil {
		uq.withNamedTeamEdges = make(map[string]*TeamQuery)
	}
	uq.withNamedTeamEdges[name] = query
	return uq
}

// WithNamedCandidateJobFeedback tells the query-builder to eager-load the nodes that are connected to the "candidate_job_feedback"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedCandidateJobFeedback(name string, opts ...func(*CandidateJobFeedbackQuery)) *UserQuery {
	query := &CandidateJobFeedbackQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedCandidateJobFeedback == nil {
		uq.withNamedCandidateJobFeedback = make(map[string]*CandidateJobFeedbackQuery)
	}
	uq.withNamedCandidateJobFeedback[name] = query
	return uq
}

// WithNamedInterviewEdges tells the query-builder to eager-load the nodes that are connected to the "interview_edges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedInterviewEdges(name string, opts ...func(*CandidateInterviewQuery)) *UserQuery {
	query := &CandidateInterviewQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedInterviewEdges == nil {
		uq.withNamedInterviewEdges = make(map[string]*CandidateInterviewQuery)
	}
	uq.withNamedInterviewEdges[name] = query
	return uq
}

// WithNamedCandidateJobEdges tells the query-builder to eager-load the nodes that are connected to the "candidate_job_edges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedCandidateJobEdges(name string, opts ...func(*CandidateJobQuery)) *UserQuery {
	query := &CandidateJobQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedCandidateJobEdges == nil {
		uq.withNamedCandidateJobEdges = make(map[string]*CandidateJobQuery)
	}
	uq.withNamedCandidateJobEdges[name] = query
	return uq
}

// WithNamedCandidateInterviewEdges tells the query-builder to eager-load the nodes that are connected to the "candidate_interview_edges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedCandidateInterviewEdges(name string, opts ...func(*CandidateInterviewQuery)) *UserQuery {
	query := &CandidateInterviewQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedCandidateInterviewEdges == nil {
		uq.withNamedCandidateInterviewEdges = make(map[string]*CandidateInterviewQuery)
	}
	uq.withNamedCandidateInterviewEdges[name] = query
	return uq
}

// WithNamedTeamUsers tells the query-builder to eager-load the nodes that are connected to the "team_users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedTeamUsers(name string, opts ...func(*TeamManagerQuery)) *UserQuery {
	query := &TeamManagerQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedTeamUsers == nil {
		uq.withNamedTeamUsers = make(map[string]*TeamManagerQuery)
	}
	uq.withNamedTeamUsers[name] = query
	return uq
}

// WithNamedInterviewUsers tells the query-builder to eager-load the nodes that are connected to the "interview_users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedInterviewUsers(name string, opts ...func(*CandidateInterviewerQuery)) *UserQuery {
	query := &CandidateInterviewerQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedInterviewUsers == nil {
		uq.withNamedInterviewUsers = make(map[string]*CandidateInterviewerQuery)
	}
	uq.withNamedInterviewUsers[name] = query
	return uq
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the group-by query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ugb.path(ctx)
	if err != nil {
		return err
	}
	ugb.sql = query
	return ugb.sqlScan(ctx, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ugb.fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ugb *UserGroupBy) sqlQuery() *sql.Selector {
	selector := ugb.sql.Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ugb.fields)+len(ugb.fns))
		for _, f := range ugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ugb.fields...)...)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	us.sql = us.UserQuery.sqlQuery(ctx)
	return us.sqlScan(ctx, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(us.sql))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		us.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		us.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := us.sql.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
