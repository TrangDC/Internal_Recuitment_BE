// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"trec/ent/hiringjob"
	"trec/ent/hiringteam"
	"trec/ent/hiringteammanager"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HiringTeamQuery is the builder for querying HiringTeam entities.
type HiringTeamQuery struct {
	config
	limit                       *int
	offset                      *int
	unique                      *bool
	order                       []OrderFunc
	fields                      []string
	predicates                  []predicate.HiringTeam
	withUserEdges               *UserQuery
	withHiringTeamJobEdges      *HiringJobQuery
	withUserHiringTeams         *HiringTeamManagerQuery
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*HiringTeam) error
	withNamedUserEdges          map[string]*UserQuery
	withNamedHiringTeamJobEdges map[string]*HiringJobQuery
	withNamedUserHiringTeams    map[string]*HiringTeamManagerQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HiringTeamQuery builder.
func (htq *HiringTeamQuery) Where(ps ...predicate.HiringTeam) *HiringTeamQuery {
	htq.predicates = append(htq.predicates, ps...)
	return htq
}

// Limit adds a limit step to the query.
func (htq *HiringTeamQuery) Limit(limit int) *HiringTeamQuery {
	htq.limit = &limit
	return htq
}

// Offset adds an offset step to the query.
func (htq *HiringTeamQuery) Offset(offset int) *HiringTeamQuery {
	htq.offset = &offset
	return htq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (htq *HiringTeamQuery) Unique(unique bool) *HiringTeamQuery {
	htq.unique = &unique
	return htq
}

// Order adds an order step to the query.
func (htq *HiringTeamQuery) Order(o ...OrderFunc) *HiringTeamQuery {
	htq.order = append(htq.order, o...)
	return htq
}

// QueryUserEdges chains the current query on the "user_edges" edge.
func (htq *HiringTeamQuery) QueryUserEdges() *UserQuery {
	query := &UserQuery{config: htq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteam.Table, hiringteam.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hiringteam.UserEdgesTable, hiringteam.UserEdgesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(htq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHiringTeamJobEdges chains the current query on the "hiring_team_job_edges" edge.
func (htq *HiringTeamQuery) QueryHiringTeamJobEdges() *HiringJobQuery {
	query := &HiringJobQuery{config: htq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteam.Table, hiringteam.FieldID, selector),
			sqlgraph.To(hiringjob.Table, hiringjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hiringteam.HiringTeamJobEdgesTable, hiringteam.HiringTeamJobEdgesColumn),
		)
		fromU = sqlgraph.SetNeighbors(htq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserHiringTeams chains the current query on the "user_hiring_teams" edge.
func (htq *HiringTeamQuery) QueryUserHiringTeams() *HiringTeamManagerQuery {
	query := &HiringTeamManagerQuery{config: htq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteam.Table, hiringteam.FieldID, selector),
			sqlgraph.To(hiringteammanager.Table, hiringteammanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hiringteam.UserHiringTeamsTable, hiringteam.UserHiringTeamsColumn),
		)
		fromU = sqlgraph.SetNeighbors(htq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HiringTeam entity from the query.
// Returns a *NotFoundError when no HiringTeam was found.
func (htq *HiringTeamQuery) First(ctx context.Context) (*HiringTeam, error) {
	nodes, err := htq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hiringteam.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (htq *HiringTeamQuery) FirstX(ctx context.Context) *HiringTeam {
	node, err := htq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HiringTeam ID from the query.
// Returns a *NotFoundError when no HiringTeam ID was found.
func (htq *HiringTeamQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = htq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hiringteam.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (htq *HiringTeamQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := htq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HiringTeam entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HiringTeam entity is found.
// Returns a *NotFoundError when no HiringTeam entities are found.
func (htq *HiringTeamQuery) Only(ctx context.Context) (*HiringTeam, error) {
	nodes, err := htq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hiringteam.Label}
	default:
		return nil, &NotSingularError{hiringteam.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (htq *HiringTeamQuery) OnlyX(ctx context.Context) *HiringTeam {
	node, err := htq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HiringTeam ID in the query.
// Returns a *NotSingularError when more than one HiringTeam ID is found.
// Returns a *NotFoundError when no entities are found.
func (htq *HiringTeamQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = htq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hiringteam.Label}
	default:
		err = &NotSingularError{hiringteam.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (htq *HiringTeamQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := htq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HiringTeams.
func (htq *HiringTeamQuery) All(ctx context.Context) ([]*HiringTeam, error) {
	if err := htq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return htq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (htq *HiringTeamQuery) AllX(ctx context.Context) []*HiringTeam {
	nodes, err := htq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HiringTeam IDs.
func (htq *HiringTeamQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := htq.Select(hiringteam.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (htq *HiringTeamQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := htq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (htq *HiringTeamQuery) Count(ctx context.Context) (int, error) {
	if err := htq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return htq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (htq *HiringTeamQuery) CountX(ctx context.Context) int {
	count, err := htq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (htq *HiringTeamQuery) Exist(ctx context.Context) (bool, error) {
	if err := htq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return htq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (htq *HiringTeamQuery) ExistX(ctx context.Context) bool {
	exist, err := htq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HiringTeamQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (htq *HiringTeamQuery) Clone() *HiringTeamQuery {
	if htq == nil {
		return nil
	}
	return &HiringTeamQuery{
		config:                 htq.config,
		limit:                  htq.limit,
		offset:                 htq.offset,
		order:                  append([]OrderFunc{}, htq.order...),
		predicates:             append([]predicate.HiringTeam{}, htq.predicates...),
		withUserEdges:          htq.withUserEdges.Clone(),
		withHiringTeamJobEdges: htq.withHiringTeamJobEdges.Clone(),
		withUserHiringTeams:    htq.withUserHiringTeams.Clone(),
		// clone intermediate query.
		sql:    htq.sql.Clone(),
		path:   htq.path,
		unique: htq.unique,
	}
}

// WithUserEdges tells the query-builder to eager-load the nodes that are connected to
// the "user_edges" edge. The optional arguments are used to configure the query builder of the edge.
func (htq *HiringTeamQuery) WithUserEdges(opts ...func(*UserQuery)) *HiringTeamQuery {
	query := &UserQuery{config: htq.config}
	for _, opt := range opts {
		opt(query)
	}
	htq.withUserEdges = query
	return htq
}

// WithHiringTeamJobEdges tells the query-builder to eager-load the nodes that are connected to
// the "hiring_team_job_edges" edge. The optional arguments are used to configure the query builder of the edge.
func (htq *HiringTeamQuery) WithHiringTeamJobEdges(opts ...func(*HiringJobQuery)) *HiringTeamQuery {
	query := &HiringJobQuery{config: htq.config}
	for _, opt := range opts {
		opt(query)
	}
	htq.withHiringTeamJobEdges = query
	return htq
}

// WithUserHiringTeams tells the query-builder to eager-load the nodes that are connected to
// the "user_hiring_teams" edge. The optional arguments are used to configure the query builder of the edge.
func (htq *HiringTeamQuery) WithUserHiringTeams(opts ...func(*HiringTeamManagerQuery)) *HiringTeamQuery {
	query := &HiringTeamManagerQuery{config: htq.config}
	for _, opt := range opts {
		opt(query)
	}
	htq.withUserHiringTeams = query
	return htq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HiringTeam.Query().
//		GroupBy(hiringteam.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (htq *HiringTeamQuery) GroupBy(field string, fields ...string) *HiringTeamGroupBy {
	grbuild := &HiringTeamGroupBy{config: htq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := htq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return htq.sqlQuery(ctx), nil
	}
	grbuild.label = hiringteam.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.HiringTeam.Query().
//		Select(hiringteam.FieldCreatedAt).
//		Scan(ctx, &v)
func (htq *HiringTeamQuery) Select(fields ...string) *HiringTeamSelect {
	htq.fields = append(htq.fields, fields...)
	selbuild := &HiringTeamSelect{HiringTeamQuery: htq}
	selbuild.label = hiringteam.Label
	selbuild.flds, selbuild.scan = &htq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a HiringTeamSelect configured with the given aggregations.
func (htq *HiringTeamQuery) Aggregate(fns ...AggregateFunc) *HiringTeamSelect {
	return htq.Select().Aggregate(fns...)
}

func (htq *HiringTeamQuery) prepareQuery(ctx context.Context) error {
	for _, f := range htq.fields {
		if !hiringteam.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if htq.path != nil {
		prev, err := htq.path(ctx)
		if err != nil {
			return err
		}
		htq.sql = prev
	}
	return nil
}

func (htq *HiringTeamQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HiringTeam, error) {
	var (
		nodes       = []*HiringTeam{}
		_spec       = htq.querySpec()
		loadedTypes = [3]bool{
			htq.withUserEdges != nil,
			htq.withHiringTeamJobEdges != nil,
			htq.withUserHiringTeams != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HiringTeam).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HiringTeam{config: htq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(htq.modifiers) > 0 {
		_spec.Modifiers = htq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, htq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := htq.withUserEdges; query != nil {
		if err := htq.loadUserEdges(ctx, query, nodes,
			func(n *HiringTeam) { n.Edges.UserEdges = []*User{} },
			func(n *HiringTeam, e *User) { n.Edges.UserEdges = append(n.Edges.UserEdges, e) }); err != nil {
			return nil, err
		}
	}
	if query := htq.withHiringTeamJobEdges; query != nil {
		if err := htq.loadHiringTeamJobEdges(ctx, query, nodes,
			func(n *HiringTeam) { n.Edges.HiringTeamJobEdges = []*HiringJob{} },
			func(n *HiringTeam, e *HiringJob) { n.Edges.HiringTeamJobEdges = append(n.Edges.HiringTeamJobEdges, e) }); err != nil {
			return nil, err
		}
	}
	if query := htq.withUserHiringTeams; query != nil {
		if err := htq.loadUserHiringTeams(ctx, query, nodes,
			func(n *HiringTeam) { n.Edges.UserHiringTeams = []*HiringTeamManager{} },
			func(n *HiringTeam, e *HiringTeamManager) {
				n.Edges.UserHiringTeams = append(n.Edges.UserHiringTeams, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range htq.withNamedUserEdges {
		if err := htq.loadUserEdges(ctx, query, nodes,
			func(n *HiringTeam) { n.appendNamedUserEdges(name) },
			func(n *HiringTeam, e *User) { n.appendNamedUserEdges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range htq.withNamedHiringTeamJobEdges {
		if err := htq.loadHiringTeamJobEdges(ctx, query, nodes,
			func(n *HiringTeam) { n.appendNamedHiringTeamJobEdges(name) },
			func(n *HiringTeam, e *HiringJob) { n.appendNamedHiringTeamJobEdges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range htq.withNamedUserHiringTeams {
		if err := htq.loadUserHiringTeams(ctx, query, nodes,
			func(n *HiringTeam) { n.appendNamedUserHiringTeams(name) },
			func(n *HiringTeam, e *HiringTeamManager) { n.appendNamedUserHiringTeams(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range htq.loadTotal {
		if err := htq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (htq *HiringTeamQuery) loadUserEdges(ctx context.Context, query *UserQuery, nodes []*HiringTeam, init func(*HiringTeam), assign func(*HiringTeam, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*HiringTeam)
	nids := make(map[uuid.UUID]map[*HiringTeam]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hiringteam.UserEdgesTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(hiringteam.UserEdgesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(hiringteam.UserEdgesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hiringteam.UserEdgesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*HiringTeam]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "user_edges" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (htq *HiringTeamQuery) loadHiringTeamJobEdges(ctx context.Context, query *HiringJobQuery, nodes []*HiringTeam, init func(*HiringTeam), assign func(*HiringTeam, *HiringJob)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*HiringTeam)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.InValues(hiringteam.HiringTeamJobEdgesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.HiringTeamID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hiring_team_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (htq *HiringTeamQuery) loadUserHiringTeams(ctx context.Context, query *HiringTeamManagerQuery, nodes []*HiringTeam, init func(*HiringTeam), assign func(*HiringTeam, *HiringTeamManager)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*HiringTeam)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.HiringTeamManager(func(s *sql.Selector) {
		s.Where(sql.InValues(hiringteam.UserHiringTeamsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.HiringTeamID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hiring_team_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (htq *HiringTeamQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := htq.querySpec()
	if len(htq.modifiers) > 0 {
		_spec.Modifiers = htq.modifiers
	}
	_spec.Node.Columns = htq.fields
	if len(htq.fields) > 0 {
		_spec.Unique = htq.unique != nil && *htq.unique
	}
	return sqlgraph.CountNodes(ctx, htq.driver, _spec)
}

func (htq *HiringTeamQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := htq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (htq *HiringTeamQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringteam.Table,
			Columns: hiringteam.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringteam.FieldID,
			},
		},
		From:   htq.sql,
		Unique: true,
	}
	if unique := htq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := htq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hiringteam.FieldID)
		for i := range fields {
			if fields[i] != hiringteam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := htq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := htq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := htq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := htq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (htq *HiringTeamQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(htq.driver.Dialect())
	t1 := builder.Table(hiringteam.Table)
	columns := htq.fields
	if len(columns) == 0 {
		columns = hiringteam.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if htq.sql != nil {
		selector = htq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if htq.unique != nil && *htq.unique {
		selector.Distinct()
	}
	for _, p := range htq.predicates {
		p(selector)
	}
	for _, p := range htq.order {
		p(selector)
	}
	if offset := htq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := htq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedUserEdges tells the query-builder to eager-load the nodes that are connected to the "user_edges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (htq *HiringTeamQuery) WithNamedUserEdges(name string, opts ...func(*UserQuery)) *HiringTeamQuery {
	query := &UserQuery{config: htq.config}
	for _, opt := range opts {
		opt(query)
	}
	if htq.withNamedUserEdges == nil {
		htq.withNamedUserEdges = make(map[string]*UserQuery)
	}
	htq.withNamedUserEdges[name] = query
	return htq
}

// WithNamedHiringTeamJobEdges tells the query-builder to eager-load the nodes that are connected to the "hiring_team_job_edges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (htq *HiringTeamQuery) WithNamedHiringTeamJobEdges(name string, opts ...func(*HiringJobQuery)) *HiringTeamQuery {
	query := &HiringJobQuery{config: htq.config}
	for _, opt := range opts {
		opt(query)
	}
	if htq.withNamedHiringTeamJobEdges == nil {
		htq.withNamedHiringTeamJobEdges = make(map[string]*HiringJobQuery)
	}
	htq.withNamedHiringTeamJobEdges[name] = query
	return htq
}

// WithNamedUserHiringTeams tells the query-builder to eager-load the nodes that are connected to the "user_hiring_teams"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (htq *HiringTeamQuery) WithNamedUserHiringTeams(name string, opts ...func(*HiringTeamManagerQuery)) *HiringTeamQuery {
	query := &HiringTeamManagerQuery{config: htq.config}
	for _, opt := range opts {
		opt(query)
	}
	if htq.withNamedUserHiringTeams == nil {
		htq.withNamedUserHiringTeams = make(map[string]*HiringTeamManagerQuery)
	}
	htq.withNamedUserHiringTeams[name] = query
	return htq
}

// HiringTeamGroupBy is the group-by builder for HiringTeam entities.
type HiringTeamGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (htgb *HiringTeamGroupBy) Aggregate(fns ...AggregateFunc) *HiringTeamGroupBy {
	htgb.fns = append(htgb.fns, fns...)
	return htgb
}

// Scan applies the group-by query and scans the result into the given value.
func (htgb *HiringTeamGroupBy) Scan(ctx context.Context, v any) error {
	query, err := htgb.path(ctx)
	if err != nil {
		return err
	}
	htgb.sql = query
	return htgb.sqlScan(ctx, v)
}

func (htgb *HiringTeamGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range htgb.fields {
		if !hiringteam.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := htgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (htgb *HiringTeamGroupBy) sqlQuery() *sql.Selector {
	selector := htgb.sql.Select()
	aggregation := make([]string, 0, len(htgb.fns))
	for _, fn := range htgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(htgb.fields)+len(htgb.fns))
		for _, f := range htgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(htgb.fields...)...)
}

// HiringTeamSelect is the builder for selecting fields of HiringTeam entities.
type HiringTeamSelect struct {
	*HiringTeamQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hts *HiringTeamSelect) Aggregate(fns ...AggregateFunc) *HiringTeamSelect {
	hts.fns = append(hts.fns, fns...)
	return hts
}

// Scan applies the selector query and scans the result into the given value.
func (hts *HiringTeamSelect) Scan(ctx context.Context, v any) error {
	if err := hts.prepareQuery(ctx); err != nil {
		return err
	}
	hts.sql = hts.HiringTeamQuery.sqlQuery(ctx)
	return hts.sqlScan(ctx, v)
}

func (hts *HiringTeamSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(hts.fns))
	for _, fn := range hts.fns {
		aggregation = append(aggregation, fn(hts.sql))
	}
	switch n := len(*hts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		hts.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		hts.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := hts.sql.Query()
	if err := hts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
