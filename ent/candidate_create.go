// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/candidate"
	"trec/ent/candidatejob"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateCreate is the builder for creating a Candidate entity.
type CandidateCreate struct {
	config
	mutation *CandidateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *CandidateCreate) SetCreatedAt(t time.Time) *CandidateCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CandidateCreate) SetNillableCreatedAt(t *time.Time) *CandidateCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CandidateCreate) SetUpdatedAt(t time.Time) *CandidateCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CandidateCreate) SetNillableUpdatedAt(t *time.Time) *CandidateCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CandidateCreate) SetDeletedAt(t time.Time) *CandidateCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CandidateCreate) SetNillableDeletedAt(t *time.Time) *CandidateCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CandidateCreate) SetName(s string) *CandidateCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetEmail sets the "email" field.
func (cc *CandidateCreate) SetEmail(s string) *CandidateCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetPhone sets the "phone" field.
func (cc *CandidateCreate) SetPhone(s string) *CandidateCreate {
	cc.mutation.SetPhone(s)
	return cc
}

// SetDob sets the "dob" field.
func (cc *CandidateCreate) SetDob(t time.Time) *CandidateCreate {
	cc.mutation.SetDob(t)
	return cc
}

// SetIsBlacklist sets the "is_blacklist" field.
func (cc *CandidateCreate) SetIsBlacklist(b bool) *CandidateCreate {
	cc.mutation.SetIsBlacklist(b)
	return cc
}

// SetNillableIsBlacklist sets the "is_blacklist" field if the given value is not nil.
func (cc *CandidateCreate) SetNillableIsBlacklist(b *bool) *CandidateCreate {
	if b != nil {
		cc.SetIsBlacklist(*b)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CandidateCreate) SetID(u uuid.UUID) *CandidateCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CandidateCreate) SetNillableID(u *uuid.UUID) *CandidateCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddCandidateJobEdgeIDs adds the "candidate_job_edges" edge to the CandidateJob entity by IDs.
func (cc *CandidateCreate) AddCandidateJobEdgeIDs(ids ...uuid.UUID) *CandidateCreate {
	cc.mutation.AddCandidateJobEdgeIDs(ids...)
	return cc
}

// AddCandidateJobEdges adds the "candidate_job_edges" edges to the CandidateJob entity.
func (cc *CandidateCreate) AddCandidateJobEdges(c ...*CandidateJob) *CandidateCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCandidateJobEdgeIDs(ids...)
}

// Mutation returns the CandidateMutation object of the builder.
func (cc *CandidateCreate) Mutation() *CandidateMutation {
	return cc.mutation
}

// Save creates the Candidate in the database.
func (cc *CandidateCreate) Save(ctx context.Context) (*Candidate, error) {
	var (
		err  error
		node *Candidate
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Candidate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CandidateCreate) SaveX(ctx context.Context) *Candidate {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CandidateCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CandidateCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CandidateCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := candidate.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.IsBlacklist(); !ok {
		v := candidate.DefaultIsBlacklist
		cc.mutation.SetIsBlacklist(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := candidate.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CandidateCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Candidate.created_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Candidate.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := candidate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Candidate.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Candidate.email"`)}
	}
	if v, ok := cc.mutation.Email(); ok {
		if err := candidate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Candidate.email": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Candidate.phone"`)}
	}
	if v, ok := cc.mutation.Phone(); ok {
		if err := candidate.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Candidate.phone": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Dob(); !ok {
		return &ValidationError{Name: "dob", err: errors.New(`ent: missing required field "Candidate.dob"`)}
	}
	if _, ok := cc.mutation.IsBlacklist(); !ok {
		return &ValidationError{Name: "is_blacklist", err: errors.New(`ent: missing required field "Candidate.is_blacklist"`)}
	}
	return nil
}

func (cc *CandidateCreate) sqlSave(ctx context.Context) (*Candidate, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cc *CandidateCreate) createSpec() (*Candidate, *sqlgraph.CreateSpec) {
	var (
		_node = &Candidate{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: candidate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidate.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(candidate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(candidate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(candidate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(candidate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(candidate.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cc.mutation.Phone(); ok {
		_spec.SetField(candidate.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := cc.mutation.Dob(); ok {
		_spec.SetField(candidate.FieldDob, field.TypeTime, value)
		_node.Dob = value
	}
	if value, ok := cc.mutation.IsBlacklist(); ok {
		_spec.SetField(candidate.FieldIsBlacklist, field.TypeBool, value)
		_node.IsBlacklist = value
	}
	if nodes := cc.mutation.CandidateJobEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidate.CandidateJobEdgesTable,
			Columns: []string{candidate.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CandidateCreateBulk is the builder for creating many Candidate entities in bulk.
type CandidateCreateBulk struct {
	config
	builders []*CandidateCreate
}

// Save creates the Candidate entities in the database.
func (ccb *CandidateCreateBulk) Save(ctx context.Context) ([]*Candidate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Candidate, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CandidateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CandidateCreateBulk) SaveX(ctx context.Context) []*Candidate {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CandidateCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CandidateCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
