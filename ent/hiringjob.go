// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/hiringjob"
	"trec/ent/team"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// HiringJob is the model entity for the HiringJob schema.
type HiringJob struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// Status holds the value of the "status" field.
	Status hiringjob.Status `json:"status,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// TeamID holds the value of the "team_id" field.
	TeamID uuid.UUID `json:"team_id,omitempty"`
	// Location holds the value of the "location" field.
	Location hiringjob.Location `json:"location,omitempty"`
	// SalaryType holds the value of the "salary_type" field.
	SalaryType hiringjob.SalaryType `json:"salary_type,omitempty"`
	// SalaryFrom holds the value of the "salary_from" field.
	SalaryFrom int `json:"salary_from,omitempty"`
	// SalaryTo holds the value of the "salary_to" field.
	SalaryTo int `json:"salary_to,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency hiringjob.Currency `json:"currency,omitempty"`
	// LastApplyDate holds the value of the "last_apply_date" field.
	LastApplyDate time.Time `json:"last_apply_date,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HiringJobQuery when eager-loading is set.
	Edges HiringJobEdges `json:"edges"`
}

// HiringJobEdges holds the relations/edges for other nodes in the graph.
type HiringJobEdges struct {
	// OwnerEdge holds the value of the owner_edge edge.
	OwnerEdge *User `json:"owner_edge,omitempty"`
	// TeamEdge holds the value of the team_edge edge.
	TeamEdge *Team `json:"team_edge,omitempty"`
	// CandidateJobEdges holds the value of the candidate_job_edges edge.
	CandidateJobEdges []*CandidateJob `json:"candidate_job_edges,omitempty"`
	// HiringJobSkillEdges holds the value of the hiring_job_skill_edges edge.
	HiringJobSkillEdges []*EntitySkill `json:"hiring_job_skill_edges,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedCandidateJobEdges   map[string][]*CandidateJob
	namedHiringJobSkillEdges map[string][]*EntitySkill
}

// OwnerEdgeOrErr returns the OwnerEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HiringJobEdges) OwnerEdgeOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.OwnerEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.OwnerEdge, nil
	}
	return nil, &NotLoadedError{edge: "owner_edge"}
}

// TeamEdgeOrErr returns the TeamEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HiringJobEdges) TeamEdgeOrErr() (*Team, error) {
	if e.loadedTypes[1] {
		if e.TeamEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.TeamEdge, nil
	}
	return nil, &NotLoadedError{edge: "team_edge"}
}

// CandidateJobEdgesOrErr returns the CandidateJobEdges value or an error if the edge
// was not loaded in eager-loading.
func (e HiringJobEdges) CandidateJobEdgesOrErr() ([]*CandidateJob, error) {
	if e.loadedTypes[2] {
		return e.CandidateJobEdges, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_edges"}
}

// HiringJobSkillEdgesOrErr returns the HiringJobSkillEdges value or an error if the edge
// was not loaded in eager-loading.
func (e HiringJobEdges) HiringJobSkillEdgesOrErr() ([]*EntitySkill, error) {
	if e.loadedTypes[3] {
		return e.HiringJobSkillEdges, nil
	}
	return nil, &NotLoadedError{edge: "hiring_job_skill_edges"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HiringJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hiringjob.FieldAmount, hiringjob.FieldSalaryFrom, hiringjob.FieldSalaryTo, hiringjob.FieldPriority:
			values[i] = new(sql.NullInt64)
		case hiringjob.FieldSlug, hiringjob.FieldName, hiringjob.FieldDescription, hiringjob.FieldStatus, hiringjob.FieldLocation, hiringjob.FieldSalaryType, hiringjob.FieldCurrency:
			values[i] = new(sql.NullString)
		case hiringjob.FieldCreatedAt, hiringjob.FieldUpdatedAt, hiringjob.FieldDeletedAt, hiringjob.FieldLastApplyDate:
			values[i] = new(sql.NullTime)
		case hiringjob.FieldID, hiringjob.FieldCreatedBy, hiringjob.FieldTeamID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type HiringJob", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HiringJob fields.
func (hj *HiringJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hiringjob.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hj.ID = *value
			}
		case hiringjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hj.CreatedAt = value.Time
			}
		case hiringjob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hj.UpdatedAt = value.Time
			}
		case hiringjob.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				hj.DeletedAt = value.Time
			}
		case hiringjob.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				hj.Slug = value.String
			}
		case hiringjob.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				hj.Name = value.String
			}
		case hiringjob.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hj.Description = value.String
			}
		case hiringjob.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				hj.Amount = int(value.Int64)
			}
		case hiringjob.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				hj.Status = hiringjob.Status(value.String)
			}
		case hiringjob.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				hj.CreatedBy = *value
			}
		case hiringjob.FieldTeamID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value != nil {
				hj.TeamID = *value
			}
		case hiringjob.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				hj.Location = hiringjob.Location(value.String)
			}
		case hiringjob.FieldSalaryType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salary_type", values[i])
			} else if value.Valid {
				hj.SalaryType = hiringjob.SalaryType(value.String)
			}
		case hiringjob.FieldSalaryFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field salary_from", values[i])
			} else if value.Valid {
				hj.SalaryFrom = int(value.Int64)
			}
		case hiringjob.FieldSalaryTo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field salary_to", values[i])
			} else if value.Valid {
				hj.SalaryTo = int(value.Int64)
			}
		case hiringjob.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				hj.Currency = hiringjob.Currency(value.String)
			}
		case hiringjob.FieldLastApplyDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_apply_date", values[i])
			} else if value.Valid {
				hj.LastApplyDate = value.Time
			}
		case hiringjob.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				hj.Priority = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwnerEdge queries the "owner_edge" edge of the HiringJob entity.
func (hj *HiringJob) QueryOwnerEdge() *UserQuery {
	return (&HiringJobClient{config: hj.config}).QueryOwnerEdge(hj)
}

// QueryTeamEdge queries the "team_edge" edge of the HiringJob entity.
func (hj *HiringJob) QueryTeamEdge() *TeamQuery {
	return (&HiringJobClient{config: hj.config}).QueryTeamEdge(hj)
}

// QueryCandidateJobEdges queries the "candidate_job_edges" edge of the HiringJob entity.
func (hj *HiringJob) QueryCandidateJobEdges() *CandidateJobQuery {
	return (&HiringJobClient{config: hj.config}).QueryCandidateJobEdges(hj)
}

// QueryHiringJobSkillEdges queries the "hiring_job_skill_edges" edge of the HiringJob entity.
func (hj *HiringJob) QueryHiringJobSkillEdges() *EntitySkillQuery {
	return (&HiringJobClient{config: hj.config}).QueryHiringJobSkillEdges(hj)
}

// Update returns a builder for updating this HiringJob.
// Note that you need to call HiringJob.Unwrap() before calling this method if this HiringJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (hj *HiringJob) Update() *HiringJobUpdateOne {
	return (&HiringJobClient{config: hj.config}).UpdateOne(hj)
}

// Unwrap unwraps the HiringJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hj *HiringJob) Unwrap() *HiringJob {
	_tx, ok := hj.config.driver.(*txDriver)
	if !ok {
		panic("ent: HiringJob is not a transactional entity")
	}
	hj.config.driver = _tx.drv
	return hj
}

// String implements the fmt.Stringer.
func (hj *HiringJob) String() string {
	var builder strings.Builder
	builder.WriteString("HiringJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hj.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hj.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hj.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(hj.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(hj.Slug)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(hj.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(hj.Description)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", hj.Amount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", hj.Status))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", hj.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("team_id=")
	builder.WriteString(fmt.Sprintf("%v", hj.TeamID))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(fmt.Sprintf("%v", hj.Location))
	builder.WriteString(", ")
	builder.WriteString("salary_type=")
	builder.WriteString(fmt.Sprintf("%v", hj.SalaryType))
	builder.WriteString(", ")
	builder.WriteString("salary_from=")
	builder.WriteString(fmt.Sprintf("%v", hj.SalaryFrom))
	builder.WriteString(", ")
	builder.WriteString("salary_to=")
	builder.WriteString(fmt.Sprintf("%v", hj.SalaryTo))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", hj.Currency))
	builder.WriteString(", ")
	builder.WriteString("last_apply_date=")
	builder.WriteString(hj.LastApplyDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", hj.Priority))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCandidateJobEdges returns the CandidateJobEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hj *HiringJob) NamedCandidateJobEdges(name string) ([]*CandidateJob, error) {
	if hj.Edges.namedCandidateJobEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hj.Edges.namedCandidateJobEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hj *HiringJob) appendNamedCandidateJobEdges(name string, edges ...*CandidateJob) {
	if hj.Edges.namedCandidateJobEdges == nil {
		hj.Edges.namedCandidateJobEdges = make(map[string][]*CandidateJob)
	}
	if len(edges) == 0 {
		hj.Edges.namedCandidateJobEdges[name] = []*CandidateJob{}
	} else {
		hj.Edges.namedCandidateJobEdges[name] = append(hj.Edges.namedCandidateJobEdges[name], edges...)
	}
}

// NamedHiringJobSkillEdges returns the HiringJobSkillEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (hj *HiringJob) NamedHiringJobSkillEdges(name string) ([]*EntitySkill, error) {
	if hj.Edges.namedHiringJobSkillEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := hj.Edges.namedHiringJobSkillEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (hj *HiringJob) appendNamedHiringJobSkillEdges(name string, edges ...*EntitySkill) {
	if hj.Edges.namedHiringJobSkillEdges == nil {
		hj.Edges.namedHiringJobSkillEdges = make(map[string][]*EntitySkill)
	}
	if len(edges) == 0 {
		hj.Edges.namedHiringJobSkillEdges[name] = []*EntitySkill{}
	} else {
		hj.Edges.namedHiringJobSkillEdges[name] = append(hj.Edges.namedHiringJobSkillEdges[name], edges...)
	}
}

// HiringJobs is a parsable slice of HiringJob.
type HiringJobs []*HiringJob

func (hj HiringJobs) config(cfg config) {
	for _i := range hj {
		hj[_i].config = cfg
	}
}
