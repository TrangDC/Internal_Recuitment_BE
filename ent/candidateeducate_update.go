// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidateeducate"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateEducateUpdate is the builder for updating CandidateEducate entities.
type CandidateEducateUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateEducateMutation
}

// Where appends a list predicates to the CandidateEducateUpdate builder.
func (ceu *CandidateEducateUpdate) Where(ps ...predicate.CandidateEducate) *CandidateEducateUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetUpdatedAt sets the "updated_at" field.
func (ceu *CandidateEducateUpdate) SetUpdatedAt(t time.Time) *CandidateEducateUpdate {
	ceu.mutation.SetUpdatedAt(t)
	return ceu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateEducateUpdate {
	if t != nil {
		ceu.SetUpdatedAt(*t)
	}
	return ceu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ceu *CandidateEducateUpdate) ClearUpdatedAt() *CandidateEducateUpdate {
	ceu.mutation.ClearUpdatedAt()
	return ceu
}

// SetDeletedAt sets the "deleted_at" field.
func (ceu *CandidateEducateUpdate) SetDeletedAt(t time.Time) *CandidateEducateUpdate {
	ceu.mutation.SetDeletedAt(t)
	return ceu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableDeletedAt(t *time.Time) *CandidateEducateUpdate {
	if t != nil {
		ceu.SetDeletedAt(*t)
	}
	return ceu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ceu *CandidateEducateUpdate) ClearDeletedAt() *CandidateEducateUpdate {
	ceu.mutation.ClearDeletedAt()
	return ceu
}

// SetCandidateID sets the "candidate_id" field.
func (ceu *CandidateEducateUpdate) SetCandidateID(u uuid.UUID) *CandidateEducateUpdate {
	ceu.mutation.SetCandidateID(u)
	return ceu
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableCandidateID(u *uuid.UUID) *CandidateEducateUpdate {
	if u != nil {
		ceu.SetCandidateID(*u)
	}
	return ceu
}

// ClearCandidateID clears the value of the "candidate_id" field.
func (ceu *CandidateEducateUpdate) ClearCandidateID() *CandidateEducateUpdate {
	ceu.mutation.ClearCandidateID()
	return ceu
}

// SetSchoolName sets the "school_name" field.
func (ceu *CandidateEducateUpdate) SetSchoolName(s string) *CandidateEducateUpdate {
	ceu.mutation.SetSchoolName(s)
	return ceu
}

// SetMajor sets the "major" field.
func (ceu *CandidateEducateUpdate) SetMajor(s string) *CandidateEducateUpdate {
	ceu.mutation.SetMajor(s)
	return ceu
}

// SetNillableMajor sets the "major" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableMajor(s *string) *CandidateEducateUpdate {
	if s != nil {
		ceu.SetMajor(*s)
	}
	return ceu
}

// ClearMajor clears the value of the "major" field.
func (ceu *CandidateEducateUpdate) ClearMajor() *CandidateEducateUpdate {
	ceu.mutation.ClearMajor()
	return ceu
}

// SetGpa sets the "gpa" field.
func (ceu *CandidateEducateUpdate) SetGpa(s string) *CandidateEducateUpdate {
	ceu.mutation.SetGpa(s)
	return ceu
}

// SetNillableGpa sets the "gpa" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableGpa(s *string) *CandidateEducateUpdate {
	if s != nil {
		ceu.SetGpa(*s)
	}
	return ceu
}

// ClearGpa clears the value of the "gpa" field.
func (ceu *CandidateEducateUpdate) ClearGpa() *CandidateEducateUpdate {
	ceu.mutation.ClearGpa()
	return ceu
}

// SetLocation sets the "location" field.
func (ceu *CandidateEducateUpdate) SetLocation(s string) *CandidateEducateUpdate {
	ceu.mutation.SetLocation(s)
	return ceu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableLocation(s *string) *CandidateEducateUpdate {
	if s != nil {
		ceu.SetLocation(*s)
	}
	return ceu
}

// ClearLocation clears the value of the "location" field.
func (ceu *CandidateEducateUpdate) ClearLocation() *CandidateEducateUpdate {
	ceu.mutation.ClearLocation()
	return ceu
}

// SetDescription sets the "description" field.
func (ceu *CandidateEducateUpdate) SetDescription(s string) *CandidateEducateUpdate {
	ceu.mutation.SetDescription(s)
	return ceu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableDescription(s *string) *CandidateEducateUpdate {
	if s != nil {
		ceu.SetDescription(*s)
	}
	return ceu
}

// ClearDescription clears the value of the "description" field.
func (ceu *CandidateEducateUpdate) ClearDescription() *CandidateEducateUpdate {
	ceu.mutation.ClearDescription()
	return ceu
}

// SetStartDate sets the "start_date" field.
func (ceu *CandidateEducateUpdate) SetStartDate(t time.Time) *CandidateEducateUpdate {
	ceu.mutation.SetStartDate(t)
	return ceu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableStartDate(t *time.Time) *CandidateEducateUpdate {
	if t != nil {
		ceu.SetStartDate(*t)
	}
	return ceu
}

// ClearStartDate clears the value of the "start_date" field.
func (ceu *CandidateEducateUpdate) ClearStartDate() *CandidateEducateUpdate {
	ceu.mutation.ClearStartDate()
	return ceu
}

// SetEndDate sets the "end_date" field.
func (ceu *CandidateEducateUpdate) SetEndDate(t time.Time) *CandidateEducateUpdate {
	ceu.mutation.SetEndDate(t)
	return ceu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableEndDate(t *time.Time) *CandidateEducateUpdate {
	if t != nil {
		ceu.SetEndDate(*t)
	}
	return ceu
}

// ClearEndDate clears the value of the "end_date" field.
func (ceu *CandidateEducateUpdate) ClearEndDate() *CandidateEducateUpdate {
	ceu.mutation.ClearEndDate()
	return ceu
}

// SetOrderID sets the "order_id" field.
func (ceu *CandidateEducateUpdate) SetOrderID(i int) *CandidateEducateUpdate {
	ceu.mutation.ResetOrderID()
	ceu.mutation.SetOrderID(i)
	return ceu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableOrderID(i *int) *CandidateEducateUpdate {
	if i != nil {
		ceu.SetOrderID(*i)
	}
	return ceu
}

// AddOrderID adds i to the "order_id" field.
func (ceu *CandidateEducateUpdate) AddOrderID(i int) *CandidateEducateUpdate {
	ceu.mutation.AddOrderID(i)
	return ceu
}

// ClearOrderID clears the value of the "order_id" field.
func (ceu *CandidateEducateUpdate) ClearOrderID() *CandidateEducateUpdate {
	ceu.mutation.ClearOrderID()
	return ceu
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (ceu *CandidateEducateUpdate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateEducateUpdate {
	ceu.mutation.AddAttachmentEdgeIDs(ids...)
	return ceu
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (ceu *CandidateEducateUpdate) AddAttachmentEdges(a ...*Attachment) *CandidateEducateUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ceu.AddAttachmentEdgeIDs(ids...)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (ceu *CandidateEducateUpdate) SetCandidateEdgeID(id uuid.UUID) *CandidateEducateUpdate {
	ceu.mutation.SetCandidateEdgeID(id)
	return ceu
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (ceu *CandidateEducateUpdate) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateEducateUpdate {
	if id != nil {
		ceu = ceu.SetCandidateEdgeID(*id)
	}
	return ceu
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (ceu *CandidateEducateUpdate) SetCandidateEdge(c *Candidate) *CandidateEducateUpdate {
	return ceu.SetCandidateEdgeID(c.ID)
}

// Mutation returns the CandidateEducateMutation object of the builder.
func (ceu *CandidateEducateUpdate) Mutation() *CandidateEducateMutation {
	return ceu.mutation
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (ceu *CandidateEducateUpdate) ClearAttachmentEdges() *CandidateEducateUpdate {
	ceu.mutation.ClearAttachmentEdges()
	return ceu
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (ceu *CandidateEducateUpdate) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateEducateUpdate {
	ceu.mutation.RemoveAttachmentEdgeIDs(ids...)
	return ceu
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (ceu *CandidateEducateUpdate) RemoveAttachmentEdges(a ...*Attachment) *CandidateEducateUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ceu.RemoveAttachmentEdgeIDs(ids...)
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (ceu *CandidateEducateUpdate) ClearCandidateEdge() *CandidateEducateUpdate {
	ceu.mutation.ClearCandidateEdge()
	return ceu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *CandidateEducateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ceu.hooks) == 0 {
		if err = ceu.check(); err != nil {
			return 0, err
		}
		affected, err = ceu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateEducateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceu.check(); err != nil {
				return 0, err
			}
			ceu.mutation = mutation
			affected, err = ceu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ceu.hooks) - 1; i >= 0; i-- {
			if ceu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *CandidateEducateUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *CandidateEducateUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *CandidateEducateUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceu *CandidateEducateUpdate) check() error {
	if v, ok := ceu.mutation.SchoolName(); ok {
		if err := candidateeducate.SchoolNameValidator(v); err != nil {
			return &ValidationError{Name: "school_name", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.school_name": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Major(); ok {
		if err := candidateeducate.MajorValidator(v); err != nil {
			return &ValidationError{Name: "major", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.major": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Gpa(); ok {
		if err := candidateeducate.GpaValidator(v); err != nil {
			return &ValidationError{Name: "gpa", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.gpa": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Location(); ok {
		if err := candidateeducate.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.location": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Description(); ok {
		if err := candidateeducate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.description": %w`, err)}
		}
	}
	return nil
}

func (ceu *CandidateEducateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidateeducate.Table,
			Columns: candidateeducate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateeducate.FieldID,
			},
		},
	}
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateeducate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ceu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidateeducate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ceu.mutation.DeletedAt(); ok {
		_spec.SetField(candidateeducate.FieldDeletedAt, field.TypeTime, value)
	}
	if ceu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidateeducate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ceu.mutation.SchoolName(); ok {
		_spec.SetField(candidateeducate.FieldSchoolName, field.TypeString, value)
	}
	if value, ok := ceu.mutation.Major(); ok {
		_spec.SetField(candidateeducate.FieldMajor, field.TypeString, value)
	}
	if ceu.mutation.MajorCleared() {
		_spec.ClearField(candidateeducate.FieldMajor, field.TypeString)
	}
	if value, ok := ceu.mutation.Gpa(); ok {
		_spec.SetField(candidateeducate.FieldGpa, field.TypeString, value)
	}
	if ceu.mutation.GpaCleared() {
		_spec.ClearField(candidateeducate.FieldGpa, field.TypeString)
	}
	if value, ok := ceu.mutation.Location(); ok {
		_spec.SetField(candidateeducate.FieldLocation, field.TypeString, value)
	}
	if ceu.mutation.LocationCleared() {
		_spec.ClearField(candidateeducate.FieldLocation, field.TypeString)
	}
	if value, ok := ceu.mutation.Description(); ok {
		_spec.SetField(candidateeducate.FieldDescription, field.TypeString, value)
	}
	if ceu.mutation.DescriptionCleared() {
		_spec.ClearField(candidateeducate.FieldDescription, field.TypeString)
	}
	if value, ok := ceu.mutation.StartDate(); ok {
		_spec.SetField(candidateeducate.FieldStartDate, field.TypeTime, value)
	}
	if ceu.mutation.StartDateCleared() {
		_spec.ClearField(candidateeducate.FieldStartDate, field.TypeTime)
	}
	if value, ok := ceu.mutation.EndDate(); ok {
		_spec.SetField(candidateeducate.FieldEndDate, field.TypeTime, value)
	}
	if ceu.mutation.EndDateCleared() {
		_spec.ClearField(candidateeducate.FieldEndDate, field.TypeTime)
	}
	if value, ok := ceu.mutation.OrderID(); ok {
		_spec.SetField(candidateeducate.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedOrderID(); ok {
		_spec.AddField(candidateeducate.FieldOrderID, field.TypeInt, value)
	}
	if ceu.mutation.OrderIDCleared() {
		_spec.ClearField(candidateeducate.FieldOrderID, field.TypeInt)
	}
	if ceu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateeducate.AttachmentEdgesTable,
			Columns: []string{candidateeducate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !ceu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateeducate.AttachmentEdgesTable,
			Columns: []string{candidateeducate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateeducate.AttachmentEdgesTable,
			Columns: []string{candidateeducate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateeducate.CandidateEdgeTable,
			Columns: []string{candidateeducate.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateeducate.CandidateEdgeTable,
			Columns: []string{candidateeducate.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidateeducate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateEducateUpdateOne is the builder for updating a single CandidateEducate entity.
type CandidateEducateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateEducateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ceuo *CandidateEducateUpdateOne) SetUpdatedAt(t time.Time) *CandidateEducateUpdateOne {
	ceuo.mutation.SetUpdatedAt(t)
	return ceuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateEducateUpdateOne {
	if t != nil {
		ceuo.SetUpdatedAt(*t)
	}
	return ceuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ceuo *CandidateEducateUpdateOne) ClearUpdatedAt() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearUpdatedAt()
	return ceuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ceuo *CandidateEducateUpdateOne) SetDeletedAt(t time.Time) *CandidateEducateUpdateOne {
	ceuo.mutation.SetDeletedAt(t)
	return ceuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateEducateUpdateOne {
	if t != nil {
		ceuo.SetDeletedAt(*t)
	}
	return ceuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ceuo *CandidateEducateUpdateOne) ClearDeletedAt() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearDeletedAt()
	return ceuo
}

// SetCandidateID sets the "candidate_id" field.
func (ceuo *CandidateEducateUpdateOne) SetCandidateID(u uuid.UUID) *CandidateEducateUpdateOne {
	ceuo.mutation.SetCandidateID(u)
	return ceuo
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableCandidateID(u *uuid.UUID) *CandidateEducateUpdateOne {
	if u != nil {
		ceuo.SetCandidateID(*u)
	}
	return ceuo
}

// ClearCandidateID clears the value of the "candidate_id" field.
func (ceuo *CandidateEducateUpdateOne) ClearCandidateID() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearCandidateID()
	return ceuo
}

// SetSchoolName sets the "school_name" field.
func (ceuo *CandidateEducateUpdateOne) SetSchoolName(s string) *CandidateEducateUpdateOne {
	ceuo.mutation.SetSchoolName(s)
	return ceuo
}

// SetMajor sets the "major" field.
func (ceuo *CandidateEducateUpdateOne) SetMajor(s string) *CandidateEducateUpdateOne {
	ceuo.mutation.SetMajor(s)
	return ceuo
}

// SetNillableMajor sets the "major" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableMajor(s *string) *CandidateEducateUpdateOne {
	if s != nil {
		ceuo.SetMajor(*s)
	}
	return ceuo
}

// ClearMajor clears the value of the "major" field.
func (ceuo *CandidateEducateUpdateOne) ClearMajor() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearMajor()
	return ceuo
}

// SetGpa sets the "gpa" field.
func (ceuo *CandidateEducateUpdateOne) SetGpa(s string) *CandidateEducateUpdateOne {
	ceuo.mutation.SetGpa(s)
	return ceuo
}

// SetNillableGpa sets the "gpa" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableGpa(s *string) *CandidateEducateUpdateOne {
	if s != nil {
		ceuo.SetGpa(*s)
	}
	return ceuo
}

// ClearGpa clears the value of the "gpa" field.
func (ceuo *CandidateEducateUpdateOne) ClearGpa() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearGpa()
	return ceuo
}

// SetLocation sets the "location" field.
func (ceuo *CandidateEducateUpdateOne) SetLocation(s string) *CandidateEducateUpdateOne {
	ceuo.mutation.SetLocation(s)
	return ceuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableLocation(s *string) *CandidateEducateUpdateOne {
	if s != nil {
		ceuo.SetLocation(*s)
	}
	return ceuo
}

// ClearLocation clears the value of the "location" field.
func (ceuo *CandidateEducateUpdateOne) ClearLocation() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearLocation()
	return ceuo
}

// SetDescription sets the "description" field.
func (ceuo *CandidateEducateUpdateOne) SetDescription(s string) *CandidateEducateUpdateOne {
	ceuo.mutation.SetDescription(s)
	return ceuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableDescription(s *string) *CandidateEducateUpdateOne {
	if s != nil {
		ceuo.SetDescription(*s)
	}
	return ceuo
}

// ClearDescription clears the value of the "description" field.
func (ceuo *CandidateEducateUpdateOne) ClearDescription() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearDescription()
	return ceuo
}

// SetStartDate sets the "start_date" field.
func (ceuo *CandidateEducateUpdateOne) SetStartDate(t time.Time) *CandidateEducateUpdateOne {
	ceuo.mutation.SetStartDate(t)
	return ceuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableStartDate(t *time.Time) *CandidateEducateUpdateOne {
	if t != nil {
		ceuo.SetStartDate(*t)
	}
	return ceuo
}

// ClearStartDate clears the value of the "start_date" field.
func (ceuo *CandidateEducateUpdateOne) ClearStartDate() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearStartDate()
	return ceuo
}

// SetEndDate sets the "end_date" field.
func (ceuo *CandidateEducateUpdateOne) SetEndDate(t time.Time) *CandidateEducateUpdateOne {
	ceuo.mutation.SetEndDate(t)
	return ceuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableEndDate(t *time.Time) *CandidateEducateUpdateOne {
	if t != nil {
		ceuo.SetEndDate(*t)
	}
	return ceuo
}

// ClearEndDate clears the value of the "end_date" field.
func (ceuo *CandidateEducateUpdateOne) ClearEndDate() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearEndDate()
	return ceuo
}

// SetOrderID sets the "order_id" field.
func (ceuo *CandidateEducateUpdateOne) SetOrderID(i int) *CandidateEducateUpdateOne {
	ceuo.mutation.ResetOrderID()
	ceuo.mutation.SetOrderID(i)
	return ceuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableOrderID(i *int) *CandidateEducateUpdateOne {
	if i != nil {
		ceuo.SetOrderID(*i)
	}
	return ceuo
}

// AddOrderID adds i to the "order_id" field.
func (ceuo *CandidateEducateUpdateOne) AddOrderID(i int) *CandidateEducateUpdateOne {
	ceuo.mutation.AddOrderID(i)
	return ceuo
}

// ClearOrderID clears the value of the "order_id" field.
func (ceuo *CandidateEducateUpdateOne) ClearOrderID() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearOrderID()
	return ceuo
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (ceuo *CandidateEducateUpdateOne) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateEducateUpdateOne {
	ceuo.mutation.AddAttachmentEdgeIDs(ids...)
	return ceuo
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (ceuo *CandidateEducateUpdateOne) AddAttachmentEdges(a ...*Attachment) *CandidateEducateUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ceuo.AddAttachmentEdgeIDs(ids...)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (ceuo *CandidateEducateUpdateOne) SetCandidateEdgeID(id uuid.UUID) *CandidateEducateUpdateOne {
	ceuo.mutation.SetCandidateEdgeID(id)
	return ceuo
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (ceuo *CandidateEducateUpdateOne) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateEducateUpdateOne {
	if id != nil {
		ceuo = ceuo.SetCandidateEdgeID(*id)
	}
	return ceuo
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (ceuo *CandidateEducateUpdateOne) SetCandidateEdge(c *Candidate) *CandidateEducateUpdateOne {
	return ceuo.SetCandidateEdgeID(c.ID)
}

// Mutation returns the CandidateEducateMutation object of the builder.
func (ceuo *CandidateEducateUpdateOne) Mutation() *CandidateEducateMutation {
	return ceuo.mutation
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (ceuo *CandidateEducateUpdateOne) ClearAttachmentEdges() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearAttachmentEdges()
	return ceuo
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (ceuo *CandidateEducateUpdateOne) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateEducateUpdateOne {
	ceuo.mutation.RemoveAttachmentEdgeIDs(ids...)
	return ceuo
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (ceuo *CandidateEducateUpdateOne) RemoveAttachmentEdges(a ...*Attachment) *CandidateEducateUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ceuo.RemoveAttachmentEdgeIDs(ids...)
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (ceuo *CandidateEducateUpdateOne) ClearCandidateEdge() *CandidateEducateUpdateOne {
	ceuo.mutation.ClearCandidateEdge()
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *CandidateEducateUpdateOne) Select(field string, fields ...string) *CandidateEducateUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated CandidateEducate entity.
func (ceuo *CandidateEducateUpdateOne) Save(ctx context.Context) (*CandidateEducate, error) {
	var (
		err  error
		node *CandidateEducate
	)
	if len(ceuo.hooks) == 0 {
		if err = ceuo.check(); err != nil {
			return nil, err
		}
		node, err = ceuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateEducateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceuo.check(); err != nil {
				return nil, err
			}
			ceuo.mutation = mutation
			node, err = ceuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ceuo.hooks) - 1; i >= 0; i-- {
			if ceuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ceuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateEducate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateEducateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *CandidateEducateUpdateOne) SaveX(ctx context.Context) *CandidateEducate {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *CandidateEducateUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *CandidateEducateUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceuo *CandidateEducateUpdateOne) check() error {
	if v, ok := ceuo.mutation.SchoolName(); ok {
		if err := candidateeducate.SchoolNameValidator(v); err != nil {
			return &ValidationError{Name: "school_name", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.school_name": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Major(); ok {
		if err := candidateeducate.MajorValidator(v); err != nil {
			return &ValidationError{Name: "major", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.major": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Gpa(); ok {
		if err := candidateeducate.GpaValidator(v); err != nil {
			return &ValidationError{Name: "gpa", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.gpa": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Location(); ok {
		if err := candidateeducate.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.location": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Description(); ok {
		if err := candidateeducate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "CandidateEducate.description": %w`, err)}
		}
	}
	return nil
}

func (ceuo *CandidateEducateUpdateOne) sqlSave(ctx context.Context) (_node *CandidateEducate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidateeducate.Table,
			Columns: candidateeducate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateeducate.FieldID,
			},
		},
	}
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CandidateEducate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidateeducate.FieldID)
		for _, f := range fields {
			if !candidateeducate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidateeducate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateeducate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ceuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidateeducate.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ceuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidateeducate.FieldDeletedAt, field.TypeTime, value)
	}
	if ceuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidateeducate.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ceuo.mutation.SchoolName(); ok {
		_spec.SetField(candidateeducate.FieldSchoolName, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.Major(); ok {
		_spec.SetField(candidateeducate.FieldMajor, field.TypeString, value)
	}
	if ceuo.mutation.MajorCleared() {
		_spec.ClearField(candidateeducate.FieldMajor, field.TypeString)
	}
	if value, ok := ceuo.mutation.Gpa(); ok {
		_spec.SetField(candidateeducate.FieldGpa, field.TypeString, value)
	}
	if ceuo.mutation.GpaCleared() {
		_spec.ClearField(candidateeducate.FieldGpa, field.TypeString)
	}
	if value, ok := ceuo.mutation.Location(); ok {
		_spec.SetField(candidateeducate.FieldLocation, field.TypeString, value)
	}
	if ceuo.mutation.LocationCleared() {
		_spec.ClearField(candidateeducate.FieldLocation, field.TypeString)
	}
	if value, ok := ceuo.mutation.Description(); ok {
		_spec.SetField(candidateeducate.FieldDescription, field.TypeString, value)
	}
	if ceuo.mutation.DescriptionCleared() {
		_spec.ClearField(candidateeducate.FieldDescription, field.TypeString)
	}
	if value, ok := ceuo.mutation.StartDate(); ok {
		_spec.SetField(candidateeducate.FieldStartDate, field.TypeTime, value)
	}
	if ceuo.mutation.StartDateCleared() {
		_spec.ClearField(candidateeducate.FieldStartDate, field.TypeTime)
	}
	if value, ok := ceuo.mutation.EndDate(); ok {
		_spec.SetField(candidateeducate.FieldEndDate, field.TypeTime, value)
	}
	if ceuo.mutation.EndDateCleared() {
		_spec.ClearField(candidateeducate.FieldEndDate, field.TypeTime)
	}
	if value, ok := ceuo.mutation.OrderID(); ok {
		_spec.SetField(candidateeducate.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedOrderID(); ok {
		_spec.AddField(candidateeducate.FieldOrderID, field.TypeInt, value)
	}
	if ceuo.mutation.OrderIDCleared() {
		_spec.ClearField(candidateeducate.FieldOrderID, field.TypeInt)
	}
	if ceuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateeducate.AttachmentEdgesTable,
			Columns: []string{candidateeducate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !ceuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateeducate.AttachmentEdgesTable,
			Columns: []string{candidateeducate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateeducate.AttachmentEdgesTable,
			Columns: []string{candidateeducate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateeducate.CandidateEdgeTable,
			Columns: []string{candidateeducate.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateeducate.CandidateEdgeTable,
			Columns: []string{candidateeducate.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CandidateEducate{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidateeducate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
