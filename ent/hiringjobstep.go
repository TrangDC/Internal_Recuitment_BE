// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/hiringjob"
	"trec/ent/hiringjobstep"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// HiringJobStep is the model entity for the HiringJobStep schema.
type HiringJobStep struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HiringJobID holds the value of the "hiring_job_id" field.
	HiringJobID uuid.UUID `json:"hiring_job_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Status holds the value of the "status" field.
	Status hiringjobstep.Status `json:"status,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HiringJobStepQuery when eager-loading is set.
	Edges HiringJobStepEdges `json:"edges"`
}

// HiringJobStepEdges holds the relations/edges for other nodes in the graph.
type HiringJobStepEdges struct {
	// ApprovalJob holds the value of the approval_job edge.
	ApprovalJob *HiringJob `json:"approval_job,omitempty"`
	// ApprovalUser holds the value of the approval_user edge.
	ApprovalUser *User `json:"approval_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ApprovalJobOrErr returns the ApprovalJob value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HiringJobStepEdges) ApprovalJobOrErr() (*HiringJob, error) {
	if e.loadedTypes[0] {
		if e.ApprovalJob == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hiringjob.Label}
		}
		return e.ApprovalJob, nil
	}
	return nil, &NotLoadedError{edge: "approval_job"}
}

// ApprovalUserOrErr returns the ApprovalUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HiringJobStepEdges) ApprovalUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.ApprovalUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ApprovalUser, nil
	}
	return nil, &NotLoadedError{edge: "approval_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HiringJobStep) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hiringjobstep.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case hiringjobstep.FieldStatus:
			values[i] = new(sql.NullString)
		case hiringjobstep.FieldCreatedAt, hiringjobstep.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case hiringjobstep.FieldID, hiringjobstep.FieldHiringJobID, hiringjobstep.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type HiringJobStep", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HiringJobStep fields.
func (hjs *HiringJobStep) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hiringjobstep.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hjs.ID = *value
			}
		case hiringjobstep.FieldHiringJobID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field hiring_job_id", values[i])
			} else if value != nil {
				hjs.HiringJobID = *value
			}
		case hiringjobstep.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				hjs.UserID = *value
			}
		case hiringjobstep.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				hjs.Status = hiringjobstep.Status(value.String)
			}
		case hiringjobstep.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				hjs.OrderID = int(value.Int64)
			}
		case hiringjobstep.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hjs.CreatedAt = value.Time
			}
		case hiringjobstep.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hjs.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryApprovalJob queries the "approval_job" edge of the HiringJobStep entity.
func (hjs *HiringJobStep) QueryApprovalJob() *HiringJobQuery {
	return (&HiringJobStepClient{config: hjs.config}).QueryApprovalJob(hjs)
}

// QueryApprovalUser queries the "approval_user" edge of the HiringJobStep entity.
func (hjs *HiringJobStep) QueryApprovalUser() *UserQuery {
	return (&HiringJobStepClient{config: hjs.config}).QueryApprovalUser(hjs)
}

// Update returns a builder for updating this HiringJobStep.
// Note that you need to call HiringJobStep.Unwrap() before calling this method if this HiringJobStep
// was returned from a transaction, and the transaction was committed or rolled back.
func (hjs *HiringJobStep) Update() *HiringJobStepUpdateOne {
	return (&HiringJobStepClient{config: hjs.config}).UpdateOne(hjs)
}

// Unwrap unwraps the HiringJobStep entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hjs *HiringJobStep) Unwrap() *HiringJobStep {
	_tx, ok := hjs.config.driver.(*txDriver)
	if !ok {
		panic("ent: HiringJobStep is not a transactional entity")
	}
	hjs.config.driver = _tx.drv
	return hjs
}

// String implements the fmt.Stringer.
func (hjs *HiringJobStep) String() string {
	var builder strings.Builder
	builder.WriteString("HiringJobStep(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hjs.ID))
	builder.WriteString("hiring_job_id=")
	builder.WriteString(fmt.Sprintf("%v", hjs.HiringJobID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", hjs.UserID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", hjs.Status))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", hjs.OrderID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hjs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hjs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// HiringJobSteps is a parsable slice of HiringJobStep.
type HiringJobSteps []*HiringJobStep

func (hjs HiringJobSteps) config(cfg config) {
	for _i := range hjs {
		hjs[_i].config = cfg
	}
}
