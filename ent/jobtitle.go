// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"trec/ent/jobtitle"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// JobTitle is the model entity for the JobTitle schema.
type JobTitle struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Specification holds the value of the "specification" field.
	Specification string `json:"specification,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobTitle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobtitle.FieldCode, jobtitle.FieldName, jobtitle.FieldDescription, jobtitle.FieldSpecification:
			values[i] = new(sql.NullString)
		case jobtitle.FieldCreatedAt, jobtitle.FieldUpdatedAt, jobtitle.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case jobtitle.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type JobTitle", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobTitle fields.
func (jt *JobTitle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobtitle.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				jt.ID = *value
			}
		case jobtitle.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				jt.Code = value.String
			}
		case jobtitle.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				jt.Name = value.String
			}
		case jobtitle.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				jt.Description = value.String
			}
		case jobtitle.FieldSpecification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field specification", values[i])
			} else if value.Valid {
				jt.Specification = value.String
			}
		case jobtitle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jt.CreatedAt = value.Time
			}
		case jobtitle.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jt.UpdatedAt = value.Time
			}
		case jobtitle.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jt.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this JobTitle.
// Note that you need to call JobTitle.Unwrap() before calling this method if this JobTitle
// was returned from a transaction, and the transaction was committed or rolled back.
func (jt *JobTitle) Update() *JobTitleUpdateOne {
	return (&JobTitleClient{config: jt.config}).UpdateOne(jt)
}

// Unwrap unwraps the JobTitle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jt *JobTitle) Unwrap() *JobTitle {
	_tx, ok := jt.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobTitle is not a transactional entity")
	}
	jt.config.driver = _tx.drv
	return jt
}

// String implements the fmt.Stringer.
func (jt *JobTitle) String() string {
	var builder strings.Builder
	builder.WriteString("JobTitle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jt.ID))
	builder.WriteString("code=")
	builder.WriteString(jt.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(jt.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(jt.Description)
	builder.WriteString(", ")
	builder.WriteString("specification=")
	builder.WriteString(jt.Specification)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(jt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(jt.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JobTitles is a parsable slice of JobTitle.
type JobTitles []*JobTitle

func (jt JobTitles) config(cfg config) {
	for _i := range jt {
		jt[_i].config = cfg
	}
}
