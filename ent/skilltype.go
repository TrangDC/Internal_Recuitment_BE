// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/skilltype"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// SkillType is the model entity for the SkillType schema.
type SkillType struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SkillType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case skilltype.FieldName, skilltype.FieldDescription:
			values[i] = new(sql.NullString)
		case skilltype.FieldCreatedAt, skilltype.FieldUpdatedAt, skilltype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case skilltype.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SkillType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SkillType fields.
func (st *SkillType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case skilltype.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				st.ID = *value
			}
		case skilltype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case skilltype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		case skilltype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				st.DeletedAt = value.Time
			}
		case skilltype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case skilltype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				st.Description = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SkillType.
// Note that you need to call SkillType.Unwrap() before calling this method if this SkillType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SkillType) Update() *SkillTypeUpdateOne {
	return (&SkillTypeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the SkillType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SkillType) Unwrap() *SkillType {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SkillType is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SkillType) String() string {
	var builder strings.Builder
	builder.WriteString("SkillType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(st.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(st.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(st.Description)
	builder.WriteByte(')')
	return builder.String()
}

// SkillTypes is a parsable slice of SkillType.
type SkillTypes []*SkillType

func (st SkillTypes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
