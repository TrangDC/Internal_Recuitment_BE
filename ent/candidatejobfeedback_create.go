// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateJobFeedbackCreate is the builder for creating a CandidateJobFeedback entity.
type CandidateJobFeedbackCreate struct {
	config
	mutation *CandidateJobFeedbackMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cjfc *CandidateJobFeedbackCreate) SetCreatedAt(t time.Time) *CandidateJobFeedbackCreate {
	cjfc.mutation.SetCreatedAt(t)
	return cjfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cjfc *CandidateJobFeedbackCreate) SetNillableCreatedAt(t *time.Time) *CandidateJobFeedbackCreate {
	if t != nil {
		cjfc.SetCreatedAt(*t)
	}
	return cjfc
}

// SetUpdatedAt sets the "updated_at" field.
func (cjfc *CandidateJobFeedbackCreate) SetUpdatedAt(t time.Time) *CandidateJobFeedbackCreate {
	cjfc.mutation.SetUpdatedAt(t)
	return cjfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cjfc *CandidateJobFeedbackCreate) SetNillableUpdatedAt(t *time.Time) *CandidateJobFeedbackCreate {
	if t != nil {
		cjfc.SetUpdatedAt(*t)
	}
	return cjfc
}

// SetDeletedAt sets the "deleted_at" field.
func (cjfc *CandidateJobFeedbackCreate) SetDeletedAt(t time.Time) *CandidateJobFeedbackCreate {
	cjfc.mutation.SetDeletedAt(t)
	return cjfc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cjfc *CandidateJobFeedbackCreate) SetNillableDeletedAt(t *time.Time) *CandidateJobFeedbackCreate {
	if t != nil {
		cjfc.SetDeletedAt(*t)
	}
	return cjfc
}

// SetCandidateJobID sets the "candidate_job_id" field.
func (cjfc *CandidateJobFeedbackCreate) SetCandidateJobID(u uuid.UUID) *CandidateJobFeedbackCreate {
	cjfc.mutation.SetCandidateJobID(u)
	return cjfc
}

// SetNillableCandidateJobID sets the "candidate_job_id" field if the given value is not nil.
func (cjfc *CandidateJobFeedbackCreate) SetNillableCandidateJobID(u *uuid.UUID) *CandidateJobFeedbackCreate {
	if u != nil {
		cjfc.SetCandidateJobID(*u)
	}
	return cjfc
}

// SetCreatedBy sets the "created_by" field.
func (cjfc *CandidateJobFeedbackCreate) SetCreatedBy(u uuid.UUID) *CandidateJobFeedbackCreate {
	cjfc.mutation.SetCreatedBy(u)
	return cjfc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cjfc *CandidateJobFeedbackCreate) SetNillableCreatedBy(u *uuid.UUID) *CandidateJobFeedbackCreate {
	if u != nil {
		cjfc.SetCreatedBy(*u)
	}
	return cjfc
}

// SetFeedback sets the "feedback" field.
func (cjfc *CandidateJobFeedbackCreate) SetFeedback(s string) *CandidateJobFeedbackCreate {
	cjfc.mutation.SetFeedback(s)
	return cjfc
}

// SetID sets the "id" field.
func (cjfc *CandidateJobFeedbackCreate) SetID(u uuid.UUID) *CandidateJobFeedbackCreate {
	cjfc.mutation.SetID(u)
	return cjfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cjfc *CandidateJobFeedbackCreate) SetNillableID(u *uuid.UUID) *CandidateJobFeedbackCreate {
	if u != nil {
		cjfc.SetID(*u)
	}
	return cjfc
}

// SetCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID.
func (cjfc *CandidateJobFeedbackCreate) SetCreatedByEdgeID(id uuid.UUID) *CandidateJobFeedbackCreate {
	cjfc.mutation.SetCreatedByEdgeID(id)
	return cjfc
}

// SetNillableCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID if the given value is not nil.
func (cjfc *CandidateJobFeedbackCreate) SetNillableCreatedByEdgeID(id *uuid.UUID) *CandidateJobFeedbackCreate {
	if id != nil {
		cjfc = cjfc.SetCreatedByEdgeID(*id)
	}
	return cjfc
}

// SetCreatedByEdge sets the "created_by_edge" edge to the User entity.
func (cjfc *CandidateJobFeedbackCreate) SetCreatedByEdge(u *User) *CandidateJobFeedbackCreate {
	return cjfc.SetCreatedByEdgeID(u.ID)
}

// SetCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID.
func (cjfc *CandidateJobFeedbackCreate) SetCandidateJobEdgeID(id uuid.UUID) *CandidateJobFeedbackCreate {
	cjfc.mutation.SetCandidateJobEdgeID(id)
	return cjfc
}

// SetNillableCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID if the given value is not nil.
func (cjfc *CandidateJobFeedbackCreate) SetNillableCandidateJobEdgeID(id *uuid.UUID) *CandidateJobFeedbackCreate {
	if id != nil {
		cjfc = cjfc.SetCandidateJobEdgeID(*id)
	}
	return cjfc
}

// SetCandidateJobEdge sets the "candidate_job_edge" edge to the CandidateJob entity.
func (cjfc *CandidateJobFeedbackCreate) SetCandidateJobEdge(c *CandidateJob) *CandidateJobFeedbackCreate {
	return cjfc.SetCandidateJobEdgeID(c.ID)
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (cjfc *CandidateJobFeedbackCreate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateJobFeedbackCreate {
	cjfc.mutation.AddAttachmentEdgeIDs(ids...)
	return cjfc
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (cjfc *CandidateJobFeedbackCreate) AddAttachmentEdges(a ...*Attachment) *CandidateJobFeedbackCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cjfc.AddAttachmentEdgeIDs(ids...)
}

// Mutation returns the CandidateJobFeedbackMutation object of the builder.
func (cjfc *CandidateJobFeedbackCreate) Mutation() *CandidateJobFeedbackMutation {
	return cjfc.mutation
}

// Save creates the CandidateJobFeedback in the database.
func (cjfc *CandidateJobFeedbackCreate) Save(ctx context.Context) (*CandidateJobFeedback, error) {
	var (
		err  error
		node *CandidateJobFeedback
	)
	cjfc.defaults()
	if len(cjfc.hooks) == 0 {
		if err = cjfc.check(); err != nil {
			return nil, err
		}
		node, err = cjfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateJobFeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cjfc.check(); err != nil {
				return nil, err
			}
			cjfc.mutation = mutation
			if node, err = cjfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cjfc.hooks) - 1; i >= 0; i-- {
			if cjfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cjfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cjfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateJobFeedback)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateJobFeedbackMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cjfc *CandidateJobFeedbackCreate) SaveX(ctx context.Context) *CandidateJobFeedback {
	v, err := cjfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cjfc *CandidateJobFeedbackCreate) Exec(ctx context.Context) error {
	_, err := cjfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjfc *CandidateJobFeedbackCreate) ExecX(ctx context.Context) {
	if err := cjfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cjfc *CandidateJobFeedbackCreate) defaults() {
	if _, ok := cjfc.mutation.CreatedAt(); !ok {
		v := candidatejobfeedback.DefaultCreatedAt()
		cjfc.mutation.SetCreatedAt(v)
	}
	if _, ok := cjfc.mutation.ID(); !ok {
		v := candidatejobfeedback.DefaultID()
		cjfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cjfc *CandidateJobFeedbackCreate) check() error {
	if _, ok := cjfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CandidateJobFeedback.created_at"`)}
	}
	if _, ok := cjfc.mutation.Feedback(); !ok {
		return &ValidationError{Name: "feedback", err: errors.New(`ent: missing required field "CandidateJobFeedback.feedback"`)}
	}
	return nil
}

func (cjfc *CandidateJobFeedbackCreate) sqlSave(ctx context.Context) (*CandidateJobFeedback, error) {
	_node, _spec := cjfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cjfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cjfc *CandidateJobFeedbackCreate) createSpec() (*CandidateJobFeedback, *sqlgraph.CreateSpec) {
	var (
		_node = &CandidateJobFeedback{config: cjfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: candidatejobfeedback.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatejobfeedback.FieldID,
			},
		}
	)
	if id, ok := cjfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cjfc.mutation.CreatedAt(); ok {
		_spec.SetField(candidatejobfeedback.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cjfc.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatejobfeedback.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cjfc.mutation.DeletedAt(); ok {
		_spec.SetField(candidatejobfeedback.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cjfc.mutation.Feedback(); ok {
		_spec.SetField(candidatejobfeedback.FieldFeedback, field.TypeString, value)
		_node.Feedback = value
	}
	if nodes := cjfc.mutation.CreatedByEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatejobfeedback.CreatedByEdgeTable,
			Columns: []string{candidatejobfeedback.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cjfc.mutation.CandidateJobEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatejobfeedback.CandidateJobEdgeTable,
			Columns: []string{candidatejobfeedback.CandidateJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CandidateJobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cjfc.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatejobfeedback.AttachmentEdgesTable,
			Columns: []string{candidatejobfeedback.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CandidateJobFeedbackCreateBulk is the builder for creating many CandidateJobFeedback entities in bulk.
type CandidateJobFeedbackCreateBulk struct {
	config
	builders []*CandidateJobFeedbackCreate
}

// Save creates the CandidateJobFeedback entities in the database.
func (cjfcb *CandidateJobFeedbackCreateBulk) Save(ctx context.Context) ([]*CandidateJobFeedback, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cjfcb.builders))
	nodes := make([]*CandidateJobFeedback, len(cjfcb.builders))
	mutators := make([]Mutator, len(cjfcb.builders))
	for i := range cjfcb.builders {
		func(i int, root context.Context) {
			builder := cjfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CandidateJobFeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cjfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cjfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cjfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cjfcb *CandidateJobFeedbackCreateBulk) SaveX(ctx context.Context) []*CandidateJobFeedback {
	v, err := cjfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cjfcb *CandidateJobFeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := cjfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjfcb *CandidateJobFeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := cjfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
