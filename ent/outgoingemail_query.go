// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"trec/ent/candidate"
	"trec/ent/outgoingemail"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OutgoingEmailQuery is the builder for querying OutgoingEmail entities.
type OutgoingEmailQuery struct {
	config
	limit             *int
	offset            *int
	unique            *bool
	order             []OrderFunc
	fields            []string
	predicates        []predicate.OutgoingEmail
	withCandidateEdge *CandidateQuery
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*OutgoingEmail) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OutgoingEmailQuery builder.
func (oeq *OutgoingEmailQuery) Where(ps ...predicate.OutgoingEmail) *OutgoingEmailQuery {
	oeq.predicates = append(oeq.predicates, ps...)
	return oeq
}

// Limit adds a limit step to the query.
func (oeq *OutgoingEmailQuery) Limit(limit int) *OutgoingEmailQuery {
	oeq.limit = &limit
	return oeq
}

// Offset adds an offset step to the query.
func (oeq *OutgoingEmailQuery) Offset(offset int) *OutgoingEmailQuery {
	oeq.offset = &offset
	return oeq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oeq *OutgoingEmailQuery) Unique(unique bool) *OutgoingEmailQuery {
	oeq.unique = &unique
	return oeq
}

// Order adds an order step to the query.
func (oeq *OutgoingEmailQuery) Order(o ...OrderFunc) *OutgoingEmailQuery {
	oeq.order = append(oeq.order, o...)
	return oeq
}

// QueryCandidateEdge chains the current query on the "candidate_edge" edge.
func (oeq *OutgoingEmailQuery) QueryCandidateEdge() *CandidateQuery {
	query := &CandidateQuery{config: oeq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(outgoingemail.Table, outgoingemail.FieldID, selector),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, outgoingemail.CandidateEdgeTable, outgoingemail.CandidateEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(oeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OutgoingEmail entity from the query.
// Returns a *NotFoundError when no OutgoingEmail was found.
func (oeq *OutgoingEmailQuery) First(ctx context.Context) (*OutgoingEmail, error) {
	nodes, err := oeq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{outgoingemail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oeq *OutgoingEmailQuery) FirstX(ctx context.Context) *OutgoingEmail {
	node, err := oeq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OutgoingEmail ID from the query.
// Returns a *NotFoundError when no OutgoingEmail ID was found.
func (oeq *OutgoingEmailQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oeq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{outgoingemail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oeq *OutgoingEmailQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := oeq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OutgoingEmail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OutgoingEmail entity is found.
// Returns a *NotFoundError when no OutgoingEmail entities are found.
func (oeq *OutgoingEmailQuery) Only(ctx context.Context) (*OutgoingEmail, error) {
	nodes, err := oeq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{outgoingemail.Label}
	default:
		return nil, &NotSingularError{outgoingemail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oeq *OutgoingEmailQuery) OnlyX(ctx context.Context) *OutgoingEmail {
	node, err := oeq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OutgoingEmail ID in the query.
// Returns a *NotSingularError when more than one OutgoingEmail ID is found.
// Returns a *NotFoundError when no entities are found.
func (oeq *OutgoingEmailQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = oeq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{outgoingemail.Label}
	default:
		err = &NotSingularError{outgoingemail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oeq *OutgoingEmailQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := oeq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OutgoingEmails.
func (oeq *OutgoingEmailQuery) All(ctx context.Context) ([]*OutgoingEmail, error) {
	if err := oeq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return oeq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (oeq *OutgoingEmailQuery) AllX(ctx context.Context) []*OutgoingEmail {
	nodes, err := oeq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OutgoingEmail IDs.
func (oeq *OutgoingEmailQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := oeq.Select(outgoingemail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oeq *OutgoingEmailQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := oeq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oeq *OutgoingEmailQuery) Count(ctx context.Context) (int, error) {
	if err := oeq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return oeq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (oeq *OutgoingEmailQuery) CountX(ctx context.Context) int {
	count, err := oeq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oeq *OutgoingEmailQuery) Exist(ctx context.Context) (bool, error) {
	if err := oeq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return oeq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (oeq *OutgoingEmailQuery) ExistX(ctx context.Context) bool {
	exist, err := oeq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OutgoingEmailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oeq *OutgoingEmailQuery) Clone() *OutgoingEmailQuery {
	if oeq == nil {
		return nil
	}
	return &OutgoingEmailQuery{
		config:            oeq.config,
		limit:             oeq.limit,
		offset:            oeq.offset,
		order:             append([]OrderFunc{}, oeq.order...),
		predicates:        append([]predicate.OutgoingEmail{}, oeq.predicates...),
		withCandidateEdge: oeq.withCandidateEdge.Clone(),
		// clone intermediate query.
		sql:    oeq.sql.Clone(),
		path:   oeq.path,
		unique: oeq.unique,
	}
}

// WithCandidateEdge tells the query-builder to eager-load the nodes that are connected to
// the "candidate_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (oeq *OutgoingEmailQuery) WithCandidateEdge(opts ...func(*CandidateQuery)) *OutgoingEmailQuery {
	query := &CandidateQuery{config: oeq.config}
	for _, opt := range opts {
		opt(query)
	}
	oeq.withCandidateEdge = query
	return oeq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OutgoingEmail.Query().
//		GroupBy(outgoingemail.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oeq *OutgoingEmailQuery) GroupBy(field string, fields ...string) *OutgoingEmailGroupBy {
	grbuild := &OutgoingEmailGroupBy{config: oeq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oeq.sqlQuery(ctx), nil
	}
	grbuild.label = outgoingemail.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.OutgoingEmail.Query().
//		Select(outgoingemail.FieldCreatedAt).
//		Scan(ctx, &v)
func (oeq *OutgoingEmailQuery) Select(fields ...string) *OutgoingEmailSelect {
	oeq.fields = append(oeq.fields, fields...)
	selbuild := &OutgoingEmailSelect{OutgoingEmailQuery: oeq}
	selbuild.label = outgoingemail.Label
	selbuild.flds, selbuild.scan = &oeq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a OutgoingEmailSelect configured with the given aggregations.
func (oeq *OutgoingEmailQuery) Aggregate(fns ...AggregateFunc) *OutgoingEmailSelect {
	return oeq.Select().Aggregate(fns...)
}

func (oeq *OutgoingEmailQuery) prepareQuery(ctx context.Context) error {
	for _, f := range oeq.fields {
		if !outgoingemail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oeq.path != nil {
		prev, err := oeq.path(ctx)
		if err != nil {
			return err
		}
		oeq.sql = prev
	}
	return nil
}

func (oeq *OutgoingEmailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OutgoingEmail, error) {
	var (
		nodes       = []*OutgoingEmail{}
		_spec       = oeq.querySpec()
		loadedTypes = [1]bool{
			oeq.withCandidateEdge != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OutgoingEmail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OutgoingEmail{config: oeq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oeq.modifiers) > 0 {
		_spec.Modifiers = oeq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oeq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oeq.withCandidateEdge; query != nil {
		if err := oeq.loadCandidateEdge(ctx, query, nodes, nil,
			func(n *OutgoingEmail, e *Candidate) { n.Edges.CandidateEdge = e }); err != nil {
			return nil, err
		}
	}
	for i := range oeq.loadTotal {
		if err := oeq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oeq *OutgoingEmailQuery) loadCandidateEdge(ctx context.Context, query *CandidateQuery, nodes []*OutgoingEmail, init func(*OutgoingEmail), assign func(*OutgoingEmail, *Candidate)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OutgoingEmail)
	for i := range nodes {
		fk := nodes[i].CandidateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(candidate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "candidate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oeq *OutgoingEmailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oeq.querySpec()
	if len(oeq.modifiers) > 0 {
		_spec.Modifiers = oeq.modifiers
	}
	_spec.Node.Columns = oeq.fields
	if len(oeq.fields) > 0 {
		_spec.Unique = oeq.unique != nil && *oeq.unique
	}
	return sqlgraph.CountNodes(ctx, oeq.driver, _spec)
}

func (oeq *OutgoingEmailQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := oeq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (oeq *OutgoingEmailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   outgoingemail.Table,
			Columns: outgoingemail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: outgoingemail.FieldID,
			},
		},
		From:   oeq.sql,
		Unique: true,
	}
	if unique := oeq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := oeq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, outgoingemail.FieldID)
		for i := range fields {
			if fields[i] != outgoingemail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oeq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oeq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oeq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oeq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oeq *OutgoingEmailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oeq.driver.Dialect())
	t1 := builder.Table(outgoingemail.Table)
	columns := oeq.fields
	if len(columns) == 0 {
		columns = outgoingemail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oeq.sql != nil {
		selector = oeq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oeq.unique != nil && *oeq.unique {
		selector.Distinct()
	}
	for _, p := range oeq.predicates {
		p(selector)
	}
	for _, p := range oeq.order {
		p(selector)
	}
	if offset := oeq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oeq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OutgoingEmailGroupBy is the group-by builder for OutgoingEmail entities.
type OutgoingEmailGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oegb *OutgoingEmailGroupBy) Aggregate(fns ...AggregateFunc) *OutgoingEmailGroupBy {
	oegb.fns = append(oegb.fns, fns...)
	return oegb
}

// Scan applies the group-by query and scans the result into the given value.
func (oegb *OutgoingEmailGroupBy) Scan(ctx context.Context, v any) error {
	query, err := oegb.path(ctx)
	if err != nil {
		return err
	}
	oegb.sql = query
	return oegb.sqlScan(ctx, v)
}

func (oegb *OutgoingEmailGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range oegb.fields {
		if !outgoingemail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := oegb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oegb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oegb *OutgoingEmailGroupBy) sqlQuery() *sql.Selector {
	selector := oegb.sql.Select()
	aggregation := make([]string, 0, len(oegb.fns))
	for _, fn := range oegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(oegb.fields)+len(oegb.fns))
		for _, f := range oegb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(oegb.fields...)...)
}

// OutgoingEmailSelect is the builder for selecting fields of OutgoingEmail entities.
type OutgoingEmailSelect struct {
	*OutgoingEmailQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oes *OutgoingEmailSelect) Aggregate(fns ...AggregateFunc) *OutgoingEmailSelect {
	oes.fns = append(oes.fns, fns...)
	return oes
}

// Scan applies the selector query and scans the result into the given value.
func (oes *OutgoingEmailSelect) Scan(ctx context.Context, v any) error {
	if err := oes.prepareQuery(ctx); err != nil {
		return err
	}
	oes.sql = oes.OutgoingEmailQuery.sqlQuery(ctx)
	return oes.sqlScan(ctx, v)
}

func (oes *OutgoingEmailSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(oes.fns))
	for _, fn := range oes.fns {
		aggregation = append(aggregation, fn(oes.sql))
	}
	switch n := len(*oes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		oes.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		oes.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := oes.sql.Query()
	if err := oes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
