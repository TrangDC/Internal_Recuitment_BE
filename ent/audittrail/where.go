// Code generated by ent, DO NOT EDIT.

package audittrail

import (
	"time"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// RecordId applies equality check predicate on the "recordId" field. It's identical to RecordIdEQ.
func RecordId(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordId), v))
	})
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// RecordChanges applies equality check predicate on the "record_changes" field. It's identical to RecordChangesEQ.
func RecordChanges(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordChanges), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// RecordIdEQ applies the EQ predicate on the "recordId" field.
func RecordIdEQ(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordId), v))
	})
}

// RecordIdNEQ applies the NEQ predicate on the "recordId" field.
func RecordIdNEQ(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecordId), v))
	})
}

// RecordIdIn applies the In predicate on the "recordId" field.
func RecordIdIn(vs ...uuid.UUID) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecordId), v...))
	})
}

// RecordIdNotIn applies the NotIn predicate on the "recordId" field.
func RecordIdNotIn(vs ...uuid.UUID) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecordId), v...))
	})
}

// RecordIdGT applies the GT predicate on the "recordId" field.
func RecordIdGT(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecordId), v))
	})
}

// RecordIdGTE applies the GTE predicate on the "recordId" field.
func RecordIdGTE(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecordId), v))
	})
}

// RecordIdLT applies the LT predicate on the "recordId" field.
func RecordIdLT(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecordId), v))
	})
}

// RecordIdLTE applies the LTE predicate on the "recordId" field.
func RecordIdLTE(v uuid.UUID) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecordId), v))
	})
}

// ModuleEQ applies the EQ predicate on the "module" field.
func ModuleEQ(v Module) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModule), v))
	})
}

// ModuleNEQ applies the NEQ predicate on the "module" field.
func ModuleNEQ(v Module) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModule), v))
	})
}

// ModuleIn applies the In predicate on the "module" field.
func ModuleIn(vs ...Module) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldModule), v...))
	})
}

// ModuleNotIn applies the NotIn predicate on the "module" field.
func ModuleNotIn(vs ...Module) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldModule), v...))
	})
}

// ActionTypeEQ applies the EQ predicate on the "actionType" field.
func ActionTypeEQ(v ActionType) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActionType), v))
	})
}

// ActionTypeNEQ applies the NEQ predicate on the "actionType" field.
func ActionTypeNEQ(v ActionType) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActionType), v))
	})
}

// ActionTypeIn applies the In predicate on the "actionType" field.
func ActionTypeIn(vs ...ActionType) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldActionType), v...))
	})
}

// ActionTypeNotIn applies the NotIn predicate on the "actionType" field.
func ActionTypeNotIn(vs ...ActionType) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldActionType), v...))
	})
}

// ActionTypeIsNil applies the IsNil predicate on the "actionType" field.
func ActionTypeIsNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActionType)))
	})
}

// ActionTypeNotNil applies the NotNil predicate on the "actionType" field.
func ActionTypeNotNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActionType)))
	})
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNote), v))
	})
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNote), v...))
	})
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNote), v...))
	})
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNote), v))
	})
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNote), v))
	})
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNote), v))
	})
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNote), v))
	})
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNote), v))
	})
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNote), v))
	})
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNote), v))
	})
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNote)))
	})
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNote)))
	})
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNote), v))
	})
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNote), v))
	})
}

// RecordChangesEQ applies the EQ predicate on the "record_changes" field.
func RecordChangesEQ(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesNEQ applies the NEQ predicate on the "record_changes" field.
func RecordChangesNEQ(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesIn applies the In predicate on the "record_changes" field.
func RecordChangesIn(vs ...string) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecordChanges), v...))
	})
}

// RecordChangesNotIn applies the NotIn predicate on the "record_changes" field.
func RecordChangesNotIn(vs ...string) predicate.AuditTrail {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecordChanges), v...))
	})
}

// RecordChangesGT applies the GT predicate on the "record_changes" field.
func RecordChangesGT(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesGTE applies the GTE predicate on the "record_changes" field.
func RecordChangesGTE(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesLT applies the LT predicate on the "record_changes" field.
func RecordChangesLT(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesLTE applies the LTE predicate on the "record_changes" field.
func RecordChangesLTE(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesContains applies the Contains predicate on the "record_changes" field.
func RecordChangesContains(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesHasPrefix applies the HasPrefix predicate on the "record_changes" field.
func RecordChangesHasPrefix(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesHasSuffix applies the HasSuffix predicate on the "record_changes" field.
func RecordChangesHasSuffix(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesIsNil applies the IsNil predicate on the "record_changes" field.
func RecordChangesIsNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecordChanges)))
	})
}

// RecordChangesNotNil applies the NotNil predicate on the "record_changes" field.
func RecordChangesNotNil() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecordChanges)))
	})
}

// RecordChangesEqualFold applies the EqualFold predicate on the "record_changes" field.
func RecordChangesEqualFold(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRecordChanges), v))
	})
}

// RecordChangesContainsFold applies the ContainsFold predicate on the "record_changes" field.
func RecordChangesContainsFold(v string) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRecordChanges), v))
	})
}

// HasUserEdge applies the HasEdge predicate on the "user_edge" edge.
func HasUserEdge() predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserEdgeTable, UserEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserEdgeWith applies the HasEdge predicate on the "user_edge" edge with a given conditions (other predicates).
func HasUserEdgeWith(preds ...predicate.User) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserEdgeTable, UserEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuditTrail) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuditTrail) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuditTrail) predicate.AuditTrail {
	return predicate.AuditTrail(func(s *sql.Selector) {
		p(s.Not())
	})
}
