// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidateaward"
	"trec/ent/candidatecertificate"
	"trec/ent/candidateeducate"
	"trec/ent/candidatehistorycall"
	"trec/ent/candidateinterview"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/candidatenote"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Attachment is the model entity for the Attachment schema.
type Attachment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DocumentID holds the value of the "document_id" field.
	DocumentID uuid.UUID `json:"document_id,omitempty"`
	// DocumentName holds the value of the "document_name" field.
	DocumentName string `json:"document_name,omitempty"`
	// RelationType holds the value of the "relation_type" field.
	RelationType attachment.RelationType `json:"relation_type,omitempty"`
	// RelationID holds the value of the "relation_id" field.
	RelationID uuid.UUID `json:"relation_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttachmentQuery when eager-loading is set.
	Edges AttachmentEdges `json:"edges"`
}

// AttachmentEdges holds the relations/edges for other nodes in the graph.
type AttachmentEdges struct {
	// CandidateJobEdge holds the value of the candidate_job_edge edge.
	CandidateJobEdge *CandidateJob `json:"candidate_job_edge,omitempty"`
	// CandidateJobFeedbackEdge holds the value of the candidate_job_feedback_edge edge.
	CandidateJobFeedbackEdge *CandidateJobFeedback `json:"candidate_job_feedback_edge,omitempty"`
	// CandidateInterviewEdge holds the value of the candidate_interview_edge edge.
	CandidateInterviewEdge *CandidateInterview `json:"candidate_interview_edge,omitempty"`
	// CandidateEdge holds the value of the candidate_edge edge.
	CandidateEdge *Candidate `json:"candidate_edge,omitempty"`
	// CandidateEducateEdge holds the value of the candidate_educate_edge edge.
	CandidateEducateEdge *CandidateEducate `json:"candidate_educate_edge,omitempty"`
	// CandidateAwardEdge holds the value of the candidate_award_edge edge.
	CandidateAwardEdge *CandidateAward `json:"candidate_award_edge,omitempty"`
	// CandidateCertificateEdge holds the value of the candidate_certificate_edge edge.
	CandidateCertificateEdge *CandidateCertificate `json:"candidate_certificate_edge,omitempty"`
	// CandidateHistoryCallEdge holds the value of the candidate_history_call_edge edge.
	CandidateHistoryCallEdge *CandidateHistoryCall `json:"candidate_history_call_edge,omitempty"`
	// CandidateNoteEdge holds the value of the candidate_note_edge edge.
	CandidateNoteEdge *CandidateNote `json:"candidate_note_edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int
}

// CandidateJobEdgeOrErr returns the CandidateJobEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateJobEdgeOrErr() (*CandidateJob, error) {
	if e.loadedTypes[0] {
		if e.CandidateJobEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatejob.Label}
		}
		return e.CandidateJobEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_edge"}
}

// CandidateJobFeedbackEdgeOrErr returns the CandidateJobFeedbackEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateJobFeedbackEdgeOrErr() (*CandidateJobFeedback, error) {
	if e.loadedTypes[1] {
		if e.CandidateJobFeedbackEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatejobfeedback.Label}
		}
		return e.CandidateJobFeedbackEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_feedback_edge"}
}

// CandidateInterviewEdgeOrErr returns the CandidateInterviewEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateInterviewEdgeOrErr() (*CandidateInterview, error) {
	if e.loadedTypes[2] {
		if e.CandidateInterviewEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidateinterview.Label}
		}
		return e.CandidateInterviewEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_interview_edge"}
}

// CandidateEdgeOrErr returns the CandidateEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateEdgeOrErr() (*Candidate, error) {
	if e.loadedTypes[3] {
		if e.CandidateEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidate.Label}
		}
		return e.CandidateEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_edge"}
}

// CandidateEducateEdgeOrErr returns the CandidateEducateEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateEducateEdgeOrErr() (*CandidateEducate, error) {
	if e.loadedTypes[4] {
		if e.CandidateEducateEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidateeducate.Label}
		}
		return e.CandidateEducateEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_educate_edge"}
}

// CandidateAwardEdgeOrErr returns the CandidateAwardEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateAwardEdgeOrErr() (*CandidateAward, error) {
	if e.loadedTypes[5] {
		if e.CandidateAwardEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidateaward.Label}
		}
		return e.CandidateAwardEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_award_edge"}
}

// CandidateCertificateEdgeOrErr returns the CandidateCertificateEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateCertificateEdgeOrErr() (*CandidateCertificate, error) {
	if e.loadedTypes[6] {
		if e.CandidateCertificateEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatecertificate.Label}
		}
		return e.CandidateCertificateEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_certificate_edge"}
}

// CandidateHistoryCallEdgeOrErr returns the CandidateHistoryCallEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateHistoryCallEdgeOrErr() (*CandidateHistoryCall, error) {
	if e.loadedTypes[7] {
		if e.CandidateHistoryCallEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatehistorycall.Label}
		}
		return e.CandidateHistoryCallEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_history_call_edge"}
}

// CandidateNoteEdgeOrErr returns the CandidateNoteEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateNoteEdgeOrErr() (*CandidateNote, error) {
	if e.loadedTypes[8] {
		if e.CandidateNoteEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatenote.Label}
		}
		return e.CandidateNoteEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_note_edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attachment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attachment.FieldDocumentName, attachment.FieldRelationType:
			values[i] = new(sql.NullString)
		case attachment.FieldCreatedAt, attachment.FieldUpdatedAt, attachment.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case attachment.FieldID, attachment.FieldDocumentID, attachment.FieldRelationID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attachment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attachment fields.
func (a *Attachment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attachment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case attachment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case attachment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case attachment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		case attachment.FieldDocumentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field document_id", values[i])
			} else if value != nil {
				a.DocumentID = *value
			}
		case attachment.FieldDocumentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_name", values[i])
			} else if value.Valid {
				a.DocumentName = value.String
			}
		case attachment.FieldRelationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relation_type", values[i])
			} else if value.Valid {
				a.RelationType = attachment.RelationType(value.String)
			}
		case attachment.FieldRelationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field relation_id", values[i])
			} else if value != nil {
				a.RelationID = *value
			}
		}
	}
	return nil
}

// QueryCandidateJobEdge queries the "candidate_job_edge" edge of the Attachment entity.
func (a *Attachment) QueryCandidateJobEdge() *CandidateJobQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateJobEdge(a)
}

// QueryCandidateJobFeedbackEdge queries the "candidate_job_feedback_edge" edge of the Attachment entity.
func (a *Attachment) QueryCandidateJobFeedbackEdge() *CandidateJobFeedbackQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateJobFeedbackEdge(a)
}

// QueryCandidateInterviewEdge queries the "candidate_interview_edge" edge of the Attachment entity.
func (a *Attachment) QueryCandidateInterviewEdge() *CandidateInterviewQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateInterviewEdge(a)
}

// QueryCandidateEdge queries the "candidate_edge" edge of the Attachment entity.
func (a *Attachment) QueryCandidateEdge() *CandidateQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateEdge(a)
}

// QueryCandidateEducateEdge queries the "candidate_educate_edge" edge of the Attachment entity.
func (a *Attachment) QueryCandidateEducateEdge() *CandidateEducateQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateEducateEdge(a)
}

// QueryCandidateAwardEdge queries the "candidate_award_edge" edge of the Attachment entity.
func (a *Attachment) QueryCandidateAwardEdge() *CandidateAwardQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateAwardEdge(a)
}

// QueryCandidateCertificateEdge queries the "candidate_certificate_edge" edge of the Attachment entity.
func (a *Attachment) QueryCandidateCertificateEdge() *CandidateCertificateQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateCertificateEdge(a)
}

// QueryCandidateHistoryCallEdge queries the "candidate_history_call_edge" edge of the Attachment entity.
func (a *Attachment) QueryCandidateHistoryCallEdge() *CandidateHistoryCallQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateHistoryCallEdge(a)
}

// QueryCandidateNoteEdge queries the "candidate_note_edge" edge of the Attachment entity.
func (a *Attachment) QueryCandidateNoteEdge() *CandidateNoteQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateNoteEdge(a)
}

// Update returns a builder for updating this Attachment.
// Note that you need to call Attachment.Unwrap() before calling this method if this Attachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attachment) Update() *AttachmentUpdateOne {
	return (&AttachmentClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Attachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attachment) Unwrap() *Attachment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attachment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attachment) String() string {
	var builder strings.Builder
	builder.WriteString("Attachment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("document_id=")
	builder.WriteString(fmt.Sprintf("%v", a.DocumentID))
	builder.WriteString(", ")
	builder.WriteString("document_name=")
	builder.WriteString(a.DocumentName)
	builder.WriteString(", ")
	builder.WriteString("relation_type=")
	builder.WriteString(fmt.Sprintf("%v", a.RelationType))
	builder.WriteString(", ")
	builder.WriteString("relation_id=")
	builder.WriteString(fmt.Sprintf("%v", a.RelationID))
	builder.WriteByte(')')
	return builder.String()
}

// Attachments is a parsable slice of Attachment.
type Attachments []*Attachment

func (a Attachments) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
