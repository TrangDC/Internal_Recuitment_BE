// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Attachment is the model entity for the Attachment schema.
type Attachment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DocumentID holds the value of the "document_id" field.
	DocumentID uuid.UUID `json:"document_id,omitempty"`
	// DocumentName holds the value of the "document_name" field.
	DocumentName string `json:"document_name,omitempty"`
	// RelationType holds the value of the "relation_type" field.
	RelationType attachment.RelationType `json:"relation_type,omitempty"`
	// RelationID holds the value of the "relation_id" field.
	RelationID uuid.UUID `json:"relation_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttachmentQuery when eager-loading is set.
	Edges AttachmentEdges `json:"edges"`
}

// AttachmentEdges holds the relations/edges for other nodes in the graph.
type AttachmentEdges struct {
	// CandidateJob holds the value of the candidate_job edge.
	CandidateJob *CandidateJob `json:"candidate_job,omitempty"`
	// CandidateJobFeedback holds the value of the candidate_job_feedback edge.
	CandidateJobFeedback *CandidateJobFeedback `json:"candidate_job_feedback,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// CandidateJobOrErr returns the CandidateJob value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateJobOrErr() (*CandidateJob, error) {
	if e.loadedTypes[0] {
		if e.CandidateJob == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatejob.Label}
		}
		return e.CandidateJob, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job"}
}

// CandidateJobFeedbackOrErr returns the CandidateJobFeedback value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) CandidateJobFeedbackOrErr() (*CandidateJobFeedback, error) {
	if e.loadedTypes[1] {
		if e.CandidateJobFeedback == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatejobfeedback.Label}
		}
		return e.CandidateJobFeedback, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_feedback"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attachment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attachment.FieldDocumentName, attachment.FieldRelationType:
			values[i] = new(sql.NullString)
		case attachment.FieldCreatedAt, attachment.FieldUpdatedAt, attachment.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case attachment.FieldID, attachment.FieldDocumentID, attachment.FieldRelationID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attachment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attachment fields.
func (a *Attachment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attachment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case attachment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case attachment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case attachment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		case attachment.FieldDocumentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field document_id", values[i])
			} else if value != nil {
				a.DocumentID = *value
			}
		case attachment.FieldDocumentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_name", values[i])
			} else if value.Valid {
				a.DocumentName = value.String
			}
		case attachment.FieldRelationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relation_type", values[i])
			} else if value.Valid {
				a.RelationType = attachment.RelationType(value.String)
			}
		case attachment.FieldRelationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field relation_id", values[i])
			} else if value != nil {
				a.RelationID = *value
			}
		}
	}
	return nil
}

// QueryCandidateJob queries the "candidate_job" edge of the Attachment entity.
func (a *Attachment) QueryCandidateJob() *CandidateJobQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateJob(a)
}

// QueryCandidateJobFeedback queries the "candidate_job_feedback" edge of the Attachment entity.
func (a *Attachment) QueryCandidateJobFeedback() *CandidateJobFeedbackQuery {
	return (&AttachmentClient{config: a.config}).QueryCandidateJobFeedback(a)
}

// Update returns a builder for updating this Attachment.
// Note that you need to call Attachment.Unwrap() before calling this method if this Attachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attachment) Update() *AttachmentUpdateOne {
	return (&AttachmentClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Attachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attachment) Unwrap() *Attachment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attachment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attachment) String() string {
	var builder strings.Builder
	builder.WriteString("Attachment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("document_id=")
	builder.WriteString(fmt.Sprintf("%v", a.DocumentID))
	builder.WriteString(", ")
	builder.WriteString("document_name=")
	builder.WriteString(a.DocumentName)
	builder.WriteString(", ")
	builder.WriteString("relation_type=")
	builder.WriteString(fmt.Sprintf("%v", a.RelationType))
	builder.WriteString(", ")
	builder.WriteString("relation_id=")
	builder.WriteString(fmt.Sprintf("%v", a.RelationID))
	builder.WriteByte(')')
	return builder.String()
}

// Attachments is a parsable slice of Attachment.
type Attachments []*Attachment

func (a Attachments) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
