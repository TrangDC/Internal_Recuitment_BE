// Code generated by ent, DO NOT EDIT.

package candidatejobfeedback

import (
	"time"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CandidateJobID applies equality check predicate on the "candidate_job_id" field. It's identical to CandidateJobIDEQ.
func CandidateJobID(v uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCandidateJobID), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// Feedback applies equality check predicate on the "feedback" field. It's identical to FeedbackEQ.
func Feedback(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedback), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CandidateJobIDEQ applies the EQ predicate on the "candidate_job_id" field.
func CandidateJobIDEQ(v uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCandidateJobID), v))
	})
}

// CandidateJobIDNEQ applies the NEQ predicate on the "candidate_job_id" field.
func CandidateJobIDNEQ(v uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCandidateJobID), v))
	})
}

// CandidateJobIDIn applies the In predicate on the "candidate_job_id" field.
func CandidateJobIDIn(vs ...uuid.UUID) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCandidateJobID), v...))
	})
}

// CandidateJobIDNotIn applies the NotIn predicate on the "candidate_job_id" field.
func CandidateJobIDNotIn(vs ...uuid.UUID) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCandidateJobID), v...))
	})
}

// CandidateJobIDIsNil applies the IsNil predicate on the "candidate_job_id" field.
func CandidateJobIDIsNil() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCandidateJobID)))
	})
}

// CandidateJobIDNotNil applies the NotNil predicate on the "candidate_job_id" field.
func CandidateJobIDNotNil() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCandidateJobID)))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// FeedbackEQ applies the EQ predicate on the "feedback" field.
func FeedbackEQ(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedback), v))
	})
}

// FeedbackNEQ applies the NEQ predicate on the "feedback" field.
func FeedbackNEQ(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedback), v))
	})
}

// FeedbackIn applies the In predicate on the "feedback" field.
func FeedbackIn(vs ...string) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeedback), v...))
	})
}

// FeedbackNotIn applies the NotIn predicate on the "feedback" field.
func FeedbackNotIn(vs ...string) predicate.CandidateJobFeedback {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeedback), v...))
	})
}

// FeedbackGT applies the GT predicate on the "feedback" field.
func FeedbackGT(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedback), v))
	})
}

// FeedbackGTE applies the GTE predicate on the "feedback" field.
func FeedbackGTE(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedback), v))
	})
}

// FeedbackLT applies the LT predicate on the "feedback" field.
func FeedbackLT(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedback), v))
	})
}

// FeedbackLTE applies the LTE predicate on the "feedback" field.
func FeedbackLTE(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedback), v))
	})
}

// FeedbackContains applies the Contains predicate on the "feedback" field.
func FeedbackContains(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeedback), v))
	})
}

// FeedbackHasPrefix applies the HasPrefix predicate on the "feedback" field.
func FeedbackHasPrefix(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeedback), v))
	})
}

// FeedbackHasSuffix applies the HasSuffix predicate on the "feedback" field.
func FeedbackHasSuffix(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeedback), v))
	})
}

// FeedbackEqualFold applies the EqualFold predicate on the "feedback" field.
func FeedbackEqualFold(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeedback), v))
	})
}

// FeedbackContainsFold applies the ContainsFold predicate on the "feedback" field.
func FeedbackContainsFold(v string) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeedback), v))
	})
}

// HasCreatedByEdge applies the HasEdge predicate on the "created_by_edge" edge.
func HasCreatedByEdge() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreatedByEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByEdgeTable, CreatedByEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByEdgeWith applies the HasEdge predicate on the "created_by_edge" edge with a given conditions (other predicates).
func HasCreatedByEdgeWith(preds ...predicate.User) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreatedByEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByEdgeTable, CreatedByEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateJobEdge applies the HasEdge predicate on the "candidate_job_edge" edge.
func HasCandidateJobEdge() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CandidateJobEdgeTable, CandidateJobEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateJobEdgeWith applies the HasEdge predicate on the "candidate_job_edge" edge with a given conditions (other predicates).
func HasCandidateJobEdgeWith(preds ...predicate.CandidateJob) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CandidateJobEdgeTable, CandidateJobEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttachmentEdges applies the HasEdge predicate on the "attachment_edges" edge.
func HasAttachmentEdges() predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentEdgesTable, AttachmentEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentEdgesWith applies the HasEdge predicate on the "attachment_edges" edge with a given conditions (other predicates).
func HasAttachmentEdgesWith(preds ...predicate.Attachment) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentEdgesTable, AttachmentEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CandidateJobFeedback) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CandidateJobFeedback) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CandidateJobFeedback) predicate.CandidateJobFeedback {
	return predicate.CandidateJobFeedback(func(s *sql.Selector) {
		p(s.Not())
	})
}
