// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/predicate"
	"trec/ent/team"
	"trec/ent/teammanager"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TeamManagerUpdate is the builder for updating TeamManager entities.
type TeamManagerUpdate struct {
	config
	hooks    []Hook
	mutation *TeamManagerMutation
}

// Where appends a list predicates to the TeamManagerUpdate builder.
func (tmu *TeamManagerUpdate) Where(ps ...predicate.TeamManager) *TeamManagerUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetUpdatedAt sets the "updated_at" field.
func (tmu *TeamManagerUpdate) SetUpdatedAt(t time.Time) *TeamManagerUpdate {
	tmu.mutation.SetUpdatedAt(t)
	return tmu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmu *TeamManagerUpdate) SetNillableUpdatedAt(t *time.Time) *TeamManagerUpdate {
	if t != nil {
		tmu.SetUpdatedAt(*t)
	}
	return tmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tmu *TeamManagerUpdate) ClearUpdatedAt() *TeamManagerUpdate {
	tmu.mutation.ClearUpdatedAt()
	return tmu
}

// SetDeletedAt sets the "deleted_at" field.
func (tmu *TeamManagerUpdate) SetDeletedAt(t time.Time) *TeamManagerUpdate {
	tmu.mutation.SetDeletedAt(t)
	return tmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmu *TeamManagerUpdate) SetNillableDeletedAt(t *time.Time) *TeamManagerUpdate {
	if t != nil {
		tmu.SetDeletedAt(*t)
	}
	return tmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tmu *TeamManagerUpdate) ClearDeletedAt() *TeamManagerUpdate {
	tmu.mutation.ClearDeletedAt()
	return tmu
}

// SetTeamID sets the "team_id" field.
func (tmu *TeamManagerUpdate) SetTeamID(u uuid.UUID) *TeamManagerUpdate {
	tmu.mutation.SetTeamID(u)
	return tmu
}

// SetUserID sets the "user_id" field.
func (tmu *TeamManagerUpdate) SetUserID(u uuid.UUID) *TeamManagerUpdate {
	tmu.mutation.SetUserID(u)
	return tmu
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (tmu *TeamManagerUpdate) SetUserEdgeID(id uuid.UUID) *TeamManagerUpdate {
	tmu.mutation.SetUserEdgeID(id)
	return tmu
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (tmu *TeamManagerUpdate) SetUserEdge(u *User) *TeamManagerUpdate {
	return tmu.SetUserEdgeID(u.ID)
}

// SetTeamEdgeID sets the "team_edge" edge to the Team entity by ID.
func (tmu *TeamManagerUpdate) SetTeamEdgeID(id uuid.UUID) *TeamManagerUpdate {
	tmu.mutation.SetTeamEdgeID(id)
	return tmu
}

// SetTeamEdge sets the "team_edge" edge to the Team entity.
func (tmu *TeamManagerUpdate) SetTeamEdge(t *Team) *TeamManagerUpdate {
	return tmu.SetTeamEdgeID(t.ID)
}

// Mutation returns the TeamManagerMutation object of the builder.
func (tmu *TeamManagerUpdate) Mutation() *TeamManagerMutation {
	return tmu.mutation
}

// ClearUserEdge clears the "user_edge" edge to the User entity.
func (tmu *TeamManagerUpdate) ClearUserEdge() *TeamManagerUpdate {
	tmu.mutation.ClearUserEdge()
	return tmu
}

// ClearTeamEdge clears the "team_edge" edge to the Team entity.
func (tmu *TeamManagerUpdate) ClearTeamEdge() *TeamManagerUpdate {
	tmu.mutation.ClearTeamEdge()
	return tmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TeamManagerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tmu.hooks) == 0 {
		if err = tmu.check(); err != nil {
			return 0, err
		}
		affected, err = tmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamManagerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tmu.check(); err != nil {
				return 0, err
			}
			tmu.mutation = mutation
			affected, err = tmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tmu.hooks) - 1; i >= 0; i-- {
			if tmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TeamManagerUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TeamManagerUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TeamManagerUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmu *TeamManagerUpdate) check() error {
	if _, ok := tmu.mutation.UserEdgeID(); tmu.mutation.UserEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeamManager.user_edge"`)
	}
	if _, ok := tmu.mutation.TeamEdgeID(); tmu.mutation.TeamEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeamManager.team_edge"`)
	}
	return nil
}

func (tmu *TeamManagerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammanager.Table,
			Columns: teammanager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: teammanager.FieldID,
			},
		},
	}
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.UpdatedAt(); ok {
		_spec.SetField(teammanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if tmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(teammanager.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tmu.mutation.DeletedAt(); ok {
		_spec.SetField(teammanager.FieldDeletedAt, field.TypeTime, value)
	}
	if tmu.mutation.DeletedAtCleared() {
		_spec.ClearField(teammanager.FieldDeletedAt, field.TypeTime)
	}
	if tmu.mutation.UserEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.UserEdgeTable,
			Columns: []string{teammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmu.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.UserEdgeTable,
			Columns: []string{teammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tmu.mutation.TeamEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.TeamEdgeTable,
			Columns: []string{teammanager.TeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmu.mutation.TeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.TeamEdgeTable,
			Columns: []string{teammanager.TeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TeamManagerUpdateOne is the builder for updating a single TeamManager entity.
type TeamManagerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamManagerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tmuo *TeamManagerUpdateOne) SetUpdatedAt(t time.Time) *TeamManagerUpdateOne {
	tmuo.mutation.SetUpdatedAt(t)
	return tmuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tmuo *TeamManagerUpdateOne) SetNillableUpdatedAt(t *time.Time) *TeamManagerUpdateOne {
	if t != nil {
		tmuo.SetUpdatedAt(*t)
	}
	return tmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tmuo *TeamManagerUpdateOne) ClearUpdatedAt() *TeamManagerUpdateOne {
	tmuo.mutation.ClearUpdatedAt()
	return tmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tmuo *TeamManagerUpdateOne) SetDeletedAt(t time.Time) *TeamManagerUpdateOne {
	tmuo.mutation.SetDeletedAt(t)
	return tmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tmuo *TeamManagerUpdateOne) SetNillableDeletedAt(t *time.Time) *TeamManagerUpdateOne {
	if t != nil {
		tmuo.SetDeletedAt(*t)
	}
	return tmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tmuo *TeamManagerUpdateOne) ClearDeletedAt() *TeamManagerUpdateOne {
	tmuo.mutation.ClearDeletedAt()
	return tmuo
}

// SetTeamID sets the "team_id" field.
func (tmuo *TeamManagerUpdateOne) SetTeamID(u uuid.UUID) *TeamManagerUpdateOne {
	tmuo.mutation.SetTeamID(u)
	return tmuo
}

// SetUserID sets the "user_id" field.
func (tmuo *TeamManagerUpdateOne) SetUserID(u uuid.UUID) *TeamManagerUpdateOne {
	tmuo.mutation.SetUserID(u)
	return tmuo
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (tmuo *TeamManagerUpdateOne) SetUserEdgeID(id uuid.UUID) *TeamManagerUpdateOne {
	tmuo.mutation.SetUserEdgeID(id)
	return tmuo
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (tmuo *TeamManagerUpdateOne) SetUserEdge(u *User) *TeamManagerUpdateOne {
	return tmuo.SetUserEdgeID(u.ID)
}

// SetTeamEdgeID sets the "team_edge" edge to the Team entity by ID.
func (tmuo *TeamManagerUpdateOne) SetTeamEdgeID(id uuid.UUID) *TeamManagerUpdateOne {
	tmuo.mutation.SetTeamEdgeID(id)
	return tmuo
}

// SetTeamEdge sets the "team_edge" edge to the Team entity.
func (tmuo *TeamManagerUpdateOne) SetTeamEdge(t *Team) *TeamManagerUpdateOne {
	return tmuo.SetTeamEdgeID(t.ID)
}

// Mutation returns the TeamManagerMutation object of the builder.
func (tmuo *TeamManagerUpdateOne) Mutation() *TeamManagerMutation {
	return tmuo.mutation
}

// ClearUserEdge clears the "user_edge" edge to the User entity.
func (tmuo *TeamManagerUpdateOne) ClearUserEdge() *TeamManagerUpdateOne {
	tmuo.mutation.ClearUserEdge()
	return tmuo
}

// ClearTeamEdge clears the "team_edge" edge to the Team entity.
func (tmuo *TeamManagerUpdateOne) ClearTeamEdge() *TeamManagerUpdateOne {
	tmuo.mutation.ClearTeamEdge()
	return tmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TeamManagerUpdateOne) Select(field string, fields ...string) *TeamManagerUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TeamManager entity.
func (tmuo *TeamManagerUpdateOne) Save(ctx context.Context) (*TeamManager, error) {
	var (
		err  error
		node *TeamManager
	)
	if len(tmuo.hooks) == 0 {
		if err = tmuo.check(); err != nil {
			return nil, err
		}
		node, err = tmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamManagerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tmuo.check(); err != nil {
				return nil, err
			}
			tmuo.mutation = mutation
			node, err = tmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tmuo.hooks) - 1; i >= 0; i-- {
			if tmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TeamManager)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TeamManagerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TeamManagerUpdateOne) SaveX(ctx context.Context) *TeamManager {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TeamManagerUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TeamManagerUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmuo *TeamManagerUpdateOne) check() error {
	if _, ok := tmuo.mutation.UserEdgeID(); tmuo.mutation.UserEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeamManager.user_edge"`)
	}
	if _, ok := tmuo.mutation.TeamEdgeID(); tmuo.mutation.TeamEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeamManager.team_edge"`)
	}
	return nil
}

func (tmuo *TeamManagerUpdateOne) sqlSave(ctx context.Context) (_node *TeamManager, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammanager.Table,
			Columns: teammanager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: teammanager.FieldID,
			},
		},
	}
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TeamManager.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammanager.FieldID)
		for _, f := range fields {
			if !teammanager.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teammanager.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(teammanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if tmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(teammanager.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tmuo.mutation.DeletedAt(); ok {
		_spec.SetField(teammanager.FieldDeletedAt, field.TypeTime, value)
	}
	if tmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(teammanager.FieldDeletedAt, field.TypeTime)
	}
	if tmuo.mutation.UserEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.UserEdgeTable,
			Columns: []string{teammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmuo.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.UserEdgeTable,
			Columns: []string{teammanager.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tmuo.mutation.TeamEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.TeamEdgeTable,
			Columns: []string{teammanager.TeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tmuo.mutation.TeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   teammanager.TeamEdgeTable,
			Columns: []string{teammanager.TeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TeamManager{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
