// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
	"trec/ent/emailtemplate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// EmailTemplate is the model entity for the EmailTemplate schema.
type EmailTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Event holds the value of the "event" field.
	Event emailtemplate.Event `json:"event,omitempty"`
	// SendTo holds the value of the "send_to" field.
	SendTo []string `json:"send_to,omitempty"`
	// Cc holds the value of the "cc" field.
	Cc []string `json:"cc,omitempty"`
	// Bcc holds the value of the "bcc" field.
	Bcc []string `json:"bcc,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Signature holds the value of the "signature" field.
	Signature string `json:"signature,omitempty"`
	// Status holds the value of the "status" field.
	Status emailtemplate.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailTemplateQuery when eager-loading is set.
	Edges EmailTemplateEdges `json:"edges"`
}

// EmailTemplateEdges holds the relations/edges for other nodes in the graph.
type EmailTemplateEdges struct {
	// RoleEdges holds the value of the role_edges edge.
	RoleEdges []*Role `json:"role_edges,omitempty"`
	// RoleEmailTemplates holds the value of the role_email_templates edge.
	RoleEmailTemplates []*EmailRoleAttribute `json:"role_email_templates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedRoleEdges          map[string][]*Role
	namedRoleEmailTemplates map[string][]*EmailRoleAttribute
}

// RoleEdgesOrErr returns the RoleEdges value or an error if the edge
// was not loaded in eager-loading.
func (e EmailTemplateEdges) RoleEdgesOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.RoleEdges, nil
	}
	return nil, &NotLoadedError{edge: "role_edges"}
}

// RoleEmailTemplatesOrErr returns the RoleEmailTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e EmailTemplateEdges) RoleEmailTemplatesOrErr() ([]*EmailRoleAttribute, error) {
	if e.loadedTypes[1] {
		return e.RoleEmailTemplates, nil
	}
	return nil, &NotLoadedError{edge: "role_email_templates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailtemplate.FieldSendTo, emailtemplate.FieldCc, emailtemplate.FieldBcc:
			values[i] = new([]byte)
		case emailtemplate.FieldEvent, emailtemplate.FieldSubject, emailtemplate.FieldContent, emailtemplate.FieldSignature, emailtemplate.FieldStatus:
			values[i] = new(sql.NullString)
		case emailtemplate.FieldCreatedAt, emailtemplate.FieldUpdatedAt, emailtemplate.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case emailtemplate.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EmailTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailTemplate fields.
func (et *EmailTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailtemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				et.ID = *value
			}
		case emailtemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				et.CreatedAt = value.Time
			}
		case emailtemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				et.UpdatedAt = value.Time
			}
		case emailtemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				et.DeletedAt = value.Time
			}
		case emailtemplate.FieldEvent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event", values[i])
			} else if value.Valid {
				et.Event = emailtemplate.Event(value.String)
			}
		case emailtemplate.FieldSendTo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field send_to", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &et.SendTo); err != nil {
					return fmt.Errorf("unmarshal field send_to: %w", err)
				}
			}
		case emailtemplate.FieldCc:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cc", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &et.Cc); err != nil {
					return fmt.Errorf("unmarshal field cc: %w", err)
				}
			}
		case emailtemplate.FieldBcc:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bcc", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &et.Bcc); err != nil {
					return fmt.Errorf("unmarshal field bcc: %w", err)
				}
			}
		case emailtemplate.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				et.Subject = value.String
			}
		case emailtemplate.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				et.Content = value.String
			}
		case emailtemplate.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				et.Signature = value.String
			}
		case emailtemplate.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				et.Status = emailtemplate.Status(value.String)
			}
		}
	}
	return nil
}

// QueryRoleEdges queries the "role_edges" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryRoleEdges() *RoleQuery {
	return (&EmailTemplateClient{config: et.config}).QueryRoleEdges(et)
}

// QueryRoleEmailTemplates queries the "role_email_templates" edge of the EmailTemplate entity.
func (et *EmailTemplate) QueryRoleEmailTemplates() *EmailRoleAttributeQuery {
	return (&EmailTemplateClient{config: et.config}).QueryRoleEmailTemplates(et)
}

// Update returns a builder for updating this EmailTemplate.
// Note that you need to call EmailTemplate.Unwrap() before calling this method if this EmailTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EmailTemplate) Update() *EmailTemplateUpdateOne {
	return (&EmailTemplateClient{config: et.config}).UpdateOne(et)
}

// Unwrap unwraps the EmailTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EmailTemplate) Unwrap() *EmailTemplate {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailTemplate is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EmailTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("EmailTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("created_at=")
	builder.WriteString(et.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(et.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(et.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event=")
	builder.WriteString(fmt.Sprintf("%v", et.Event))
	builder.WriteString(", ")
	builder.WriteString("send_to=")
	builder.WriteString(fmt.Sprintf("%v", et.SendTo))
	builder.WriteString(", ")
	builder.WriteString("cc=")
	builder.WriteString(fmt.Sprintf("%v", et.Cc))
	builder.WriteString(", ")
	builder.WriteString("bcc=")
	builder.WriteString(fmt.Sprintf("%v", et.Bcc))
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(et.Subject)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(et.Content)
	builder.WriteString(", ")
	builder.WriteString("signature=")
	builder.WriteString(et.Signature)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", et.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRoleEdges returns the RoleEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (et *EmailTemplate) NamedRoleEdges(name string) ([]*Role, error) {
	if et.Edges.namedRoleEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := et.Edges.namedRoleEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (et *EmailTemplate) appendNamedRoleEdges(name string, edges ...*Role) {
	if et.Edges.namedRoleEdges == nil {
		et.Edges.namedRoleEdges = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		et.Edges.namedRoleEdges[name] = []*Role{}
	} else {
		et.Edges.namedRoleEdges[name] = append(et.Edges.namedRoleEdges[name], edges...)
	}
}

// NamedRoleEmailTemplates returns the RoleEmailTemplates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (et *EmailTemplate) NamedRoleEmailTemplates(name string) ([]*EmailRoleAttribute, error) {
	if et.Edges.namedRoleEmailTemplates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := et.Edges.namedRoleEmailTemplates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (et *EmailTemplate) appendNamedRoleEmailTemplates(name string, edges ...*EmailRoleAttribute) {
	if et.Edges.namedRoleEmailTemplates == nil {
		et.Edges.namedRoleEmailTemplates = make(map[string][]*EmailRoleAttribute)
	}
	if len(edges) == 0 {
		et.Edges.namedRoleEmailTemplates[name] = []*EmailRoleAttribute{}
	} else {
		et.Edges.namedRoleEmailTemplates[name] = append(et.Edges.namedRoleEmailTemplates[name], edges...)
	}
}

// EmailTemplates is a parsable slice of EmailTemplate.
type EmailTemplates []*EmailTemplate

func (et EmailTemplates) config(cfg config) {
	for _i := range et {
		et[_i].config = cfg
	}
}
