// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/candidate"
	"trec/ent/candidatehistorycall"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CandidateHistoryCall is the model entity for the CandidateHistoryCall schema.
type CandidateHistoryCall struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CandidateID holds the value of the "candidate_id" field.
	CandidateID uuid.UUID `json:"candidate_id,omitempty"`
	// ContactTo holds the value of the "contact_to" field.
	ContactTo string `json:"contact_to,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type candidatehistorycall.Type `json:"type,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CandidateHistoryCallQuery when eager-loading is set.
	Edges CandidateHistoryCallEdges `json:"edges"`
}

// CandidateHistoryCallEdges holds the relations/edges for other nodes in the graph.
type CandidateHistoryCallEdges struct {
	// AttachmentEdges holds the value of the attachment_edges edge.
	AttachmentEdges []*Attachment `json:"attachment_edges,omitempty"`
	// CandidateEdge holds the value of the candidate_edge edge.
	CandidateEdge *Candidate `json:"candidate_edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAttachmentEdges map[string][]*Attachment
}

// AttachmentEdgesOrErr returns the AttachmentEdges value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateHistoryCallEdges) AttachmentEdgesOrErr() ([]*Attachment, error) {
	if e.loadedTypes[0] {
		return e.AttachmentEdges, nil
	}
	return nil, &NotLoadedError{edge: "attachment_edges"}
}

// CandidateEdgeOrErr returns the CandidateEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateHistoryCallEdges) CandidateEdgeOrErr() (*Candidate, error) {
	if e.loadedTypes[1] {
		if e.CandidateEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidate.Label}
		}
		return e.CandidateEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CandidateHistoryCall) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case candidatehistorycall.FieldContactTo, candidatehistorycall.FieldDescription, candidatehistorycall.FieldType:
			values[i] = new(sql.NullString)
		case candidatehistorycall.FieldCreatedAt, candidatehistorycall.FieldUpdatedAt, candidatehistorycall.FieldDeletedAt, candidatehistorycall.FieldDate, candidatehistorycall.FieldStartTime, candidatehistorycall.FieldEndTime:
			values[i] = new(sql.NullTime)
		case candidatehistorycall.FieldID, candidatehistorycall.FieldCandidateID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CandidateHistoryCall", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CandidateHistoryCall fields.
func (chc *CandidateHistoryCall) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case candidatehistorycall.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				chc.ID = *value
			}
		case candidatehistorycall.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				chc.CreatedAt = value.Time
			}
		case candidatehistorycall.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				chc.UpdatedAt = value.Time
			}
		case candidatehistorycall.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				chc.DeletedAt = value.Time
			}
		case candidatehistorycall.FieldCandidateID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_id", values[i])
			} else if value != nil {
				chc.CandidateID = *value
			}
		case candidatehistorycall.FieldContactTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_to", values[i])
			} else if value.Valid {
				chc.ContactTo = value.String
			}
		case candidatehistorycall.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				chc.Description = value.String
			}
		case candidatehistorycall.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				chc.Type = candidatehistorycall.Type(value.String)
			}
		case candidatehistorycall.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				chc.Date = value.Time
			}
		case candidatehistorycall.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				chc.StartTime = value.Time
			}
		case candidatehistorycall.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				chc.EndTime = value.Time
			}
		}
	}
	return nil
}

// QueryAttachmentEdges queries the "attachment_edges" edge of the CandidateHistoryCall entity.
func (chc *CandidateHistoryCall) QueryAttachmentEdges() *AttachmentQuery {
	return (&CandidateHistoryCallClient{config: chc.config}).QueryAttachmentEdges(chc)
}

// QueryCandidateEdge queries the "candidate_edge" edge of the CandidateHistoryCall entity.
func (chc *CandidateHistoryCall) QueryCandidateEdge() *CandidateQuery {
	return (&CandidateHistoryCallClient{config: chc.config}).QueryCandidateEdge(chc)
}

// Update returns a builder for updating this CandidateHistoryCall.
// Note that you need to call CandidateHistoryCall.Unwrap() before calling this method if this CandidateHistoryCall
// was returned from a transaction, and the transaction was committed or rolled back.
func (chc *CandidateHistoryCall) Update() *CandidateHistoryCallUpdateOne {
	return (&CandidateHistoryCallClient{config: chc.config}).UpdateOne(chc)
}

// Unwrap unwraps the CandidateHistoryCall entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (chc *CandidateHistoryCall) Unwrap() *CandidateHistoryCall {
	_tx, ok := chc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CandidateHistoryCall is not a transactional entity")
	}
	chc.config.driver = _tx.drv
	return chc
}

// String implements the fmt.Stringer.
func (chc *CandidateHistoryCall) String() string {
	var builder strings.Builder
	builder.WriteString("CandidateHistoryCall(")
	builder.WriteString(fmt.Sprintf("id=%v, ", chc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(chc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(chc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(chc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("candidate_id=")
	builder.WriteString(fmt.Sprintf("%v", chc.CandidateID))
	builder.WriteString(", ")
	builder.WriteString("contact_to=")
	builder.WriteString(chc.ContactTo)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(chc.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", chc.Type))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(chc.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(chc.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(chc.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAttachmentEdges returns the AttachmentEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (chc *CandidateHistoryCall) NamedAttachmentEdges(name string) ([]*Attachment, error) {
	if chc.Edges.namedAttachmentEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := chc.Edges.namedAttachmentEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (chc *CandidateHistoryCall) appendNamedAttachmentEdges(name string, edges ...*Attachment) {
	if chc.Edges.namedAttachmentEdges == nil {
		chc.Edges.namedAttachmentEdges = make(map[string][]*Attachment)
	}
	if len(edges) == 0 {
		chc.Edges.namedAttachmentEdges[name] = []*Attachment{}
	} else {
		chc.Edges.namedAttachmentEdges[name] = append(chc.Edges.namedAttachmentEdges[name], edges...)
	}
}

// CandidateHistoryCalls is a parsable slice of CandidateHistoryCall.
type CandidateHistoryCalls []*CandidateHistoryCall

func (chc CandidateHistoryCalls) config(cfg config) {
	for _i := range chc {
		chc[_i].config = cfg
	}
}
