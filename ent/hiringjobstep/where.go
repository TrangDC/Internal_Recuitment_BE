// Code generated by ent, DO NOT EDIT.

package hiringjobstep

import (
	"time"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// HiringJobID applies equality check predicate on the "hiring_job_id" field. It's identical to HiringJobIDEQ.
func HiringJobID(v uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHiringJobID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedByID applies equality check predicate on the "created_by_id" field. It's identical to CreatedByIDEQ.
func CreatedByID(v uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByID), v))
	})
}

// HiringJobIDEQ applies the EQ predicate on the "hiring_job_id" field.
func HiringJobIDEQ(v uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHiringJobID), v))
	})
}

// HiringJobIDNEQ applies the NEQ predicate on the "hiring_job_id" field.
func HiringJobIDNEQ(v uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHiringJobID), v))
	})
}

// HiringJobIDIn applies the In predicate on the "hiring_job_id" field.
func HiringJobIDIn(vs ...uuid.UUID) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHiringJobID), v...))
	})
}

// HiringJobIDNotIn applies the NotIn predicate on the "hiring_job_id" field.
func HiringJobIDNotIn(vs ...uuid.UUID) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHiringJobID), v...))
	})
}

// HiringJobIDIsNil applies the IsNil predicate on the "hiring_job_id" field.
func HiringJobIDIsNil() predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHiringJobID)))
	})
}

// HiringJobIDNotNil applies the NotNil predicate on the "hiring_job_id" field.
func HiringJobIDNotNil() predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHiringJobID)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// CreatedByIDEQ applies the EQ predicate on the "created_by_id" field.
func CreatedByIDEQ(v uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedByID), v))
	})
}

// CreatedByIDNEQ applies the NEQ predicate on the "created_by_id" field.
func CreatedByIDNEQ(v uuid.UUID) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedByID), v))
	})
}

// CreatedByIDIn applies the In predicate on the "created_by_id" field.
func CreatedByIDIn(vs ...uuid.UUID) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedByID), v...))
	})
}

// CreatedByIDNotIn applies the NotIn predicate on the "created_by_id" field.
func CreatedByIDNotIn(vs ...uuid.UUID) predicate.HiringJobStep {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedByID), v...))
	})
}

// CreatedByIDIsNil applies the IsNil predicate on the "created_by_id" field.
func CreatedByIDIsNil() predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedByID)))
	})
}

// CreatedByIDNotNil applies the NotNil predicate on the "created_by_id" field.
func CreatedByIDNotNil() predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedByID)))
	})
}

// HasHiringJobEdge applies the HasEdge predicate on the "hiring_job_edge" edge.
func HasHiringJobEdge() predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringJobEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HiringJobEdgeTable, HiringJobEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHiringJobEdgeWith applies the HasEdge predicate on the "hiring_job_edge" edge with a given conditions (other predicates).
func HasHiringJobEdgeWith(preds ...predicate.HiringJob) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringJobEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HiringJobEdgeTable, HiringJobEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedByEdge applies the HasEdge predicate on the "created_by_edge" edge.
func HasCreatedByEdge() predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreatedByEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByEdgeTable, CreatedByEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByEdgeWith applies the HasEdge predicate on the "created_by_edge" edge with a given conditions (other predicates).
func HasCreatedByEdgeWith(preds ...predicate.User) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreatedByEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatedByEdgeTable, CreatedByEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HiringJobStep) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HiringJobStep) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HiringJobStep) predicate.HiringJobStep {
	return predicate.HiringJobStep(func(s *sql.Selector) {
		p(s.Not())
	})
}
