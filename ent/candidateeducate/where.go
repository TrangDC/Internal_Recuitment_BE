// Code generated by ent, DO NOT EDIT.

package candidateeducate

import (
	"time"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CandidateID applies equality check predicate on the "candidate_id" field. It's identical to CandidateIDEQ.
func CandidateID(v uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCandidateID), v))
	})
}

// SchoolName applies equality check predicate on the "school_name" field. It's identical to SchoolNameEQ.
func SchoolName(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchoolName), v))
	})
}

// Major applies equality check predicate on the "major" field. It's identical to MajorEQ.
func Major(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMajor), v))
	})
}

// Gpa applies equality check predicate on the "gpa" field. It's identical to GpaEQ.
func Gpa(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGpa), v))
	})
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// IsCurrent applies equality check predicate on the "is_current" field. It's identical to IsCurrentEQ.
func IsCurrent(v bool) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCurrent), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CandidateIDEQ applies the EQ predicate on the "candidate_id" field.
func CandidateIDEQ(v uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCandidateID), v))
	})
}

// CandidateIDNEQ applies the NEQ predicate on the "candidate_id" field.
func CandidateIDNEQ(v uuid.UUID) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCandidateID), v))
	})
}

// CandidateIDIn applies the In predicate on the "candidate_id" field.
func CandidateIDIn(vs ...uuid.UUID) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCandidateID), v...))
	})
}

// CandidateIDNotIn applies the NotIn predicate on the "candidate_id" field.
func CandidateIDNotIn(vs ...uuid.UUID) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCandidateID), v...))
	})
}

// CandidateIDIsNil applies the IsNil predicate on the "candidate_id" field.
func CandidateIDIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCandidateID)))
	})
}

// CandidateIDNotNil applies the NotNil predicate on the "candidate_id" field.
func CandidateIDNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCandidateID)))
	})
}

// SchoolNameEQ applies the EQ predicate on the "school_name" field.
func SchoolNameEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchoolName), v))
	})
}

// SchoolNameNEQ applies the NEQ predicate on the "school_name" field.
func SchoolNameNEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSchoolName), v))
	})
}

// SchoolNameIn applies the In predicate on the "school_name" field.
func SchoolNameIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSchoolName), v...))
	})
}

// SchoolNameNotIn applies the NotIn predicate on the "school_name" field.
func SchoolNameNotIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSchoolName), v...))
	})
}

// SchoolNameGT applies the GT predicate on the "school_name" field.
func SchoolNameGT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSchoolName), v))
	})
}

// SchoolNameGTE applies the GTE predicate on the "school_name" field.
func SchoolNameGTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSchoolName), v))
	})
}

// SchoolNameLT applies the LT predicate on the "school_name" field.
func SchoolNameLT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSchoolName), v))
	})
}

// SchoolNameLTE applies the LTE predicate on the "school_name" field.
func SchoolNameLTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSchoolName), v))
	})
}

// SchoolNameContains applies the Contains predicate on the "school_name" field.
func SchoolNameContains(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSchoolName), v))
	})
}

// SchoolNameHasPrefix applies the HasPrefix predicate on the "school_name" field.
func SchoolNameHasPrefix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSchoolName), v))
	})
}

// SchoolNameHasSuffix applies the HasSuffix predicate on the "school_name" field.
func SchoolNameHasSuffix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSchoolName), v))
	})
}

// SchoolNameEqualFold applies the EqualFold predicate on the "school_name" field.
func SchoolNameEqualFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSchoolName), v))
	})
}

// SchoolNameContainsFold applies the ContainsFold predicate on the "school_name" field.
func SchoolNameContainsFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSchoolName), v))
	})
}

// MajorEQ applies the EQ predicate on the "major" field.
func MajorEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMajor), v))
	})
}

// MajorNEQ applies the NEQ predicate on the "major" field.
func MajorNEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMajor), v))
	})
}

// MajorIn applies the In predicate on the "major" field.
func MajorIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMajor), v...))
	})
}

// MajorNotIn applies the NotIn predicate on the "major" field.
func MajorNotIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMajor), v...))
	})
}

// MajorGT applies the GT predicate on the "major" field.
func MajorGT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMajor), v))
	})
}

// MajorGTE applies the GTE predicate on the "major" field.
func MajorGTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMajor), v))
	})
}

// MajorLT applies the LT predicate on the "major" field.
func MajorLT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMajor), v))
	})
}

// MajorLTE applies the LTE predicate on the "major" field.
func MajorLTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMajor), v))
	})
}

// MajorContains applies the Contains predicate on the "major" field.
func MajorContains(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMajor), v))
	})
}

// MajorHasPrefix applies the HasPrefix predicate on the "major" field.
func MajorHasPrefix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMajor), v))
	})
}

// MajorHasSuffix applies the HasSuffix predicate on the "major" field.
func MajorHasSuffix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMajor), v))
	})
}

// MajorIsNil applies the IsNil predicate on the "major" field.
func MajorIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMajor)))
	})
}

// MajorNotNil applies the NotNil predicate on the "major" field.
func MajorNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMajor)))
	})
}

// MajorEqualFold applies the EqualFold predicate on the "major" field.
func MajorEqualFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMajor), v))
	})
}

// MajorContainsFold applies the ContainsFold predicate on the "major" field.
func MajorContainsFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMajor), v))
	})
}

// GpaEQ applies the EQ predicate on the "gpa" field.
func GpaEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGpa), v))
	})
}

// GpaNEQ applies the NEQ predicate on the "gpa" field.
func GpaNEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGpa), v))
	})
}

// GpaIn applies the In predicate on the "gpa" field.
func GpaIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGpa), v...))
	})
}

// GpaNotIn applies the NotIn predicate on the "gpa" field.
func GpaNotIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGpa), v...))
	})
}

// GpaGT applies the GT predicate on the "gpa" field.
func GpaGT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGpa), v))
	})
}

// GpaGTE applies the GTE predicate on the "gpa" field.
func GpaGTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGpa), v))
	})
}

// GpaLT applies the LT predicate on the "gpa" field.
func GpaLT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGpa), v))
	})
}

// GpaLTE applies the LTE predicate on the "gpa" field.
func GpaLTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGpa), v))
	})
}

// GpaContains applies the Contains predicate on the "gpa" field.
func GpaContains(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGpa), v))
	})
}

// GpaHasPrefix applies the HasPrefix predicate on the "gpa" field.
func GpaHasPrefix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGpa), v))
	})
}

// GpaHasSuffix applies the HasSuffix predicate on the "gpa" field.
func GpaHasSuffix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGpa), v))
	})
}

// GpaIsNil applies the IsNil predicate on the "gpa" field.
func GpaIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGpa)))
	})
}

// GpaNotNil applies the NotNil predicate on the "gpa" field.
func GpaNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGpa)))
	})
}

// GpaEqualFold applies the EqualFold predicate on the "gpa" field.
func GpaEqualFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGpa), v))
	})
}

// GpaContainsFold applies the ContainsFold predicate on the "gpa" field.
func GpaContainsFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGpa), v))
	})
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocation), v))
	})
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLocation), v...))
	})
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLocation), v...))
	})
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocation), v))
	})
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocation), v))
	})
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocation), v))
	})
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocation), v))
	})
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocation), v))
	})
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocation), v))
	})
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocation), v))
	})
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocation)))
	})
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocation)))
	})
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocation), v))
	})
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocation), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartDate), v))
	})
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartDate), v...))
	})
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartDate), v...))
	})
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartDate), v))
	})
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartDate), v))
	})
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartDate), v))
	})
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartDate), v))
	})
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartDate)))
	})
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartDate)))
	})
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndDate), v))
	})
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndDate), v...))
	})
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndDate), v...))
	})
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndDate), v))
	})
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndDate), v))
	})
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndDate), v))
	})
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndDate), v))
	})
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndDate)))
	})
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndDate)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int) predicate.CandidateEducate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v int) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderID), v))
	})
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v int) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderID), v))
	})
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v int) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderID), v))
	})
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v int) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderID), v))
	})
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderID)))
	})
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderID)))
	})
}

// IsCurrentEQ applies the EQ predicate on the "is_current" field.
func IsCurrentEQ(v bool) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCurrent), v))
	})
}

// IsCurrentNEQ applies the NEQ predicate on the "is_current" field.
func IsCurrentNEQ(v bool) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsCurrent), v))
	})
}

// HasAttachmentEdges applies the HasEdge predicate on the "attachment_edges" edge.
func HasAttachmentEdges() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentEdgesTable, AttachmentEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentEdgesWith applies the HasEdge predicate on the "attachment_edges" edge with a given conditions (other predicates).
func HasAttachmentEdgesWith(preds ...predicate.Attachment) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentEdgesTable, AttachmentEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateEdge applies the HasEdge predicate on the "candidate_edge" edge.
func HasCandidateEdge() predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CandidateEdgeTable, CandidateEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateEdgeWith applies the HasEdge predicate on the "candidate_edge" edge with a given conditions (other predicates).
func HasCandidateEdgeWith(preds ...predicate.Candidate) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CandidateEdgeTable, CandidateEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CandidateEducate) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CandidateEducate) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CandidateEducate) predicate.CandidateEducate {
	return predicate.CandidateEducate(func(s *sql.Selector) {
		p(s.Not())
	})
}
