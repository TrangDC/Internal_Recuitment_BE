// Code generated by ent, DO NOT EDIT.

package candidatejobstep

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the candidatejobstep type in the database.
	Label = "candidate_job_step"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCandidateJobStatus holds the string denoting the candidate_job_status field in the database.
	FieldCandidateJobStatus = "candidate_job_status"
	// FieldCandidateJobID holds the string denoting the candidate_job_id field in the database.
	FieldCandidateJobID = "candidate_job_id"
	// EdgeCandidateJobEdge holds the string denoting the candidate_job_edge edge name in mutations.
	EdgeCandidateJobEdge = "candidate_job_edge"
	// Table holds the table name of the candidatejobstep in the database.
	Table = "candidate_job_steps"
	// CandidateJobEdgeTable is the table that holds the candidate_job_edge relation/edge.
	CandidateJobEdgeTable = "candidate_job_steps"
	// CandidateJobEdgeInverseTable is the table name for the CandidateJob entity.
	// It exists in this package in order to avoid circular dependency with the "candidatejob" package.
	CandidateJobEdgeInverseTable = "candidate_jobs"
	// CandidateJobEdgeColumn is the table column denoting the candidate_job_edge relation/edge.
	CandidateJobEdgeColumn = "candidate_job_id"
)

// Columns holds all SQL columns for candidatejobstep fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCandidateJobStatus,
	FieldCandidateJobID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// CandidateJobStatus defines the type for the "candidate_job_status" enum field.
type CandidateJobStatus string

// CandidateJobStatusApplied is the default value of the CandidateJobStatus enum.
const DefaultCandidateJobStatus = CandidateJobStatusApplied

// CandidateJobStatus values.
const (
	CandidateJobStatusApplied         CandidateJobStatus = "applied"
	CandidateJobStatusInterviewing    CandidateJobStatus = "interviewing"
	CandidateJobStatusOffering        CandidateJobStatus = "offering"
	CandidateJobStatusHired           CandidateJobStatus = "hired"
	CandidateJobStatusFailedCv        CandidateJobStatus = "failed_cv"
	CandidateJobStatusFailedInterview CandidateJobStatus = "failed_interview"
	CandidateJobStatusOfferLost       CandidateJobStatus = "offer_lost"
	CandidateJobStatusExStaff         CandidateJobStatus = "ex_staff"
)

func (cjs CandidateJobStatus) String() string {
	return string(cjs)
}

// CandidateJobStatusValidator is a validator for the "candidate_job_status" field enum values. It is called by the builders before save.
func CandidateJobStatusValidator(cjs CandidateJobStatus) error {
	switch cjs {
	case CandidateJobStatusApplied, CandidateJobStatusInterviewing, CandidateJobStatusOffering, CandidateJobStatusHired, CandidateJobStatusFailedCv, CandidateJobStatusFailedInterview, CandidateJobStatusOfferLost, CandidateJobStatusExStaff:
		return nil
	default:
		return fmt.Errorf("candidatejobstep: invalid enum value for candidate_job_status field: %q", cjs)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e CandidateJobStatus) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *CandidateJobStatus) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = CandidateJobStatus(str)
	if err := CandidateJobStatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid CandidateJobStatus", str)
	}
	return nil
}
