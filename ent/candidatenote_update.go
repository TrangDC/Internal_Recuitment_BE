// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidatenote"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateNoteUpdate is the builder for updating CandidateNote entities.
type CandidateNoteUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateNoteMutation
}

// Where appends a list predicates to the CandidateNoteUpdate builder.
func (cnu *CandidateNoteUpdate) Where(ps ...predicate.CandidateNote) *CandidateNoteUpdate {
	cnu.mutation.Where(ps...)
	return cnu
}

// SetUpdatedAt sets the "updated_at" field.
func (cnu *CandidateNoteUpdate) SetUpdatedAt(t time.Time) *CandidateNoteUpdate {
	cnu.mutation.SetUpdatedAt(t)
	return cnu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cnu *CandidateNoteUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateNoteUpdate {
	if t != nil {
		cnu.SetUpdatedAt(*t)
	}
	return cnu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cnu *CandidateNoteUpdate) ClearUpdatedAt() *CandidateNoteUpdate {
	cnu.mutation.ClearUpdatedAt()
	return cnu
}

// SetDeletedAt sets the "deleted_at" field.
func (cnu *CandidateNoteUpdate) SetDeletedAt(t time.Time) *CandidateNoteUpdate {
	cnu.mutation.SetDeletedAt(t)
	return cnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cnu *CandidateNoteUpdate) SetNillableDeletedAt(t *time.Time) *CandidateNoteUpdate {
	if t != nil {
		cnu.SetDeletedAt(*t)
	}
	return cnu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cnu *CandidateNoteUpdate) ClearDeletedAt() *CandidateNoteUpdate {
	cnu.mutation.ClearDeletedAt()
	return cnu
}

// SetCandidateID sets the "candidate_id" field.
func (cnu *CandidateNoteUpdate) SetCandidateID(u uuid.UUID) *CandidateNoteUpdate {
	cnu.mutation.SetCandidateID(u)
	return cnu
}

// SetCreatedByID sets the "created_by_id" field.
func (cnu *CandidateNoteUpdate) SetCreatedByID(u uuid.UUID) *CandidateNoteUpdate {
	cnu.mutation.SetCreatedByID(u)
	return cnu
}

// SetName sets the "name" field.
func (cnu *CandidateNoteUpdate) SetName(s string) *CandidateNoteUpdate {
	cnu.mutation.SetName(s)
	return cnu
}

// SetDescription sets the "description" field.
func (cnu *CandidateNoteUpdate) SetDescription(s string) *CandidateNoteUpdate {
	cnu.mutation.SetDescription(s)
	return cnu
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (cnu *CandidateNoteUpdate) SetCandidateEdgeID(id uuid.UUID) *CandidateNoteUpdate {
	cnu.mutation.SetCandidateEdgeID(id)
	return cnu
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (cnu *CandidateNoteUpdate) SetCandidateEdge(c *Candidate) *CandidateNoteUpdate {
	return cnu.SetCandidateEdgeID(c.ID)
}

// SetCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID.
func (cnu *CandidateNoteUpdate) SetCreatedByEdgeID(id uuid.UUID) *CandidateNoteUpdate {
	cnu.mutation.SetCreatedByEdgeID(id)
	return cnu
}

// SetCreatedByEdge sets the "created_by_edge" edge to the User entity.
func (cnu *CandidateNoteUpdate) SetCreatedByEdge(u *User) *CandidateNoteUpdate {
	return cnu.SetCreatedByEdgeID(u.ID)
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (cnu *CandidateNoteUpdate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateNoteUpdate {
	cnu.mutation.AddAttachmentEdgeIDs(ids...)
	return cnu
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (cnu *CandidateNoteUpdate) AddAttachmentEdges(a ...*Attachment) *CandidateNoteUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cnu.AddAttachmentEdgeIDs(ids...)
}

// Mutation returns the CandidateNoteMutation object of the builder.
func (cnu *CandidateNoteUpdate) Mutation() *CandidateNoteMutation {
	return cnu.mutation
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (cnu *CandidateNoteUpdate) ClearCandidateEdge() *CandidateNoteUpdate {
	cnu.mutation.ClearCandidateEdge()
	return cnu
}

// ClearCreatedByEdge clears the "created_by_edge" edge to the User entity.
func (cnu *CandidateNoteUpdate) ClearCreatedByEdge() *CandidateNoteUpdate {
	cnu.mutation.ClearCreatedByEdge()
	return cnu
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (cnu *CandidateNoteUpdate) ClearAttachmentEdges() *CandidateNoteUpdate {
	cnu.mutation.ClearAttachmentEdges()
	return cnu
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (cnu *CandidateNoteUpdate) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateNoteUpdate {
	cnu.mutation.RemoveAttachmentEdgeIDs(ids...)
	return cnu
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (cnu *CandidateNoteUpdate) RemoveAttachmentEdges(a ...*Attachment) *CandidateNoteUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cnu.RemoveAttachmentEdgeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cnu *CandidateNoteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cnu.hooks) == 0 {
		if err = cnu.check(); err != nil {
			return 0, err
		}
		affected, err = cnu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateNoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cnu.check(); err != nil {
				return 0, err
			}
			cnu.mutation = mutation
			affected, err = cnu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cnu.hooks) - 1; i >= 0; i-- {
			if cnu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cnu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cnu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cnu *CandidateNoteUpdate) SaveX(ctx context.Context) int {
	affected, err := cnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cnu *CandidateNoteUpdate) Exec(ctx context.Context) error {
	_, err := cnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnu *CandidateNoteUpdate) ExecX(ctx context.Context) {
	if err := cnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnu *CandidateNoteUpdate) check() error {
	if v, ok := cnu.mutation.Name(); ok {
		if err := candidatenote.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CandidateNote.name": %w`, err)}
		}
	}
	if v, ok := cnu.mutation.Description(); ok {
		if err := candidatenote.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "CandidateNote.description": %w`, err)}
		}
	}
	if _, ok := cnu.mutation.CandidateEdgeID(); cnu.mutation.CandidateEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CandidateNote.candidate_edge"`)
	}
	if _, ok := cnu.mutation.CreatedByEdgeID(); cnu.mutation.CreatedByEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CandidateNote.created_by_edge"`)
	}
	return nil
}

func (cnu *CandidateNoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatenote.Table,
			Columns: candidatenote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatenote.FieldID,
			},
		},
	}
	if ps := cnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatenote.FieldUpdatedAt, field.TypeTime, value)
	}
	if cnu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidatenote.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cnu.mutation.DeletedAt(); ok {
		_spec.SetField(candidatenote.FieldDeletedAt, field.TypeTime, value)
	}
	if cnu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidatenote.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cnu.mutation.Name(); ok {
		_spec.SetField(candidatenote.FieldName, field.TypeString, value)
	}
	if value, ok := cnu.mutation.Description(); ok {
		_spec.SetField(candidatenote.FieldDescription, field.TypeString, value)
	}
	if cnu.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatenote.CandidateEdgeTable,
			Columns: []string{candidatenote.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatenote.CandidateEdgeTable,
			Columns: []string{candidatenote.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cnu.mutation.CreatedByEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatenote.CreatedByEdgeTable,
			Columns: []string{candidatenote.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.CreatedByEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatenote.CreatedByEdgeTable,
			Columns: []string{candidatenote.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cnu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatenote.AttachmentEdgesTable,
			Columns: []string{candidatenote.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !cnu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatenote.AttachmentEdgesTable,
			Columns: []string{candidatenote.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnu.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatenote.AttachmentEdgesTable,
			Columns: []string{candidatenote.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidatenote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateNoteUpdateOne is the builder for updating a single CandidateNote entity.
type CandidateNoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateNoteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cnuo *CandidateNoteUpdateOne) SetUpdatedAt(t time.Time) *CandidateNoteUpdateOne {
	cnuo.mutation.SetUpdatedAt(t)
	return cnuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cnuo *CandidateNoteUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateNoteUpdateOne {
	if t != nil {
		cnuo.SetUpdatedAt(*t)
	}
	return cnuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cnuo *CandidateNoteUpdateOne) ClearUpdatedAt() *CandidateNoteUpdateOne {
	cnuo.mutation.ClearUpdatedAt()
	return cnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cnuo *CandidateNoteUpdateOne) SetDeletedAt(t time.Time) *CandidateNoteUpdateOne {
	cnuo.mutation.SetDeletedAt(t)
	return cnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cnuo *CandidateNoteUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateNoteUpdateOne {
	if t != nil {
		cnuo.SetDeletedAt(*t)
	}
	return cnuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cnuo *CandidateNoteUpdateOne) ClearDeletedAt() *CandidateNoteUpdateOne {
	cnuo.mutation.ClearDeletedAt()
	return cnuo
}

// SetCandidateID sets the "candidate_id" field.
func (cnuo *CandidateNoteUpdateOne) SetCandidateID(u uuid.UUID) *CandidateNoteUpdateOne {
	cnuo.mutation.SetCandidateID(u)
	return cnuo
}

// SetCreatedByID sets the "created_by_id" field.
func (cnuo *CandidateNoteUpdateOne) SetCreatedByID(u uuid.UUID) *CandidateNoteUpdateOne {
	cnuo.mutation.SetCreatedByID(u)
	return cnuo
}

// SetName sets the "name" field.
func (cnuo *CandidateNoteUpdateOne) SetName(s string) *CandidateNoteUpdateOne {
	cnuo.mutation.SetName(s)
	return cnuo
}

// SetDescription sets the "description" field.
func (cnuo *CandidateNoteUpdateOne) SetDescription(s string) *CandidateNoteUpdateOne {
	cnuo.mutation.SetDescription(s)
	return cnuo
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (cnuo *CandidateNoteUpdateOne) SetCandidateEdgeID(id uuid.UUID) *CandidateNoteUpdateOne {
	cnuo.mutation.SetCandidateEdgeID(id)
	return cnuo
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (cnuo *CandidateNoteUpdateOne) SetCandidateEdge(c *Candidate) *CandidateNoteUpdateOne {
	return cnuo.SetCandidateEdgeID(c.ID)
}

// SetCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID.
func (cnuo *CandidateNoteUpdateOne) SetCreatedByEdgeID(id uuid.UUID) *CandidateNoteUpdateOne {
	cnuo.mutation.SetCreatedByEdgeID(id)
	return cnuo
}

// SetCreatedByEdge sets the "created_by_edge" edge to the User entity.
func (cnuo *CandidateNoteUpdateOne) SetCreatedByEdge(u *User) *CandidateNoteUpdateOne {
	return cnuo.SetCreatedByEdgeID(u.ID)
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (cnuo *CandidateNoteUpdateOne) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateNoteUpdateOne {
	cnuo.mutation.AddAttachmentEdgeIDs(ids...)
	return cnuo
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (cnuo *CandidateNoteUpdateOne) AddAttachmentEdges(a ...*Attachment) *CandidateNoteUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cnuo.AddAttachmentEdgeIDs(ids...)
}

// Mutation returns the CandidateNoteMutation object of the builder.
func (cnuo *CandidateNoteUpdateOne) Mutation() *CandidateNoteMutation {
	return cnuo.mutation
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (cnuo *CandidateNoteUpdateOne) ClearCandidateEdge() *CandidateNoteUpdateOne {
	cnuo.mutation.ClearCandidateEdge()
	return cnuo
}

// ClearCreatedByEdge clears the "created_by_edge" edge to the User entity.
func (cnuo *CandidateNoteUpdateOne) ClearCreatedByEdge() *CandidateNoteUpdateOne {
	cnuo.mutation.ClearCreatedByEdge()
	return cnuo
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (cnuo *CandidateNoteUpdateOne) ClearAttachmentEdges() *CandidateNoteUpdateOne {
	cnuo.mutation.ClearAttachmentEdges()
	return cnuo
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (cnuo *CandidateNoteUpdateOne) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateNoteUpdateOne {
	cnuo.mutation.RemoveAttachmentEdgeIDs(ids...)
	return cnuo
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (cnuo *CandidateNoteUpdateOne) RemoveAttachmentEdges(a ...*Attachment) *CandidateNoteUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cnuo.RemoveAttachmentEdgeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cnuo *CandidateNoteUpdateOne) Select(field string, fields ...string) *CandidateNoteUpdateOne {
	cnuo.fields = append([]string{field}, fields...)
	return cnuo
}

// Save executes the query and returns the updated CandidateNote entity.
func (cnuo *CandidateNoteUpdateOne) Save(ctx context.Context) (*CandidateNote, error) {
	var (
		err  error
		node *CandidateNote
	)
	if len(cnuo.hooks) == 0 {
		if err = cnuo.check(); err != nil {
			return nil, err
		}
		node, err = cnuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateNoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cnuo.check(); err != nil {
				return nil, err
			}
			cnuo.mutation = mutation
			node, err = cnuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cnuo.hooks) - 1; i >= 0; i-- {
			if cnuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cnuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cnuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateNote)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateNoteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cnuo *CandidateNoteUpdateOne) SaveX(ctx context.Context) *CandidateNote {
	node, err := cnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cnuo *CandidateNoteUpdateOne) Exec(ctx context.Context) error {
	_, err := cnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnuo *CandidateNoteUpdateOne) ExecX(ctx context.Context) {
	if err := cnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnuo *CandidateNoteUpdateOne) check() error {
	if v, ok := cnuo.mutation.Name(); ok {
		if err := candidatenote.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CandidateNote.name": %w`, err)}
		}
	}
	if v, ok := cnuo.mutation.Description(); ok {
		if err := candidatenote.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "CandidateNote.description": %w`, err)}
		}
	}
	if _, ok := cnuo.mutation.CandidateEdgeID(); cnuo.mutation.CandidateEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CandidateNote.candidate_edge"`)
	}
	if _, ok := cnuo.mutation.CreatedByEdgeID(); cnuo.mutation.CreatedByEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CandidateNote.created_by_edge"`)
	}
	return nil
}

func (cnuo *CandidateNoteUpdateOne) sqlSave(ctx context.Context) (_node *CandidateNote, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatenote.Table,
			Columns: candidatenote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatenote.FieldID,
			},
		},
	}
	id, ok := cnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CandidateNote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidatenote.FieldID)
		for _, f := range fields {
			if !candidatenote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidatenote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatenote.FieldUpdatedAt, field.TypeTime, value)
	}
	if cnuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidatenote.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cnuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidatenote.FieldDeletedAt, field.TypeTime, value)
	}
	if cnuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidatenote.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cnuo.mutation.Name(); ok {
		_spec.SetField(candidatenote.FieldName, field.TypeString, value)
	}
	if value, ok := cnuo.mutation.Description(); ok {
		_spec.SetField(candidatenote.FieldDescription, field.TypeString, value)
	}
	if cnuo.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatenote.CandidateEdgeTable,
			Columns: []string{candidatenote.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatenote.CandidateEdgeTable,
			Columns: []string{candidatenote.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cnuo.mutation.CreatedByEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatenote.CreatedByEdgeTable,
			Columns: []string{candidatenote.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.CreatedByEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatenote.CreatedByEdgeTable,
			Columns: []string{candidatenote.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cnuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatenote.AttachmentEdgesTable,
			Columns: []string{candidatenote.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !cnuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatenote.AttachmentEdgesTable,
			Columns: []string{candidatenote.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cnuo.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatenote.AttachmentEdgesTable,
			Columns: []string{candidatenote.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CandidateNote{config: cnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidatenote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
