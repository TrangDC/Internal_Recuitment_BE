// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/permission"
	"trec/ent/permissiongroup"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Permission is the model entity for the Permission schema.
type Permission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID uuid.UUID `json:"group_id,omitempty"`
	// ForOwner holds the value of the "for_owner" field.
	ForOwner bool `json:"for_owner,omitempty"`
	// ForTeam holds the value of the "for_team" field.
	ForTeam bool `json:"for_team,omitempty"`
	// ForAll holds the value of the "for_all" field.
	ForAll bool `json:"for_all,omitempty"`
	// OperationName holds the value of the "operation_name" field.
	OperationName string `json:"operation_name,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID uuid.UUID `json:"parent_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionQuery when eager-loading is set.
	Edges PermissionEdges `json:"edges"`
}

// PermissionEdges holds the relations/edges for other nodes in the graph.
type PermissionEdges struct {
	// GroupPermissionEdge holds the value of the group_permission_edge edge.
	GroupPermissionEdge *PermissionGroup `json:"group_permission_edge,omitempty"`
	// UserPermissionEdge holds the value of the user_permission_edge edge.
	UserPermissionEdge []*EntityPermission `json:"user_permission_edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedUserPermissionEdge map[string][]*EntityPermission
}

// GroupPermissionEdgeOrErr returns the GroupPermissionEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionEdges) GroupPermissionEdgeOrErr() (*PermissionGroup, error) {
	if e.loadedTypes[0] {
		if e.GroupPermissionEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: permissiongroup.Label}
		}
		return e.GroupPermissionEdge, nil
	}
	return nil, &NotLoadedError{edge: "group_permission_edge"}
}

// UserPermissionEdgeOrErr returns the UserPermissionEdge value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) UserPermissionEdgeOrErr() ([]*EntityPermission, error) {
	if e.loadedTypes[1] {
		return e.UserPermissionEdge, nil
	}
	return nil, &NotLoadedError{edge: "user_permission_edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Permission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permission.FieldForOwner, permission.FieldForTeam, permission.FieldForAll:
			values[i] = new(sql.NullBool)
		case permission.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case permission.FieldTitle, permission.FieldOperationName:
			values[i] = new(sql.NullString)
		case permission.FieldCreatedAt, permission.FieldUpdatedAt, permission.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case permission.FieldID, permission.FieldGroupID, permission.FieldParentID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Permission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Permission fields.
func (pe *Permission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pe.ID = *value
			}
		case permission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		case permission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pe.UpdatedAt = value.Time
			}
		case permission.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pe.DeletedAt = value.Time
			}
		case permission.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pe.Title = value.String
			}
		case permission.FieldGroupID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value != nil {
				pe.GroupID = *value
			}
		case permission.FieldForOwner:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field for_owner", values[i])
			} else if value.Valid {
				pe.ForOwner = value.Bool
			}
		case permission.FieldForTeam:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field for_team", values[i])
			} else if value.Valid {
				pe.ForTeam = value.Bool
			}
		case permission.FieldForAll:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field for_all", values[i])
			} else if value.Valid {
				pe.ForAll = value.Bool
			}
		case permission.FieldOperationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation_name", values[i])
			} else if value.Valid {
				pe.OperationName = value.String
			}
		case permission.FieldParentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value != nil {
				pe.ParentID = *value
			}
		case permission.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				pe.OrderID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGroupPermissionEdge queries the "group_permission_edge" edge of the Permission entity.
func (pe *Permission) QueryGroupPermissionEdge() *PermissionGroupQuery {
	return (&PermissionClient{config: pe.config}).QueryGroupPermissionEdge(pe)
}

// QueryUserPermissionEdge queries the "user_permission_edge" edge of the Permission entity.
func (pe *Permission) QueryUserPermissionEdge() *EntityPermissionQuery {
	return (&PermissionClient{config: pe.config}).QueryUserPermissionEdge(pe)
}

// Update returns a builder for updating this Permission.
// Note that you need to call Permission.Unwrap() before calling this method if this Permission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Permission) Update() *PermissionUpdateOne {
	return (&PermissionClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the Permission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Permission) Unwrap() *Permission {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Permission is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Permission) String() string {
	var builder strings.Builder
	builder.WriteString("Permission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pe.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pe.Title)
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.GroupID))
	builder.WriteString(", ")
	builder.WriteString("for_owner=")
	builder.WriteString(fmt.Sprintf("%v", pe.ForOwner))
	builder.WriteString(", ")
	builder.WriteString("for_team=")
	builder.WriteString(fmt.Sprintf("%v", pe.ForTeam))
	builder.WriteString(", ")
	builder.WriteString("for_all=")
	builder.WriteString(fmt.Sprintf("%v", pe.ForAll))
	builder.WriteString(", ")
	builder.WriteString("operation_name=")
	builder.WriteString(pe.OperationName)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.ParentID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.OrderID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUserPermissionEdge returns the UserPermissionEdge named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pe *Permission) NamedUserPermissionEdge(name string) ([]*EntityPermission, error) {
	if pe.Edges.namedUserPermissionEdge == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pe.Edges.namedUserPermissionEdge[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pe *Permission) appendNamedUserPermissionEdge(name string, edges ...*EntityPermission) {
	if pe.Edges.namedUserPermissionEdge == nil {
		pe.Edges.namedUserPermissionEdge = make(map[string][]*EntityPermission)
	}
	if len(edges) == 0 {
		pe.Edges.namedUserPermissionEdge[name] = []*EntityPermission{}
	} else {
		pe.Edges.namedUserPermissionEdge[name] = append(pe.Edges.namedUserPermissionEdge[name], edges...)
	}
}

// Permissions is a parsable slice of Permission.
type Permissions []*Permission

func (pe Permissions) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
