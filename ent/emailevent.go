// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/emailevent"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// EmailEvent is the model entity for the EmailEvent schema.
type EmailEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Module holds the value of the "module" field.
	Module emailevent.Module `json:"module,omitempty"`
	// Action holds the value of the "action" field.
	Action emailevent.Action `json:"action,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailEventQuery when eager-loading is set.
	Edges EmailEventEdges `json:"edges"`
}

// EmailEventEdges holds the relations/edges for other nodes in the graph.
type EmailEventEdges struct {
	// TemplateEdges holds the value of the template_edges edge.
	TemplateEdges []*EmailTemplate `json:"template_edges,omitempty"`
	// OutgoingEmailEdges holds the value of the outgoing_email_edges edge.
	OutgoingEmailEdges []*OutgoingEmail `json:"outgoing_email_edges,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTemplateEdges      map[string][]*EmailTemplate
	namedOutgoingEmailEdges map[string][]*OutgoingEmail
}

// TemplateEdgesOrErr returns the TemplateEdges value or an error if the edge
// was not loaded in eager-loading.
func (e EmailEventEdges) TemplateEdgesOrErr() ([]*EmailTemplate, error) {
	if e.loadedTypes[0] {
		return e.TemplateEdges, nil
	}
	return nil, &NotLoadedError{edge: "template_edges"}
}

// OutgoingEmailEdgesOrErr returns the OutgoingEmailEdges value or an error if the edge
// was not loaded in eager-loading.
func (e EmailEventEdges) OutgoingEmailEdgesOrErr() ([]*OutgoingEmail, error) {
	if e.loadedTypes[1] {
		return e.OutgoingEmailEdges, nil
	}
	return nil, &NotLoadedError{edge: "outgoing_email_edges"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailevent.FieldModule, emailevent.FieldAction, emailevent.FieldName:
			values[i] = new(sql.NullString)
		case emailevent.FieldCreatedAt, emailevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case emailevent.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EmailEvent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailEvent fields.
func (ee *EmailEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailevent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ee.ID = *value
			}
		case emailevent.FieldModule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module", values[i])
			} else if value.Valid {
				ee.Module = emailevent.Module(value.String)
			}
		case emailevent.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				ee.Action = emailevent.Action(value.String)
			}
		case emailevent.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ee.Name = value.String
			}
		case emailevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ee.CreatedAt = value.Time
			}
		case emailevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ee.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTemplateEdges queries the "template_edges" edge of the EmailEvent entity.
func (ee *EmailEvent) QueryTemplateEdges() *EmailTemplateQuery {
	return (&EmailEventClient{config: ee.config}).QueryTemplateEdges(ee)
}

// QueryOutgoingEmailEdges queries the "outgoing_email_edges" edge of the EmailEvent entity.
func (ee *EmailEvent) QueryOutgoingEmailEdges() *OutgoingEmailQuery {
	return (&EmailEventClient{config: ee.config}).QueryOutgoingEmailEdges(ee)
}

// Update returns a builder for updating this EmailEvent.
// Note that you need to call EmailEvent.Unwrap() before calling this method if this EmailEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ee *EmailEvent) Update() *EmailEventUpdateOne {
	return (&EmailEventClient{config: ee.config}).UpdateOne(ee)
}

// Unwrap unwraps the EmailEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ee *EmailEvent) Unwrap() *EmailEvent {
	_tx, ok := ee.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailEvent is not a transactional entity")
	}
	ee.config.driver = _tx.drv
	return ee
}

// String implements the fmt.Stringer.
func (ee *EmailEvent) String() string {
	var builder strings.Builder
	builder.WriteString("EmailEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ee.ID))
	builder.WriteString("module=")
	builder.WriteString(fmt.Sprintf("%v", ee.Module))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(fmt.Sprintf("%v", ee.Action))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ee.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ee.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ee.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTemplateEdges returns the TemplateEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ee *EmailEvent) NamedTemplateEdges(name string) ([]*EmailTemplate, error) {
	if ee.Edges.namedTemplateEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ee.Edges.namedTemplateEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ee *EmailEvent) appendNamedTemplateEdges(name string, edges ...*EmailTemplate) {
	if ee.Edges.namedTemplateEdges == nil {
		ee.Edges.namedTemplateEdges = make(map[string][]*EmailTemplate)
	}
	if len(edges) == 0 {
		ee.Edges.namedTemplateEdges[name] = []*EmailTemplate{}
	} else {
		ee.Edges.namedTemplateEdges[name] = append(ee.Edges.namedTemplateEdges[name], edges...)
	}
}

// NamedOutgoingEmailEdges returns the OutgoingEmailEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ee *EmailEvent) NamedOutgoingEmailEdges(name string) ([]*OutgoingEmail, error) {
	if ee.Edges.namedOutgoingEmailEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ee.Edges.namedOutgoingEmailEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ee *EmailEvent) appendNamedOutgoingEmailEdges(name string, edges ...*OutgoingEmail) {
	if ee.Edges.namedOutgoingEmailEdges == nil {
		ee.Edges.namedOutgoingEmailEdges = make(map[string][]*OutgoingEmail)
	}
	if len(edges) == 0 {
		ee.Edges.namedOutgoingEmailEdges[name] = []*OutgoingEmail{}
	} else {
		ee.Edges.namedOutgoingEmailEdges[name] = append(ee.Edges.namedOutgoingEmailEdges[name], edges...)
	}
}

// EmailEvents is a parsable slice of EmailEvent.
type EmailEvents []*EmailEvent

func (ee EmailEvents) config(cfg config) {
	for _i := range ee {
		ee[_i].config = cfg
	}
}
