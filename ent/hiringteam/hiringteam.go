// Code generated by ent, DO NOT EDIT.

package hiringteam

import (
	"time"
)

const (
	// Label holds the string label denoting the hiringteam type in the database.
	Label = "hiring_team"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeUserEdges holds the string denoting the user_edges edge name in mutations.
	EdgeUserEdges = "user_edges"
	// EdgeHiringTeamJobEdges holds the string denoting the hiring_team_job_edges edge name in mutations.
	EdgeHiringTeamJobEdges = "hiring_team_job_edges"
	// EdgeHiringMemberEdges holds the string denoting the hiring_member_edges edge name in mutations.
	EdgeHiringMemberEdges = "hiring_member_edges"
	// EdgeUserHiringTeams holds the string denoting the user_hiring_teams edge name in mutations.
	EdgeUserHiringTeams = "user_hiring_teams"
	// Table holds the table name of the hiringteam in the database.
	Table = "hiring_teams"
	// UserEdgesTable is the table that holds the user_edges relation/edge. The primary key declared below.
	UserEdgesTable = "hiring_team_managers"
	// UserEdgesInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserEdgesInverseTable = "users"
	// HiringTeamJobEdgesTable is the table that holds the hiring_team_job_edges relation/edge.
	HiringTeamJobEdgesTable = "hiring_jobs"
	// HiringTeamJobEdgesInverseTable is the table name for the HiringJob entity.
	// It exists in this package in order to avoid circular dependency with the "hiringjob" package.
	HiringTeamJobEdgesInverseTable = "hiring_jobs"
	// HiringTeamJobEdgesColumn is the table column denoting the hiring_team_job_edges relation/edge.
	HiringTeamJobEdgesColumn = "hiring_team_id"
	// HiringMemberEdgesTable is the table that holds the hiring_member_edges relation/edge.
	HiringMemberEdgesTable = "users"
	// HiringMemberEdgesInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	HiringMemberEdgesInverseTable = "users"
	// HiringMemberEdgesColumn is the table column denoting the hiring_member_edges relation/edge.
	HiringMemberEdgesColumn = "hiring_team_id"
	// UserHiringTeamsTable is the table that holds the user_hiring_teams relation/edge.
	UserHiringTeamsTable = "hiring_team_managers"
	// UserHiringTeamsInverseTable is the table name for the HiringTeamManager entity.
	// It exists in this package in order to avoid circular dependency with the "hiringteammanager" package.
	UserHiringTeamsInverseTable = "hiring_team_managers"
	// UserHiringTeamsColumn is the table column denoting the user_hiring_teams relation/edge.
	UserHiringTeamsColumn = "hiring_team_id"
)

// Columns holds all SQL columns for hiringteam fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldSlug,
	FieldName,
}

var (
	// UserEdgesPrimaryKey and UserEdgesColumn2 are the table columns denoting the
	// primary key for the user_edges relation (M2M).
	UserEdgesPrimaryKey = []string{"user_id", "hiring_team_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
