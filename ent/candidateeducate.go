// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/candidate"
	"trec/ent/candidateeducate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CandidateEducate is the model entity for the CandidateEducate schema.
type CandidateEducate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CandidateID holds the value of the "candidate_id" field.
	CandidateID uuid.UUID `json:"candidate_id,omitempty"`
	// SchoolName holds the value of the "school_name" field.
	SchoolName string `json:"school_name,omitempty"`
	// Major holds the value of the "major" field.
	Major string `json:"major,omitempty"`
	// Gpa holds the value of the "gpa" field.
	Gpa string `json:"gpa,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CandidateEducateQuery when eager-loading is set.
	Edges CandidateEducateEdges `json:"edges"`
}

// CandidateEducateEdges holds the relations/edges for other nodes in the graph.
type CandidateEducateEdges struct {
	// AttachmentEdges holds the value of the attachment_edges edge.
	AttachmentEdges []*Attachment `json:"attachment_edges,omitempty"`
	// CandidateEdge holds the value of the candidate_edge edge.
	CandidateEdge *Candidate `json:"candidate_edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAttachmentEdges map[string][]*Attachment
}

// AttachmentEdgesOrErr returns the AttachmentEdges value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateEducateEdges) AttachmentEdgesOrErr() ([]*Attachment, error) {
	if e.loadedTypes[0] {
		return e.AttachmentEdges, nil
	}
	return nil, &NotLoadedError{edge: "attachment_edges"}
}

// CandidateEdgeOrErr returns the CandidateEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateEducateEdges) CandidateEdgeOrErr() (*Candidate, error) {
	if e.loadedTypes[1] {
		if e.CandidateEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidate.Label}
		}
		return e.CandidateEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CandidateEducate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case candidateeducate.FieldSchoolName, candidateeducate.FieldMajor, candidateeducate.FieldGpa, candidateeducate.FieldLocation, candidateeducate.FieldDescription:
			values[i] = new(sql.NullString)
		case candidateeducate.FieldCreatedAt, candidateeducate.FieldUpdatedAt, candidateeducate.FieldDeletedAt, candidateeducate.FieldStartDate, candidateeducate.FieldEndDate:
			values[i] = new(sql.NullTime)
		case candidateeducate.FieldID, candidateeducate.FieldCandidateID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CandidateEducate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CandidateEducate fields.
func (ce *CandidateEducate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case candidateeducate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ce.ID = *value
			}
		case candidateeducate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ce.CreatedAt = value.Time
			}
		case candidateeducate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ce.UpdatedAt = value.Time
			}
		case candidateeducate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ce.DeletedAt = value.Time
			}
		case candidateeducate.FieldCandidateID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_id", values[i])
			} else if value != nil {
				ce.CandidateID = *value
			}
		case candidateeducate.FieldSchoolName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field school_name", values[i])
			} else if value.Valid {
				ce.SchoolName = value.String
			}
		case candidateeducate.FieldMajor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field major", values[i])
			} else if value.Valid {
				ce.Major = value.String
			}
		case candidateeducate.FieldGpa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gpa", values[i])
			} else if value.Valid {
				ce.Gpa = value.String
			}
		case candidateeducate.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				ce.Location = value.String
			}
		case candidateeducate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ce.Description = value.String
			}
		case candidateeducate.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				ce.StartDate = value.Time
			}
		case candidateeducate.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				ce.EndDate = value.Time
			}
		}
	}
	return nil
}

// QueryAttachmentEdges queries the "attachment_edges" edge of the CandidateEducate entity.
func (ce *CandidateEducate) QueryAttachmentEdges() *AttachmentQuery {
	return (&CandidateEducateClient{config: ce.config}).QueryAttachmentEdges(ce)
}

// QueryCandidateEdge queries the "candidate_edge" edge of the CandidateEducate entity.
func (ce *CandidateEducate) QueryCandidateEdge() *CandidateQuery {
	return (&CandidateEducateClient{config: ce.config}).QueryCandidateEdge(ce)
}

// Update returns a builder for updating this CandidateEducate.
// Note that you need to call CandidateEducate.Unwrap() before calling this method if this CandidateEducate
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *CandidateEducate) Update() *CandidateEducateUpdateOne {
	return (&CandidateEducateClient{config: ce.config}).UpdateOne(ce)
}

// Unwrap unwraps the CandidateEducate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ce *CandidateEducate) Unwrap() *CandidateEducate {
	_tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: CandidateEducate is not a transactional entity")
	}
	ce.config.driver = _tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *CandidateEducate) String() string {
	var builder strings.Builder
	builder.WriteString("CandidateEducate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ce.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ce.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ce.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ce.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("candidate_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.CandidateID))
	builder.WriteString(", ")
	builder.WriteString("school_name=")
	builder.WriteString(ce.SchoolName)
	builder.WriteString(", ")
	builder.WriteString("major=")
	builder.WriteString(ce.Major)
	builder.WriteString(", ")
	builder.WriteString("gpa=")
	builder.WriteString(ce.Gpa)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(ce.Location)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ce.Description)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(ce.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(ce.EndDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAttachmentEdges returns the AttachmentEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ce *CandidateEducate) NamedAttachmentEdges(name string) ([]*Attachment, error) {
	if ce.Edges.namedAttachmentEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ce.Edges.namedAttachmentEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ce *CandidateEducate) appendNamedAttachmentEdges(name string, edges ...*Attachment) {
	if ce.Edges.namedAttachmentEdges == nil {
		ce.Edges.namedAttachmentEdges = make(map[string][]*Attachment)
	}
	if len(edges) == 0 {
		ce.Edges.namedAttachmentEdges[name] = []*Attachment{}
	} else {
		ce.Edges.namedAttachmentEdges[name] = append(ce.Edges.namedAttachmentEdges[name], edges...)
	}
}

// CandidateEducates is a parsable slice of CandidateEducate.
type CandidateEducates []*CandidateEducate

func (ce CandidateEducates) config(cfg config) {
	for _i := range ce {
		ce[_i].config = cfg
	}
}
