// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
	"trec/ent/candidate"
	"trec/ent/candidatejob"
	"trec/ent/hiringjob"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CandidateJob is the model entity for the CandidateJob schema.
type CandidateJob struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// HiringJobID holds the value of the "hiring_job_id" field.
	HiringJobID uuid.UUID `json:"hiring_job_id,omitempty"`
	// CandidateID holds the value of the "candidate_id" field.
	CandidateID uuid.UUID `json:"candidate_id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Status holds the value of the "status" field.
	Status candidatejob.Status `json:"status,omitempty"`
	// FailedReason holds the value of the "failed_reason" field.
	FailedReason []string `json:"failed_reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CandidateJobQuery when eager-loading is set.
	Edges CandidateJobEdges `json:"edges"`
}

// CandidateJobEdges holds the relations/edges for other nodes in the graph.
type CandidateJobEdges struct {
	// AttachmentEdges holds the value of the attachment_edges edge.
	AttachmentEdges []*Attachment `json:"attachment_edges,omitempty"`
	// HiringJobEdge holds the value of the hiring_job_edge edge.
	HiringJobEdge *HiringJob `json:"hiring_job_edge,omitempty"`
	// CandidateJobFeedback holds the value of the candidate_job_feedback edge.
	CandidateJobFeedback []*CandidateJobFeedback `json:"candidate_job_feedback,omitempty"`
	// CandidateEdge holds the value of the candidate_edge edge.
	CandidateEdge *Candidate `json:"candidate_edge,omitempty"`
	// CandidateJobInterview holds the value of the candidate_job_interview edge.
	CandidateJobInterview []*CandidateInterview `json:"candidate_job_interview,omitempty"`
	// CreatedByEdge holds the value of the created_by_edge edge.
	CreatedByEdge *User `json:"created_by_edge,omitempty"`
	// CandidateJobStep holds the value of the candidate_job_step edge.
	CandidateJobStep []*CandidateJobStep `json:"candidate_job_step,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedAttachmentEdges       map[string][]*Attachment
	namedCandidateJobFeedback  map[string][]*CandidateJobFeedback
	namedCandidateJobInterview map[string][]*CandidateInterview
	namedCandidateJobStep      map[string][]*CandidateJobStep
}

// AttachmentEdgesOrErr returns the AttachmentEdges value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateJobEdges) AttachmentEdgesOrErr() ([]*Attachment, error) {
	if e.loadedTypes[0] {
		return e.AttachmentEdges, nil
	}
	return nil, &NotLoadedError{edge: "attachment_edges"}
}

// HiringJobEdgeOrErr returns the HiringJobEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateJobEdges) HiringJobEdgeOrErr() (*HiringJob, error) {
	if e.loadedTypes[1] {
		if e.HiringJobEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hiringjob.Label}
		}
		return e.HiringJobEdge, nil
	}
	return nil, &NotLoadedError{edge: "hiring_job_edge"}
}

// CandidateJobFeedbackOrErr returns the CandidateJobFeedback value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateJobEdges) CandidateJobFeedbackOrErr() ([]*CandidateJobFeedback, error) {
	if e.loadedTypes[2] {
		return e.CandidateJobFeedback, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_feedback"}
}

// CandidateEdgeOrErr returns the CandidateEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateJobEdges) CandidateEdgeOrErr() (*Candidate, error) {
	if e.loadedTypes[3] {
		if e.CandidateEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidate.Label}
		}
		return e.CandidateEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_edge"}
}

// CandidateJobInterviewOrErr returns the CandidateJobInterview value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateJobEdges) CandidateJobInterviewOrErr() ([]*CandidateInterview, error) {
	if e.loadedTypes[4] {
		return e.CandidateJobInterview, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_interview"}
}

// CreatedByEdgeOrErr returns the CreatedByEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateJobEdges) CreatedByEdgeOrErr() (*User, error) {
	if e.loadedTypes[5] {
		if e.CreatedByEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedByEdge, nil
	}
	return nil, &NotLoadedError{edge: "created_by_edge"}
}

// CandidateJobStepOrErr returns the CandidateJobStep value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateJobEdges) CandidateJobStepOrErr() ([]*CandidateJobStep, error) {
	if e.loadedTypes[6] {
		return e.CandidateJobStep, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_step"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CandidateJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case candidatejob.FieldFailedReason:
			values[i] = new([]byte)
		case candidatejob.FieldStatus:
			values[i] = new(sql.NullString)
		case candidatejob.FieldCreatedAt, candidatejob.FieldUpdatedAt, candidatejob.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case candidatejob.FieldID, candidatejob.FieldHiringJobID, candidatejob.FieldCandidateID, candidatejob.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CandidateJob", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CandidateJob fields.
func (cj *CandidateJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case candidatejob.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cj.ID = *value
			}
		case candidatejob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cj.CreatedAt = value.Time
			}
		case candidatejob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cj.UpdatedAt = value.Time
			}
		case candidatejob.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cj.DeletedAt = value.Time
			}
		case candidatejob.FieldHiringJobID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field hiring_job_id", values[i])
			} else if value != nil {
				cj.HiringJobID = *value
			}
		case candidatejob.FieldCandidateID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_id", values[i])
			} else if value != nil {
				cj.CandidateID = *value
			}
		case candidatejob.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				cj.CreatedBy = *value
			}
		case candidatejob.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cj.Status = candidatejob.Status(value.String)
			}
		case candidatejob.FieldFailedReason:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field failed_reason", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cj.FailedReason); err != nil {
					return fmt.Errorf("unmarshal field failed_reason: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryAttachmentEdges queries the "attachment_edges" edge of the CandidateJob entity.
func (cj *CandidateJob) QueryAttachmentEdges() *AttachmentQuery {
	return (&CandidateJobClient{config: cj.config}).QueryAttachmentEdges(cj)
}

// QueryHiringJobEdge queries the "hiring_job_edge" edge of the CandidateJob entity.
func (cj *CandidateJob) QueryHiringJobEdge() *HiringJobQuery {
	return (&CandidateJobClient{config: cj.config}).QueryHiringJobEdge(cj)
}

// QueryCandidateJobFeedback queries the "candidate_job_feedback" edge of the CandidateJob entity.
func (cj *CandidateJob) QueryCandidateJobFeedback() *CandidateJobFeedbackQuery {
	return (&CandidateJobClient{config: cj.config}).QueryCandidateJobFeedback(cj)
}

// QueryCandidateEdge queries the "candidate_edge" edge of the CandidateJob entity.
func (cj *CandidateJob) QueryCandidateEdge() *CandidateQuery {
	return (&CandidateJobClient{config: cj.config}).QueryCandidateEdge(cj)
}

// QueryCandidateJobInterview queries the "candidate_job_interview" edge of the CandidateJob entity.
func (cj *CandidateJob) QueryCandidateJobInterview() *CandidateInterviewQuery {
	return (&CandidateJobClient{config: cj.config}).QueryCandidateJobInterview(cj)
}

// QueryCreatedByEdge queries the "created_by_edge" edge of the CandidateJob entity.
func (cj *CandidateJob) QueryCreatedByEdge() *UserQuery {
	return (&CandidateJobClient{config: cj.config}).QueryCreatedByEdge(cj)
}

// QueryCandidateJobStep queries the "candidate_job_step" edge of the CandidateJob entity.
func (cj *CandidateJob) QueryCandidateJobStep() *CandidateJobStepQuery {
	return (&CandidateJobClient{config: cj.config}).QueryCandidateJobStep(cj)
}

// Update returns a builder for updating this CandidateJob.
// Note that you need to call CandidateJob.Unwrap() before calling this method if this CandidateJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (cj *CandidateJob) Update() *CandidateJobUpdateOne {
	return (&CandidateJobClient{config: cj.config}).UpdateOne(cj)
}

// Unwrap unwraps the CandidateJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cj *CandidateJob) Unwrap() *CandidateJob {
	_tx, ok := cj.config.driver.(*txDriver)
	if !ok {
		panic("ent: CandidateJob is not a transactional entity")
	}
	cj.config.driver = _tx.drv
	return cj
}

// String implements the fmt.Stringer.
func (cj *CandidateJob) String() string {
	var builder strings.Builder
	builder.WriteString("CandidateJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cj.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cj.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cj.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(cj.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("hiring_job_id=")
	builder.WriteString(fmt.Sprintf("%v", cj.HiringJobID))
	builder.WriteString(", ")
	builder.WriteString("candidate_id=")
	builder.WriteString(fmt.Sprintf("%v", cj.CandidateID))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", cj.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cj.Status))
	builder.WriteString(", ")
	builder.WriteString("failed_reason=")
	builder.WriteString(fmt.Sprintf("%v", cj.FailedReason))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAttachmentEdges returns the AttachmentEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cj *CandidateJob) NamedAttachmentEdges(name string) ([]*Attachment, error) {
	if cj.Edges.namedAttachmentEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cj.Edges.namedAttachmentEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cj *CandidateJob) appendNamedAttachmentEdges(name string, edges ...*Attachment) {
	if cj.Edges.namedAttachmentEdges == nil {
		cj.Edges.namedAttachmentEdges = make(map[string][]*Attachment)
	}
	if len(edges) == 0 {
		cj.Edges.namedAttachmentEdges[name] = []*Attachment{}
	} else {
		cj.Edges.namedAttachmentEdges[name] = append(cj.Edges.namedAttachmentEdges[name], edges...)
	}
}

// NamedCandidateJobFeedback returns the CandidateJobFeedback named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cj *CandidateJob) NamedCandidateJobFeedback(name string) ([]*CandidateJobFeedback, error) {
	if cj.Edges.namedCandidateJobFeedback == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cj.Edges.namedCandidateJobFeedback[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cj *CandidateJob) appendNamedCandidateJobFeedback(name string, edges ...*CandidateJobFeedback) {
	if cj.Edges.namedCandidateJobFeedback == nil {
		cj.Edges.namedCandidateJobFeedback = make(map[string][]*CandidateJobFeedback)
	}
	if len(edges) == 0 {
		cj.Edges.namedCandidateJobFeedback[name] = []*CandidateJobFeedback{}
	} else {
		cj.Edges.namedCandidateJobFeedback[name] = append(cj.Edges.namedCandidateJobFeedback[name], edges...)
	}
}

// NamedCandidateJobInterview returns the CandidateJobInterview named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cj *CandidateJob) NamedCandidateJobInterview(name string) ([]*CandidateInterview, error) {
	if cj.Edges.namedCandidateJobInterview == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cj.Edges.namedCandidateJobInterview[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cj *CandidateJob) appendNamedCandidateJobInterview(name string, edges ...*CandidateInterview) {
	if cj.Edges.namedCandidateJobInterview == nil {
		cj.Edges.namedCandidateJobInterview = make(map[string][]*CandidateInterview)
	}
	if len(edges) == 0 {
		cj.Edges.namedCandidateJobInterview[name] = []*CandidateInterview{}
	} else {
		cj.Edges.namedCandidateJobInterview[name] = append(cj.Edges.namedCandidateJobInterview[name], edges...)
	}
}

// NamedCandidateJobStep returns the CandidateJobStep named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cj *CandidateJob) NamedCandidateJobStep(name string) ([]*CandidateJobStep, error) {
	if cj.Edges.namedCandidateJobStep == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cj.Edges.namedCandidateJobStep[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cj *CandidateJob) appendNamedCandidateJobStep(name string, edges ...*CandidateJobStep) {
	if cj.Edges.namedCandidateJobStep == nil {
		cj.Edges.namedCandidateJobStep = make(map[string][]*CandidateJobStep)
	}
	if len(edges) == 0 {
		cj.Edges.namedCandidateJobStep[name] = []*CandidateJobStep{}
	} else {
		cj.Edges.namedCandidateJobStep[name] = append(cj.Edges.namedCandidateJobStep[name], edges...)
	}
}

// CandidateJobs is a parsable slice of CandidateJob.
type CandidateJobs []*CandidateJob

func (cj CandidateJobs) config(cfg config) {
	for _i := range cj {
		cj[_i].config = cfg
	}
}
