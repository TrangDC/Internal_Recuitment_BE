// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/recteam"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// RecTeam is the model entity for the RecTeam schema.
type RecTeam struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// LeaderID holds the value of the "leader_id" field.
	LeaderID uuid.UUID `json:"leader_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecTeamQuery when eager-loading is set.
	Edges RecTeamEdges `json:"edges"`
}

// RecTeamEdges holds the relations/edges for other nodes in the graph.
type RecTeamEdges struct {
	// RecMemberEdges holds the value of the rec_member_edges edge.
	RecMemberEdges []*User `json:"rec_member_edges,omitempty"`
	// RecTeamJobEdges holds the value of the rec_team_job_edges edge.
	RecTeamJobEdges []*HiringJob `json:"rec_team_job_edges,omitempty"`
	// RecLeaderEdge holds the value of the rec_leader_edge edge.
	RecLeaderEdge *User `json:"rec_leader_edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedRecMemberEdges  map[string][]*User
	namedRecTeamJobEdges map[string][]*HiringJob
}

// RecMemberEdgesOrErr returns the RecMemberEdges value or an error if the edge
// was not loaded in eager-loading.
func (e RecTeamEdges) RecMemberEdgesOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.RecMemberEdges, nil
	}
	return nil, &NotLoadedError{edge: "rec_member_edges"}
}

// RecTeamJobEdgesOrErr returns the RecTeamJobEdges value or an error if the edge
// was not loaded in eager-loading.
func (e RecTeamEdges) RecTeamJobEdgesOrErr() ([]*HiringJob, error) {
	if e.loadedTypes[1] {
		return e.RecTeamJobEdges, nil
	}
	return nil, &NotLoadedError{edge: "rec_team_job_edges"}
}

// RecLeaderEdgeOrErr returns the RecLeaderEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecTeamEdges) RecLeaderEdgeOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.RecLeaderEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.RecLeaderEdge, nil
	}
	return nil, &NotLoadedError{edge: "rec_leader_edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecTeam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recteam.FieldName, recteam.FieldDescription:
			values[i] = new(sql.NullString)
		case recteam.FieldCreatedAt, recteam.FieldUpdatedAt, recteam.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case recteam.FieldID, recteam.FieldLeaderID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RecTeam", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecTeam fields.
func (rt *RecTeam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recteam.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rt.ID = *value
			}
		case recteam.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rt.CreatedAt = value.Time
			}
		case recteam.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rt.UpdatedAt = value.Time
			}
		case recteam.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rt.DeletedAt = value.Time
			}
		case recteam.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rt.Name = value.String
			}
		case recteam.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rt.Description = value.String
			}
		case recteam.FieldLeaderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field leader_id", values[i])
			} else if value != nil {
				rt.LeaderID = *value
			}
		}
	}
	return nil
}

// QueryRecMemberEdges queries the "rec_member_edges" edge of the RecTeam entity.
func (rt *RecTeam) QueryRecMemberEdges() *UserQuery {
	return (&RecTeamClient{config: rt.config}).QueryRecMemberEdges(rt)
}

// QueryRecTeamJobEdges queries the "rec_team_job_edges" edge of the RecTeam entity.
func (rt *RecTeam) QueryRecTeamJobEdges() *HiringJobQuery {
	return (&RecTeamClient{config: rt.config}).QueryRecTeamJobEdges(rt)
}

// QueryRecLeaderEdge queries the "rec_leader_edge" edge of the RecTeam entity.
func (rt *RecTeam) QueryRecLeaderEdge() *UserQuery {
	return (&RecTeamClient{config: rt.config}).QueryRecLeaderEdge(rt)
}

// Update returns a builder for updating this RecTeam.
// Note that you need to call RecTeam.Unwrap() before calling this method if this RecTeam
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *RecTeam) Update() *RecTeamUpdateOne {
	return (&RecTeamClient{config: rt.config}).UpdateOne(rt)
}

// Unwrap unwraps the RecTeam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *RecTeam) Unwrap() *RecTeam {
	_tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecTeam is not a transactional entity")
	}
	rt.config.driver = _tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *RecTeam) String() string {
	var builder strings.Builder
	builder.WriteString("RecTeam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(rt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rt.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rt.Description)
	builder.WriteString(", ")
	builder.WriteString("leader_id=")
	builder.WriteString(fmt.Sprintf("%v", rt.LeaderID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRecMemberEdges returns the RecMemberEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rt *RecTeam) NamedRecMemberEdges(name string) ([]*User, error) {
	if rt.Edges.namedRecMemberEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rt.Edges.namedRecMemberEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rt *RecTeam) appendNamedRecMemberEdges(name string, edges ...*User) {
	if rt.Edges.namedRecMemberEdges == nil {
		rt.Edges.namedRecMemberEdges = make(map[string][]*User)
	}
	if len(edges) == 0 {
		rt.Edges.namedRecMemberEdges[name] = []*User{}
	} else {
		rt.Edges.namedRecMemberEdges[name] = append(rt.Edges.namedRecMemberEdges[name], edges...)
	}
}

// NamedRecTeamJobEdges returns the RecTeamJobEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rt *RecTeam) NamedRecTeamJobEdges(name string) ([]*HiringJob, error) {
	if rt.Edges.namedRecTeamJobEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rt.Edges.namedRecTeamJobEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rt *RecTeam) appendNamedRecTeamJobEdges(name string, edges ...*HiringJob) {
	if rt.Edges.namedRecTeamJobEdges == nil {
		rt.Edges.namedRecTeamJobEdges = make(map[string][]*HiringJob)
	}
	if len(edges) == 0 {
		rt.Edges.namedRecTeamJobEdges[name] = []*HiringJob{}
	} else {
		rt.Edges.namedRecTeamJobEdges[name] = append(rt.Edges.namedRecTeamJobEdges[name], edges...)
	}
}

// RecTeams is a parsable slice of RecTeam.
type RecTeams []*RecTeam

func (rt RecTeams) config(cfg config) {
	for _i := range rt {
		rt[_i].config = cfg
	}
}
