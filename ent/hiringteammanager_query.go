// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"trec/ent/hiringteam"
	"trec/ent/hiringteammanager"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HiringTeamManagerQuery is the builder for querying HiringTeamManager entities.
type HiringTeamManagerQuery struct {
	config
	limit              *int
	offset             *int
	unique             *bool
	order              []OrderFunc
	fields             []string
	predicates         []predicate.HiringTeamManager
	withUserEdge       *UserQuery
	withHiringTeamEdge *HiringTeamQuery
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*HiringTeamManager) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HiringTeamManagerQuery builder.
func (htmq *HiringTeamManagerQuery) Where(ps ...predicate.HiringTeamManager) *HiringTeamManagerQuery {
	htmq.predicates = append(htmq.predicates, ps...)
	return htmq
}

// Limit adds a limit step to the query.
func (htmq *HiringTeamManagerQuery) Limit(limit int) *HiringTeamManagerQuery {
	htmq.limit = &limit
	return htmq
}

// Offset adds an offset step to the query.
func (htmq *HiringTeamManagerQuery) Offset(offset int) *HiringTeamManagerQuery {
	htmq.offset = &offset
	return htmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (htmq *HiringTeamManagerQuery) Unique(unique bool) *HiringTeamManagerQuery {
	htmq.unique = &unique
	return htmq
}

// Order adds an order step to the query.
func (htmq *HiringTeamManagerQuery) Order(o ...OrderFunc) *HiringTeamManagerQuery {
	htmq.order = append(htmq.order, o...)
	return htmq
}

// QueryUserEdge chains the current query on the "user_edge" edge.
func (htmq *HiringTeamManagerQuery) QueryUserEdge() *UserQuery {
	query := &UserQuery{config: htmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteammanager.Table, hiringteammanager.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringteammanager.UserEdgeTable, hiringteammanager.UserEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(htmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHiringTeamEdge chains the current query on the "hiring_team_edge" edge.
func (htmq *HiringTeamManagerQuery) QueryHiringTeamEdge() *HiringTeamQuery {
	query := &HiringTeamQuery{config: htmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteammanager.Table, hiringteammanager.FieldID, selector),
			sqlgraph.To(hiringteam.Table, hiringteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringteammanager.HiringTeamEdgeTable, hiringteammanager.HiringTeamEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(htmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HiringTeamManager entity from the query.
// Returns a *NotFoundError when no HiringTeamManager was found.
func (htmq *HiringTeamManagerQuery) First(ctx context.Context) (*HiringTeamManager, error) {
	nodes, err := htmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hiringteammanager.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (htmq *HiringTeamManagerQuery) FirstX(ctx context.Context) *HiringTeamManager {
	node, err := htmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HiringTeamManager ID from the query.
// Returns a *NotFoundError when no HiringTeamManager ID was found.
func (htmq *HiringTeamManagerQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = htmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hiringteammanager.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (htmq *HiringTeamManagerQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := htmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HiringTeamManager entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HiringTeamManager entity is found.
// Returns a *NotFoundError when no HiringTeamManager entities are found.
func (htmq *HiringTeamManagerQuery) Only(ctx context.Context) (*HiringTeamManager, error) {
	nodes, err := htmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hiringteammanager.Label}
	default:
		return nil, &NotSingularError{hiringteammanager.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (htmq *HiringTeamManagerQuery) OnlyX(ctx context.Context) *HiringTeamManager {
	node, err := htmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HiringTeamManager ID in the query.
// Returns a *NotSingularError when more than one HiringTeamManager ID is found.
// Returns a *NotFoundError when no entities are found.
func (htmq *HiringTeamManagerQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = htmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hiringteammanager.Label}
	default:
		err = &NotSingularError{hiringteammanager.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (htmq *HiringTeamManagerQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := htmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HiringTeamManagers.
func (htmq *HiringTeamManagerQuery) All(ctx context.Context) ([]*HiringTeamManager, error) {
	if err := htmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return htmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (htmq *HiringTeamManagerQuery) AllX(ctx context.Context) []*HiringTeamManager {
	nodes, err := htmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HiringTeamManager IDs.
func (htmq *HiringTeamManagerQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := htmq.Select(hiringteammanager.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (htmq *HiringTeamManagerQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := htmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (htmq *HiringTeamManagerQuery) Count(ctx context.Context) (int, error) {
	if err := htmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return htmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (htmq *HiringTeamManagerQuery) CountX(ctx context.Context) int {
	count, err := htmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (htmq *HiringTeamManagerQuery) Exist(ctx context.Context) (bool, error) {
	if err := htmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return htmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (htmq *HiringTeamManagerQuery) ExistX(ctx context.Context) bool {
	exist, err := htmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HiringTeamManagerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (htmq *HiringTeamManagerQuery) Clone() *HiringTeamManagerQuery {
	if htmq == nil {
		return nil
	}
	return &HiringTeamManagerQuery{
		config:             htmq.config,
		limit:              htmq.limit,
		offset:             htmq.offset,
		order:              append([]OrderFunc{}, htmq.order...),
		predicates:         append([]predicate.HiringTeamManager{}, htmq.predicates...),
		withUserEdge:       htmq.withUserEdge.Clone(),
		withHiringTeamEdge: htmq.withHiringTeamEdge.Clone(),
		// clone intermediate query.
		sql:    htmq.sql.Clone(),
		path:   htmq.path,
		unique: htmq.unique,
	}
}

// WithUserEdge tells the query-builder to eager-load the nodes that are connected to
// the "user_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (htmq *HiringTeamManagerQuery) WithUserEdge(opts ...func(*UserQuery)) *HiringTeamManagerQuery {
	query := &UserQuery{config: htmq.config}
	for _, opt := range opts {
		opt(query)
	}
	htmq.withUserEdge = query
	return htmq
}

// WithHiringTeamEdge tells the query-builder to eager-load the nodes that are connected to
// the "hiring_team_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (htmq *HiringTeamManagerQuery) WithHiringTeamEdge(opts ...func(*HiringTeamQuery)) *HiringTeamManagerQuery {
	query := &HiringTeamQuery{config: htmq.config}
	for _, opt := range opts {
		opt(query)
	}
	htmq.withHiringTeamEdge = query
	return htmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HiringTeamManager.Query().
//		GroupBy(hiringteammanager.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (htmq *HiringTeamManagerQuery) GroupBy(field string, fields ...string) *HiringTeamManagerGroupBy {
	grbuild := &HiringTeamManagerGroupBy{config: htmq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := htmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return htmq.sqlQuery(ctx), nil
	}
	grbuild.label = hiringteammanager.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.HiringTeamManager.Query().
//		Select(hiringteammanager.FieldCreatedAt).
//		Scan(ctx, &v)
func (htmq *HiringTeamManagerQuery) Select(fields ...string) *HiringTeamManagerSelect {
	htmq.fields = append(htmq.fields, fields...)
	selbuild := &HiringTeamManagerSelect{HiringTeamManagerQuery: htmq}
	selbuild.label = hiringteammanager.Label
	selbuild.flds, selbuild.scan = &htmq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a HiringTeamManagerSelect configured with the given aggregations.
func (htmq *HiringTeamManagerQuery) Aggregate(fns ...AggregateFunc) *HiringTeamManagerSelect {
	return htmq.Select().Aggregate(fns...)
}

func (htmq *HiringTeamManagerQuery) prepareQuery(ctx context.Context) error {
	for _, f := range htmq.fields {
		if !hiringteammanager.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if htmq.path != nil {
		prev, err := htmq.path(ctx)
		if err != nil {
			return err
		}
		htmq.sql = prev
	}
	return nil
}

func (htmq *HiringTeamManagerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HiringTeamManager, error) {
	var (
		nodes       = []*HiringTeamManager{}
		_spec       = htmq.querySpec()
		loadedTypes = [2]bool{
			htmq.withUserEdge != nil,
			htmq.withHiringTeamEdge != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HiringTeamManager).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HiringTeamManager{config: htmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(htmq.modifiers) > 0 {
		_spec.Modifiers = htmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, htmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := htmq.withUserEdge; query != nil {
		if err := htmq.loadUserEdge(ctx, query, nodes, nil,
			func(n *HiringTeamManager, e *User) { n.Edges.UserEdge = e }); err != nil {
			return nil, err
		}
	}
	if query := htmq.withHiringTeamEdge; query != nil {
		if err := htmq.loadHiringTeamEdge(ctx, query, nodes, nil,
			func(n *HiringTeamManager, e *HiringTeam) { n.Edges.HiringTeamEdge = e }); err != nil {
			return nil, err
		}
	}
	for i := range htmq.loadTotal {
		if err := htmq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (htmq *HiringTeamManagerQuery) loadUserEdge(ctx context.Context, query *UserQuery, nodes []*HiringTeamManager, init func(*HiringTeamManager), assign func(*HiringTeamManager, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HiringTeamManager)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (htmq *HiringTeamManagerQuery) loadHiringTeamEdge(ctx context.Context, query *HiringTeamQuery, nodes []*HiringTeamManager, init func(*HiringTeamManager), assign func(*HiringTeamManager, *HiringTeam)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HiringTeamManager)
	for i := range nodes {
		fk := nodes[i].HiringTeamID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(hiringteam.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hiring_team_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (htmq *HiringTeamManagerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := htmq.querySpec()
	if len(htmq.modifiers) > 0 {
		_spec.Modifiers = htmq.modifiers
	}
	_spec.Node.Columns = htmq.fields
	if len(htmq.fields) > 0 {
		_spec.Unique = htmq.unique != nil && *htmq.unique
	}
	return sqlgraph.CountNodes(ctx, htmq.driver, _spec)
}

func (htmq *HiringTeamManagerQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := htmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (htmq *HiringTeamManagerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringteammanager.Table,
			Columns: hiringteammanager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringteammanager.FieldID,
			},
		},
		From:   htmq.sql,
		Unique: true,
	}
	if unique := htmq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := htmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hiringteammanager.FieldID)
		for i := range fields {
			if fields[i] != hiringteammanager.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := htmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := htmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := htmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := htmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (htmq *HiringTeamManagerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(htmq.driver.Dialect())
	t1 := builder.Table(hiringteammanager.Table)
	columns := htmq.fields
	if len(columns) == 0 {
		columns = hiringteammanager.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if htmq.sql != nil {
		selector = htmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if htmq.unique != nil && *htmq.unique {
		selector.Distinct()
	}
	for _, p := range htmq.predicates {
		p(selector)
	}
	for _, p := range htmq.order {
		p(selector)
	}
	if offset := htmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := htmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HiringTeamManagerGroupBy is the group-by builder for HiringTeamManager entities.
type HiringTeamManagerGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (htmgb *HiringTeamManagerGroupBy) Aggregate(fns ...AggregateFunc) *HiringTeamManagerGroupBy {
	htmgb.fns = append(htmgb.fns, fns...)
	return htmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (htmgb *HiringTeamManagerGroupBy) Scan(ctx context.Context, v any) error {
	query, err := htmgb.path(ctx)
	if err != nil {
		return err
	}
	htmgb.sql = query
	return htmgb.sqlScan(ctx, v)
}

func (htmgb *HiringTeamManagerGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range htmgb.fields {
		if !hiringteammanager.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := htmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (htmgb *HiringTeamManagerGroupBy) sqlQuery() *sql.Selector {
	selector := htmgb.sql.Select()
	aggregation := make([]string, 0, len(htmgb.fns))
	for _, fn := range htmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(htmgb.fields)+len(htmgb.fns))
		for _, f := range htmgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(htmgb.fields...)...)
}

// HiringTeamManagerSelect is the builder for selecting fields of HiringTeamManager entities.
type HiringTeamManagerSelect struct {
	*HiringTeamManagerQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (htms *HiringTeamManagerSelect) Aggregate(fns ...AggregateFunc) *HiringTeamManagerSelect {
	htms.fns = append(htms.fns, fns...)
	return htms
}

// Scan applies the selector query and scans the result into the given value.
func (htms *HiringTeamManagerSelect) Scan(ctx context.Context, v any) error {
	if err := htms.prepareQuery(ctx); err != nil {
		return err
	}
	htms.sql = htms.HiringTeamManagerQuery.sqlQuery(ctx)
	return htms.sqlScan(ctx, v)
}

func (htms *HiringTeamManagerSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(htms.fns))
	for _, fn := range htms.fns {
		aggregation = append(aggregation, fn(htms.sql))
	}
	switch n := len(*htms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		htms.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		htms.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := htms.sql.Query()
	if err := htms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
