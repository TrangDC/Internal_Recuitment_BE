// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"trec/ent/emailevent"
	"trec/ent/emailroleattribute"
	"trec/ent/emailtemplate"
	"trec/ent/predicate"
	"trec/ent/role"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EmailTemplateQuery is the builder for querying EmailTemplate entities.
type EmailTemplateQuery struct {
	config
	limit                       *int
	offset                      *int
	unique                      *bool
	order                       []OrderFunc
	fields                      []string
	predicates                  []predicate.EmailTemplate
	withRoleEdges               *RoleQuery
	withEventEdge               *EmailEventQuery
	withRoleEmailTemplates      *EmailRoleAttributeQuery
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*EmailTemplate) error
	withNamedRoleEdges          map[string]*RoleQuery
	withNamedRoleEmailTemplates map[string]*EmailRoleAttributeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmailTemplateQuery builder.
func (etq *EmailTemplateQuery) Where(ps ...predicate.EmailTemplate) *EmailTemplateQuery {
	etq.predicates = append(etq.predicates, ps...)
	return etq
}

// Limit adds a limit step to the query.
func (etq *EmailTemplateQuery) Limit(limit int) *EmailTemplateQuery {
	etq.limit = &limit
	return etq
}

// Offset adds an offset step to the query.
func (etq *EmailTemplateQuery) Offset(offset int) *EmailTemplateQuery {
	etq.offset = &offset
	return etq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (etq *EmailTemplateQuery) Unique(unique bool) *EmailTemplateQuery {
	etq.unique = &unique
	return etq
}

// Order adds an order step to the query.
func (etq *EmailTemplateQuery) Order(o ...OrderFunc) *EmailTemplateQuery {
	etq.order = append(etq.order, o...)
	return etq
}

// QueryRoleEdges chains the current query on the "role_edges" edge.
func (etq *EmailTemplateQuery) QueryRoleEdges() *RoleQuery {
	query := &RoleQuery{config: etq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := etq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, emailtemplate.RoleEdgesTable, emailtemplate.RoleEdgesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(etq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEventEdge chains the current query on the "event_edge" edge.
func (etq *EmailTemplateQuery) QueryEventEdge() *EmailEventQuery {
	query := &EmailEventQuery{config: etq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := etq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, selector),
			sqlgraph.To(emailevent.Table, emailevent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emailtemplate.EventEdgeTable, emailtemplate.EventEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(etq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleEmailTemplates chains the current query on the "role_email_templates" edge.
func (etq *EmailTemplateQuery) QueryRoleEmailTemplates() *EmailRoleAttributeQuery {
	query := &EmailRoleAttributeQuery{config: etq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := etq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, selector),
			sqlgraph.To(emailroleattribute.Table, emailroleattribute.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, emailtemplate.RoleEmailTemplatesTable, emailtemplate.RoleEmailTemplatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(etq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EmailTemplate entity from the query.
// Returns a *NotFoundError when no EmailTemplate was found.
func (etq *EmailTemplateQuery) First(ctx context.Context) (*EmailTemplate, error) {
	nodes, err := etq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{emailtemplate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (etq *EmailTemplateQuery) FirstX(ctx context.Context) *EmailTemplate {
	node, err := etq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EmailTemplate ID from the query.
// Returns a *NotFoundError when no EmailTemplate ID was found.
func (etq *EmailTemplateQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = etq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{emailtemplate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (etq *EmailTemplateQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := etq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EmailTemplate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EmailTemplate entity is found.
// Returns a *NotFoundError when no EmailTemplate entities are found.
func (etq *EmailTemplateQuery) Only(ctx context.Context) (*EmailTemplate, error) {
	nodes, err := etq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{emailtemplate.Label}
	default:
		return nil, &NotSingularError{emailtemplate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (etq *EmailTemplateQuery) OnlyX(ctx context.Context) *EmailTemplate {
	node, err := etq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EmailTemplate ID in the query.
// Returns a *NotSingularError when more than one EmailTemplate ID is found.
// Returns a *NotFoundError when no entities are found.
func (etq *EmailTemplateQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = etq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{emailtemplate.Label}
	default:
		err = &NotSingularError{emailtemplate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (etq *EmailTemplateQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := etq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EmailTemplates.
func (etq *EmailTemplateQuery) All(ctx context.Context) ([]*EmailTemplate, error) {
	if err := etq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return etq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (etq *EmailTemplateQuery) AllX(ctx context.Context) []*EmailTemplate {
	nodes, err := etq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EmailTemplate IDs.
func (etq *EmailTemplateQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := etq.Select(emailtemplate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (etq *EmailTemplateQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := etq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (etq *EmailTemplateQuery) Count(ctx context.Context) (int, error) {
	if err := etq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return etq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (etq *EmailTemplateQuery) CountX(ctx context.Context) int {
	count, err := etq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (etq *EmailTemplateQuery) Exist(ctx context.Context) (bool, error) {
	if err := etq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return etq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (etq *EmailTemplateQuery) ExistX(ctx context.Context) bool {
	exist, err := etq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmailTemplateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (etq *EmailTemplateQuery) Clone() *EmailTemplateQuery {
	if etq == nil {
		return nil
	}
	return &EmailTemplateQuery{
		config:                 etq.config,
		limit:                  etq.limit,
		offset:                 etq.offset,
		order:                  append([]OrderFunc{}, etq.order...),
		predicates:             append([]predicate.EmailTemplate{}, etq.predicates...),
		withRoleEdges:          etq.withRoleEdges.Clone(),
		withEventEdge:          etq.withEventEdge.Clone(),
		withRoleEmailTemplates: etq.withRoleEmailTemplates.Clone(),
		// clone intermediate query.
		sql:    etq.sql.Clone(),
		path:   etq.path,
		unique: etq.unique,
	}
}

// WithRoleEdges tells the query-builder to eager-load the nodes that are connected to
// the "role_edges" edge. The optional arguments are used to configure the query builder of the edge.
func (etq *EmailTemplateQuery) WithRoleEdges(opts ...func(*RoleQuery)) *EmailTemplateQuery {
	query := &RoleQuery{config: etq.config}
	for _, opt := range opts {
		opt(query)
	}
	etq.withRoleEdges = query
	return etq
}

// WithEventEdge tells the query-builder to eager-load the nodes that are connected to
// the "event_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (etq *EmailTemplateQuery) WithEventEdge(opts ...func(*EmailEventQuery)) *EmailTemplateQuery {
	query := &EmailEventQuery{config: etq.config}
	for _, opt := range opts {
		opt(query)
	}
	etq.withEventEdge = query
	return etq
}

// WithRoleEmailTemplates tells the query-builder to eager-load the nodes that are connected to
// the "role_email_templates" edge. The optional arguments are used to configure the query builder of the edge.
func (etq *EmailTemplateQuery) WithRoleEmailTemplates(opts ...func(*EmailRoleAttributeQuery)) *EmailTemplateQuery {
	query := &EmailRoleAttributeQuery{config: etq.config}
	for _, opt := range opts {
		opt(query)
	}
	etq.withRoleEmailTemplates = query
	return etq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EmailTemplate.Query().
//		GroupBy(emailtemplate.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (etq *EmailTemplateQuery) GroupBy(field string, fields ...string) *EmailTemplateGroupBy {
	grbuild := &EmailTemplateGroupBy{config: etq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return etq.sqlQuery(ctx), nil
	}
	grbuild.label = emailtemplate.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.EmailTemplate.Query().
//		Select(emailtemplate.FieldCreatedAt).
//		Scan(ctx, &v)
func (etq *EmailTemplateQuery) Select(fields ...string) *EmailTemplateSelect {
	etq.fields = append(etq.fields, fields...)
	selbuild := &EmailTemplateSelect{EmailTemplateQuery: etq}
	selbuild.label = emailtemplate.Label
	selbuild.flds, selbuild.scan = &etq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a EmailTemplateSelect configured with the given aggregations.
func (etq *EmailTemplateQuery) Aggregate(fns ...AggregateFunc) *EmailTemplateSelect {
	return etq.Select().Aggregate(fns...)
}

func (etq *EmailTemplateQuery) prepareQuery(ctx context.Context) error {
	for _, f := range etq.fields {
		if !emailtemplate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if etq.path != nil {
		prev, err := etq.path(ctx)
		if err != nil {
			return err
		}
		etq.sql = prev
	}
	return nil
}

func (etq *EmailTemplateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EmailTemplate, error) {
	var (
		nodes       = []*EmailTemplate{}
		_spec       = etq.querySpec()
		loadedTypes = [3]bool{
			etq.withRoleEdges != nil,
			etq.withEventEdge != nil,
			etq.withRoleEmailTemplates != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EmailTemplate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EmailTemplate{config: etq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(etq.modifiers) > 0 {
		_spec.Modifiers = etq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, etq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := etq.withRoleEdges; query != nil {
		if err := etq.loadRoleEdges(ctx, query, nodes,
			func(n *EmailTemplate) { n.Edges.RoleEdges = []*Role{} },
			func(n *EmailTemplate, e *Role) { n.Edges.RoleEdges = append(n.Edges.RoleEdges, e) }); err != nil {
			return nil, err
		}
	}
	if query := etq.withEventEdge; query != nil {
		if err := etq.loadEventEdge(ctx, query, nodes, nil,
			func(n *EmailTemplate, e *EmailEvent) { n.Edges.EventEdge = e }); err != nil {
			return nil, err
		}
	}
	if query := etq.withRoleEmailTemplates; query != nil {
		if err := etq.loadRoleEmailTemplates(ctx, query, nodes,
			func(n *EmailTemplate) { n.Edges.RoleEmailTemplates = []*EmailRoleAttribute{} },
			func(n *EmailTemplate, e *EmailRoleAttribute) {
				n.Edges.RoleEmailTemplates = append(n.Edges.RoleEmailTemplates, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range etq.withNamedRoleEdges {
		if err := etq.loadRoleEdges(ctx, query, nodes,
			func(n *EmailTemplate) { n.appendNamedRoleEdges(name) },
			func(n *EmailTemplate, e *Role) { n.appendNamedRoleEdges(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range etq.withNamedRoleEmailTemplates {
		if err := etq.loadRoleEmailTemplates(ctx, query, nodes,
			func(n *EmailTemplate) { n.appendNamedRoleEmailTemplates(name) },
			func(n *EmailTemplate, e *EmailRoleAttribute) { n.appendNamedRoleEmailTemplates(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range etq.loadTotal {
		if err := etq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (etq *EmailTemplateQuery) loadRoleEdges(ctx context.Context, query *RoleQuery, nodes []*EmailTemplate, init func(*EmailTemplate), assign func(*EmailTemplate, *Role)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*EmailTemplate)
	nids := make(map[uuid.UUID]map[*EmailTemplate]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(emailtemplate.RoleEdgesTable)
		s.Join(joinT).On(s.C(role.FieldID), joinT.C(emailtemplate.RoleEdgesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(emailtemplate.RoleEdgesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(emailtemplate.RoleEdgesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*EmailTemplate]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "role_edges" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (etq *EmailTemplateQuery) loadEventEdge(ctx context.Context, query *EmailEventQuery, nodes []*EmailTemplate, init func(*EmailTemplate), assign func(*EmailTemplate, *EmailEvent)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EmailTemplate)
	for i := range nodes {
		fk := nodes[i].EventID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(emailevent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (etq *EmailTemplateQuery) loadRoleEmailTemplates(ctx context.Context, query *EmailRoleAttributeQuery, nodes []*EmailTemplate, init func(*EmailTemplate), assign func(*EmailTemplate, *EmailRoleAttribute)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*EmailTemplate)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.EmailRoleAttribute(func(s *sql.Selector) {
		s.Where(sql.InValues(emailtemplate.RoleEmailTemplatesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmailTemplateID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "email_template_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (etq *EmailTemplateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := etq.querySpec()
	if len(etq.modifiers) > 0 {
		_spec.Modifiers = etq.modifiers
	}
	_spec.Node.Columns = etq.fields
	if len(etq.fields) > 0 {
		_spec.Unique = etq.unique != nil && *etq.unique
	}
	return sqlgraph.CountNodes(ctx, etq.driver, _spec)
}

func (etq *EmailTemplateQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := etq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (etq *EmailTemplateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailtemplate.Table,
			Columns: emailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailtemplate.FieldID,
			},
		},
		From:   etq.sql,
		Unique: true,
	}
	if unique := etq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := etq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailtemplate.FieldID)
		for i := range fields {
			if fields[i] != emailtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := etq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := etq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := etq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := etq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (etq *EmailTemplateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(etq.driver.Dialect())
	t1 := builder.Table(emailtemplate.Table)
	columns := etq.fields
	if len(columns) == 0 {
		columns = emailtemplate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if etq.sql != nil {
		selector = etq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if etq.unique != nil && *etq.unique {
		selector.Distinct()
	}
	for _, p := range etq.predicates {
		p(selector)
	}
	for _, p := range etq.order {
		p(selector)
	}
	if offset := etq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := etq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedRoleEdges tells the query-builder to eager-load the nodes that are connected to the "role_edges"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (etq *EmailTemplateQuery) WithNamedRoleEdges(name string, opts ...func(*RoleQuery)) *EmailTemplateQuery {
	query := &RoleQuery{config: etq.config}
	for _, opt := range opts {
		opt(query)
	}
	if etq.withNamedRoleEdges == nil {
		etq.withNamedRoleEdges = make(map[string]*RoleQuery)
	}
	etq.withNamedRoleEdges[name] = query
	return etq
}

// WithNamedRoleEmailTemplates tells the query-builder to eager-load the nodes that are connected to the "role_email_templates"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (etq *EmailTemplateQuery) WithNamedRoleEmailTemplates(name string, opts ...func(*EmailRoleAttributeQuery)) *EmailTemplateQuery {
	query := &EmailRoleAttributeQuery{config: etq.config}
	for _, opt := range opts {
		opt(query)
	}
	if etq.withNamedRoleEmailTemplates == nil {
		etq.withNamedRoleEmailTemplates = make(map[string]*EmailRoleAttributeQuery)
	}
	etq.withNamedRoleEmailTemplates[name] = query
	return etq
}

// EmailTemplateGroupBy is the group-by builder for EmailTemplate entities.
type EmailTemplateGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (etgb *EmailTemplateGroupBy) Aggregate(fns ...AggregateFunc) *EmailTemplateGroupBy {
	etgb.fns = append(etgb.fns, fns...)
	return etgb
}

// Scan applies the group-by query and scans the result into the given value.
func (etgb *EmailTemplateGroupBy) Scan(ctx context.Context, v any) error {
	query, err := etgb.path(ctx)
	if err != nil {
		return err
	}
	etgb.sql = query
	return etgb.sqlScan(ctx, v)
}

func (etgb *EmailTemplateGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range etgb.fields {
		if !emailtemplate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := etgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := etgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (etgb *EmailTemplateGroupBy) sqlQuery() *sql.Selector {
	selector := etgb.sql.Select()
	aggregation := make([]string, 0, len(etgb.fns))
	for _, fn := range etgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(etgb.fields)+len(etgb.fns))
		for _, f := range etgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(etgb.fields...)...)
}

// EmailTemplateSelect is the builder for selecting fields of EmailTemplate entities.
type EmailTemplateSelect struct {
	*EmailTemplateQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ets *EmailTemplateSelect) Aggregate(fns ...AggregateFunc) *EmailTemplateSelect {
	ets.fns = append(ets.fns, fns...)
	return ets
}

// Scan applies the selector query and scans the result into the given value.
func (ets *EmailTemplateSelect) Scan(ctx context.Context, v any) error {
	if err := ets.prepareQuery(ctx); err != nil {
		return err
	}
	ets.sql = ets.EmailTemplateQuery.sqlQuery(ctx)
	return ets.sqlScan(ctx, v)
}

func (ets *EmailTemplateSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ets.fns))
	for _, fn := range ets.fns {
		aggregation = append(aggregation, fn(ets.sql))
	}
	switch n := len(*ets.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ets.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ets.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ets.sql.Query()
	if err := ets.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
