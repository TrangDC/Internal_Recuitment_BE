// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobstep"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateJobStepUpdate is the builder for updating CandidateJobStep entities.
type CandidateJobStepUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateJobStepMutation
}

// Where appends a list predicates to the CandidateJobStepUpdate builder.
func (cjsu *CandidateJobStepUpdate) Where(ps ...predicate.CandidateJobStep) *CandidateJobStepUpdate {
	cjsu.mutation.Where(ps...)
	return cjsu
}

// SetUpdatedAt sets the "updated_at" field.
func (cjsu *CandidateJobStepUpdate) SetUpdatedAt(t time.Time) *CandidateJobStepUpdate {
	cjsu.mutation.SetUpdatedAt(t)
	return cjsu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cjsu *CandidateJobStepUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateJobStepUpdate {
	if t != nil {
		cjsu.SetUpdatedAt(*t)
	}
	return cjsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cjsu *CandidateJobStepUpdate) ClearUpdatedAt() *CandidateJobStepUpdate {
	cjsu.mutation.ClearUpdatedAt()
	return cjsu
}

// SetDeletedAt sets the "deleted_at" field.
func (cjsu *CandidateJobStepUpdate) SetDeletedAt(t time.Time) *CandidateJobStepUpdate {
	cjsu.mutation.SetDeletedAt(t)
	return cjsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cjsu *CandidateJobStepUpdate) SetNillableDeletedAt(t *time.Time) *CandidateJobStepUpdate {
	if t != nil {
		cjsu.SetDeletedAt(*t)
	}
	return cjsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cjsu *CandidateJobStepUpdate) ClearDeletedAt() *CandidateJobStepUpdate {
	cjsu.mutation.ClearDeletedAt()
	return cjsu
}

// SetCandidateJobStatus sets the "candidate_job_status" field.
func (cjsu *CandidateJobStepUpdate) SetCandidateJobStatus(cjs candidatejobstep.CandidateJobStatus) *CandidateJobStepUpdate {
	cjsu.mutation.SetCandidateJobStatus(cjs)
	return cjsu
}

// SetNillableCandidateJobStatus sets the "candidate_job_status" field if the given value is not nil.
func (cjsu *CandidateJobStepUpdate) SetNillableCandidateJobStatus(cjs *candidatejobstep.CandidateJobStatus) *CandidateJobStepUpdate {
	if cjs != nil {
		cjsu.SetCandidateJobStatus(*cjs)
	}
	return cjsu
}

// SetCandidateJobID sets the "candidate_job_id" field.
func (cjsu *CandidateJobStepUpdate) SetCandidateJobID(u uuid.UUID) *CandidateJobStepUpdate {
	cjsu.mutation.SetCandidateJobID(u)
	return cjsu
}

// SetNillableCandidateJobID sets the "candidate_job_id" field if the given value is not nil.
func (cjsu *CandidateJobStepUpdate) SetNillableCandidateJobID(u *uuid.UUID) *CandidateJobStepUpdate {
	if u != nil {
		cjsu.SetCandidateJobID(*u)
	}
	return cjsu
}

// ClearCandidateJobID clears the value of the "candidate_job_id" field.
func (cjsu *CandidateJobStepUpdate) ClearCandidateJobID() *CandidateJobStepUpdate {
	cjsu.mutation.ClearCandidateJobID()
	return cjsu
}

// SetCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID.
func (cjsu *CandidateJobStepUpdate) SetCandidateJobEdgeID(id uuid.UUID) *CandidateJobStepUpdate {
	cjsu.mutation.SetCandidateJobEdgeID(id)
	return cjsu
}

// SetNillableCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID if the given value is not nil.
func (cjsu *CandidateJobStepUpdate) SetNillableCandidateJobEdgeID(id *uuid.UUID) *CandidateJobStepUpdate {
	if id != nil {
		cjsu = cjsu.SetCandidateJobEdgeID(*id)
	}
	return cjsu
}

// SetCandidateJobEdge sets the "candidate_job_edge" edge to the CandidateJob entity.
func (cjsu *CandidateJobStepUpdate) SetCandidateJobEdge(c *CandidateJob) *CandidateJobStepUpdate {
	return cjsu.SetCandidateJobEdgeID(c.ID)
}

// Mutation returns the CandidateJobStepMutation object of the builder.
func (cjsu *CandidateJobStepUpdate) Mutation() *CandidateJobStepMutation {
	return cjsu.mutation
}

// ClearCandidateJobEdge clears the "candidate_job_edge" edge to the CandidateJob entity.
func (cjsu *CandidateJobStepUpdate) ClearCandidateJobEdge() *CandidateJobStepUpdate {
	cjsu.mutation.ClearCandidateJobEdge()
	return cjsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cjsu *CandidateJobStepUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cjsu.hooks) == 0 {
		if err = cjsu.check(); err != nil {
			return 0, err
		}
		affected, err = cjsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateJobStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cjsu.check(); err != nil {
				return 0, err
			}
			cjsu.mutation = mutation
			affected, err = cjsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cjsu.hooks) - 1; i >= 0; i-- {
			if cjsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cjsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cjsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cjsu *CandidateJobStepUpdate) SaveX(ctx context.Context) int {
	affected, err := cjsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cjsu *CandidateJobStepUpdate) Exec(ctx context.Context) error {
	_, err := cjsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjsu *CandidateJobStepUpdate) ExecX(ctx context.Context) {
	if err := cjsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cjsu *CandidateJobStepUpdate) check() error {
	if v, ok := cjsu.mutation.CandidateJobStatus(); ok {
		if err := candidatejobstep.CandidateJobStatusValidator(v); err != nil {
			return &ValidationError{Name: "candidate_job_status", err: fmt.Errorf(`ent: validator failed for field "CandidateJobStep.candidate_job_status": %w`, err)}
		}
	}
	return nil
}

func (cjsu *CandidateJobStepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatejobstep.Table,
			Columns: candidatejobstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatejobstep.FieldID,
			},
		},
	}
	if ps := cjsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cjsu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatejobstep.FieldUpdatedAt, field.TypeTime, value)
	}
	if cjsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidatejobstep.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cjsu.mutation.DeletedAt(); ok {
		_spec.SetField(candidatejobstep.FieldDeletedAt, field.TypeTime, value)
	}
	if cjsu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidatejobstep.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cjsu.mutation.CandidateJobStatus(); ok {
		_spec.SetField(candidatejobstep.FieldCandidateJobStatus, field.TypeEnum, value)
	}
	if cjsu.mutation.CandidateJobEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatejobstep.CandidateJobEdgeTable,
			Columns: []string{candidatejobstep.CandidateJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cjsu.mutation.CandidateJobEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatejobstep.CandidateJobEdgeTable,
			Columns: []string{candidatejobstep.CandidateJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cjsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidatejobstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateJobStepUpdateOne is the builder for updating a single CandidateJobStep entity.
type CandidateJobStepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateJobStepMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cjsuo *CandidateJobStepUpdateOne) SetUpdatedAt(t time.Time) *CandidateJobStepUpdateOne {
	cjsuo.mutation.SetUpdatedAt(t)
	return cjsuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cjsuo *CandidateJobStepUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateJobStepUpdateOne {
	if t != nil {
		cjsuo.SetUpdatedAt(*t)
	}
	return cjsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cjsuo *CandidateJobStepUpdateOne) ClearUpdatedAt() *CandidateJobStepUpdateOne {
	cjsuo.mutation.ClearUpdatedAt()
	return cjsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cjsuo *CandidateJobStepUpdateOne) SetDeletedAt(t time.Time) *CandidateJobStepUpdateOne {
	cjsuo.mutation.SetDeletedAt(t)
	return cjsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cjsuo *CandidateJobStepUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateJobStepUpdateOne {
	if t != nil {
		cjsuo.SetDeletedAt(*t)
	}
	return cjsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cjsuo *CandidateJobStepUpdateOne) ClearDeletedAt() *CandidateJobStepUpdateOne {
	cjsuo.mutation.ClearDeletedAt()
	return cjsuo
}

// SetCandidateJobStatus sets the "candidate_job_status" field.
func (cjsuo *CandidateJobStepUpdateOne) SetCandidateJobStatus(cjs candidatejobstep.CandidateJobStatus) *CandidateJobStepUpdateOne {
	cjsuo.mutation.SetCandidateJobStatus(cjs)
	return cjsuo
}

// SetNillableCandidateJobStatus sets the "candidate_job_status" field if the given value is not nil.
func (cjsuo *CandidateJobStepUpdateOne) SetNillableCandidateJobStatus(cjs *candidatejobstep.CandidateJobStatus) *CandidateJobStepUpdateOne {
	if cjs != nil {
		cjsuo.SetCandidateJobStatus(*cjs)
	}
	return cjsuo
}

// SetCandidateJobID sets the "candidate_job_id" field.
func (cjsuo *CandidateJobStepUpdateOne) SetCandidateJobID(u uuid.UUID) *CandidateJobStepUpdateOne {
	cjsuo.mutation.SetCandidateJobID(u)
	return cjsuo
}

// SetNillableCandidateJobID sets the "candidate_job_id" field if the given value is not nil.
func (cjsuo *CandidateJobStepUpdateOne) SetNillableCandidateJobID(u *uuid.UUID) *CandidateJobStepUpdateOne {
	if u != nil {
		cjsuo.SetCandidateJobID(*u)
	}
	return cjsuo
}

// ClearCandidateJobID clears the value of the "candidate_job_id" field.
func (cjsuo *CandidateJobStepUpdateOne) ClearCandidateJobID() *CandidateJobStepUpdateOne {
	cjsuo.mutation.ClearCandidateJobID()
	return cjsuo
}

// SetCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID.
func (cjsuo *CandidateJobStepUpdateOne) SetCandidateJobEdgeID(id uuid.UUID) *CandidateJobStepUpdateOne {
	cjsuo.mutation.SetCandidateJobEdgeID(id)
	return cjsuo
}

// SetNillableCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID if the given value is not nil.
func (cjsuo *CandidateJobStepUpdateOne) SetNillableCandidateJobEdgeID(id *uuid.UUID) *CandidateJobStepUpdateOne {
	if id != nil {
		cjsuo = cjsuo.SetCandidateJobEdgeID(*id)
	}
	return cjsuo
}

// SetCandidateJobEdge sets the "candidate_job_edge" edge to the CandidateJob entity.
func (cjsuo *CandidateJobStepUpdateOne) SetCandidateJobEdge(c *CandidateJob) *CandidateJobStepUpdateOne {
	return cjsuo.SetCandidateJobEdgeID(c.ID)
}

// Mutation returns the CandidateJobStepMutation object of the builder.
func (cjsuo *CandidateJobStepUpdateOne) Mutation() *CandidateJobStepMutation {
	return cjsuo.mutation
}

// ClearCandidateJobEdge clears the "candidate_job_edge" edge to the CandidateJob entity.
func (cjsuo *CandidateJobStepUpdateOne) ClearCandidateJobEdge() *CandidateJobStepUpdateOne {
	cjsuo.mutation.ClearCandidateJobEdge()
	return cjsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cjsuo *CandidateJobStepUpdateOne) Select(field string, fields ...string) *CandidateJobStepUpdateOne {
	cjsuo.fields = append([]string{field}, fields...)
	return cjsuo
}

// Save executes the query and returns the updated CandidateJobStep entity.
func (cjsuo *CandidateJobStepUpdateOne) Save(ctx context.Context) (*CandidateJobStep, error) {
	var (
		err  error
		node *CandidateJobStep
	)
	if len(cjsuo.hooks) == 0 {
		if err = cjsuo.check(); err != nil {
			return nil, err
		}
		node, err = cjsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateJobStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cjsuo.check(); err != nil {
				return nil, err
			}
			cjsuo.mutation = mutation
			node, err = cjsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cjsuo.hooks) - 1; i >= 0; i-- {
			if cjsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cjsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cjsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateJobStep)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateJobStepMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cjsuo *CandidateJobStepUpdateOne) SaveX(ctx context.Context) *CandidateJobStep {
	node, err := cjsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cjsuo *CandidateJobStepUpdateOne) Exec(ctx context.Context) error {
	_, err := cjsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjsuo *CandidateJobStepUpdateOne) ExecX(ctx context.Context) {
	if err := cjsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cjsuo *CandidateJobStepUpdateOne) check() error {
	if v, ok := cjsuo.mutation.CandidateJobStatus(); ok {
		if err := candidatejobstep.CandidateJobStatusValidator(v); err != nil {
			return &ValidationError{Name: "candidate_job_status", err: fmt.Errorf(`ent: validator failed for field "CandidateJobStep.candidate_job_status": %w`, err)}
		}
	}
	return nil
}

func (cjsuo *CandidateJobStepUpdateOne) sqlSave(ctx context.Context) (_node *CandidateJobStep, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatejobstep.Table,
			Columns: candidatejobstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatejobstep.FieldID,
			},
		},
	}
	id, ok := cjsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CandidateJobStep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cjsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidatejobstep.FieldID)
		for _, f := range fields {
			if !candidatejobstep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidatejobstep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cjsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cjsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatejobstep.FieldUpdatedAt, field.TypeTime, value)
	}
	if cjsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidatejobstep.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cjsuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidatejobstep.FieldDeletedAt, field.TypeTime, value)
	}
	if cjsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidatejobstep.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cjsuo.mutation.CandidateJobStatus(); ok {
		_spec.SetField(candidatejobstep.FieldCandidateJobStatus, field.TypeEnum, value)
	}
	if cjsuo.mutation.CandidateJobEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatejobstep.CandidateJobEdgeTable,
			Columns: []string{candidatejobstep.CandidateJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cjsuo.mutation.CandidateJobEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatejobstep.CandidateJobEdgeTable,
			Columns: []string{candidatejobstep.CandidateJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CandidateJobStep{config: cjsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cjsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidatejobstep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
