// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/candidateinterview"
	"trec/ent/candidateinterviewer"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateInterviewerCreate is the builder for creating a CandidateInterviewer entity.
type CandidateInterviewerCreate struct {
	config
	mutation *CandidateInterviewerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cic *CandidateInterviewerCreate) SetCreatedAt(t time.Time) *CandidateInterviewerCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *CandidateInterviewerCreate) SetNillableCreatedAt(t *time.Time) *CandidateInterviewerCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetUpdatedAt sets the "updated_at" field.
func (cic *CandidateInterviewerCreate) SetUpdatedAt(t time.Time) *CandidateInterviewerCreate {
	cic.mutation.SetUpdatedAt(t)
	return cic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cic *CandidateInterviewerCreate) SetNillableUpdatedAt(t *time.Time) *CandidateInterviewerCreate {
	if t != nil {
		cic.SetUpdatedAt(*t)
	}
	return cic
}

// SetDeletedAt sets the "deleted_at" field.
func (cic *CandidateInterviewerCreate) SetDeletedAt(t time.Time) *CandidateInterviewerCreate {
	cic.mutation.SetDeletedAt(t)
	return cic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cic *CandidateInterviewerCreate) SetNillableDeletedAt(t *time.Time) *CandidateInterviewerCreate {
	if t != nil {
		cic.SetDeletedAt(*t)
	}
	return cic
}

// SetCandidateInterviewID sets the "candidate_interview_id" field.
func (cic *CandidateInterviewerCreate) SetCandidateInterviewID(u uuid.UUID) *CandidateInterviewerCreate {
	cic.mutation.SetCandidateInterviewID(u)
	return cic
}

// SetUserID sets the "user_id" field.
func (cic *CandidateInterviewerCreate) SetUserID(u uuid.UUID) *CandidateInterviewerCreate {
	cic.mutation.SetUserID(u)
	return cic
}

// SetID sets the "id" field.
func (cic *CandidateInterviewerCreate) SetID(u uuid.UUID) *CandidateInterviewerCreate {
	cic.mutation.SetID(u)
	return cic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cic *CandidateInterviewerCreate) SetNillableID(u *uuid.UUID) *CandidateInterviewerCreate {
	if u != nil {
		cic.SetID(*u)
	}
	return cic
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (cic *CandidateInterviewerCreate) SetUserEdgeID(id uuid.UUID) *CandidateInterviewerCreate {
	cic.mutation.SetUserEdgeID(id)
	return cic
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (cic *CandidateInterviewerCreate) SetUserEdge(u *User) *CandidateInterviewerCreate {
	return cic.SetUserEdgeID(u.ID)
}

// SetInterviewEdgeID sets the "interview_edge" edge to the CandidateInterview entity by ID.
func (cic *CandidateInterviewerCreate) SetInterviewEdgeID(id uuid.UUID) *CandidateInterviewerCreate {
	cic.mutation.SetInterviewEdgeID(id)
	return cic
}

// SetInterviewEdge sets the "interview_edge" edge to the CandidateInterview entity.
func (cic *CandidateInterviewerCreate) SetInterviewEdge(c *CandidateInterview) *CandidateInterviewerCreate {
	return cic.SetInterviewEdgeID(c.ID)
}

// Mutation returns the CandidateInterviewerMutation object of the builder.
func (cic *CandidateInterviewerCreate) Mutation() *CandidateInterviewerMutation {
	return cic.mutation
}

// Save creates the CandidateInterviewer in the database.
func (cic *CandidateInterviewerCreate) Save(ctx context.Context) (*CandidateInterviewer, error) {
	var (
		err  error
		node *CandidateInterviewer
	)
	cic.defaults()
	if len(cic.hooks) == 0 {
		if err = cic.check(); err != nil {
			return nil, err
		}
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateInterviewerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cic.check(); err != nil {
				return nil, err
			}
			cic.mutation = mutation
			if node, err = cic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			if cic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateInterviewer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateInterviewerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CandidateInterviewerCreate) SaveX(ctx context.Context) *CandidateInterviewer {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CandidateInterviewerCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CandidateInterviewerCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *CandidateInterviewerCreate) defaults() {
	if _, ok := cic.mutation.CreatedAt(); !ok {
		v := candidateinterviewer.DefaultCreatedAt()
		cic.mutation.SetCreatedAt(v)
	}
	if _, ok := cic.mutation.ID(); !ok {
		v := candidateinterviewer.DefaultID()
		cic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CandidateInterviewerCreate) check() error {
	if _, ok := cic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CandidateInterviewer.created_at"`)}
	}
	if _, ok := cic.mutation.CandidateInterviewID(); !ok {
		return &ValidationError{Name: "candidate_interview_id", err: errors.New(`ent: missing required field "CandidateInterviewer.candidate_interview_id"`)}
	}
	if _, ok := cic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "CandidateInterviewer.user_id"`)}
	}
	if _, ok := cic.mutation.UserEdgeID(); !ok {
		return &ValidationError{Name: "user_edge", err: errors.New(`ent: missing required edge "CandidateInterviewer.user_edge"`)}
	}
	if _, ok := cic.mutation.InterviewEdgeID(); !ok {
		return &ValidationError{Name: "interview_edge", err: errors.New(`ent: missing required edge "CandidateInterviewer.interview_edge"`)}
	}
	return nil
}

func (cic *CandidateInterviewerCreate) sqlSave(ctx context.Context) (*CandidateInterviewer, error) {
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cic *CandidateInterviewerCreate) createSpec() (*CandidateInterviewer, *sqlgraph.CreateSpec) {
	var (
		_node = &CandidateInterviewer{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: candidateinterviewer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateinterviewer.FieldID,
			},
		}
	)
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.SetField(candidateinterviewer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cic.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateinterviewer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cic.mutation.DeletedAt(); ok {
		_spec.SetField(candidateinterviewer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := cic.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.UserEdgeTable,
			Columns: []string{candidateinterviewer.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.InterviewEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.InterviewEdgeTable,
			Columns: []string{candidateinterviewer.InterviewEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CandidateInterviewID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CandidateInterviewerCreateBulk is the builder for creating many CandidateInterviewer entities in bulk.
type CandidateInterviewerCreateBulk struct {
	config
	builders []*CandidateInterviewerCreate
}

// Save creates the CandidateInterviewer entities in the database.
func (cicb *CandidateInterviewerCreateBulk) Save(ctx context.Context) ([]*CandidateInterviewer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CandidateInterviewer, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CandidateInterviewerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CandidateInterviewerCreateBulk) SaveX(ctx context.Context) []*CandidateInterviewer {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CandidateInterviewerCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CandidateInterviewerCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
