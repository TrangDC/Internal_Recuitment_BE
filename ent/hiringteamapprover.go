// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/hiringteam"
	"trec/ent/hiringteamapprover"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// HiringTeamApprover is the model entity for the HiringTeamApprover schema.
type HiringTeamApprover struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// HiringTeamID holds the value of the "hiring_team_id" field.
	HiringTeamID uuid.UUID `json:"hiring_team_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HiringTeamApproverQuery when eager-loading is set.
	Edges HiringTeamApproverEdges `json:"edges"`
}

// HiringTeamApproverEdges holds the relations/edges for other nodes in the graph.
type HiringTeamApproverEdges struct {
	// UserEdge holds the value of the user_edge edge.
	UserEdge *User `json:"user_edge,omitempty"`
	// HiringTeamEdge holds the value of the hiring_team_edge edge.
	HiringTeamEdge *HiringTeam `json:"hiring_team_edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserEdgeOrErr returns the UserEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HiringTeamApproverEdges) UserEdgeOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.UserEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserEdge, nil
	}
	return nil, &NotLoadedError{edge: "user_edge"}
}

// HiringTeamEdgeOrErr returns the HiringTeamEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HiringTeamApproverEdges) HiringTeamEdgeOrErr() (*HiringTeam, error) {
	if e.loadedTypes[1] {
		if e.HiringTeamEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hiringteam.Label}
		}
		return e.HiringTeamEdge, nil
	}
	return nil, &NotLoadedError{edge: "hiring_team_edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HiringTeamApprover) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hiringteamapprover.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case hiringteamapprover.FieldCreatedAt, hiringteamapprover.FieldUpdatedAt, hiringteamapprover.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case hiringteamapprover.FieldID, hiringteamapprover.FieldUserID, hiringteamapprover.FieldHiringTeamID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type HiringTeamApprover", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HiringTeamApprover fields.
func (hta *HiringTeamApprover) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hiringteamapprover.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hta.ID = *value
			}
		case hiringteamapprover.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hta.CreatedAt = value.Time
			}
		case hiringteamapprover.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hta.UpdatedAt = value.Time
			}
		case hiringteamapprover.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				hta.DeletedAt = value.Time
			}
		case hiringteamapprover.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				hta.UserID = *value
			}
		case hiringteamapprover.FieldHiringTeamID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field hiring_team_id", values[i])
			} else if value != nil {
				hta.HiringTeamID = *value
			}
		case hiringteamapprover.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				hta.OrderID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUserEdge queries the "user_edge" edge of the HiringTeamApprover entity.
func (hta *HiringTeamApprover) QueryUserEdge() *UserQuery {
	return (&HiringTeamApproverClient{config: hta.config}).QueryUserEdge(hta)
}

// QueryHiringTeamEdge queries the "hiring_team_edge" edge of the HiringTeamApprover entity.
func (hta *HiringTeamApprover) QueryHiringTeamEdge() *HiringTeamQuery {
	return (&HiringTeamApproverClient{config: hta.config}).QueryHiringTeamEdge(hta)
}

// Update returns a builder for updating this HiringTeamApprover.
// Note that you need to call HiringTeamApprover.Unwrap() before calling this method if this HiringTeamApprover
// was returned from a transaction, and the transaction was committed or rolled back.
func (hta *HiringTeamApprover) Update() *HiringTeamApproverUpdateOne {
	return (&HiringTeamApproverClient{config: hta.config}).UpdateOne(hta)
}

// Unwrap unwraps the HiringTeamApprover entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hta *HiringTeamApprover) Unwrap() *HiringTeamApprover {
	_tx, ok := hta.config.driver.(*txDriver)
	if !ok {
		panic("ent: HiringTeamApprover is not a transactional entity")
	}
	hta.config.driver = _tx.drv
	return hta
}

// String implements the fmt.Stringer.
func (hta *HiringTeamApprover) String() string {
	var builder strings.Builder
	builder.WriteString("HiringTeamApprover(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hta.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hta.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hta.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(hta.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", hta.UserID))
	builder.WriteString(", ")
	builder.WriteString("hiring_team_id=")
	builder.WriteString(fmt.Sprintf("%v", hta.HiringTeamID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", hta.OrderID))
	builder.WriteByte(')')
	return builder.String()
}

// HiringTeamApprovers is a parsable slice of HiringTeamApprover.
type HiringTeamApprovers []*HiringTeamApprover

func (hta HiringTeamApprovers) config(cfg config) {
	for _i := range hta {
		hta[_i].config = cfg
	}
}
