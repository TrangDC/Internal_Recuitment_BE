// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/candidateinterview"
	"trec/ent/candidateinterviewer"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateInterviewerUpdate is the builder for updating CandidateInterviewer entities.
type CandidateInterviewerUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateInterviewerMutation
}

// Where appends a list predicates to the CandidateInterviewerUpdate builder.
func (ciu *CandidateInterviewerUpdate) Where(ps ...predicate.CandidateInterviewer) *CandidateInterviewerUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetUpdatedAt sets the "updated_at" field.
func (ciu *CandidateInterviewerUpdate) SetUpdatedAt(t time.Time) *CandidateInterviewerUpdate {
	ciu.mutation.SetUpdatedAt(t)
	return ciu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ciu *CandidateInterviewerUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateInterviewerUpdate {
	if t != nil {
		ciu.SetUpdatedAt(*t)
	}
	return ciu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ciu *CandidateInterviewerUpdate) ClearUpdatedAt() *CandidateInterviewerUpdate {
	ciu.mutation.ClearUpdatedAt()
	return ciu
}

// SetDeletedAt sets the "deleted_at" field.
func (ciu *CandidateInterviewerUpdate) SetDeletedAt(t time.Time) *CandidateInterviewerUpdate {
	ciu.mutation.SetDeletedAt(t)
	return ciu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ciu *CandidateInterviewerUpdate) SetNillableDeletedAt(t *time.Time) *CandidateInterviewerUpdate {
	if t != nil {
		ciu.SetDeletedAt(*t)
	}
	return ciu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ciu *CandidateInterviewerUpdate) ClearDeletedAt() *CandidateInterviewerUpdate {
	ciu.mutation.ClearDeletedAt()
	return ciu
}

// SetCandidateInterviewID sets the "candidate_interview_id" field.
func (ciu *CandidateInterviewerUpdate) SetCandidateInterviewID(u uuid.UUID) *CandidateInterviewerUpdate {
	ciu.mutation.SetCandidateInterviewID(u)
	return ciu
}

// SetUserID sets the "user_id" field.
func (ciu *CandidateInterviewerUpdate) SetUserID(u uuid.UUID) *CandidateInterviewerUpdate {
	ciu.mutation.SetUserID(u)
	return ciu
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (ciu *CandidateInterviewerUpdate) SetUserEdgeID(id uuid.UUID) *CandidateInterviewerUpdate {
	ciu.mutation.SetUserEdgeID(id)
	return ciu
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (ciu *CandidateInterviewerUpdate) SetUserEdge(u *User) *CandidateInterviewerUpdate {
	return ciu.SetUserEdgeID(u.ID)
}

// SetInterviewEdgeID sets the "interview_edge" edge to the CandidateInterview entity by ID.
func (ciu *CandidateInterviewerUpdate) SetInterviewEdgeID(id uuid.UUID) *CandidateInterviewerUpdate {
	ciu.mutation.SetInterviewEdgeID(id)
	return ciu
}

// SetInterviewEdge sets the "interview_edge" edge to the CandidateInterview entity.
func (ciu *CandidateInterviewerUpdate) SetInterviewEdge(c *CandidateInterview) *CandidateInterviewerUpdate {
	return ciu.SetInterviewEdgeID(c.ID)
}

// Mutation returns the CandidateInterviewerMutation object of the builder.
func (ciu *CandidateInterviewerUpdate) Mutation() *CandidateInterviewerMutation {
	return ciu.mutation
}

// ClearUserEdge clears the "user_edge" edge to the User entity.
func (ciu *CandidateInterviewerUpdate) ClearUserEdge() *CandidateInterviewerUpdate {
	ciu.mutation.ClearUserEdge()
	return ciu
}

// ClearInterviewEdge clears the "interview_edge" edge to the CandidateInterview entity.
func (ciu *CandidateInterviewerUpdate) ClearInterviewEdge() *CandidateInterviewerUpdate {
	ciu.mutation.ClearInterviewEdge()
	return ciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CandidateInterviewerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ciu.hooks) == 0 {
		if err = ciu.check(); err != nil {
			return 0, err
		}
		affected, err = ciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateInterviewerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ciu.check(); err != nil {
				return 0, err
			}
			ciu.mutation = mutation
			affected, err = ciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ciu.hooks) - 1; i >= 0; i-- {
			if ciu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CandidateInterviewerUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CandidateInterviewerUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CandidateInterviewerUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciu *CandidateInterviewerUpdate) check() error {
	if _, ok := ciu.mutation.UserEdgeID(); ciu.mutation.UserEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CandidateInterviewer.user_edge"`)
	}
	if _, ok := ciu.mutation.InterviewEdgeID(); ciu.mutation.InterviewEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CandidateInterviewer.interview_edge"`)
	}
	return nil
}

func (ciu *CandidateInterviewerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidateinterviewer.Table,
			Columns: candidateinterviewer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateinterviewer.FieldID,
			},
		},
	}
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateinterviewer.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidateinterviewer.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ciu.mutation.DeletedAt(); ok {
		_spec.SetField(candidateinterviewer.FieldDeletedAt, field.TypeTime, value)
	}
	if ciu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidateinterviewer.FieldDeletedAt, field.TypeTime)
	}
	if ciu.mutation.UserEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.UserEdgeTable,
			Columns: []string{candidateinterviewer.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.UserEdgeTable,
			Columns: []string{candidateinterviewer.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.InterviewEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.InterviewEdgeTable,
			Columns: []string{candidateinterviewer.InterviewEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.InterviewEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.InterviewEdgeTable,
			Columns: []string{candidateinterviewer.InterviewEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidateinterviewer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateInterviewerUpdateOne is the builder for updating a single CandidateInterviewer entity.
type CandidateInterviewerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateInterviewerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuo *CandidateInterviewerUpdateOne) SetUpdatedAt(t time.Time) *CandidateInterviewerUpdateOne {
	ciuo.mutation.SetUpdatedAt(t)
	return ciuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ciuo *CandidateInterviewerUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateInterviewerUpdateOne {
	if t != nil {
		ciuo.SetUpdatedAt(*t)
	}
	return ciuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ciuo *CandidateInterviewerUpdateOne) ClearUpdatedAt() *CandidateInterviewerUpdateOne {
	ciuo.mutation.ClearUpdatedAt()
	return ciuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ciuo *CandidateInterviewerUpdateOne) SetDeletedAt(t time.Time) *CandidateInterviewerUpdateOne {
	ciuo.mutation.SetDeletedAt(t)
	return ciuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ciuo *CandidateInterviewerUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateInterviewerUpdateOne {
	if t != nil {
		ciuo.SetDeletedAt(*t)
	}
	return ciuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ciuo *CandidateInterviewerUpdateOne) ClearDeletedAt() *CandidateInterviewerUpdateOne {
	ciuo.mutation.ClearDeletedAt()
	return ciuo
}

// SetCandidateInterviewID sets the "candidate_interview_id" field.
func (ciuo *CandidateInterviewerUpdateOne) SetCandidateInterviewID(u uuid.UUID) *CandidateInterviewerUpdateOne {
	ciuo.mutation.SetCandidateInterviewID(u)
	return ciuo
}

// SetUserID sets the "user_id" field.
func (ciuo *CandidateInterviewerUpdateOne) SetUserID(u uuid.UUID) *CandidateInterviewerUpdateOne {
	ciuo.mutation.SetUserID(u)
	return ciuo
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (ciuo *CandidateInterviewerUpdateOne) SetUserEdgeID(id uuid.UUID) *CandidateInterviewerUpdateOne {
	ciuo.mutation.SetUserEdgeID(id)
	return ciuo
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (ciuo *CandidateInterviewerUpdateOne) SetUserEdge(u *User) *CandidateInterviewerUpdateOne {
	return ciuo.SetUserEdgeID(u.ID)
}

// SetInterviewEdgeID sets the "interview_edge" edge to the CandidateInterview entity by ID.
func (ciuo *CandidateInterviewerUpdateOne) SetInterviewEdgeID(id uuid.UUID) *CandidateInterviewerUpdateOne {
	ciuo.mutation.SetInterviewEdgeID(id)
	return ciuo
}

// SetInterviewEdge sets the "interview_edge" edge to the CandidateInterview entity.
func (ciuo *CandidateInterviewerUpdateOne) SetInterviewEdge(c *CandidateInterview) *CandidateInterviewerUpdateOne {
	return ciuo.SetInterviewEdgeID(c.ID)
}

// Mutation returns the CandidateInterviewerMutation object of the builder.
func (ciuo *CandidateInterviewerUpdateOne) Mutation() *CandidateInterviewerMutation {
	return ciuo.mutation
}

// ClearUserEdge clears the "user_edge" edge to the User entity.
func (ciuo *CandidateInterviewerUpdateOne) ClearUserEdge() *CandidateInterviewerUpdateOne {
	ciuo.mutation.ClearUserEdge()
	return ciuo
}

// ClearInterviewEdge clears the "interview_edge" edge to the CandidateInterview entity.
func (ciuo *CandidateInterviewerUpdateOne) ClearInterviewEdge() *CandidateInterviewerUpdateOne {
	ciuo.mutation.ClearInterviewEdge()
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CandidateInterviewerUpdateOne) Select(field string, fields ...string) *CandidateInterviewerUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CandidateInterviewer entity.
func (ciuo *CandidateInterviewerUpdateOne) Save(ctx context.Context) (*CandidateInterviewer, error) {
	var (
		err  error
		node *CandidateInterviewer
	)
	if len(ciuo.hooks) == 0 {
		if err = ciuo.check(); err != nil {
			return nil, err
		}
		node, err = ciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateInterviewerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ciuo.check(); err != nil {
				return nil, err
			}
			ciuo.mutation = mutation
			node, err = ciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ciuo.hooks) - 1; i >= 0; i-- {
			if ciuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ciuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateInterviewer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateInterviewerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CandidateInterviewerUpdateOne) SaveX(ctx context.Context) *CandidateInterviewer {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CandidateInterviewerUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CandidateInterviewerUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuo *CandidateInterviewerUpdateOne) check() error {
	if _, ok := ciuo.mutation.UserEdgeID(); ciuo.mutation.UserEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CandidateInterviewer.user_edge"`)
	}
	if _, ok := ciuo.mutation.InterviewEdgeID(); ciuo.mutation.InterviewEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CandidateInterviewer.interview_edge"`)
	}
	return nil
}

func (ciuo *CandidateInterviewerUpdateOne) sqlSave(ctx context.Context) (_node *CandidateInterviewer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidateinterviewer.Table,
			Columns: candidateinterviewer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateinterviewer.FieldID,
			},
		},
	}
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CandidateInterviewer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidateinterviewer.FieldID)
		for _, f := range fields {
			if !candidateinterviewer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidateinterviewer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateinterviewer.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidateinterviewer.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ciuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidateinterviewer.FieldDeletedAt, field.TypeTime, value)
	}
	if ciuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidateinterviewer.FieldDeletedAt, field.TypeTime)
	}
	if ciuo.mutation.UserEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.UserEdgeTable,
			Columns: []string{candidateinterviewer.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.UserEdgeTable,
			Columns: []string{candidateinterviewer.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.InterviewEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.InterviewEdgeTable,
			Columns: []string{candidateinterviewer.InterviewEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.InterviewEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   candidateinterviewer.InterviewEdgeTable,
			Columns: []string{candidateinterviewer.InterviewEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CandidateInterviewer{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidateinterviewer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
