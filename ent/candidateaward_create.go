// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidateaward"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateAwardCreate is the builder for creating a CandidateAward entity.
type CandidateAwardCreate struct {
	config
	mutation *CandidateAwardMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cac *CandidateAwardCreate) SetCreatedAt(t time.Time) *CandidateAwardCreate {
	cac.mutation.SetCreatedAt(t)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *CandidateAwardCreate) SetNillableCreatedAt(t *time.Time) *CandidateAwardCreate {
	if t != nil {
		cac.SetCreatedAt(*t)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CandidateAwardCreate) SetUpdatedAt(t time.Time) *CandidateAwardCreate {
	cac.mutation.SetUpdatedAt(t)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *CandidateAwardCreate) SetNillableUpdatedAt(t *time.Time) *CandidateAwardCreate {
	if t != nil {
		cac.SetUpdatedAt(*t)
	}
	return cac
}

// SetDeletedAt sets the "deleted_at" field.
func (cac *CandidateAwardCreate) SetDeletedAt(t time.Time) *CandidateAwardCreate {
	cac.mutation.SetDeletedAt(t)
	return cac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cac *CandidateAwardCreate) SetNillableDeletedAt(t *time.Time) *CandidateAwardCreate {
	if t != nil {
		cac.SetDeletedAt(*t)
	}
	return cac
}

// SetCandidateID sets the "candidate_id" field.
func (cac *CandidateAwardCreate) SetCandidateID(u uuid.UUID) *CandidateAwardCreate {
	cac.mutation.SetCandidateID(u)
	return cac
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (cac *CandidateAwardCreate) SetNillableCandidateID(u *uuid.UUID) *CandidateAwardCreate {
	if u != nil {
		cac.SetCandidateID(*u)
	}
	return cac
}

// SetName sets the "name" field.
func (cac *CandidateAwardCreate) SetName(s string) *CandidateAwardCreate {
	cac.mutation.SetName(s)
	return cac
}

// SetAchievedDate sets the "achieved_date" field.
func (cac *CandidateAwardCreate) SetAchievedDate(t time.Time) *CandidateAwardCreate {
	cac.mutation.SetAchievedDate(t)
	return cac
}

// SetNillableAchievedDate sets the "achieved_date" field if the given value is not nil.
func (cac *CandidateAwardCreate) SetNillableAchievedDate(t *time.Time) *CandidateAwardCreate {
	if t != nil {
		cac.SetAchievedDate(*t)
	}
	return cac
}

// SetOrderID sets the "order_id" field.
func (cac *CandidateAwardCreate) SetOrderID(i int) *CandidateAwardCreate {
	cac.mutation.SetOrderID(i)
	return cac
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cac *CandidateAwardCreate) SetNillableOrderID(i *int) *CandidateAwardCreate {
	if i != nil {
		cac.SetOrderID(*i)
	}
	return cac
}

// SetID sets the "id" field.
func (cac *CandidateAwardCreate) SetID(u uuid.UUID) *CandidateAwardCreate {
	cac.mutation.SetID(u)
	return cac
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (cac *CandidateAwardCreate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateAwardCreate {
	cac.mutation.AddAttachmentEdgeIDs(ids...)
	return cac
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (cac *CandidateAwardCreate) AddAttachmentEdges(a ...*Attachment) *CandidateAwardCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cac.AddAttachmentEdgeIDs(ids...)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (cac *CandidateAwardCreate) SetCandidateEdgeID(id uuid.UUID) *CandidateAwardCreate {
	cac.mutation.SetCandidateEdgeID(id)
	return cac
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (cac *CandidateAwardCreate) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateAwardCreate {
	if id != nil {
		cac = cac.SetCandidateEdgeID(*id)
	}
	return cac
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (cac *CandidateAwardCreate) SetCandidateEdge(c *Candidate) *CandidateAwardCreate {
	return cac.SetCandidateEdgeID(c.ID)
}

// Mutation returns the CandidateAwardMutation object of the builder.
func (cac *CandidateAwardCreate) Mutation() *CandidateAwardMutation {
	return cac.mutation
}

// Save creates the CandidateAward in the database.
func (cac *CandidateAwardCreate) Save(ctx context.Context) (*CandidateAward, error) {
	var (
		err  error
		node *CandidateAward
	)
	cac.defaults()
	if len(cac.hooks) == 0 {
		if err = cac.check(); err != nil {
			return nil, err
		}
		node, err = cac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateAwardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cac.check(); err != nil {
				return nil, err
			}
			cac.mutation = mutation
			if node, err = cac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cac.hooks) - 1; i >= 0; i-- {
			if cac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateAward)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateAwardMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CandidateAwardCreate) SaveX(ctx context.Context) *CandidateAward {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CandidateAwardCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CandidateAwardCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *CandidateAwardCreate) defaults() {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		v := candidateaward.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CandidateAwardCreate) check() error {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CandidateAward.created_at"`)}
	}
	if _, ok := cac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CandidateAward.name"`)}
	}
	if v, ok := cac.mutation.Name(); ok {
		if err := candidateaward.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CandidateAward.name": %w`, err)}
		}
	}
	return nil
}

func (cac *CandidateAwardCreate) sqlSave(ctx context.Context) (*CandidateAward, error) {
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cac *CandidateAwardCreate) createSpec() (*CandidateAward, *sqlgraph.CreateSpec) {
	var (
		_node = &CandidateAward{config: cac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: candidateaward.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateaward.FieldID,
			},
		}
	)
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.SetField(candidateaward.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateaward.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cac.mutation.DeletedAt(); ok {
		_spec.SetField(candidateaward.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cac.mutation.Name(); ok {
		_spec.SetField(candidateaward.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cac.mutation.AchievedDate(); ok {
		_spec.SetField(candidateaward.FieldAchievedDate, field.TypeTime, value)
		_node.AchievedDate = value
	}
	if value, ok := cac.mutation.OrderID(); ok {
		_spec.SetField(candidateaward.FieldOrderID, field.TypeInt, value)
		_node.OrderID = value
	}
	if nodes := cac.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateaward.AttachmentEdgesTable,
			Columns: []string{candidateaward.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cac.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateaward.CandidateEdgeTable,
			Columns: []string{candidateaward.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CandidateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CandidateAwardCreateBulk is the builder for creating many CandidateAward entities in bulk.
type CandidateAwardCreateBulk struct {
	config
	builders []*CandidateAwardCreate
}

// Save creates the CandidateAward entities in the database.
func (cacb *CandidateAwardCreateBulk) Save(ctx context.Context) ([]*CandidateAward, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CandidateAward, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CandidateAwardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CandidateAwardCreateBulk) SaveX(ctx context.Context) []*CandidateAward {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CandidateAwardCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CandidateAwardCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
