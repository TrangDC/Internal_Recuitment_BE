// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidateinterview"
	"trec/ent/candidateinterviewer"
	"trec/ent/candidatejob"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateInterviewUpdate is the builder for updating CandidateInterview entities.
type CandidateInterviewUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateInterviewMutation
}

// Where appends a list predicates to the CandidateInterviewUpdate builder.
func (ciu *CandidateInterviewUpdate) Where(ps ...predicate.CandidateInterview) *CandidateInterviewUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetUpdatedAt sets the "updated_at" field.
func (ciu *CandidateInterviewUpdate) SetUpdatedAt(t time.Time) *CandidateInterviewUpdate {
	ciu.mutation.SetUpdatedAt(t)
	return ciu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateInterviewUpdate {
	if t != nil {
		ciu.SetUpdatedAt(*t)
	}
	return ciu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ciu *CandidateInterviewUpdate) ClearUpdatedAt() *CandidateInterviewUpdate {
	ciu.mutation.ClearUpdatedAt()
	return ciu
}

// SetDeletedAt sets the "deleted_at" field.
func (ciu *CandidateInterviewUpdate) SetDeletedAt(t time.Time) *CandidateInterviewUpdate {
	ciu.mutation.SetDeletedAt(t)
	return ciu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableDeletedAt(t *time.Time) *CandidateInterviewUpdate {
	if t != nil {
		ciu.SetDeletedAt(*t)
	}
	return ciu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ciu *CandidateInterviewUpdate) ClearDeletedAt() *CandidateInterviewUpdate {
	ciu.mutation.ClearDeletedAt()
	return ciu
}

// SetTitle sets the "title" field.
func (ciu *CandidateInterviewUpdate) SetTitle(s string) *CandidateInterviewUpdate {
	ciu.mutation.SetTitle(s)
	return ciu
}

// SetCandidateJobStatus sets the "candidate_job_status" field.
func (ciu *CandidateInterviewUpdate) SetCandidateJobStatus(cjs candidateinterview.CandidateJobStatus) *CandidateInterviewUpdate {
	ciu.mutation.SetCandidateJobStatus(cjs)
	return ciu
}

// SetNillableCandidateJobStatus sets the "candidate_job_status" field if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableCandidateJobStatus(cjs *candidateinterview.CandidateJobStatus) *CandidateInterviewUpdate {
	if cjs != nil {
		ciu.SetCandidateJobStatus(*cjs)
	}
	return ciu
}

// SetCandidateJobID sets the "candidate_job_id" field.
func (ciu *CandidateInterviewUpdate) SetCandidateJobID(u uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.SetCandidateJobID(u)
	return ciu
}

// SetNillableCandidateJobID sets the "candidate_job_id" field if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableCandidateJobID(u *uuid.UUID) *CandidateInterviewUpdate {
	if u != nil {
		ciu.SetCandidateJobID(*u)
	}
	return ciu
}

// ClearCandidateJobID clears the value of the "candidate_job_id" field.
func (ciu *CandidateInterviewUpdate) ClearCandidateJobID() *CandidateInterviewUpdate {
	ciu.mutation.ClearCandidateJobID()
	return ciu
}

// SetInterviewDate sets the "interview_date" field.
func (ciu *CandidateInterviewUpdate) SetInterviewDate(t time.Time) *CandidateInterviewUpdate {
	ciu.mutation.SetInterviewDate(t)
	return ciu
}

// SetNillableInterviewDate sets the "interview_date" field if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableInterviewDate(t *time.Time) *CandidateInterviewUpdate {
	if t != nil {
		ciu.SetInterviewDate(*t)
	}
	return ciu
}

// ClearInterviewDate clears the value of the "interview_date" field.
func (ciu *CandidateInterviewUpdate) ClearInterviewDate() *CandidateInterviewUpdate {
	ciu.mutation.ClearInterviewDate()
	return ciu
}

// SetStartFrom sets the "start_from" field.
func (ciu *CandidateInterviewUpdate) SetStartFrom(t time.Time) *CandidateInterviewUpdate {
	ciu.mutation.SetStartFrom(t)
	return ciu
}

// SetNillableStartFrom sets the "start_from" field if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableStartFrom(t *time.Time) *CandidateInterviewUpdate {
	if t != nil {
		ciu.SetStartFrom(*t)
	}
	return ciu
}

// ClearStartFrom clears the value of the "start_from" field.
func (ciu *CandidateInterviewUpdate) ClearStartFrom() *CandidateInterviewUpdate {
	ciu.mutation.ClearStartFrom()
	return ciu
}

// SetEndAt sets the "end_at" field.
func (ciu *CandidateInterviewUpdate) SetEndAt(t time.Time) *CandidateInterviewUpdate {
	ciu.mutation.SetEndAt(t)
	return ciu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableEndAt(t *time.Time) *CandidateInterviewUpdate {
	if t != nil {
		ciu.SetEndAt(*t)
	}
	return ciu
}

// ClearEndAt clears the value of the "end_at" field.
func (ciu *CandidateInterviewUpdate) ClearEndAt() *CandidateInterviewUpdate {
	ciu.mutation.ClearEndAt()
	return ciu
}

// SetCreatedBy sets the "created_by" field.
func (ciu *CandidateInterviewUpdate) SetCreatedBy(u uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.SetCreatedBy(u)
	return ciu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableCreatedBy(u *uuid.UUID) *CandidateInterviewUpdate {
	if u != nil {
		ciu.SetCreatedBy(*u)
	}
	return ciu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ciu *CandidateInterviewUpdate) ClearCreatedBy() *CandidateInterviewUpdate {
	ciu.mutation.ClearCreatedBy()
	return ciu
}

// SetDescription sets the "description" field.
func (ciu *CandidateInterviewUpdate) SetDescription(s string) *CandidateInterviewUpdate {
	ciu.mutation.SetDescription(s)
	return ciu
}

// SetStatus sets the "status" field.
func (ciu *CandidateInterviewUpdate) SetStatus(c candidateinterview.Status) *CandidateInterviewUpdate {
	ciu.mutation.SetStatus(c)
	return ciu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableStatus(c *candidateinterview.Status) *CandidateInterviewUpdate {
	if c != nil {
		ciu.SetStatus(*c)
	}
	return ciu
}

// SetLocation sets the "location" field.
func (ciu *CandidateInterviewUpdate) SetLocation(s string) *CandidateInterviewUpdate {
	ciu.mutation.SetLocation(s)
	return ciu
}

// SetMeetingLink sets the "meeting_link" field.
func (ciu *CandidateInterviewUpdate) SetMeetingLink(s string) *CandidateInterviewUpdate {
	ciu.mutation.SetMeetingLink(s)
	return ciu
}

// SetCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID.
func (ciu *CandidateInterviewUpdate) SetCandidateJobEdgeID(id uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.SetCandidateJobEdgeID(id)
	return ciu
}

// SetNillableCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableCandidateJobEdgeID(id *uuid.UUID) *CandidateInterviewUpdate {
	if id != nil {
		ciu = ciu.SetCandidateJobEdgeID(*id)
	}
	return ciu
}

// SetCandidateJobEdge sets the "candidate_job_edge" edge to the CandidateJob entity.
func (ciu *CandidateInterviewUpdate) SetCandidateJobEdge(c *CandidateJob) *CandidateInterviewUpdate {
	return ciu.SetCandidateJobEdgeID(c.ID)
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (ciu *CandidateInterviewUpdate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.AddAttachmentEdgeIDs(ids...)
	return ciu
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (ciu *CandidateInterviewUpdate) AddAttachmentEdges(a ...*Attachment) *CandidateInterviewUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ciu.AddAttachmentEdgeIDs(ids...)
}

// AddInterviewerEdgeIDs adds the "interviewer_edges" edge to the User entity by IDs.
func (ciu *CandidateInterviewUpdate) AddInterviewerEdgeIDs(ids ...uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.AddInterviewerEdgeIDs(ids...)
	return ciu
}

// AddInterviewerEdges adds the "interviewer_edges" edges to the User entity.
func (ciu *CandidateInterviewUpdate) AddInterviewerEdges(u ...*User) *CandidateInterviewUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ciu.AddInterviewerEdgeIDs(ids...)
}

// SetCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID.
func (ciu *CandidateInterviewUpdate) SetCreatedByEdgeID(id uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.SetCreatedByEdgeID(id)
	return ciu
}

// SetNillableCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID if the given value is not nil.
func (ciu *CandidateInterviewUpdate) SetNillableCreatedByEdgeID(id *uuid.UUID) *CandidateInterviewUpdate {
	if id != nil {
		ciu = ciu.SetCreatedByEdgeID(*id)
	}
	return ciu
}

// SetCreatedByEdge sets the "created_by_edge" edge to the User entity.
func (ciu *CandidateInterviewUpdate) SetCreatedByEdge(u *User) *CandidateInterviewUpdate {
	return ciu.SetCreatedByEdgeID(u.ID)
}

// AddUserInterviewerIDs adds the "user_interviewers" edge to the CandidateInterviewer entity by IDs.
func (ciu *CandidateInterviewUpdate) AddUserInterviewerIDs(ids ...uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.AddUserInterviewerIDs(ids...)
	return ciu
}

// AddUserInterviewers adds the "user_interviewers" edges to the CandidateInterviewer entity.
func (ciu *CandidateInterviewUpdate) AddUserInterviewers(c ...*CandidateInterviewer) *CandidateInterviewUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.AddUserInterviewerIDs(ids...)
}

// Mutation returns the CandidateInterviewMutation object of the builder.
func (ciu *CandidateInterviewUpdate) Mutation() *CandidateInterviewMutation {
	return ciu.mutation
}

// ClearCandidateJobEdge clears the "candidate_job_edge" edge to the CandidateJob entity.
func (ciu *CandidateInterviewUpdate) ClearCandidateJobEdge() *CandidateInterviewUpdate {
	ciu.mutation.ClearCandidateJobEdge()
	return ciu
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (ciu *CandidateInterviewUpdate) ClearAttachmentEdges() *CandidateInterviewUpdate {
	ciu.mutation.ClearAttachmentEdges()
	return ciu
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (ciu *CandidateInterviewUpdate) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.RemoveAttachmentEdgeIDs(ids...)
	return ciu
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (ciu *CandidateInterviewUpdate) RemoveAttachmentEdges(a ...*Attachment) *CandidateInterviewUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ciu.RemoveAttachmentEdgeIDs(ids...)
}

// ClearInterviewerEdges clears all "interviewer_edges" edges to the User entity.
func (ciu *CandidateInterviewUpdate) ClearInterviewerEdges() *CandidateInterviewUpdate {
	ciu.mutation.ClearInterviewerEdges()
	return ciu
}

// RemoveInterviewerEdgeIDs removes the "interviewer_edges" edge to User entities by IDs.
func (ciu *CandidateInterviewUpdate) RemoveInterviewerEdgeIDs(ids ...uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.RemoveInterviewerEdgeIDs(ids...)
	return ciu
}

// RemoveInterviewerEdges removes "interviewer_edges" edges to User entities.
func (ciu *CandidateInterviewUpdate) RemoveInterviewerEdges(u ...*User) *CandidateInterviewUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ciu.RemoveInterviewerEdgeIDs(ids...)
}

// ClearCreatedByEdge clears the "created_by_edge" edge to the User entity.
func (ciu *CandidateInterviewUpdate) ClearCreatedByEdge() *CandidateInterviewUpdate {
	ciu.mutation.ClearCreatedByEdge()
	return ciu
}

// ClearUserInterviewers clears all "user_interviewers" edges to the CandidateInterviewer entity.
func (ciu *CandidateInterviewUpdate) ClearUserInterviewers() *CandidateInterviewUpdate {
	ciu.mutation.ClearUserInterviewers()
	return ciu
}

// RemoveUserInterviewerIDs removes the "user_interviewers" edge to CandidateInterviewer entities by IDs.
func (ciu *CandidateInterviewUpdate) RemoveUserInterviewerIDs(ids ...uuid.UUID) *CandidateInterviewUpdate {
	ciu.mutation.RemoveUserInterviewerIDs(ids...)
	return ciu
}

// RemoveUserInterviewers removes "user_interviewers" edges to CandidateInterviewer entities.
func (ciu *CandidateInterviewUpdate) RemoveUserInterviewers(c ...*CandidateInterviewer) *CandidateInterviewUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.RemoveUserInterviewerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CandidateInterviewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ciu.hooks) == 0 {
		if err = ciu.check(); err != nil {
			return 0, err
		}
		affected, err = ciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateInterviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ciu.check(); err != nil {
				return 0, err
			}
			ciu.mutation = mutation
			affected, err = ciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ciu.hooks) - 1; i >= 0; i-- {
			if ciu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CandidateInterviewUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CandidateInterviewUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CandidateInterviewUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciu *CandidateInterviewUpdate) check() error {
	if v, ok := ciu.mutation.Title(); ok {
		if err := candidateinterview.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CandidateInterview.title": %w`, err)}
		}
	}
	if v, ok := ciu.mutation.CandidateJobStatus(); ok {
		if err := candidateinterview.CandidateJobStatusValidator(v); err != nil {
			return &ValidationError{Name: "candidate_job_status", err: fmt.Errorf(`ent: validator failed for field "CandidateInterview.candidate_job_status": %w`, err)}
		}
	}
	if v, ok := ciu.mutation.Status(); ok {
		if err := candidateinterview.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CandidateInterview.status": %w`, err)}
		}
	}
	if v, ok := ciu.mutation.Location(); ok {
		if err := candidateinterview.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "CandidateInterview.location": %w`, err)}
		}
	}
	return nil
}

func (ciu *CandidateInterviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidateinterview.Table,
			Columns: candidateinterview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateinterview.FieldID,
			},
		},
	}
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateinterview.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidateinterview.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ciu.mutation.DeletedAt(); ok {
		_spec.SetField(candidateinterview.FieldDeletedAt, field.TypeTime, value)
	}
	if ciu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidateinterview.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ciu.mutation.Title(); ok {
		_spec.SetField(candidateinterview.FieldTitle, field.TypeString, value)
	}
	if value, ok := ciu.mutation.CandidateJobStatus(); ok {
		_spec.SetField(candidateinterview.FieldCandidateJobStatus, field.TypeEnum, value)
	}
	if value, ok := ciu.mutation.InterviewDate(); ok {
		_spec.SetField(candidateinterview.FieldInterviewDate, field.TypeTime, value)
	}
	if ciu.mutation.InterviewDateCleared() {
		_spec.ClearField(candidateinterview.FieldInterviewDate, field.TypeTime)
	}
	if value, ok := ciu.mutation.StartFrom(); ok {
		_spec.SetField(candidateinterview.FieldStartFrom, field.TypeTime, value)
	}
	if ciu.mutation.StartFromCleared() {
		_spec.ClearField(candidateinterview.FieldStartFrom, field.TypeTime)
	}
	if value, ok := ciu.mutation.EndAt(); ok {
		_spec.SetField(candidateinterview.FieldEndAt, field.TypeTime, value)
	}
	if ciu.mutation.EndAtCleared() {
		_spec.ClearField(candidateinterview.FieldEndAt, field.TypeTime)
	}
	if value, ok := ciu.mutation.Description(); ok {
		_spec.SetField(candidateinterview.FieldDescription, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Status(); ok {
		_spec.SetField(candidateinterview.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ciu.mutation.Location(); ok {
		_spec.SetField(candidateinterview.FieldLocation, field.TypeString, value)
	}
	if value, ok := ciu.mutation.MeetingLink(); ok {
		_spec.SetField(candidateinterview.FieldMeetingLink, field.TypeString, value)
	}
	if ciu.mutation.CandidateJobEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateinterview.CandidateJobEdgeTable,
			Columns: []string{candidateinterview.CandidateJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CandidateJobEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateinterview.CandidateJobEdgeTable,
			Columns: []string{candidateinterview.CandidateJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateinterview.AttachmentEdgesTable,
			Columns: []string{candidateinterview.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !ciu.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateinterview.AttachmentEdgesTable,
			Columns: []string{candidateinterview.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateinterview.AttachmentEdgesTable,
			Columns: []string{candidateinterview.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.InterviewerEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   candidateinterview.InterviewerEdgesTable,
			Columns: candidateinterview.InterviewerEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		createE := &CandidateInterviewerCreate{config: ciu.config, mutation: newCandidateInterviewerMutation(ciu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedInterviewerEdgesIDs(); len(nodes) > 0 && !ciu.mutation.InterviewerEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   candidateinterview.InterviewerEdgesTable,
			Columns: candidateinterview.InterviewerEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CandidateInterviewerCreate{config: ciu.config, mutation: newCandidateInterviewerMutation(ciu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.InterviewerEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   candidateinterview.InterviewerEdgesTable,
			Columns: candidateinterview.InterviewerEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CandidateInterviewerCreate{config: ciu.config, mutation: newCandidateInterviewerMutation(ciu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.CreatedByEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateinterview.CreatedByEdgeTable,
			Columns: []string{candidateinterview.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CreatedByEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateinterview.CreatedByEdgeTable,
			Columns: []string{candidateinterview.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.UserInterviewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   candidateinterview.UserInterviewersTable,
			Columns: []string{candidateinterview.UserInterviewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterviewer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedUserInterviewersIDs(); len(nodes) > 0 && !ciu.mutation.UserInterviewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   candidateinterview.UserInterviewersTable,
			Columns: []string{candidateinterview.UserInterviewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterviewer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.UserInterviewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   candidateinterview.UserInterviewersTable,
			Columns: []string{candidateinterview.UserInterviewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterviewer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidateinterview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateInterviewUpdateOne is the builder for updating a single CandidateInterview entity.
type CandidateInterviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateInterviewMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuo *CandidateInterviewUpdateOne) SetUpdatedAt(t time.Time) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetUpdatedAt(t)
	return ciuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateInterviewUpdateOne {
	if t != nil {
		ciuo.SetUpdatedAt(*t)
	}
	return ciuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ciuo *CandidateInterviewUpdateOne) ClearUpdatedAt() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearUpdatedAt()
	return ciuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ciuo *CandidateInterviewUpdateOne) SetDeletedAt(t time.Time) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetDeletedAt(t)
	return ciuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateInterviewUpdateOne {
	if t != nil {
		ciuo.SetDeletedAt(*t)
	}
	return ciuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ciuo *CandidateInterviewUpdateOne) ClearDeletedAt() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearDeletedAt()
	return ciuo
}

// SetTitle sets the "title" field.
func (ciuo *CandidateInterviewUpdateOne) SetTitle(s string) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetTitle(s)
	return ciuo
}

// SetCandidateJobStatus sets the "candidate_job_status" field.
func (ciuo *CandidateInterviewUpdateOne) SetCandidateJobStatus(cjs candidateinterview.CandidateJobStatus) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetCandidateJobStatus(cjs)
	return ciuo
}

// SetNillableCandidateJobStatus sets the "candidate_job_status" field if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableCandidateJobStatus(cjs *candidateinterview.CandidateJobStatus) *CandidateInterviewUpdateOne {
	if cjs != nil {
		ciuo.SetCandidateJobStatus(*cjs)
	}
	return ciuo
}

// SetCandidateJobID sets the "candidate_job_id" field.
func (ciuo *CandidateInterviewUpdateOne) SetCandidateJobID(u uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetCandidateJobID(u)
	return ciuo
}

// SetNillableCandidateJobID sets the "candidate_job_id" field if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableCandidateJobID(u *uuid.UUID) *CandidateInterviewUpdateOne {
	if u != nil {
		ciuo.SetCandidateJobID(*u)
	}
	return ciuo
}

// ClearCandidateJobID clears the value of the "candidate_job_id" field.
func (ciuo *CandidateInterviewUpdateOne) ClearCandidateJobID() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearCandidateJobID()
	return ciuo
}

// SetInterviewDate sets the "interview_date" field.
func (ciuo *CandidateInterviewUpdateOne) SetInterviewDate(t time.Time) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetInterviewDate(t)
	return ciuo
}

// SetNillableInterviewDate sets the "interview_date" field if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableInterviewDate(t *time.Time) *CandidateInterviewUpdateOne {
	if t != nil {
		ciuo.SetInterviewDate(*t)
	}
	return ciuo
}

// ClearInterviewDate clears the value of the "interview_date" field.
func (ciuo *CandidateInterviewUpdateOne) ClearInterviewDate() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearInterviewDate()
	return ciuo
}

// SetStartFrom sets the "start_from" field.
func (ciuo *CandidateInterviewUpdateOne) SetStartFrom(t time.Time) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetStartFrom(t)
	return ciuo
}

// SetNillableStartFrom sets the "start_from" field if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableStartFrom(t *time.Time) *CandidateInterviewUpdateOne {
	if t != nil {
		ciuo.SetStartFrom(*t)
	}
	return ciuo
}

// ClearStartFrom clears the value of the "start_from" field.
func (ciuo *CandidateInterviewUpdateOne) ClearStartFrom() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearStartFrom()
	return ciuo
}

// SetEndAt sets the "end_at" field.
func (ciuo *CandidateInterviewUpdateOne) SetEndAt(t time.Time) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetEndAt(t)
	return ciuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableEndAt(t *time.Time) *CandidateInterviewUpdateOne {
	if t != nil {
		ciuo.SetEndAt(*t)
	}
	return ciuo
}

// ClearEndAt clears the value of the "end_at" field.
func (ciuo *CandidateInterviewUpdateOne) ClearEndAt() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearEndAt()
	return ciuo
}

// SetCreatedBy sets the "created_by" field.
func (ciuo *CandidateInterviewUpdateOne) SetCreatedBy(u uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetCreatedBy(u)
	return ciuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *CandidateInterviewUpdateOne {
	if u != nil {
		ciuo.SetCreatedBy(*u)
	}
	return ciuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ciuo *CandidateInterviewUpdateOne) ClearCreatedBy() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearCreatedBy()
	return ciuo
}

// SetDescription sets the "description" field.
func (ciuo *CandidateInterviewUpdateOne) SetDescription(s string) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetDescription(s)
	return ciuo
}

// SetStatus sets the "status" field.
func (ciuo *CandidateInterviewUpdateOne) SetStatus(c candidateinterview.Status) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetStatus(c)
	return ciuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableStatus(c *candidateinterview.Status) *CandidateInterviewUpdateOne {
	if c != nil {
		ciuo.SetStatus(*c)
	}
	return ciuo
}

// SetLocation sets the "location" field.
func (ciuo *CandidateInterviewUpdateOne) SetLocation(s string) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetLocation(s)
	return ciuo
}

// SetMeetingLink sets the "meeting_link" field.
func (ciuo *CandidateInterviewUpdateOne) SetMeetingLink(s string) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetMeetingLink(s)
	return ciuo
}

// SetCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID.
func (ciuo *CandidateInterviewUpdateOne) SetCandidateJobEdgeID(id uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetCandidateJobEdgeID(id)
	return ciuo
}

// SetNillableCandidateJobEdgeID sets the "candidate_job_edge" edge to the CandidateJob entity by ID if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableCandidateJobEdgeID(id *uuid.UUID) *CandidateInterviewUpdateOne {
	if id != nil {
		ciuo = ciuo.SetCandidateJobEdgeID(*id)
	}
	return ciuo
}

// SetCandidateJobEdge sets the "candidate_job_edge" edge to the CandidateJob entity.
func (ciuo *CandidateInterviewUpdateOne) SetCandidateJobEdge(c *CandidateJob) *CandidateInterviewUpdateOne {
	return ciuo.SetCandidateJobEdgeID(c.ID)
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (ciuo *CandidateInterviewUpdateOne) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.AddAttachmentEdgeIDs(ids...)
	return ciuo
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (ciuo *CandidateInterviewUpdateOne) AddAttachmentEdges(a ...*Attachment) *CandidateInterviewUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ciuo.AddAttachmentEdgeIDs(ids...)
}

// AddInterviewerEdgeIDs adds the "interviewer_edges" edge to the User entity by IDs.
func (ciuo *CandidateInterviewUpdateOne) AddInterviewerEdgeIDs(ids ...uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.AddInterviewerEdgeIDs(ids...)
	return ciuo
}

// AddInterviewerEdges adds the "interviewer_edges" edges to the User entity.
func (ciuo *CandidateInterviewUpdateOne) AddInterviewerEdges(u ...*User) *CandidateInterviewUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ciuo.AddInterviewerEdgeIDs(ids...)
}

// SetCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID.
func (ciuo *CandidateInterviewUpdateOne) SetCreatedByEdgeID(id uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.SetCreatedByEdgeID(id)
	return ciuo
}

// SetNillableCreatedByEdgeID sets the "created_by_edge" edge to the User entity by ID if the given value is not nil.
func (ciuo *CandidateInterviewUpdateOne) SetNillableCreatedByEdgeID(id *uuid.UUID) *CandidateInterviewUpdateOne {
	if id != nil {
		ciuo = ciuo.SetCreatedByEdgeID(*id)
	}
	return ciuo
}

// SetCreatedByEdge sets the "created_by_edge" edge to the User entity.
func (ciuo *CandidateInterviewUpdateOne) SetCreatedByEdge(u *User) *CandidateInterviewUpdateOne {
	return ciuo.SetCreatedByEdgeID(u.ID)
}

// AddUserInterviewerIDs adds the "user_interviewers" edge to the CandidateInterviewer entity by IDs.
func (ciuo *CandidateInterviewUpdateOne) AddUserInterviewerIDs(ids ...uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.AddUserInterviewerIDs(ids...)
	return ciuo
}

// AddUserInterviewers adds the "user_interviewers" edges to the CandidateInterviewer entity.
func (ciuo *CandidateInterviewUpdateOne) AddUserInterviewers(c ...*CandidateInterviewer) *CandidateInterviewUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.AddUserInterviewerIDs(ids...)
}

// Mutation returns the CandidateInterviewMutation object of the builder.
func (ciuo *CandidateInterviewUpdateOne) Mutation() *CandidateInterviewMutation {
	return ciuo.mutation
}

// ClearCandidateJobEdge clears the "candidate_job_edge" edge to the CandidateJob entity.
func (ciuo *CandidateInterviewUpdateOne) ClearCandidateJobEdge() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearCandidateJobEdge()
	return ciuo
}

// ClearAttachmentEdges clears all "attachment_edges" edges to the Attachment entity.
func (ciuo *CandidateInterviewUpdateOne) ClearAttachmentEdges() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearAttachmentEdges()
	return ciuo
}

// RemoveAttachmentEdgeIDs removes the "attachment_edges" edge to Attachment entities by IDs.
func (ciuo *CandidateInterviewUpdateOne) RemoveAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.RemoveAttachmentEdgeIDs(ids...)
	return ciuo
}

// RemoveAttachmentEdges removes "attachment_edges" edges to Attachment entities.
func (ciuo *CandidateInterviewUpdateOne) RemoveAttachmentEdges(a ...*Attachment) *CandidateInterviewUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ciuo.RemoveAttachmentEdgeIDs(ids...)
}

// ClearInterviewerEdges clears all "interviewer_edges" edges to the User entity.
func (ciuo *CandidateInterviewUpdateOne) ClearInterviewerEdges() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearInterviewerEdges()
	return ciuo
}

// RemoveInterviewerEdgeIDs removes the "interviewer_edges" edge to User entities by IDs.
func (ciuo *CandidateInterviewUpdateOne) RemoveInterviewerEdgeIDs(ids ...uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.RemoveInterviewerEdgeIDs(ids...)
	return ciuo
}

// RemoveInterviewerEdges removes "interviewer_edges" edges to User entities.
func (ciuo *CandidateInterviewUpdateOne) RemoveInterviewerEdges(u ...*User) *CandidateInterviewUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ciuo.RemoveInterviewerEdgeIDs(ids...)
}

// ClearCreatedByEdge clears the "created_by_edge" edge to the User entity.
func (ciuo *CandidateInterviewUpdateOne) ClearCreatedByEdge() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearCreatedByEdge()
	return ciuo
}

// ClearUserInterviewers clears all "user_interviewers" edges to the CandidateInterviewer entity.
func (ciuo *CandidateInterviewUpdateOne) ClearUserInterviewers() *CandidateInterviewUpdateOne {
	ciuo.mutation.ClearUserInterviewers()
	return ciuo
}

// RemoveUserInterviewerIDs removes the "user_interviewers" edge to CandidateInterviewer entities by IDs.
func (ciuo *CandidateInterviewUpdateOne) RemoveUserInterviewerIDs(ids ...uuid.UUID) *CandidateInterviewUpdateOne {
	ciuo.mutation.RemoveUserInterviewerIDs(ids...)
	return ciuo
}

// RemoveUserInterviewers removes "user_interviewers" edges to CandidateInterviewer entities.
func (ciuo *CandidateInterviewUpdateOne) RemoveUserInterviewers(c ...*CandidateInterviewer) *CandidateInterviewUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.RemoveUserInterviewerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CandidateInterviewUpdateOne) Select(field string, fields ...string) *CandidateInterviewUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CandidateInterview entity.
func (ciuo *CandidateInterviewUpdateOne) Save(ctx context.Context) (*CandidateInterview, error) {
	var (
		err  error
		node *CandidateInterview
	)
	if len(ciuo.hooks) == 0 {
		if err = ciuo.check(); err != nil {
			return nil, err
		}
		node, err = ciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateInterviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ciuo.check(); err != nil {
				return nil, err
			}
			ciuo.mutation = mutation
			node, err = ciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ciuo.hooks) - 1; i >= 0; i-- {
			if ciuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ciuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateInterview)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateInterviewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CandidateInterviewUpdateOne) SaveX(ctx context.Context) *CandidateInterview {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CandidateInterviewUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CandidateInterviewUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuo *CandidateInterviewUpdateOne) check() error {
	if v, ok := ciuo.mutation.Title(); ok {
		if err := candidateinterview.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CandidateInterview.title": %w`, err)}
		}
	}
	if v, ok := ciuo.mutation.CandidateJobStatus(); ok {
		if err := candidateinterview.CandidateJobStatusValidator(v); err != nil {
			return &ValidationError{Name: "candidate_job_status", err: fmt.Errorf(`ent: validator failed for field "CandidateInterview.candidate_job_status": %w`, err)}
		}
	}
	if v, ok := ciuo.mutation.Status(); ok {
		if err := candidateinterview.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CandidateInterview.status": %w`, err)}
		}
	}
	if v, ok := ciuo.mutation.Location(); ok {
		if err := candidateinterview.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "CandidateInterview.location": %w`, err)}
		}
	}
	return nil
}

func (ciuo *CandidateInterviewUpdateOne) sqlSave(ctx context.Context) (_node *CandidateInterview, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidateinterview.Table,
			Columns: candidateinterview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateinterview.FieldID,
			},
		},
	}
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CandidateInterview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidateinterview.FieldID)
		for _, f := range fields {
			if !candidateinterview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidateinterview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateinterview.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidateinterview.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ciuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidateinterview.FieldDeletedAt, field.TypeTime, value)
	}
	if ciuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidateinterview.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ciuo.mutation.Title(); ok {
		_spec.SetField(candidateinterview.FieldTitle, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.CandidateJobStatus(); ok {
		_spec.SetField(candidateinterview.FieldCandidateJobStatus, field.TypeEnum, value)
	}
	if value, ok := ciuo.mutation.InterviewDate(); ok {
		_spec.SetField(candidateinterview.FieldInterviewDate, field.TypeTime, value)
	}
	if ciuo.mutation.InterviewDateCleared() {
		_spec.ClearField(candidateinterview.FieldInterviewDate, field.TypeTime)
	}
	if value, ok := ciuo.mutation.StartFrom(); ok {
		_spec.SetField(candidateinterview.FieldStartFrom, field.TypeTime, value)
	}
	if ciuo.mutation.StartFromCleared() {
		_spec.ClearField(candidateinterview.FieldStartFrom, field.TypeTime)
	}
	if value, ok := ciuo.mutation.EndAt(); ok {
		_spec.SetField(candidateinterview.FieldEndAt, field.TypeTime, value)
	}
	if ciuo.mutation.EndAtCleared() {
		_spec.ClearField(candidateinterview.FieldEndAt, field.TypeTime)
	}
	if value, ok := ciuo.mutation.Description(); ok {
		_spec.SetField(candidateinterview.FieldDescription, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Status(); ok {
		_spec.SetField(candidateinterview.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ciuo.mutation.Location(); ok {
		_spec.SetField(candidateinterview.FieldLocation, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.MeetingLink(); ok {
		_spec.SetField(candidateinterview.FieldMeetingLink, field.TypeString, value)
	}
	if ciuo.mutation.CandidateJobEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateinterview.CandidateJobEdgeTable,
			Columns: []string{candidateinterview.CandidateJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CandidateJobEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateinterview.CandidateJobEdgeTable,
			Columns: []string{candidateinterview.CandidateJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateinterview.AttachmentEdgesTable,
			Columns: []string{candidateinterview.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedAttachmentEdgesIDs(); len(nodes) > 0 && !ciuo.mutation.AttachmentEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateinterview.AttachmentEdgesTable,
			Columns: []string{candidateinterview.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidateinterview.AttachmentEdgesTable,
			Columns: []string{candidateinterview.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.InterviewerEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   candidateinterview.InterviewerEdgesTable,
			Columns: candidateinterview.InterviewerEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		createE := &CandidateInterviewerCreate{config: ciuo.config, mutation: newCandidateInterviewerMutation(ciuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedInterviewerEdgesIDs(); len(nodes) > 0 && !ciuo.mutation.InterviewerEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   candidateinterview.InterviewerEdgesTable,
			Columns: candidateinterview.InterviewerEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CandidateInterviewerCreate{config: ciuo.config, mutation: newCandidateInterviewerMutation(ciuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.InterviewerEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   candidateinterview.InterviewerEdgesTable,
			Columns: candidateinterview.InterviewerEdgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CandidateInterviewerCreate{config: ciuo.config, mutation: newCandidateInterviewerMutation(ciuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.CreatedByEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateinterview.CreatedByEdgeTable,
			Columns: []string{candidateinterview.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CreatedByEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateinterview.CreatedByEdgeTable,
			Columns: []string{candidateinterview.CreatedByEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.UserInterviewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   candidateinterview.UserInterviewersTable,
			Columns: []string{candidateinterview.UserInterviewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterviewer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedUserInterviewersIDs(); len(nodes) > 0 && !ciuo.mutation.UserInterviewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   candidateinterview.UserInterviewersTable,
			Columns: []string{candidateinterview.UserInterviewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterviewer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.UserInterviewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   candidateinterview.UserInterviewersTable,
			Columns: []string{candidateinterview.UserInterviewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterviewer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CandidateInterview{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidateinterview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
