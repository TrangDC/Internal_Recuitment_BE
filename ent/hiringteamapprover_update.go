// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/hiringteam"
	"trec/ent/hiringteamapprover"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HiringTeamApproverUpdate is the builder for updating HiringTeamApprover entities.
type HiringTeamApproverUpdate struct {
	config
	hooks    []Hook
	mutation *HiringTeamApproverMutation
}

// Where appends a list predicates to the HiringTeamApproverUpdate builder.
func (htau *HiringTeamApproverUpdate) Where(ps ...predicate.HiringTeamApprover) *HiringTeamApproverUpdate {
	htau.mutation.Where(ps...)
	return htau
}

// SetUpdatedAt sets the "updated_at" field.
func (htau *HiringTeamApproverUpdate) SetUpdatedAt(t time.Time) *HiringTeamApproverUpdate {
	htau.mutation.SetUpdatedAt(t)
	return htau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (htau *HiringTeamApproverUpdate) SetNillableUpdatedAt(t *time.Time) *HiringTeamApproverUpdate {
	if t != nil {
		htau.SetUpdatedAt(*t)
	}
	return htau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (htau *HiringTeamApproverUpdate) ClearUpdatedAt() *HiringTeamApproverUpdate {
	htau.mutation.ClearUpdatedAt()
	return htau
}

// SetDeletedAt sets the "deleted_at" field.
func (htau *HiringTeamApproverUpdate) SetDeletedAt(t time.Time) *HiringTeamApproverUpdate {
	htau.mutation.SetDeletedAt(t)
	return htau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (htau *HiringTeamApproverUpdate) SetNillableDeletedAt(t *time.Time) *HiringTeamApproverUpdate {
	if t != nil {
		htau.SetDeletedAt(*t)
	}
	return htau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (htau *HiringTeamApproverUpdate) ClearDeletedAt() *HiringTeamApproverUpdate {
	htau.mutation.ClearDeletedAt()
	return htau
}

// SetUserID sets the "user_id" field.
func (htau *HiringTeamApproverUpdate) SetUserID(u uuid.UUID) *HiringTeamApproverUpdate {
	htau.mutation.SetUserID(u)
	return htau
}

// SetHiringTeamID sets the "hiring_team_id" field.
func (htau *HiringTeamApproverUpdate) SetHiringTeamID(u uuid.UUID) *HiringTeamApproverUpdate {
	htau.mutation.SetHiringTeamID(u)
	return htau
}

// SetOrderID sets the "order_id" field.
func (htau *HiringTeamApproverUpdate) SetOrderID(i int) *HiringTeamApproverUpdate {
	htau.mutation.ResetOrderID()
	htau.mutation.SetOrderID(i)
	return htau
}

// AddOrderID adds i to the "order_id" field.
func (htau *HiringTeamApproverUpdate) AddOrderID(i int) *HiringTeamApproverUpdate {
	htau.mutation.AddOrderID(i)
	return htau
}

// SetUser sets the "user" edge to the User entity.
func (htau *HiringTeamApproverUpdate) SetUser(u *User) *HiringTeamApproverUpdate {
	return htau.SetUserID(u.ID)
}

// SetHiringTeam sets the "hiring_team" edge to the HiringTeam entity.
func (htau *HiringTeamApproverUpdate) SetHiringTeam(h *HiringTeam) *HiringTeamApproverUpdate {
	return htau.SetHiringTeamID(h.ID)
}

// Mutation returns the HiringTeamApproverMutation object of the builder.
func (htau *HiringTeamApproverUpdate) Mutation() *HiringTeamApproverMutation {
	return htau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (htau *HiringTeamApproverUpdate) ClearUser() *HiringTeamApproverUpdate {
	htau.mutation.ClearUser()
	return htau
}

// ClearHiringTeam clears the "hiring_team" edge to the HiringTeam entity.
func (htau *HiringTeamApproverUpdate) ClearHiringTeam() *HiringTeamApproverUpdate {
	htau.mutation.ClearHiringTeam()
	return htau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htau *HiringTeamApproverUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(htau.hooks) == 0 {
		if err = htau.check(); err != nil {
			return 0, err
		}
		affected, err = htau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiringTeamApproverMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = htau.check(); err != nil {
				return 0, err
			}
			htau.mutation = mutation
			affected, err = htau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(htau.hooks) - 1; i >= 0; i-- {
			if htau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = htau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, htau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (htau *HiringTeamApproverUpdate) SaveX(ctx context.Context) int {
	affected, err := htau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htau *HiringTeamApproverUpdate) Exec(ctx context.Context) error {
	_, err := htau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htau *HiringTeamApproverUpdate) ExecX(ctx context.Context) {
	if err := htau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htau *HiringTeamApproverUpdate) check() error {
	if v, ok := htau.mutation.OrderID(); ok {
		if err := hiringteamapprover.OrderIDValidator(v); err != nil {
			return &ValidationError{Name: "order_id", err: fmt.Errorf(`ent: validator failed for field "HiringTeamApprover.order_id": %w`, err)}
		}
	}
	if _, ok := htau.mutation.UserID(); htau.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringTeamApprover.user"`)
	}
	if _, ok := htau.mutation.HiringTeamID(); htau.mutation.HiringTeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringTeamApprover.hiring_team"`)
	}
	return nil
}

func (htau *HiringTeamApproverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringteamapprover.Table,
			Columns: hiringteamapprover.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringteamapprover.FieldID,
			},
		},
	}
	if ps := htau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htau.mutation.UpdatedAt(); ok {
		_spec.SetField(hiringteamapprover.FieldUpdatedAt, field.TypeTime, value)
	}
	if htau.mutation.UpdatedAtCleared() {
		_spec.ClearField(hiringteamapprover.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := htau.mutation.DeletedAt(); ok {
		_spec.SetField(hiringteamapprover.FieldDeletedAt, field.TypeTime, value)
	}
	if htau.mutation.DeletedAtCleared() {
		_spec.ClearField(hiringteamapprover.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := htau.mutation.OrderID(); ok {
		_spec.SetField(hiringteamapprover.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := htau.mutation.AddedOrderID(); ok {
		_spec.AddField(hiringteamapprover.FieldOrderID, field.TypeInt, value)
	}
	if htau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteamapprover.UserTable,
			Columns: []string{hiringteamapprover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteamapprover.UserTable,
			Columns: []string{hiringteamapprover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htau.mutation.HiringTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteamapprover.HiringTeamTable,
			Columns: []string{hiringteamapprover.HiringTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htau.mutation.HiringTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteamapprover.HiringTeamTable,
			Columns: []string{hiringteamapprover.HiringTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hiringteamapprover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HiringTeamApproverUpdateOne is the builder for updating a single HiringTeamApprover entity.
type HiringTeamApproverUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HiringTeamApproverMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (htauo *HiringTeamApproverUpdateOne) SetUpdatedAt(t time.Time) *HiringTeamApproverUpdateOne {
	htauo.mutation.SetUpdatedAt(t)
	return htauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (htauo *HiringTeamApproverUpdateOne) SetNillableUpdatedAt(t *time.Time) *HiringTeamApproverUpdateOne {
	if t != nil {
		htauo.SetUpdatedAt(*t)
	}
	return htauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (htauo *HiringTeamApproverUpdateOne) ClearUpdatedAt() *HiringTeamApproverUpdateOne {
	htauo.mutation.ClearUpdatedAt()
	return htauo
}

// SetDeletedAt sets the "deleted_at" field.
func (htauo *HiringTeamApproverUpdateOne) SetDeletedAt(t time.Time) *HiringTeamApproverUpdateOne {
	htauo.mutation.SetDeletedAt(t)
	return htauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (htauo *HiringTeamApproverUpdateOne) SetNillableDeletedAt(t *time.Time) *HiringTeamApproverUpdateOne {
	if t != nil {
		htauo.SetDeletedAt(*t)
	}
	return htauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (htauo *HiringTeamApproverUpdateOne) ClearDeletedAt() *HiringTeamApproverUpdateOne {
	htauo.mutation.ClearDeletedAt()
	return htauo
}

// SetUserID sets the "user_id" field.
func (htauo *HiringTeamApproverUpdateOne) SetUserID(u uuid.UUID) *HiringTeamApproverUpdateOne {
	htauo.mutation.SetUserID(u)
	return htauo
}

// SetHiringTeamID sets the "hiring_team_id" field.
func (htauo *HiringTeamApproverUpdateOne) SetHiringTeamID(u uuid.UUID) *HiringTeamApproverUpdateOne {
	htauo.mutation.SetHiringTeamID(u)
	return htauo
}

// SetOrderID sets the "order_id" field.
func (htauo *HiringTeamApproverUpdateOne) SetOrderID(i int) *HiringTeamApproverUpdateOne {
	htauo.mutation.ResetOrderID()
	htauo.mutation.SetOrderID(i)
	return htauo
}

// AddOrderID adds i to the "order_id" field.
func (htauo *HiringTeamApproverUpdateOne) AddOrderID(i int) *HiringTeamApproverUpdateOne {
	htauo.mutation.AddOrderID(i)
	return htauo
}

// SetUser sets the "user" edge to the User entity.
func (htauo *HiringTeamApproverUpdateOne) SetUser(u *User) *HiringTeamApproverUpdateOne {
	return htauo.SetUserID(u.ID)
}

// SetHiringTeam sets the "hiring_team" edge to the HiringTeam entity.
func (htauo *HiringTeamApproverUpdateOne) SetHiringTeam(h *HiringTeam) *HiringTeamApproverUpdateOne {
	return htauo.SetHiringTeamID(h.ID)
}

// Mutation returns the HiringTeamApproverMutation object of the builder.
func (htauo *HiringTeamApproverUpdateOne) Mutation() *HiringTeamApproverMutation {
	return htauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (htauo *HiringTeamApproverUpdateOne) ClearUser() *HiringTeamApproverUpdateOne {
	htauo.mutation.ClearUser()
	return htauo
}

// ClearHiringTeam clears the "hiring_team" edge to the HiringTeam entity.
func (htauo *HiringTeamApproverUpdateOne) ClearHiringTeam() *HiringTeamApproverUpdateOne {
	htauo.mutation.ClearHiringTeam()
	return htauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htauo *HiringTeamApproverUpdateOne) Select(field string, fields ...string) *HiringTeamApproverUpdateOne {
	htauo.fields = append([]string{field}, fields...)
	return htauo
}

// Save executes the query and returns the updated HiringTeamApprover entity.
func (htauo *HiringTeamApproverUpdateOne) Save(ctx context.Context) (*HiringTeamApprover, error) {
	var (
		err  error
		node *HiringTeamApprover
	)
	if len(htauo.hooks) == 0 {
		if err = htauo.check(); err != nil {
			return nil, err
		}
		node, err = htauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiringTeamApproverMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = htauo.check(); err != nil {
				return nil, err
			}
			htauo.mutation = mutation
			node, err = htauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(htauo.hooks) - 1; i >= 0; i-- {
			if htauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = htauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, htauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HiringTeamApprover)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HiringTeamApproverMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (htauo *HiringTeamApproverUpdateOne) SaveX(ctx context.Context) *HiringTeamApprover {
	node, err := htauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htauo *HiringTeamApproverUpdateOne) Exec(ctx context.Context) error {
	_, err := htauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htauo *HiringTeamApproverUpdateOne) ExecX(ctx context.Context) {
	if err := htauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htauo *HiringTeamApproverUpdateOne) check() error {
	if v, ok := htauo.mutation.OrderID(); ok {
		if err := hiringteamapprover.OrderIDValidator(v); err != nil {
			return &ValidationError{Name: "order_id", err: fmt.Errorf(`ent: validator failed for field "HiringTeamApprover.order_id": %w`, err)}
		}
	}
	if _, ok := htauo.mutation.UserID(); htauo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringTeamApprover.user"`)
	}
	if _, ok := htauo.mutation.HiringTeamID(); htauo.mutation.HiringTeamCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringTeamApprover.hiring_team"`)
	}
	return nil
}

func (htauo *HiringTeamApproverUpdateOne) sqlSave(ctx context.Context) (_node *HiringTeamApprover, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringteamapprover.Table,
			Columns: hiringteamapprover.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringteamapprover.FieldID,
			},
		},
	}
	id, ok := htauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HiringTeamApprover.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hiringteamapprover.FieldID)
		for _, f := range fields {
			if !hiringteamapprover.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hiringteamapprover.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htauo.mutation.UpdatedAt(); ok {
		_spec.SetField(hiringteamapprover.FieldUpdatedAt, field.TypeTime, value)
	}
	if htauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hiringteamapprover.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := htauo.mutation.DeletedAt(); ok {
		_spec.SetField(hiringteamapprover.FieldDeletedAt, field.TypeTime, value)
	}
	if htauo.mutation.DeletedAtCleared() {
		_spec.ClearField(hiringteamapprover.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := htauo.mutation.OrderID(); ok {
		_spec.SetField(hiringteamapprover.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := htauo.mutation.AddedOrderID(); ok {
		_spec.AddField(hiringteamapprover.FieldOrderID, field.TypeInt, value)
	}
	if htauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteamapprover.UserTable,
			Columns: []string{hiringteamapprover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteamapprover.UserTable,
			Columns: []string{hiringteamapprover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htauo.mutation.HiringTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteamapprover.HiringTeamTable,
			Columns: []string{hiringteamapprover.HiringTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htauo.mutation.HiringTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hiringteamapprover.HiringTeamTable,
			Columns: []string{hiringteamapprover.HiringTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HiringTeamApprover{config: htauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hiringteamapprover.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
