// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWorkEmail holds the string denoting the work_email field in the database.
	FieldWorkEmail = "work_email"
	// FieldOid holds the string denoting the oid field in the database.
	FieldOid = "oid"
	// EdgeAuditEdge holds the string denoting the audit_edge edge name in mutations.
	EdgeAuditEdge = "audit_edge"
	// EdgeHiringOwner holds the string denoting the hiring_owner edge name in mutations.
	EdgeHiringOwner = "hiring_owner"
	// EdgeTeamEdges holds the string denoting the team_edges edge name in mutations.
	EdgeTeamEdges = "team_edges"
	// EdgeCandidateJobFeedback holds the string denoting the candidate_job_feedback edge name in mutations.
	EdgeCandidateJobFeedback = "candidate_job_feedback"
	// EdgeInterviewEdges holds the string denoting the interview_edges edge name in mutations.
	EdgeInterviewEdges = "interview_edges"
	// EdgeTeamUsers holds the string denoting the team_users edge name in mutations.
	EdgeTeamUsers = "team_users"
	// EdgeInterviewUsers holds the string denoting the interview_users edge name in mutations.
	EdgeInterviewUsers = "interview_users"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AuditEdgeTable is the table that holds the audit_edge relation/edge.
	AuditEdgeTable = "audit_trails"
	// AuditEdgeInverseTable is the table name for the AuditTrail entity.
	// It exists in this package in order to avoid circular dependency with the "audittrail" package.
	AuditEdgeInverseTable = "audit_trails"
	// AuditEdgeColumn is the table column denoting the audit_edge relation/edge.
	AuditEdgeColumn = "created_by"
	// HiringOwnerTable is the table that holds the hiring_owner relation/edge.
	HiringOwnerTable = "hiring_jobs"
	// HiringOwnerInverseTable is the table name for the HiringJob entity.
	// It exists in this package in order to avoid circular dependency with the "hiringjob" package.
	HiringOwnerInverseTable = "hiring_jobs"
	// HiringOwnerColumn is the table column denoting the hiring_owner relation/edge.
	HiringOwnerColumn = "created_by"
	// TeamEdgesTable is the table that holds the team_edges relation/edge. The primary key declared below.
	TeamEdgesTable = "team_managers"
	// TeamEdgesInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamEdgesInverseTable = "teams"
	// CandidateJobFeedbackTable is the table that holds the candidate_job_feedback relation/edge.
	CandidateJobFeedbackTable = "candidate_job_feedbacks"
	// CandidateJobFeedbackInverseTable is the table name for the CandidateJobFeedback entity.
	// It exists in this package in order to avoid circular dependency with the "candidatejobfeedback" package.
	CandidateJobFeedbackInverseTable = "candidate_job_feedbacks"
	// CandidateJobFeedbackColumn is the table column denoting the candidate_job_feedback relation/edge.
	CandidateJobFeedbackColumn = "created_by"
	// InterviewEdgesTable is the table that holds the interview_edges relation/edge. The primary key declared below.
	InterviewEdgesTable = "candidate_interviewers"
	// InterviewEdgesInverseTable is the table name for the CandidateInterview entity.
	// It exists in this package in order to avoid circular dependency with the "candidateinterview" package.
	InterviewEdgesInverseTable = "candidate_interviews"
	// TeamUsersTable is the table that holds the team_users relation/edge.
	TeamUsersTable = "team_managers"
	// TeamUsersInverseTable is the table name for the TeamManager entity.
	// It exists in this package in order to avoid circular dependency with the "teammanager" package.
	TeamUsersInverseTable = "team_managers"
	// TeamUsersColumn is the table column denoting the team_users relation/edge.
	TeamUsersColumn = "user_id"
	// InterviewUsersTable is the table that holds the interview_users relation/edge.
	InterviewUsersTable = "candidate_interviewers"
	// InterviewUsersInverseTable is the table name for the CandidateInterviewer entity.
	// It exists in this package in order to avoid circular dependency with the "candidateinterviewer" package.
	InterviewUsersInverseTable = "candidate_interviewers"
	// InterviewUsersColumn is the table column denoting the interview_users relation/edge.
	InterviewUsersColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldWorkEmail,
	FieldOid,
}

var (
	// TeamEdgesPrimaryKey and TeamEdgesColumn2 are the table columns denoting the
	// primary key for the team_edges relation (M2M).
	TeamEdgesPrimaryKey = []string{"user_id", "team_id"}
	// InterviewEdgesPrimaryKey and InterviewEdgesColumn2 are the table columns denoting the
	// primary key for the interview_edges relation (M2M).
	InterviewEdgesPrimaryKey = []string{"user_id", "candidate_interview_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// WorkEmailValidator is a validator for the "work_email" field. It is called by the builders before save.
	WorkEmailValidator func(string) error
	// OidValidator is a validator for the "oid" field. It is called by the builders before save.
	OidValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
