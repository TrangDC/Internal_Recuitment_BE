// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWorkEmail holds the string denoting the work_email field in the database.
	FieldWorkEmail = "work_email"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOid holds the string denoting the oid field in the database.
	FieldOid = "oid"
	// FieldTeamID holds the string denoting the team_id field in the database.
	FieldTeamID = "team_id"
	// FieldRecTeamID holds the string denoting the rec_team_id field in the database.
	FieldRecTeamID = "rec_team_id"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// EdgeAuditEdge holds the string denoting the audit_edge edge name in mutations.
	EdgeAuditEdge = "audit_edge"
	// EdgeHiringOwner holds the string denoting the hiring_owner edge name in mutations.
	EdgeHiringOwner = "hiring_owner"
	// EdgeTeamEdges holds the string denoting the team_edges edge name in mutations.
	EdgeTeamEdges = "team_edges"
	// EdgeCandidateJobFeedback holds the string denoting the candidate_job_feedback edge name in mutations.
	EdgeCandidateJobFeedback = "candidate_job_feedback"
	// EdgeInterviewEdges holds the string denoting the interview_edges edge name in mutations.
	EdgeInterviewEdges = "interview_edges"
	// EdgeCandidateJobEdges holds the string denoting the candidate_job_edges edge name in mutations.
	EdgeCandidateJobEdges = "candidate_job_edges"
	// EdgeCandidateInterviewEdges holds the string denoting the candidate_interview_edges edge name in mutations.
	EdgeCandidateInterviewEdges = "candidate_interview_edges"
	// EdgeCandidateReferenceEdges holds the string denoting the candidate_reference_edges edge name in mutations.
	EdgeCandidateReferenceEdges = "candidate_reference_edges"
	// EdgeUserPermissionEdges holds the string denoting the user_permission_edges edge name in mutations.
	EdgeUserPermissionEdges = "user_permission_edges"
	// EdgeRoleEdges holds the string denoting the role_edges edge name in mutations.
	EdgeRoleEdges = "role_edges"
	// EdgeMemberOfTeamEdges holds the string denoting the member_of_team_edges edge name in mutations.
	EdgeMemberOfTeamEdges = "member_of_team_edges"
	// EdgeHiringTeamEdges holds the string denoting the hiring_team_edges edge name in mutations.
	EdgeHiringTeamEdges = "hiring_team_edges"
	// EdgeLedRecTeams holds the string denoting the led_rec_teams edge name in mutations.
	EdgeLedRecTeams = "led_rec_teams"
	// EdgeRecTeams holds the string denoting the rec_teams edge name in mutations.
	EdgeRecTeams = "rec_teams"
	// EdgeTeamUsers holds the string denoting the team_users edge name in mutations.
	EdgeTeamUsers = "team_users"
	// EdgeInterviewUsers holds the string denoting the interview_users edge name in mutations.
	EdgeInterviewUsers = "interview_users"
	// EdgeRoleUsers holds the string denoting the role_users edge name in mutations.
	EdgeRoleUsers = "role_users"
	// EdgeHiringTeamUsers holds the string denoting the hiring_team_users edge name in mutations.
	EdgeHiringTeamUsers = "hiring_team_users"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AuditEdgeTable is the table that holds the audit_edge relation/edge.
	AuditEdgeTable = "audit_trails"
	// AuditEdgeInverseTable is the table name for the AuditTrail entity.
	// It exists in this package in order to avoid circular dependency with the "audittrail" package.
	AuditEdgeInverseTable = "audit_trails"
	// AuditEdgeColumn is the table column denoting the audit_edge relation/edge.
	AuditEdgeColumn = "created_by"
	// HiringOwnerTable is the table that holds the hiring_owner relation/edge.
	HiringOwnerTable = "hiring_jobs"
	// HiringOwnerInverseTable is the table name for the HiringJob entity.
	// It exists in this package in order to avoid circular dependency with the "hiringjob" package.
	HiringOwnerInverseTable = "hiring_jobs"
	// HiringOwnerColumn is the table column denoting the hiring_owner relation/edge.
	HiringOwnerColumn = "created_by"
	// TeamEdgesTable is the table that holds the team_edges relation/edge. The primary key declared below.
	TeamEdgesTable = "team_managers"
	// TeamEdgesInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamEdgesInverseTable = "teams"
	// CandidateJobFeedbackTable is the table that holds the candidate_job_feedback relation/edge.
	CandidateJobFeedbackTable = "candidate_job_feedbacks"
	// CandidateJobFeedbackInverseTable is the table name for the CandidateJobFeedback entity.
	// It exists in this package in order to avoid circular dependency with the "candidatejobfeedback" package.
	CandidateJobFeedbackInverseTable = "candidate_job_feedbacks"
	// CandidateJobFeedbackColumn is the table column denoting the candidate_job_feedback relation/edge.
	CandidateJobFeedbackColumn = "created_by"
	// InterviewEdgesTable is the table that holds the interview_edges relation/edge. The primary key declared below.
	InterviewEdgesTable = "candidate_interviewers"
	// InterviewEdgesInverseTable is the table name for the CandidateInterview entity.
	// It exists in this package in order to avoid circular dependency with the "candidateinterview" package.
	InterviewEdgesInverseTable = "candidate_interviews"
	// CandidateJobEdgesTable is the table that holds the candidate_job_edges relation/edge.
	CandidateJobEdgesTable = "candidate_jobs"
	// CandidateJobEdgesInverseTable is the table name for the CandidateJob entity.
	// It exists in this package in order to avoid circular dependency with the "candidatejob" package.
	CandidateJobEdgesInverseTable = "candidate_jobs"
	// CandidateJobEdgesColumn is the table column denoting the candidate_job_edges relation/edge.
	CandidateJobEdgesColumn = "created_by"
	// CandidateInterviewEdgesTable is the table that holds the candidate_interview_edges relation/edge.
	CandidateInterviewEdgesTable = "candidate_interviews"
	// CandidateInterviewEdgesInverseTable is the table name for the CandidateInterview entity.
	// It exists in this package in order to avoid circular dependency with the "candidateinterview" package.
	CandidateInterviewEdgesInverseTable = "candidate_interviews"
	// CandidateInterviewEdgesColumn is the table column denoting the candidate_interview_edges relation/edge.
	CandidateInterviewEdgesColumn = "created_by"
	// CandidateReferenceEdgesTable is the table that holds the candidate_reference_edges relation/edge.
	CandidateReferenceEdgesTable = "candidates"
	// CandidateReferenceEdgesInverseTable is the table name for the Candidate entity.
	// It exists in this package in order to avoid circular dependency with the "candidate" package.
	CandidateReferenceEdgesInverseTable = "candidates"
	// CandidateReferenceEdgesColumn is the table column denoting the candidate_reference_edges relation/edge.
	CandidateReferenceEdgesColumn = "reference_uid"
	// UserPermissionEdgesTable is the table that holds the user_permission_edges relation/edge.
	UserPermissionEdgesTable = "entity_permissions"
	// UserPermissionEdgesInverseTable is the table name for the EntityPermission entity.
	// It exists in this package in order to avoid circular dependency with the "entitypermission" package.
	UserPermissionEdgesInverseTable = "entity_permissions"
	// UserPermissionEdgesColumn is the table column denoting the user_permission_edges relation/edge.
	UserPermissionEdgesColumn = "entity_id"
	// RoleEdgesTable is the table that holds the role_edges relation/edge. The primary key declared below.
	RoleEdgesTable = "user_roles"
	// RoleEdgesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleEdgesInverseTable = "roles"
	// MemberOfTeamEdgesTable is the table that holds the member_of_team_edges relation/edge.
	MemberOfTeamEdgesTable = "users"
	// MemberOfTeamEdgesInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	MemberOfTeamEdgesInverseTable = "teams"
	// MemberOfTeamEdgesColumn is the table column denoting the member_of_team_edges relation/edge.
	MemberOfTeamEdgesColumn = "team_id"
	// HiringTeamEdgesTable is the table that holds the hiring_team_edges relation/edge. The primary key declared below.
	HiringTeamEdgesTable = "hiring_team_managers"
	// HiringTeamEdgesInverseTable is the table name for the HiringTeam entity.
	// It exists in this package in order to avoid circular dependency with the "hiringteam" package.
	HiringTeamEdgesInverseTable = "hiring_teams"
	// LedRecTeamsTable is the table that holds the led_rec_teams relation/edge.
	LedRecTeamsTable = "rec_teams"
	// LedRecTeamsInverseTable is the table name for the RecTeam entity.
	// It exists in this package in order to avoid circular dependency with the "recteam" package.
	LedRecTeamsInverseTable = "rec_teams"
	// LedRecTeamsColumn is the table column denoting the led_rec_teams relation/edge.
	LedRecTeamsColumn = "leader_id"
	// RecTeamsTable is the table that holds the rec_teams relation/edge.
	RecTeamsTable = "users"
	// RecTeamsInverseTable is the table name for the RecTeam entity.
	// It exists in this package in order to avoid circular dependency with the "recteam" package.
	RecTeamsInverseTable = "rec_teams"
	// RecTeamsColumn is the table column denoting the rec_teams relation/edge.
	RecTeamsColumn = "rec_team_id"
	// TeamUsersTable is the table that holds the team_users relation/edge.
	TeamUsersTable = "team_managers"
	// TeamUsersInverseTable is the table name for the TeamManager entity.
	// It exists in this package in order to avoid circular dependency with the "teammanager" package.
	TeamUsersInverseTable = "team_managers"
	// TeamUsersColumn is the table column denoting the team_users relation/edge.
	TeamUsersColumn = "user_id"
	// InterviewUsersTable is the table that holds the interview_users relation/edge.
	InterviewUsersTable = "candidate_interviewers"
	// InterviewUsersInverseTable is the table name for the CandidateInterviewer entity.
	// It exists in this package in order to avoid circular dependency with the "candidateinterviewer" package.
	InterviewUsersInverseTable = "candidate_interviewers"
	// InterviewUsersColumn is the table column denoting the interview_users relation/edge.
	InterviewUsersColumn = "user_id"
	// RoleUsersTable is the table that holds the role_users relation/edge.
	RoleUsersTable = "user_roles"
	// RoleUsersInverseTable is the table name for the UserRole entity.
	// It exists in this package in order to avoid circular dependency with the "userrole" package.
	RoleUsersInverseTable = "user_roles"
	// RoleUsersColumn is the table column denoting the role_users relation/edge.
	RoleUsersColumn = "user_id"
	// HiringTeamUsersTable is the table that holds the hiring_team_users relation/edge.
	HiringTeamUsersTable = "hiring_team_managers"
	// HiringTeamUsersInverseTable is the table name for the HiringTeamManager entity.
	// It exists in this package in order to avoid circular dependency with the "hiringteammanager" package.
	HiringTeamUsersInverseTable = "hiring_team_managers"
	// HiringTeamUsersColumn is the table column denoting the hiring_team_users relation/edge.
	HiringTeamUsersColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldWorkEmail,
	FieldStatus,
	FieldOid,
	FieldTeamID,
	FieldRecTeamID,
	FieldLocation,
}

var (
	// TeamEdgesPrimaryKey and TeamEdgesColumn2 are the table columns denoting the
	// primary key for the team_edges relation (M2M).
	TeamEdgesPrimaryKey = []string{"user_id", "team_id"}
	// InterviewEdgesPrimaryKey and InterviewEdgesColumn2 are the table columns denoting the
	// primary key for the interview_edges relation (M2M).
	InterviewEdgesPrimaryKey = []string{"user_id", "candidate_interview_id"}
	// RoleEdgesPrimaryKey and RoleEdgesColumn2 are the table columns denoting the
	// primary key for the role_edges relation (M2M).
	RoleEdgesPrimaryKey = []string{"user_id", "role_id"}
	// HiringTeamEdgesPrimaryKey and HiringTeamEdgesColumn2 are the table columns denoting the
	// primary key for the hiring_team_edges relation (M2M).
	HiringTeamEdgesPrimaryKey = []string{"user_id", "hiring_team_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// WorkEmailValidator is a validator for the "work_email" field. It is called by the builders before save.
	WorkEmailValidator func(string) error
	// OidValidator is a validator for the "oid" field. It is called by the builders before save.
	OidValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive   Status = "active"
	StatusInactive Status = "inactive"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusInactive:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
