// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// WorkEmail applies equality check predicate on the "work_email" field. It's identical to WorkEmailEQ.
func WorkEmail(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkEmail), v))
	})
}

// Oid applies equality check predicate on the "oid" field. It's identical to OidEQ.
func Oid(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOid), v))
	})
}

// RecTeamID applies equality check predicate on the "rec_team_id" field. It's identical to RecTeamIDEQ.
func RecTeamID(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecTeamID), v))
	})
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// HiringTeamID applies equality check predicate on the "hiring_team_id" field. It's identical to HiringTeamIDEQ.
func HiringTeamID(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHiringTeamID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// WorkEmailEQ applies the EQ predicate on the "work_email" field.
func WorkEmailEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailNEQ applies the NEQ predicate on the "work_email" field.
func WorkEmailNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailIn applies the In predicate on the "work_email" field.
func WorkEmailIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWorkEmail), v...))
	})
}

// WorkEmailNotIn applies the NotIn predicate on the "work_email" field.
func WorkEmailNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWorkEmail), v...))
	})
}

// WorkEmailGT applies the GT predicate on the "work_email" field.
func WorkEmailGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailGTE applies the GTE predicate on the "work_email" field.
func WorkEmailGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailLT applies the LT predicate on the "work_email" field.
func WorkEmailLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailLTE applies the LTE predicate on the "work_email" field.
func WorkEmailLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailContains applies the Contains predicate on the "work_email" field.
func WorkEmailContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailHasPrefix applies the HasPrefix predicate on the "work_email" field.
func WorkEmailHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailHasSuffix applies the HasSuffix predicate on the "work_email" field.
func WorkEmailHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailEqualFold applies the EqualFold predicate on the "work_email" field.
func WorkEmailEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWorkEmail), v))
	})
}

// WorkEmailContainsFold applies the ContainsFold predicate on the "work_email" field.
func WorkEmailContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWorkEmail), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// OidEQ applies the EQ predicate on the "oid" field.
func OidEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOid), v))
	})
}

// OidNEQ applies the NEQ predicate on the "oid" field.
func OidNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOid), v))
	})
}

// OidIn applies the In predicate on the "oid" field.
func OidIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOid), v...))
	})
}

// OidNotIn applies the NotIn predicate on the "oid" field.
func OidNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOid), v...))
	})
}

// OidGT applies the GT predicate on the "oid" field.
func OidGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOid), v))
	})
}

// OidGTE applies the GTE predicate on the "oid" field.
func OidGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOid), v))
	})
}

// OidLT applies the LT predicate on the "oid" field.
func OidLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOid), v))
	})
}

// OidLTE applies the LTE predicate on the "oid" field.
func OidLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOid), v))
	})
}

// OidContains applies the Contains predicate on the "oid" field.
func OidContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOid), v))
	})
}

// OidHasPrefix applies the HasPrefix predicate on the "oid" field.
func OidHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOid), v))
	})
}

// OidHasSuffix applies the HasSuffix predicate on the "oid" field.
func OidHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOid), v))
	})
}

// OidEqualFold applies the EqualFold predicate on the "oid" field.
func OidEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOid), v))
	})
}

// OidContainsFold applies the ContainsFold predicate on the "oid" field.
func OidContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOid), v))
	})
}

// RecTeamIDEQ applies the EQ predicate on the "rec_team_id" field.
func RecTeamIDEQ(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecTeamID), v))
	})
}

// RecTeamIDNEQ applies the NEQ predicate on the "rec_team_id" field.
func RecTeamIDNEQ(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecTeamID), v))
	})
}

// RecTeamIDIn applies the In predicate on the "rec_team_id" field.
func RecTeamIDIn(vs ...uuid.UUID) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecTeamID), v...))
	})
}

// RecTeamIDNotIn applies the NotIn predicate on the "rec_team_id" field.
func RecTeamIDNotIn(vs ...uuid.UUID) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecTeamID), v...))
	})
}

// RecTeamIDIsNil applies the IsNil predicate on the "rec_team_id" field.
func RecTeamIDIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecTeamID)))
	})
}

// RecTeamIDNotNil applies the NotNil predicate on the "rec_team_id" field.
func RecTeamIDNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecTeamID)))
	})
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocation), v))
	})
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLocation), v...))
	})
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLocation), v...))
	})
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocation), v))
	})
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocation), v))
	})
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocation), v))
	})
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocation), v))
	})
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocation), v))
	})
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocation), v))
	})
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocation), v))
	})
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocation)))
	})
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocation)))
	})
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocation), v))
	})
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocation), v))
	})
}

// HiringTeamIDEQ applies the EQ predicate on the "hiring_team_id" field.
func HiringTeamIDEQ(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHiringTeamID), v))
	})
}

// HiringTeamIDNEQ applies the NEQ predicate on the "hiring_team_id" field.
func HiringTeamIDNEQ(v uuid.UUID) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHiringTeamID), v))
	})
}

// HiringTeamIDIn applies the In predicate on the "hiring_team_id" field.
func HiringTeamIDIn(vs ...uuid.UUID) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHiringTeamID), v...))
	})
}

// HiringTeamIDNotIn applies the NotIn predicate on the "hiring_team_id" field.
func HiringTeamIDNotIn(vs ...uuid.UUID) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHiringTeamID), v...))
	})
}

// HiringTeamIDIsNil applies the IsNil predicate on the "hiring_team_id" field.
func HiringTeamIDIsNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHiringTeamID)))
	})
}

// HiringTeamIDNotNil applies the NotNil predicate on the "hiring_team_id" field.
func HiringTeamIDNotNil() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHiringTeamID)))
	})
}

// HasAuditEdge applies the HasEdge predicate on the "audit_edge" edge.
func HasAuditEdge() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuditEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuditEdgeTable, AuditEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuditEdgeWith applies the HasEdge predicate on the "audit_edge" edge with a given conditions (other predicates).
func HasAuditEdgeWith(preds ...predicate.AuditTrail) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuditEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuditEdgeTable, AuditEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHiringOwner applies the HasEdge predicate on the "hiring_owner" edge.
func HasHiringOwner() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringOwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HiringOwnerTable, HiringOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHiringOwnerWith applies the HasEdge predicate on the "hiring_owner" edge with a given conditions (other predicates).
func HasHiringOwnerWith(preds ...predicate.HiringJob) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringOwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HiringOwnerTable, HiringOwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateJobFeedback applies the HasEdge predicate on the "candidate_job_feedback" edge.
func HasCandidateJobFeedback() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobFeedbackTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateJobFeedbackTable, CandidateJobFeedbackColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateJobFeedbackWith applies the HasEdge predicate on the "candidate_job_feedback" edge with a given conditions (other predicates).
func HasCandidateJobFeedbackWith(preds ...predicate.CandidateJobFeedback) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobFeedbackInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateJobFeedbackTable, CandidateJobFeedbackColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInterviewEdges applies the HasEdge predicate on the "interview_edges" edge.
func HasInterviewEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InterviewEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, InterviewEdgesTable, InterviewEdgesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInterviewEdgesWith applies the HasEdge predicate on the "interview_edges" edge with a given conditions (other predicates).
func HasInterviewEdgesWith(preds ...predicate.CandidateInterview) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InterviewEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, InterviewEdgesTable, InterviewEdgesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateJobEdges applies the HasEdge predicate on the "candidate_job_edges" edge.
func HasCandidateJobEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateJobEdgesTable, CandidateJobEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateJobEdgesWith applies the HasEdge predicate on the "candidate_job_edges" edge with a given conditions (other predicates).
func HasCandidateJobEdgesWith(preds ...predicate.CandidateJob) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateJobEdgesTable, CandidateJobEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateInterviewEdges applies the HasEdge predicate on the "candidate_interview_edges" edge.
func HasCandidateInterviewEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateInterviewEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateInterviewEdgesTable, CandidateInterviewEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateInterviewEdgesWith applies the HasEdge predicate on the "candidate_interview_edges" edge with a given conditions (other predicates).
func HasCandidateInterviewEdgesWith(preds ...predicate.CandidateInterview) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateInterviewEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateInterviewEdgesTable, CandidateInterviewEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateReferenceEdges applies the HasEdge predicate on the "candidate_reference_edges" edge.
func HasCandidateReferenceEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateReferenceEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateReferenceEdgesTable, CandidateReferenceEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateReferenceEdgesWith applies the HasEdge predicate on the "candidate_reference_edges" edge with a given conditions (other predicates).
func HasCandidateReferenceEdgesWith(preds ...predicate.Candidate) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateReferenceEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateReferenceEdgesTable, CandidateReferenceEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserPermissionEdges applies the HasEdge predicate on the "user_permission_edges" edge.
func HasUserPermissionEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserPermissionEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserPermissionEdgesTable, UserPermissionEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserPermissionEdgesWith applies the HasEdge predicate on the "user_permission_edges" edge with a given conditions (other predicates).
func HasUserPermissionEdgesWith(preds ...predicate.EntityPermission) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserPermissionEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserPermissionEdgesTable, UserPermissionEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleEdges applies the HasEdge predicate on the "role_edges" edge.
func HasRoleEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RoleEdgesTable, RoleEdgesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleEdgesWith applies the HasEdge predicate on the "role_edges" edge with a given conditions (other predicates).
func HasRoleEdgesWith(preds ...predicate.Role) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RoleEdgesTable, RoleEdgesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHiringTeamEdges applies the HasEdge predicate on the "hiring_team_edges" edge.
func HasHiringTeamEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringTeamEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HiringTeamEdgesTable, HiringTeamEdgesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHiringTeamEdgesWith applies the HasEdge predicate on the "hiring_team_edges" edge with a given conditions (other predicates).
func HasHiringTeamEdgesWith(preds ...predicate.HiringTeam) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringTeamEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HiringTeamEdgesTable, HiringTeamEdgesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberOfHiringTeamEdges applies the HasEdge predicate on the "member_of_hiring_team_edges" edge.
func HasMemberOfHiringTeamEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberOfHiringTeamEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberOfHiringTeamEdgesTable, MemberOfHiringTeamEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberOfHiringTeamEdgesWith applies the HasEdge predicate on the "member_of_hiring_team_edges" edge with a given conditions (other predicates).
func HasMemberOfHiringTeamEdgesWith(preds ...predicate.HiringTeam) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberOfHiringTeamEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberOfHiringTeamEdgesTable, MemberOfHiringTeamEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApproversHiringTeams applies the HasEdge predicate on the "approvers_hiring_teams" edge.
func HasApproversHiringTeams() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApproversHiringTeamsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ApproversHiringTeamsTable, ApproversHiringTeamsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApproversHiringTeamsWith applies the HasEdge predicate on the "approvers_hiring_teams" edge with a given conditions (other predicates).
func HasApproversHiringTeamsWith(preds ...predicate.HiringTeam) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApproversHiringTeamsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ApproversHiringTeamsTable, ApproversHiringTeamsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLeaderRecEdge applies the HasEdge predicate on the "leader_rec_edge" edge.
func HasLeaderRecEdge() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeaderRecEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, LeaderRecEdgeTable, LeaderRecEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeaderRecEdgeWith applies the HasEdge predicate on the "leader_rec_edge" edge with a given conditions (other predicates).
func HasLeaderRecEdgeWith(preds ...predicate.RecTeam) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeaderRecEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, LeaderRecEdgeTable, LeaderRecEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecTeams applies the HasEdge predicate on the "rec_teams" edge.
func HasRecTeams() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecTeamsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RecTeamsTable, RecTeamsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecTeamsWith applies the HasEdge predicate on the "rec_teams" edge with a given conditions (other predicates).
func HasRecTeamsWith(preds ...predicate.RecTeam) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecTeamsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RecTeamsTable, RecTeamsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateNoteEdges applies the HasEdge predicate on the "candidate_note_edges" edge.
func HasCandidateNoteEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateNoteEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateNoteEdgesTable, CandidateNoteEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateNoteEdgesWith applies the HasEdge predicate on the "candidate_note_edges" edge with a given conditions (other predicates).
func HasCandidateNoteEdgesWith(preds ...predicate.CandidateNote) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateNoteEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateNoteEdgesTable, CandidateNoteEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateHistoryCallEdges applies the HasEdge predicate on the "candidate_history_call_edges" edge.
func HasCandidateHistoryCallEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateHistoryCallEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateHistoryCallEdgesTable, CandidateHistoryCallEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateHistoryCallEdgesWith applies the HasEdge predicate on the "candidate_history_call_edges" edge with a given conditions (other predicates).
func HasCandidateHistoryCallEdgesWith(preds ...predicate.CandidateHistoryCall) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateHistoryCallEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateHistoryCallEdgesTable, CandidateHistoryCallEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprovalJobs applies the HasEdge predicate on the "approval_jobs" edge.
func HasApprovalJobs() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalJobsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ApprovalJobsTable, ApprovalJobsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovalJobsWith applies the HasEdge predicate on the "approval_jobs" edge with a given conditions (other predicates).
func HasApprovalJobsWith(preds ...predicate.HiringJob) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalJobsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ApprovalJobsTable, ApprovalJobsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHiringJobRecEdges applies the HasEdge predicate on the "hiring_job_rec_edges" edge.
func HasHiringJobRecEdges() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringJobRecEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HiringJobRecEdgesTable, HiringJobRecEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHiringJobRecEdgesWith applies the HasEdge predicate on the "hiring_job_rec_edges" edge with a given conditions (other predicates).
func HasHiringJobRecEdgesWith(preds ...predicate.HiringJob) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringJobRecEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HiringJobRecEdgesTable, HiringJobRecEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInterviewUsers applies the HasEdge predicate on the "interview_users" edge.
func HasInterviewUsers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InterviewUsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, InterviewUsersTable, InterviewUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInterviewUsersWith applies the HasEdge predicate on the "interview_users" edge with a given conditions (other predicates).
func HasInterviewUsersWith(preds ...predicate.CandidateInterviewer) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InterviewUsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, InterviewUsersTable, InterviewUsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleUsers applies the HasEdge predicate on the "role_users" edge.
func HasRoleUsers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleUsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RoleUsersTable, RoleUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleUsersWith applies the HasEdge predicate on the "role_users" edge with a given conditions (other predicates).
func HasRoleUsersWith(preds ...predicate.UserRole) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleUsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RoleUsersTable, RoleUsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHiringTeamUsers applies the HasEdge predicate on the "hiring_team_users" edge.
func HasHiringTeamUsers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringTeamUsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HiringTeamUsersTable, HiringTeamUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHiringTeamUsersWith applies the HasEdge predicate on the "hiring_team_users" edge with a given conditions (other predicates).
func HasHiringTeamUsersWith(preds ...predicate.HiringTeamManager) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringTeamUsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HiringTeamUsersTable, HiringTeamUsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHiringTeamApprovers applies the HasEdge predicate on the "hiring_team_approvers" edge.
func HasHiringTeamApprovers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringTeamApproversTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HiringTeamApproversTable, HiringTeamApproversColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHiringTeamApproversWith applies the HasEdge predicate on the "hiring_team_approvers" edge with a given conditions (other predicates).
func HasHiringTeamApproversWith(preds ...predicate.HiringTeamApprover) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringTeamApproversInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HiringTeamApproversTable, HiringTeamApproversColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprovalSteps applies the HasEdge predicate on the "approval_steps" edge.
func HasApprovalSteps() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalStepsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ApprovalStepsTable, ApprovalStepsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovalStepsWith applies the HasEdge predicate on the "approval_steps" edge with a given conditions (other predicates).
func HasApprovalStepsWith(preds ...predicate.HiringJobStep) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalStepsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ApprovalStepsTable, ApprovalStepsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
