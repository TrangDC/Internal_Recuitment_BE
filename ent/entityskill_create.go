// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/candidate"
	"trec/ent/entityskill"
	"trec/ent/hiringjob"
	"trec/ent/skill"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EntitySkillCreate is the builder for creating a EntitySkill entity.
type EntitySkillCreate struct {
	config
	mutation *EntitySkillMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (esc *EntitySkillCreate) SetCreatedAt(t time.Time) *EntitySkillCreate {
	esc.mutation.SetCreatedAt(t)
	return esc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esc *EntitySkillCreate) SetNillableCreatedAt(t *time.Time) *EntitySkillCreate {
	if t != nil {
		esc.SetCreatedAt(*t)
	}
	return esc
}

// SetUpdatedAt sets the "updated_at" field.
func (esc *EntitySkillCreate) SetUpdatedAt(t time.Time) *EntitySkillCreate {
	esc.mutation.SetUpdatedAt(t)
	return esc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esc *EntitySkillCreate) SetNillableUpdatedAt(t *time.Time) *EntitySkillCreate {
	if t != nil {
		esc.SetUpdatedAt(*t)
	}
	return esc
}

// SetDeletedAt sets the "deleted_at" field.
func (esc *EntitySkillCreate) SetDeletedAt(t time.Time) *EntitySkillCreate {
	esc.mutation.SetDeletedAt(t)
	return esc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esc *EntitySkillCreate) SetNillableDeletedAt(t *time.Time) *EntitySkillCreate {
	if t != nil {
		esc.SetDeletedAt(*t)
	}
	return esc
}

// SetEntityType sets the "entity_type" field.
func (esc *EntitySkillCreate) SetEntityType(et entityskill.EntityType) *EntitySkillCreate {
	esc.mutation.SetEntityType(et)
	return esc
}

// SetEntityID sets the "entity_id" field.
func (esc *EntitySkillCreate) SetEntityID(u uuid.UUID) *EntitySkillCreate {
	esc.mutation.SetEntityID(u)
	return esc
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (esc *EntitySkillCreate) SetNillableEntityID(u *uuid.UUID) *EntitySkillCreate {
	if u != nil {
		esc.SetEntityID(*u)
	}
	return esc
}

// SetSkillID sets the "skill_id" field.
func (esc *EntitySkillCreate) SetSkillID(u uuid.UUID) *EntitySkillCreate {
	esc.mutation.SetSkillID(u)
	return esc
}

// SetNillableSkillID sets the "skill_id" field if the given value is not nil.
func (esc *EntitySkillCreate) SetNillableSkillID(u *uuid.UUID) *EntitySkillCreate {
	if u != nil {
		esc.SetSkillID(*u)
	}
	return esc
}

// SetOrderID sets the "order_id" field.
func (esc *EntitySkillCreate) SetOrderID(i int) *EntitySkillCreate {
	esc.mutation.SetOrderID(i)
	return esc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (esc *EntitySkillCreate) SetNillableOrderID(i *int) *EntitySkillCreate {
	if i != nil {
		esc.SetOrderID(*i)
	}
	return esc
}

// SetID sets the "id" field.
func (esc *EntitySkillCreate) SetID(u uuid.UUID) *EntitySkillCreate {
	esc.mutation.SetID(u)
	return esc
}

// SetSkillEdgeID sets the "skill_edge" edge to the Skill entity by ID.
func (esc *EntitySkillCreate) SetSkillEdgeID(id uuid.UUID) *EntitySkillCreate {
	esc.mutation.SetSkillEdgeID(id)
	return esc
}

// SetNillableSkillEdgeID sets the "skill_edge" edge to the Skill entity by ID if the given value is not nil.
func (esc *EntitySkillCreate) SetNillableSkillEdgeID(id *uuid.UUID) *EntitySkillCreate {
	if id != nil {
		esc = esc.SetSkillEdgeID(*id)
	}
	return esc
}

// SetSkillEdge sets the "skill_edge" edge to the Skill entity.
func (esc *EntitySkillCreate) SetSkillEdge(s *Skill) *EntitySkillCreate {
	return esc.SetSkillEdgeID(s.ID)
}

// SetHiringJobEdgeID sets the "hiring_job_edge" edge to the HiringJob entity by ID.
func (esc *EntitySkillCreate) SetHiringJobEdgeID(id uuid.UUID) *EntitySkillCreate {
	esc.mutation.SetHiringJobEdgeID(id)
	return esc
}

// SetNillableHiringJobEdgeID sets the "hiring_job_edge" edge to the HiringJob entity by ID if the given value is not nil.
func (esc *EntitySkillCreate) SetNillableHiringJobEdgeID(id *uuid.UUID) *EntitySkillCreate {
	if id != nil {
		esc = esc.SetHiringJobEdgeID(*id)
	}
	return esc
}

// SetHiringJobEdge sets the "hiring_job_edge" edge to the HiringJob entity.
func (esc *EntitySkillCreate) SetHiringJobEdge(h *HiringJob) *EntitySkillCreate {
	return esc.SetHiringJobEdgeID(h.ID)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (esc *EntitySkillCreate) SetCandidateEdgeID(id uuid.UUID) *EntitySkillCreate {
	esc.mutation.SetCandidateEdgeID(id)
	return esc
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (esc *EntitySkillCreate) SetNillableCandidateEdgeID(id *uuid.UUID) *EntitySkillCreate {
	if id != nil {
		esc = esc.SetCandidateEdgeID(*id)
	}
	return esc
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (esc *EntitySkillCreate) SetCandidateEdge(c *Candidate) *EntitySkillCreate {
	return esc.SetCandidateEdgeID(c.ID)
}

// Mutation returns the EntitySkillMutation object of the builder.
func (esc *EntitySkillCreate) Mutation() *EntitySkillMutation {
	return esc.mutation
}

// Save creates the EntitySkill in the database.
func (esc *EntitySkillCreate) Save(ctx context.Context) (*EntitySkill, error) {
	var (
		err  error
		node *EntitySkill
	)
	esc.defaults()
	if len(esc.hooks) == 0 {
		if err = esc.check(); err != nil {
			return nil, err
		}
		node, err = esc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntitySkillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esc.check(); err != nil {
				return nil, err
			}
			esc.mutation = mutation
			if node, err = esc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(esc.hooks) - 1; i >= 0; i-- {
			if esc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, esc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EntitySkill)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EntitySkillMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (esc *EntitySkillCreate) SaveX(ctx context.Context) *EntitySkill {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *EntitySkillCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *EntitySkillCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *EntitySkillCreate) defaults() {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		v := entityskill.DefaultCreatedAt()
		esc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *EntitySkillCreate) check() error {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EntitySkill.created_at"`)}
	}
	if _, ok := esc.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "EntitySkill.entity_type"`)}
	}
	if v, ok := esc.mutation.EntityType(); ok {
		if err := entityskill.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "EntitySkill.entity_type": %w`, err)}
		}
	}
	return nil
}

func (esc *EntitySkillCreate) sqlSave(ctx context.Context) (*EntitySkill, error) {
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (esc *EntitySkillCreate) createSpec() (*EntitySkill, *sqlgraph.CreateSpec) {
	var (
		_node = &EntitySkill{config: esc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entityskill.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entityskill.FieldID,
			},
		}
	)
	if id, ok := esc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := esc.mutation.CreatedAt(); ok {
		_spec.SetField(entityskill.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := esc.mutation.UpdatedAt(); ok {
		_spec.SetField(entityskill.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := esc.mutation.DeletedAt(); ok {
		_spec.SetField(entityskill.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := esc.mutation.EntityType(); ok {
		_spec.SetField(entityskill.FieldEntityType, field.TypeEnum, value)
		_node.EntityType = value
	}
	if value, ok := esc.mutation.OrderID(); ok {
		_spec.SetField(entityskill.FieldOrderID, field.TypeInt, value)
		_node.OrderID = value
	}
	if nodes := esc.mutation.SkillEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entityskill.SkillEdgeTable,
			Columns: []string{entityskill.SkillEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SkillID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esc.mutation.HiringJobEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entityskill.HiringJobEdgeTable,
			Columns: []string{entityskill.HiringJobEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esc.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entityskill.CandidateEdgeTable,
			Columns: []string{entityskill.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntitySkillCreateBulk is the builder for creating many EntitySkill entities in bulk.
type EntitySkillCreateBulk struct {
	config
	builders []*EntitySkillCreate
}

// Save creates the EntitySkill entities in the database.
func (escb *EntitySkillCreateBulk) Save(ctx context.Context) ([]*EntitySkill, error) {
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*EntitySkill, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntitySkillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *EntitySkillCreateBulk) SaveX(ctx context.Context) []*EntitySkill {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *EntitySkillCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *EntitySkillCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}
