// Code generated by ent, DO NOT EDIT.

package emailtemplate

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the emailtemplate type in the database.
	Label = "email_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldSendTo holds the string denoting the send_to field in the database.
	FieldSendTo = "send_to"
	// FieldCc holds the string denoting the cc field in the database.
	FieldCc = "cc"
	// FieldBcc holds the string denoting the bcc field in the database.
	FieldBcc = "bcc"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeRoleEdges holds the string denoting the role_edges edge name in mutations.
	EdgeRoleEdges = "role_edges"
	// EdgeRoleEmailTemplates holds the string denoting the role_email_templates edge name in mutations.
	EdgeRoleEmailTemplates = "role_email_templates"
	// Table holds the table name of the emailtemplate in the database.
	Table = "email_templates"
	// RoleEdgesTable is the table that holds the role_edges relation/edge. The primary key declared below.
	RoleEdgesTable = "email_role_attributes"
	// RoleEdgesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleEdgesInverseTable = "roles"
	// RoleEmailTemplatesTable is the table that holds the role_email_templates relation/edge.
	RoleEmailTemplatesTable = "email_role_attributes"
	// RoleEmailTemplatesInverseTable is the table name for the EmailRoleAttribute entity.
	// It exists in this package in order to avoid circular dependency with the "emailroleattribute" package.
	RoleEmailTemplatesInverseTable = "email_role_attributes"
	// RoleEmailTemplatesColumn is the table column denoting the role_email_templates relation/edge.
	RoleEmailTemplatesColumn = "email_template_id"
)

// Columns holds all SQL columns for emailtemplate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEvent,
	FieldSendTo,
	FieldCc,
	FieldBcc,
	FieldSubject,
	FieldContent,
	FieldSignature,
	FieldStatus,
}

var (
	// RoleEdgesPrimaryKey and RoleEdgesColumn2 are the table columns denoting the
	// primary key for the role_edges relation (M2M).
	RoleEdgesPrimaryKey = []string{"role_id", "email_template_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	SubjectValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
)

// Event defines the type for the "event" enum field.
type Event string

// Event values.
const (
	EventCandidateAppliedToKiv           Event = "candidate_applied_to_kiv"
	EventCandidateInterviewingToKiv      Event = "candidate_interviewing_to_kiv"
	EventCandidateInterviewingToOffering Event = "candidate_interviewing_to_offering"
	EventCreatedCandidate                Event = "created_candidate"
	EventUpdatingInterview               Event = "updating_interview"
	EventCancelInterview                 Event = "cancel_interview"
)

func (e Event) String() string {
	return string(e)
}

// EventValidator is a validator for the "event" field enum values. It is called by the builders before save.
func EventValidator(e Event) error {
	switch e {
	case EventCandidateAppliedToKiv, EventCandidateInterviewingToKiv, EventCandidateInterviewingToOffering, EventCreatedCandidate, EventUpdatingInterview, EventCancelInterview:
		return nil
	default:
		return fmt.Errorf("emailtemplate: invalid enum value for event field: %q", e)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive   Status = "active"
	StatusInactive Status = "inactive"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusInactive:
		return nil
	default:
		return fmt.Errorf("emailtemplate: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Event) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Event) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Event(str)
	if err := EventValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Event", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
