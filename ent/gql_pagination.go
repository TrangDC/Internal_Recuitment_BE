// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"
	"trec/ent/audittrail"
	"trec/ent/candidate"
	"trec/ent/hiringjob"
	"trec/ent/team"
	"trec/ent/teammanager"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    uuid.UUID `msgpack:"i"`
	Value Value     `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AuditTrailEdge is the edge representation of AuditTrail.
type AuditTrailEdge struct {
	Node   *AuditTrail `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AuditTrailConnection is the connection containing edges to AuditTrail.
type AuditTrailConnection struct {
	Edges      []*AuditTrailEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *AuditTrailConnection) build(nodes []*AuditTrail, pager *audittrailPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AuditTrail
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AuditTrail {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AuditTrail {
			return nodes[i]
		}
	}
	c.Edges = make([]*AuditTrailEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AuditTrailEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AuditTrailPaginateOption enables pagination customization.
type AuditTrailPaginateOption func(*audittrailPager) error

// WithAuditTrailOrder configures pagination ordering.
func WithAuditTrailOrder(order *AuditTrailOrder) AuditTrailPaginateOption {
	if order == nil {
		order = DefaultAuditTrailOrder
	}
	o := *order
	return func(pager *audittrailPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAuditTrailOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAuditTrailFilter configures pagination filter.
func WithAuditTrailFilter(filter func(*AuditTrailQuery) (*AuditTrailQuery, error)) AuditTrailPaginateOption {
	return func(pager *audittrailPager) error {
		if filter == nil {
			return errors.New("AuditTrailQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type audittrailPager struct {
	order  *AuditTrailOrder
	filter func(*AuditTrailQuery) (*AuditTrailQuery, error)
}

func newAuditTrailPager(opts []AuditTrailPaginateOption) (*audittrailPager, error) {
	pager := &audittrailPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAuditTrailOrder
	}
	return pager, nil
}

func (p *audittrailPager) applyFilter(query *AuditTrailQuery) (*AuditTrailQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *audittrailPager) toCursor(at *AuditTrail) Cursor {
	return p.order.Field.toCursor(at)
}

func (p *audittrailPager) applyCursors(query *AuditTrailQuery, after, before *Cursor) *AuditTrailQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAuditTrailOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *audittrailPager) applyOrder(query *AuditTrailQuery, reverse bool) *AuditTrailQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAuditTrailOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAuditTrailOrder.Field.field))
	}
	return query
}

func (p *audittrailPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAuditTrailOrder.Field {
			b.Comma().Ident(DefaultAuditTrailOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AuditTrail.
func (at *AuditTrailQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AuditTrailPaginateOption,
) (*AuditTrailConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAuditTrailPager(opts)
	if err != nil {
		return nil, err
	}
	if at, err = pager.applyFilter(at); err != nil {
		return nil, err
	}
	conn := &AuditTrailConnection{Edges: []*AuditTrailEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = at.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	at = pager.applyCursors(at, after, before)
	at = pager.applyOrder(at, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		at.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := at.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := at.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AuditTrailOrderFieldCreatedAt orders AuditTrail by created_at.
	AuditTrailOrderFieldCreatedAt = &AuditTrailOrderField{
		field: audittrail.FieldCreatedAt,
		toCursor: func(at *AuditTrail) Cursor {
			return Cursor{
				ID:    at.ID,
				Value: at.CreatedAt,
			}
		},
	}
	// AuditTrailOrderFieldUpdatedAt orders AuditTrail by updated_at.
	AuditTrailOrderFieldUpdatedAt = &AuditTrailOrderField{
		field: audittrail.FieldUpdatedAt,
		toCursor: func(at *AuditTrail) Cursor {
			return Cursor{
				ID:    at.ID,
				Value: at.UpdatedAt,
			}
		},
	}
	// AuditTrailOrderFieldDeletedAt orders AuditTrail by deleted_at.
	AuditTrailOrderFieldDeletedAt = &AuditTrailOrderField{
		field: audittrail.FieldDeletedAt,
		toCursor: func(at *AuditTrail) Cursor {
			return Cursor{
				ID:    at.ID,
				Value: at.DeletedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AuditTrailOrderField) String() string {
	var str string
	switch f.field {
	case audittrail.FieldCreatedAt:
		str = "CREATED_AT"
	case audittrail.FieldUpdatedAt:
		str = "UPDATED_AT"
	case audittrail.FieldDeletedAt:
		str = "DELETED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AuditTrailOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AuditTrailOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AuditTrailOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AuditTrailOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AuditTrailOrderFieldUpdatedAt
	case "DELETED_AT":
		*f = *AuditTrailOrderFieldDeletedAt
	default:
		return fmt.Errorf("%s is not a valid AuditTrailOrderField", str)
	}
	return nil
}

// AuditTrailOrderField defines the ordering field of AuditTrail.
type AuditTrailOrderField struct {
	field    string
	toCursor func(*AuditTrail) Cursor
}

// AuditTrailOrder defines the ordering of AuditTrail.
type AuditTrailOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AuditTrailOrderField `json:"field"`
}

// DefaultAuditTrailOrder is the default ordering of AuditTrail.
var DefaultAuditTrailOrder = &AuditTrailOrder{
	Direction: OrderDirectionAsc,
	Field: &AuditTrailOrderField{
		field: audittrail.FieldID,
		toCursor: func(at *AuditTrail) Cursor {
			return Cursor{ID: at.ID}
		},
	},
}

// ToEdge converts AuditTrail into AuditTrailEdge.
func (at *AuditTrail) ToEdge(order *AuditTrailOrder) *AuditTrailEdge {
	if order == nil {
		order = DefaultAuditTrailOrder
	}
	return &AuditTrailEdge{
		Node:   at,
		Cursor: order.Field.toCursor(at),
	}
}

// CandidateEdge is the edge representation of Candidate.
type CandidateEdge struct {
	Node   *Candidate `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// CandidateConnection is the connection containing edges to Candidate.
type CandidateConnection struct {
	Edges      []*CandidateEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *CandidateConnection) build(nodes []*Candidate, pager *candidatePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Candidate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Candidate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Candidate {
			return nodes[i]
		}
	}
	c.Edges = make([]*CandidateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CandidateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CandidatePaginateOption enables pagination customization.
type CandidatePaginateOption func(*candidatePager) error

// WithCandidateOrder configures pagination ordering.
func WithCandidateOrder(order *CandidateOrder) CandidatePaginateOption {
	if order == nil {
		order = DefaultCandidateOrder
	}
	o := *order
	return func(pager *candidatePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCandidateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCandidateFilter configures pagination filter.
func WithCandidateFilter(filter func(*CandidateQuery) (*CandidateQuery, error)) CandidatePaginateOption {
	return func(pager *candidatePager) error {
		if filter == nil {
			return errors.New("CandidateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type candidatePager struct {
	order  *CandidateOrder
	filter func(*CandidateQuery) (*CandidateQuery, error)
}

func newCandidatePager(opts []CandidatePaginateOption) (*candidatePager, error) {
	pager := &candidatePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCandidateOrder
	}
	return pager, nil
}

func (p *candidatePager) applyFilter(query *CandidateQuery) (*CandidateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *candidatePager) toCursor(c *Candidate) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *candidatePager) applyCursors(query *CandidateQuery, after, before *Cursor) *CandidateQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCandidateOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *candidatePager) applyOrder(query *CandidateQuery, reverse bool) *CandidateQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCandidateOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCandidateOrder.Field.field))
	}
	return query
}

func (p *candidatePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCandidateOrder.Field {
			b.Comma().Ident(DefaultCandidateOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Candidate.
func (c *CandidateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CandidatePaginateOption,
) (*CandidateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCandidatePager(opts)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CandidateConnection{Edges: []*CandidateEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CandidateOrderFieldCreatedAt orders Candidate by created_at.
	CandidateOrderFieldCreatedAt = &CandidateOrderField{
		field: candidate.FieldCreatedAt,
		toCursor: func(c *Candidate) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// CandidateOrderFieldUpdatedAt orders Candidate by updated_at.
	CandidateOrderFieldUpdatedAt = &CandidateOrderField{
		field: candidate.FieldUpdatedAt,
		toCursor: func(c *Candidate) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
	// CandidateOrderFieldDeletedAt orders Candidate by deleted_at.
	CandidateOrderFieldDeletedAt = &CandidateOrderField{
		field: candidate.FieldDeletedAt,
		toCursor: func(c *Candidate) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.DeletedAt,
			}
		},
	}
	// CandidateOrderFieldName orders Candidate by name.
	CandidateOrderFieldName = &CandidateOrderField{
		field: candidate.FieldName,
		toCursor: func(c *Candidate) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CandidateOrderField) String() string {
	var str string
	switch f.field {
	case candidate.FieldCreatedAt:
		str = "CREATED_AT"
	case candidate.FieldUpdatedAt:
		str = "UPDATED_AT"
	case candidate.FieldDeletedAt:
		str = "DELETED_AT"
	case candidate.FieldName:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CandidateOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CandidateOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CandidateOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *CandidateOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *CandidateOrderFieldUpdatedAt
	case "DELETED_AT":
		*f = *CandidateOrderFieldDeletedAt
	case "NAME":
		*f = *CandidateOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid CandidateOrderField", str)
	}
	return nil
}

// CandidateOrderField defines the ordering field of Candidate.
type CandidateOrderField struct {
	field    string
	toCursor func(*Candidate) Cursor
}

// CandidateOrder defines the ordering of Candidate.
type CandidateOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *CandidateOrderField `json:"field"`
}

// DefaultCandidateOrder is the default ordering of Candidate.
var DefaultCandidateOrder = &CandidateOrder{
	Direction: OrderDirectionAsc,
	Field: &CandidateOrderField{
		field: candidate.FieldID,
		toCursor: func(c *Candidate) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Candidate into CandidateEdge.
func (c *Candidate) ToEdge(order *CandidateOrder) *CandidateEdge {
	if order == nil {
		order = DefaultCandidateOrder
	}
	return &CandidateEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// HiringJobEdge is the edge representation of HiringJob.
type HiringJobEdge struct {
	Node   *HiringJob `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// HiringJobConnection is the connection containing edges to HiringJob.
type HiringJobConnection struct {
	Edges      []*HiringJobEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *HiringJobConnection) build(nodes []*HiringJob, pager *hiringjobPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *HiringJob
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *HiringJob {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *HiringJob {
			return nodes[i]
		}
	}
	c.Edges = make([]*HiringJobEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &HiringJobEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// HiringJobPaginateOption enables pagination customization.
type HiringJobPaginateOption func(*hiringjobPager) error

// WithHiringJobOrder configures pagination ordering.
func WithHiringJobOrder(order *HiringJobOrder) HiringJobPaginateOption {
	if order == nil {
		order = DefaultHiringJobOrder
	}
	o := *order
	return func(pager *hiringjobPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHiringJobOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHiringJobFilter configures pagination filter.
func WithHiringJobFilter(filter func(*HiringJobQuery) (*HiringJobQuery, error)) HiringJobPaginateOption {
	return func(pager *hiringjobPager) error {
		if filter == nil {
			return errors.New("HiringJobQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type hiringjobPager struct {
	order  *HiringJobOrder
	filter func(*HiringJobQuery) (*HiringJobQuery, error)
}

func newHiringJobPager(opts []HiringJobPaginateOption) (*hiringjobPager, error) {
	pager := &hiringjobPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHiringJobOrder
	}
	return pager, nil
}

func (p *hiringjobPager) applyFilter(query *HiringJobQuery) (*HiringJobQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *hiringjobPager) toCursor(hj *HiringJob) Cursor {
	return p.order.Field.toCursor(hj)
}

func (p *hiringjobPager) applyCursors(query *HiringJobQuery, after, before *Cursor) *HiringJobQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultHiringJobOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *hiringjobPager) applyOrder(query *HiringJobQuery, reverse bool) *HiringJobQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultHiringJobOrder.Field {
		query = query.Order(direction.orderFunc(DefaultHiringJobOrder.Field.field))
	}
	return query
}

func (p *hiringjobPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultHiringJobOrder.Field {
			b.Comma().Ident(DefaultHiringJobOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to HiringJob.
func (hj *HiringJobQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HiringJobPaginateOption,
) (*HiringJobConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHiringJobPager(opts)
	if err != nil {
		return nil, err
	}
	if hj, err = pager.applyFilter(hj); err != nil {
		return nil, err
	}
	conn := &HiringJobConnection{Edges: []*HiringJobEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = hj.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	hj = pager.applyCursors(hj, after, before)
	hj = pager.applyOrder(hj, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		hj.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := hj.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := hj.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// HiringJobOrderFieldCreatedAt orders HiringJob by created_at.
	HiringJobOrderFieldCreatedAt = &HiringJobOrderField{
		field: hiringjob.FieldCreatedAt,
		toCursor: func(hj *HiringJob) Cursor {
			return Cursor{
				ID:    hj.ID,
				Value: hj.CreatedAt,
			}
		},
	}
	// HiringJobOrderFieldUpdatedAt orders HiringJob by updated_at.
	HiringJobOrderFieldUpdatedAt = &HiringJobOrderField{
		field: hiringjob.FieldUpdatedAt,
		toCursor: func(hj *HiringJob) Cursor {
			return Cursor{
				ID:    hj.ID,
				Value: hj.UpdatedAt,
			}
		},
	}
	// HiringJobOrderFieldDeletedAt orders HiringJob by deleted_at.
	HiringJobOrderFieldDeletedAt = &HiringJobOrderField{
		field: hiringjob.FieldDeletedAt,
		toCursor: func(hj *HiringJob) Cursor {
			return Cursor{
				ID:    hj.ID,
				Value: hj.DeletedAt,
			}
		},
	}
	// HiringJobOrderFieldSlug orders HiringJob by slug.
	HiringJobOrderFieldSlug = &HiringJobOrderField{
		field: hiringjob.FieldSlug,
		toCursor: func(hj *HiringJob) Cursor {
			return Cursor{
				ID:    hj.ID,
				Value: hj.Slug,
			}
		},
	}
	// HiringJobOrderFieldName orders HiringJob by name.
	HiringJobOrderFieldName = &HiringJobOrderField{
		field: hiringjob.FieldName,
		toCursor: func(hj *HiringJob) Cursor {
			return Cursor{
				ID:    hj.ID,
				Value: hj.Name,
			}
		},
	}
	// HiringJobOrderFieldAmount orders HiringJob by amount.
	HiringJobOrderFieldAmount = &HiringJobOrderField{
		field: hiringjob.FieldAmount,
		toCursor: func(hj *HiringJob) Cursor {
			return Cursor{
				ID:    hj.ID,
				Value: hj.Amount,
			}
		},
	}
	// HiringJobOrderFieldSalaryFrom orders HiringJob by salary_from.
	HiringJobOrderFieldSalaryFrom = &HiringJobOrderField{
		field: hiringjob.FieldSalaryFrom,
		toCursor: func(hj *HiringJob) Cursor {
			return Cursor{
				ID:    hj.ID,
				Value: hj.SalaryFrom,
			}
		},
	}
	// HiringJobOrderFieldSalaryTo orders HiringJob by salary_to.
	HiringJobOrderFieldSalaryTo = &HiringJobOrderField{
		field: hiringjob.FieldSalaryTo,
		toCursor: func(hj *HiringJob) Cursor {
			return Cursor{
				ID:    hj.ID,
				Value: hj.SalaryTo,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f HiringJobOrderField) String() string {
	var str string
	switch f.field {
	case hiringjob.FieldCreatedAt:
		str = "CREATED_AT"
	case hiringjob.FieldUpdatedAt:
		str = "UPDATED_AT"
	case hiringjob.FieldDeletedAt:
		str = "DELETED_AT"
	case hiringjob.FieldSlug:
		str = "SLUG"
	case hiringjob.FieldName:
		str = "NAME"
	case hiringjob.FieldAmount:
		str = "AMOUNT"
	case hiringjob.FieldSalaryFrom:
		str = "SALARY_FROM"
	case hiringjob.FieldSalaryTo:
		str = "SALARY_TO"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f HiringJobOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *HiringJobOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("HiringJobOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *HiringJobOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *HiringJobOrderFieldUpdatedAt
	case "DELETED_AT":
		*f = *HiringJobOrderFieldDeletedAt
	case "SLUG":
		*f = *HiringJobOrderFieldSlug
	case "NAME":
		*f = *HiringJobOrderFieldName
	case "AMOUNT":
		*f = *HiringJobOrderFieldAmount
	case "SALARY_FROM":
		*f = *HiringJobOrderFieldSalaryFrom
	case "SALARY_TO":
		*f = *HiringJobOrderFieldSalaryTo
	default:
		return fmt.Errorf("%s is not a valid HiringJobOrderField", str)
	}
	return nil
}

// HiringJobOrderField defines the ordering field of HiringJob.
type HiringJobOrderField struct {
	field    string
	toCursor func(*HiringJob) Cursor
}

// HiringJobOrder defines the ordering of HiringJob.
type HiringJobOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *HiringJobOrderField `json:"field"`
}

// DefaultHiringJobOrder is the default ordering of HiringJob.
var DefaultHiringJobOrder = &HiringJobOrder{
	Direction: OrderDirectionAsc,
	Field: &HiringJobOrderField{
		field: hiringjob.FieldID,
		toCursor: func(hj *HiringJob) Cursor {
			return Cursor{ID: hj.ID}
		},
	},
}

// ToEdge converts HiringJob into HiringJobEdge.
func (hj *HiringJob) ToEdge(order *HiringJobOrder) *HiringJobEdge {
	if order == nil {
		order = DefaultHiringJobOrder
	}
	return &HiringJobEdge{
		Node:   hj,
		Cursor: order.Field.toCursor(hj),
	}
}

// TeamEdge is the edge representation of Team.
type TeamEdge struct {
	Node   *Team  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TeamConnection is the connection containing edges to Team.
type TeamConnection struct {
	Edges      []*TeamEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *TeamConnection) build(nodes []*Team, pager *teamPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Team
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Team {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Team {
			return nodes[i]
		}
	}
	c.Edges = make([]*TeamEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TeamEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TeamPaginateOption enables pagination customization.
type TeamPaginateOption func(*teamPager) error

// WithTeamOrder configures pagination ordering.
func WithTeamOrder(order *TeamOrder) TeamPaginateOption {
	if order == nil {
		order = DefaultTeamOrder
	}
	o := *order
	return func(pager *teamPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTeamOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTeamFilter configures pagination filter.
func WithTeamFilter(filter func(*TeamQuery) (*TeamQuery, error)) TeamPaginateOption {
	return func(pager *teamPager) error {
		if filter == nil {
			return errors.New("TeamQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type teamPager struct {
	order  *TeamOrder
	filter func(*TeamQuery) (*TeamQuery, error)
}

func newTeamPager(opts []TeamPaginateOption) (*teamPager, error) {
	pager := &teamPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTeamOrder
	}
	return pager, nil
}

func (p *teamPager) applyFilter(query *TeamQuery) (*TeamQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *teamPager) toCursor(t *Team) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *teamPager) applyCursors(query *TeamQuery, after, before *Cursor) *TeamQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTeamOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *teamPager) applyOrder(query *TeamQuery, reverse bool) *TeamQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTeamOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTeamOrder.Field.field))
	}
	return query
}

func (p *teamPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTeamOrder.Field {
			b.Comma().Ident(DefaultTeamOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Team.
func (t *TeamQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TeamPaginateOption,
) (*TeamConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTeamPager(opts)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TeamConnection{Edges: []*TeamEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = t.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TeamOrderFieldCreatedAt orders Team by created_at.
	TeamOrderFieldCreatedAt = &TeamOrderField{
		field: team.FieldCreatedAt,
		toCursor: func(t *Team) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CreatedAt,
			}
		},
	}
	// TeamOrderFieldUpdatedAt orders Team by updated_at.
	TeamOrderFieldUpdatedAt = &TeamOrderField{
		field: team.FieldUpdatedAt,
		toCursor: func(t *Team) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.UpdatedAt,
			}
		},
	}
	// TeamOrderFieldDeletedAt orders Team by deleted_at.
	TeamOrderFieldDeletedAt = &TeamOrderField{
		field: team.FieldDeletedAt,
		toCursor: func(t *Team) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.DeletedAt,
			}
		},
	}
	// TeamOrderFieldSlug orders Team by slug.
	TeamOrderFieldSlug = &TeamOrderField{
		field: team.FieldSlug,
		toCursor: func(t *Team) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Slug,
			}
		},
	}
	// TeamOrderFieldName orders Team by name.
	TeamOrderFieldName = &TeamOrderField{
		field: team.FieldName,
		toCursor: func(t *Team) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TeamOrderField) String() string {
	var str string
	switch f.field {
	case team.FieldCreatedAt:
		str = "CREATED_AT"
	case team.FieldUpdatedAt:
		str = "UPDATED_AT"
	case team.FieldDeletedAt:
		str = "DELETED_AT"
	case team.FieldSlug:
		str = "SLUG"
	case team.FieldName:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TeamOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TeamOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TeamOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TeamOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *TeamOrderFieldUpdatedAt
	case "DELETED_AT":
		*f = *TeamOrderFieldDeletedAt
	case "SLUG":
		*f = *TeamOrderFieldSlug
	case "NAME":
		*f = *TeamOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid TeamOrderField", str)
	}
	return nil
}

// TeamOrderField defines the ordering field of Team.
type TeamOrderField struct {
	field    string
	toCursor func(*Team) Cursor
}

// TeamOrder defines the ordering of Team.
type TeamOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *TeamOrderField `json:"field"`
}

// DefaultTeamOrder is the default ordering of Team.
var DefaultTeamOrder = &TeamOrder{
	Direction: OrderDirectionAsc,
	Field: &TeamOrderField{
		field: team.FieldID,
		toCursor: func(t *Team) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Team into TeamEdge.
func (t *Team) ToEdge(order *TeamOrder) *TeamEdge {
	if order == nil {
		order = DefaultTeamOrder
	}
	return &TeamEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TeamManagerEdge is the edge representation of TeamManager.
type TeamManagerEdge struct {
	Node   *TeamManager `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// TeamManagerConnection is the connection containing edges to TeamManager.
type TeamManagerConnection struct {
	Edges      []*TeamManagerEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *TeamManagerConnection) build(nodes []*TeamManager, pager *teammanagerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TeamManager
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TeamManager {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TeamManager {
			return nodes[i]
		}
	}
	c.Edges = make([]*TeamManagerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TeamManagerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TeamManagerPaginateOption enables pagination customization.
type TeamManagerPaginateOption func(*teammanagerPager) error

// WithTeamManagerOrder configures pagination ordering.
func WithTeamManagerOrder(order *TeamManagerOrder) TeamManagerPaginateOption {
	if order == nil {
		order = DefaultTeamManagerOrder
	}
	o := *order
	return func(pager *teammanagerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTeamManagerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTeamManagerFilter configures pagination filter.
func WithTeamManagerFilter(filter func(*TeamManagerQuery) (*TeamManagerQuery, error)) TeamManagerPaginateOption {
	return func(pager *teammanagerPager) error {
		if filter == nil {
			return errors.New("TeamManagerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type teammanagerPager struct {
	order  *TeamManagerOrder
	filter func(*TeamManagerQuery) (*TeamManagerQuery, error)
}

func newTeamManagerPager(opts []TeamManagerPaginateOption) (*teammanagerPager, error) {
	pager := &teammanagerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTeamManagerOrder
	}
	return pager, nil
}

func (p *teammanagerPager) applyFilter(query *TeamManagerQuery) (*TeamManagerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *teammanagerPager) toCursor(tm *TeamManager) Cursor {
	return p.order.Field.toCursor(tm)
}

func (p *teammanagerPager) applyCursors(query *TeamManagerQuery, after, before *Cursor) *TeamManagerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTeamManagerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *teammanagerPager) applyOrder(query *TeamManagerQuery, reverse bool) *TeamManagerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTeamManagerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTeamManagerOrder.Field.field))
	}
	return query
}

func (p *teammanagerPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTeamManagerOrder.Field {
			b.Comma().Ident(DefaultTeamManagerOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TeamManager.
func (tm *TeamManagerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TeamManagerPaginateOption,
) (*TeamManagerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTeamManagerPager(opts)
	if err != nil {
		return nil, err
	}
	if tm, err = pager.applyFilter(tm); err != nil {
		return nil, err
	}
	conn := &TeamManagerConnection{Edges: []*TeamManagerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = tm.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	tm = pager.applyCursors(tm, after, before)
	tm = pager.applyOrder(tm, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		tm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tm.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := tm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TeamManagerOrderFieldCreatedAt orders TeamManager by created_at.
	TeamManagerOrderFieldCreatedAt = &TeamManagerOrderField{
		field: teammanager.FieldCreatedAt,
		toCursor: func(tm *TeamManager) Cursor {
			return Cursor{
				ID:    tm.ID,
				Value: tm.CreatedAt,
			}
		},
	}
	// TeamManagerOrderFieldUpdatedAt orders TeamManager by updated_at.
	TeamManagerOrderFieldUpdatedAt = &TeamManagerOrderField{
		field: teammanager.FieldUpdatedAt,
		toCursor: func(tm *TeamManager) Cursor {
			return Cursor{
				ID:    tm.ID,
				Value: tm.UpdatedAt,
			}
		},
	}
	// TeamManagerOrderFieldDeletedAt orders TeamManager by deleted_at.
	TeamManagerOrderFieldDeletedAt = &TeamManagerOrderField{
		field: teammanager.FieldDeletedAt,
		toCursor: func(tm *TeamManager) Cursor {
			return Cursor{
				ID:    tm.ID,
				Value: tm.DeletedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TeamManagerOrderField) String() string {
	var str string
	switch f.field {
	case teammanager.FieldCreatedAt:
		str = "CREATED_AT"
	case teammanager.FieldUpdatedAt:
		str = "UPDATED_AT"
	case teammanager.FieldDeletedAt:
		str = "DELETED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TeamManagerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TeamManagerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TeamManagerOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TeamManagerOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *TeamManagerOrderFieldUpdatedAt
	case "DELETED_AT":
		*f = *TeamManagerOrderFieldDeletedAt
	default:
		return fmt.Errorf("%s is not a valid TeamManagerOrderField", str)
	}
	return nil
}

// TeamManagerOrderField defines the ordering field of TeamManager.
type TeamManagerOrderField struct {
	field    string
	toCursor func(*TeamManager) Cursor
}

// TeamManagerOrder defines the ordering of TeamManager.
type TeamManagerOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *TeamManagerOrderField `json:"field"`
}

// DefaultTeamManagerOrder is the default ordering of TeamManager.
var DefaultTeamManagerOrder = &TeamManagerOrder{
	Direction: OrderDirectionAsc,
	Field: &TeamManagerOrderField{
		field: teammanager.FieldID,
		toCursor: func(tm *TeamManager) Cursor {
			return Cursor{ID: tm.ID}
		},
	},
}

// ToEdge converts TeamManager into TeamManagerEdge.
func (tm *TeamManager) ToEdge(order *TeamManagerOrder) *TeamManagerEdge {
	if order == nil {
		order = DefaultTeamManagerOrder
	}
	return &TeamManagerEdge{
		Node:   tm,
		Cursor: order.Field.toCursor(tm),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

func (p *userPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		field: user.FieldCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		field: user.FieldUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
	// UserOrderFieldDeletedAt orders User by deleted_at.
	UserOrderFieldDeletedAt = &UserOrderField{
		field: user.FieldDeletedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.DeletedAt,
			}
		},
	}
	// UserOrderFieldName orders User by name.
	UserOrderFieldName = &UserOrderField{
		field: user.FieldName,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Name,
			}
		},
	}
	// UserOrderFieldWorkEmail orders User by work_email.
	UserOrderFieldWorkEmail = &UserOrderField{
		field: user.FieldWorkEmail,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.WorkEmail,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldCreatedAt:
		str = "CREATED_AT"
	case user.FieldUpdatedAt:
		str = "UPDATED_AT"
	case user.FieldDeletedAt:
		str = "DELETED_AT"
	case user.FieldName:
		str = "NAME"
	case user.FieldWorkEmail:
		str = "WORK_EMAIL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *UserOrderFieldUpdatedAt
	case "DELETED_AT":
		*f = *UserOrderFieldDeletedAt
	case "NAME":
		*f = *UserOrderFieldName
	case "WORK_EMAIL":
		*f = *UserOrderFieldWorkEmail
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
