// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package ent

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ApplicationReportFailReason struct {
	PoorProfessionalism      int `json:"poor_professionalism"`
	PoorFitAndEngagement     int `json:"poor_fit_and_engagement"`
	OverExpectations         int `json:"over_expectations"`
	OverQualification        int `json:"over_qualification"`
	LanguageDeficiency       int `json:"language_deficiency"`
	WeakTechnicalSkills      int `json:"weak_technical_skills"`
	PoorInterpersonalSkills  int `json:"poor_interpersonal_skills"`
	PoorProblemSolvingSkills int `json:"poor_problem_solving_skills"`
	PoorManagementSkills     int `json:"poor_management_skills"`
	CandidateWithdrawal      int `json:"candidate_withdrawal"`
	Others                   int `json:"others"`
}

type AttachmentInput struct {
	ID       string           `json:"id"`
	Folder   AttachmentFolder `json:"folder"`
	FileName string           `json:"fileName"`
	Action   AttachmentAction `json:"action"`
}

type AttachmentResponse struct {
	FileName string           `json:"fileName"`
	URL      string           `json:"url"`
	Action   AttachmentAction `json:"action"`
	ID       string           `json:"id"`
}

type AuditTrailFilter struct {
	RecordID   *string           `json:"recordId"`
	Module     *ProjectModule    `json:"module"`
	ActionType *AuditTrailAction `json:"actionType"`
	FromDate   *time.Time        `json:"fromDate"`
	ToDate     *time.Time        `json:"toDate"`
}

type AuditTrailFreeWord struct {
	RecordChange *string `json:"recordChange"`
}

type AuditTrailResponse struct {
	Data *AuditTrail `json:"data"`
}

type AuditTrailResponseGetAll struct {
	Edges      []*AuditTrailEdge `json:"edges"`
	Pagination *Pagination       `json:"pagination"`
}

type AuthenticationToken struct {
	AccessToken  string    `json:"accessToken"`
	RefreshToken string    `json:"refreshToken"`
	TokenType    string    `json:"tokenType"`
	ExpiresAt    time.Time `json:"expiresAt"`
	Email        string    `json:"email"`
}

type Base64Response struct {
	Data string `json:"data"`
}

type CandidateActivity struct {
	CandidateNotes        []*CandidateNote        `json:"candidate_notes"`
	CandidateHistoryCalls []*CandidateHistoryCall `json:"candidate_history_calls"`
	CandidateInterviews   []*CandidateInterview   `json:"candidate_interviews"`
	CandidateJobFeedbacks []*CandidateJobFeedback `json:"candidate_job_feedbacks"`
	OutgoingEmails        []*OutgoingEmail        `json:"outgoing_emails"`
	Total                 int                     `json:"total"`
}

type CandidateActivityFilter struct {
	CandidateID string     `json:"candidate_id"`
	FromDate    *time.Time `json:"from_date"`
	ToDate      *time.Time `json:"to_date"`
}

type CandidateActivityFreeWord struct {
	FreeWord *string `json:"free_word"`
}

type CandidateActivityOrder struct {
	Field     CandidateActivityOrderField `json:"field"`
	Direction OrderDirection              `json:"direction"`
}

type CandidateActivityResponse struct {
	Data *CandidateActivity `json:"data"`
}

type CandidateAwardInput struct {
	ID           string                `json:"id"`
	Name         string                `json:"name"`
	AchievedDate *time.Time            `json:"achieved_date"`
	Attachments  []*NewAttachmentInput `json:"attachments"`
	OrderID      int                   `json:"order_id"`
}

type CandidateCertificateInput struct {
	ID           string                `json:"id"`
	Name         string                `json:"name"`
	Score        string                `json:"score"`
	AchievedDate *time.Time            `json:"achieved_date"`
	Attachments  []*NewAttachmentInput `json:"attachments"`
	OrderID      int                   `json:"order_id"`
}

type CandidateConversionRateReport struct {
	ID              string `json:"id"`
	HiringTeamName  string `json:"hiring_team_name"`
	JobPositionName string `json:"job_position_name"`
	Applied         int    `json:"applied"`
	Interviewing    int    `json:"interviewing"`
	Offering        int    `json:"offering"`
	Hired           int    `json:"hired"`
}

type CandidateConversionRateReportEdge struct {
	Node   *CandidateConversionRateReport `json:"node"`
	Cursor Cursor                         `json:"cursor"`
}

type CandidateConversionRateReportResponse struct {
	Data []*ReportNumberByType `json:"data"`
}

type CandidateEducateInput struct {
	ID          string                `json:"id"`
	SchoolName  string                `json:"school_name"`
	Major       string                `json:"major"`
	Gpa         string                `json:"gpa"`
	StartDate   *time.Time            `json:"start_date"`
	EndDate     *time.Time            `json:"end_date"`
	Location    string                `json:"location"`
	Description string                `json:"description"`
	Attachments []*NewAttachmentInput `json:"attachments"`
	OrderID     int                   `json:"order_id"`
	IsCurrent   bool                  `json:"is_current"`
}

type CandidateExpInput struct {
	ID          string     `json:"id"`
	Position    string     `json:"position"`
	Company     string     `json:"company"`
	Location    string     `json:"location"`
	StartDate   *time.Time `json:"start_date"`
	EndDate     *time.Time `json:"end_date"`
	Description string     `json:"description"`
	OrderID     int        `json:"order_id"`
	IsCurrent   bool       `json:"is_current"`
}

type CandidateFilter struct {
	Name                *string                    `json:"name"`
	Email               *string                    `json:"email"`
	Phone               *string                    `json:"phone"`
	DobFromDate         *time.Time                 `json:"dob_from_date"`
	DobToDate           *time.Time                 `json:"dob_to_date"`
	Status              *CandidateStatusEnum       `json:"status"`
	FromDate            *time.Time                 `json:"from_date"`
	ToDate              *time.Time                 `json:"to_date"`
	IsBlackList         *bool                      `json:"is_black_list"`
	JobID               *string                    `json:"job_id"`
	IsAbleToInterview   *bool                      `json:"is_able_to_interview"`
	FailedReason        []CandidateJobFailedReason `json:"failed_reason"`
	ReferenceUID        []string                   `json:"reference_uid"`
	RecruitTimeFromDate *time.Time                 `json:"recruit_time_from_date"`
	RecruitTimeToDate   *time.Time                 `json:"recruit_time_to_date"`
	SkillTypeIds        []string                   `json:"skill_type_ids"`
	SkillIds            []string                   `json:"skill_ids"`
	ReferenceType       []CandidateReferenceType   `json:"reference_type"`
	Gender              []CandidateGenderEnum      `json:"gender"`
	IgnoreStatuses      []CandidateStatusEnum      `json:"ignore_statuses"`
}

type CandidateFreeWord struct {
	Name  *string `json:"name"`
	Email *string `json:"email"`
	Phone *string `json:"phone"`
}

type CandidateHistoryCallFilter struct {
	FromDate    *time.Time                    `json:"from_date"`
	ToDate      *time.Time                    `json:"to_date"`
	CandidateID *string                       `json:"candidate_id"`
	Type        *CandidateHistoryCallTypeEnum `json:"type"`
	StartTime   *time.Time                    `json:"start_time"`
	EndTime     *time.Time                    `json:"end_time"`
}

type CandidateHistoryCallFreeWord struct {
	Description *string `json:"description"`
	Name        *string `json:"name"`
}

type CandidateHistoryCallResponse struct {
	Data *CandidateHistoryCall `json:"data"`
}

type CandidateHistoryCallResponseGetAll struct {
	Edges      []*CandidateHistoryCallEdge `json:"edges"`
	Pagination *Pagination                 `json:"pagination"`
}

type CandidateInterviewCalendarFilter struct {
	InterviewDate     *time.Time `json:"interview_date"`
	StartFrom         *time.Time `json:"start_from"`
	EndAt             *time.Time `json:"end_at"`
	Interviewer       []string   `json:"interviewer"`
	FromDate          *time.Time `json:"from_date"`
	ToDate            *time.Time `json:"to_date"`
	HiringTeamID      *string    `json:"hiring_team_id"`
	HiringJobID       *string    `json:"hiring_job_id"`
	InterviewDateFrom *time.Time `json:"interview_date_from"`
	InterviewDateTo   *time.Time `json:"interview_date_to"`
}

type CandidateInterviewFilter struct {
	CandidateJobID *string    `json:"candidate_job_id"`
	CandidateID    *string    `json:"candidate_id"`
	InterviewDate  *time.Time `json:"interview_date"`
	StartFrom      *time.Time `json:"start_from"`
	EndAt          *time.Time `json:"end_at"`
	Interviewer    []string   `json:"interviewer"`
	FromDate       *time.Time `json:"from_date"`
	ToDate         *time.Time `json:"to_date"`
}

type CandidateInterviewFreeWord struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
}

type CandidateInterviewResponse struct {
	Data *CandidateInterview `json:"data"`
}

type CandidateInterviewResponseGetAll struct {
	Edges      []*CandidateInterviewEdge `json:"edges"`
	Pagination *Pagination               `json:"pagination"`
}

type CandidateInterviewResponseValidate struct {
	Data *CandidateInterviewValidate `json:"data"`
}

type CandidateInterviewValidate struct {
	InterviewerInvalid        []string `json:"interviewer_invalid"`
	InvalidSchedule           bool     `json:"invalid_schedule"`
	CandidateName             string   `json:"candidate_name"`
	CandidateJobInvalidStatus bool     `json:"candidate_job_invalid_status"`
}

type CandidateInterviewValidateInput struct {
	ID             *string   `json:"id"`
	Title          string    `json:"title"`
	CandidateJobID *string   `json:"candidate_job_id"`
	CandidateID    *string   `json:"candidate_id"`
	JobID          *string   `json:"job_id"`
	InterviewDate  time.Time `json:"interview_date"`
	StartFrom      time.Time `json:"start_from"`
	EndAt          time.Time `json:"end_at"`
	Interviewer    []string  `json:"interviewer"`
}

type CandidateJobByOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     CandidateJobOrderByField `json:"field"`
}

type CandidateJobFeedbackFilter struct {
	CandidateJobID *string    `json:"candidate_job_id"`
	CandidateID    *string    `json:"candidate_id"`
	CreatedBy      *string    `json:"created_by"`
	FromDate       *time.Time `json:"from_date"`
	ToDate         *time.Time `json:"to_date"`
}

type CandidateJobFeedbackFreeWord struct {
	Feedback *string `json:"feedback"`
	UserName *string `json:"user_name"`
}

type CandidateJobFeedbackResponse struct {
	Data *CandidateJobFeedback `json:"data"`
}

type CandidateJobFeedbackResponseGetAll struct {
	Edges      []*CandidateJobFeedbackEdge `json:"edges"`
	Pagination *Pagination                 `json:"pagination"`
}

type CandidateJobFilter struct {
	Status         *CandidateJobStatus        `json:"status"`
	FromDate       *time.Time                 `json:"from_date"`
	ToDate         *time.Time                 `json:"to_date"`
	HiringTeamIds  []string                   `json:"hiring_team_ids"`
	HiringJobIds   []string                   `json:"hiring_job_ids"`
	RecInChargeIds []string                   `json:"rec_in_charge_ids"`
	RecTeamIds     []string                   `json:"rec_team_ids"`
	CandidateID    *string                    `json:"candidate_id"`
	FailedReasons  []CandidateJobFailedReason `json:"failed_reasons"`
	Levels         []CandidateJobLevel        `json:"levels"`
}

type CandidateJobFreeWord struct {
	Team           *string `json:"team"`
	HiringJob      *string `json:"hiring_job"`
	CandidateName  *string `json:"candidate_name"`
	CandidateEmail *string `json:"candidate_email"`
}

type CandidateJobGroupByInterviewResponse struct {
	Data *CandidateJobInterviewFeedback `json:"data"`
}

type CandidateJobGroupByStatus struct {
	Hired           []*CandidateJob `json:"hired"`
	FailedCv        []*CandidateJob `json:"failed_cv"`
	FailedInterview []*CandidateJob `json:"failed_interview"`
	OfferLost       []*CandidateJob `json:"offer_lost"`
	ExStaff         []*CandidateJob `json:"ex_staff"`
	Applied         []*CandidateJob `json:"applied"`
	Interviewing    []*CandidateJob `json:"interviewing"`
	Offering        []*CandidateJob `json:"offering"`
}

type CandidateJobGroupByStatusFilter struct {
	Status         *CandidateJobStatus `json:"status"`
	HiringJobIds   []string            `json:"hiring_job_ids"`
	HiringTeamIds  []string            `json:"hiring_team_ids"`
	RecInChargeIds []string            `json:"rec_in_charge_ids"`
	RecTeamIds     []string            `json:"rec_team_ids"`
	Priorities     []int               `json:"priorities"`
	SkillIds       []string            `json:"skill_ids"`
	FromDate       *time.Time          `json:"from_date"`
	ToDate         *time.Time          `json:"to_date"`
	Locations      []LocationEnum      `json:"locations"`
	CreatedByIds   []string            `json:"created_by_ids"`
	Levels         []CandidateJobLevel `json:"levels"`
}

type CandidateJobGroupByStatusFreeWord struct {
	JobTitle       *string `json:"job_title"`
	CandidateName  *string `json:"candidate_name"`
	CandidateEmail *string `json:"candidate_email"`
}

type CandidateJobGroupByStatusResponse struct {
	Data       *CandidateJobGroupByStatus `json:"data"`
	Pagination *Pagination                `json:"pagination"`
}

type CandidateJobInterviewFeedback struct {
	Interview []*CandidateInterview   `json:"interview"`
	Feedback  []*CandidateJobFeedback `json:"feedback"`
}

type CandidateJobResponse struct {
	Data *CandidateJob `json:"data"`
}

type CandidateJobResponseGetAll struct {
	Edges      []*CandidateJobEdge `json:"edges"`
	Pagination *Pagination         `json:"pagination"`
}

type CandidateNoteFilter struct {
	CandidateID *string    `json:"candidate_id"`
	FromDate    *time.Time `json:"from_date"`
	ToDate      *time.Time `json:"to_date"`
}

type CandidateNoteFreeWord struct {
	Name *string `json:"name"`
}

type CandidateNoteResponse struct {
	Data *CandidateNote `json:"data"`
}

type CandidateNoteResponseGetAll struct {
	Edges      []*CandidateNoteEdge `json:"edges"`
	Pagination *Pagination          `json:"pagination"`
}

type CandidateReport struct {
	Total           int                   `json:"total"`
	ActiveNumber    int                   `json:"active_number"`
	BlacklistNumber int                   `json:"blacklist_number"`
	NumberByRefType []*ReportNumberByType `json:"number_by_ref_type"`
	StatsByTime     *ReportStatsByTime    `json:"stats_by_time"`
}

type CandidateReportResponse struct {
	Data *CandidateReport `json:"data"`
}

type CandidateResponse struct {
	Data *Candidate `json:"data"`
}

type CandidateResponseGetAll struct {
	Edges      []*CandidateEdge `json:"edges"`
	Pagination *Pagination      `json:"pagination"`
}

type CandidateSelection struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Phone string `json:"phone"`
	Email string `json:"email"`
}

type CandidateSelectionEdge struct {
	Node   *CandidateSelection `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

type CandidateSelectionResponseGetAll struct {
	Edges      []*CandidateSelectionEdge `json:"edges"`
	Pagination *Pagination               `json:"pagination"`
}

type EmailTemplateFilter struct {
	Event  []*EmailTemplateEvent  `json:"event"`
	Status *EmailTemplateStatus   `json:"status"`
	SendTo []*EmailTemplateSendTo `json:"send_to"`
}

type EmailTemplateFreeWord struct {
	Subject *string `json:"subject"`
}

type EmailTemplateKeyword struct {
	General      []*JSONFormat `json:"general"`
	HiringTeam   []*JSONFormat `json:"hiringTeam"`
	HiringJob    []*JSONFormat `json:"hiringJob"`
	Candidate    []*JSONFormat `json:"candidate"`
	CandidateJob []*JSONFormat `json:"candidateJob"`
	Interview    []*JSONFormat `json:"interview"`
	Link         []*JSONFormat `json:"link"`
}

type EmailTemplateKeywordFilter struct {
	Event EmailTemplateEvent `json:"event"`
}

type EmailTemplateResponse struct {
	Data *EmailTemplate `json:"data"`
}

type EmailTemplateResponseGetAll struct {
	Edges      []*EmailTemplateEdge `json:"edges"`
	Pagination *Pagination          `json:"pagination"`
}

type EntitySkillRecord struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	SkillID     string  `json:"skill_id"`
	OrderID     int     `json:"orderId"`
}

type EntitySkillRecordInput struct {
	ID      *string `json:"id"`
	SkillID string  `json:"skill_id"`
	OrderID int     `json:"orderId"`
}

type EntitySkillType struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Description  *string              `json:"description"`
	EntitySkills []*EntitySkillRecord `json:"entity_skills"`
	OrderID      int                  `json:"orderId"`
}

type GetEmailTemplateKeywordResponse struct {
	Data *EmailTemplateKeyword `json:"data"`
}

type HiringJobFilter struct {
	Name           *string                  `json:"name"`
	HiringTeamIds  []string                 `json:"hiring_team_ids"`
	RecTeamIds     []string                 `json:"rec_team_ids"`
	HasRecInCharge *bool                    `json:"has_rec_in_charge"`
	RecInChargeIds []string                 `json:"rec_in_charge_ids"`
	Status         *HiringJobStatus         `json:"status"`
	Priorities     []int                    `json:"priorities"`
	Location       []*LocationEnum          `json:"location"`
	SkillIds       []string                 `json:"skill_ids"`
	CreatedByIds   []string                 `json:"created_by_ids"`
	ForOwner       *bool                    `json:"for_owner"`
	ForHiringTeam  *bool                    `json:"for_hiring_team"`
	JobPositionIds []string                 `json:"job_position_ids"`
	ApproverID     *string                  `json:"approver_id"`
	ApproverStatus *HiringJobStepStatusEnum `json:"approver_status"`
}

type HiringJobFreeWord struct {
	Name *string `json:"name"`
}

type HiringJobGroupByStatus struct {
	PendingApprovals []*HiringJob `json:"pending_approvals"`
	Opened           []*HiringJob `json:"opened"`
	Closed           []*HiringJob `json:"closed"`
	Cancelled        []*HiringJob `json:"cancelled"`
}

type HiringJobGroupByStatusResponse struct {
	Data       *HiringJobGroupByStatus `json:"data"`
	Pagination *Pagination             `json:"pagination"`
}

type HiringJobOrderBy struct {
	Direction OrderDirection        `json:"direction"`
	Field     HiringJobOrderByField `json:"field"`
}

type HiringJobResponse struct {
	Data *HiringJob `json:"data"`
}

type HiringJobResponseGetAll struct {
	Edges      []*HiringJobEdge `json:"edges"`
	Pagination *Pagination      `json:"pagination"`
}

type HiringJobSelection struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type HiringJobSelectionEdge struct {
	Node   *HiringJobSelection `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

type HiringJobSelectionResponseGetAll struct {
	Edges      []*HiringJobSelectionEdge `json:"edges"`
	Pagination *Pagination               `json:"pagination"`
}

type HiringTeamApproverInput struct {
	ID      string `json:"id"`
	UserID  string `json:"user_id"`
	OrderID int    `json:"order_id"`
}

type HiringTeamFilter struct {
	Name          *string   `json:"name"`
	ManagerIds    []*string `json:"manager_ids"`
	ForHiringTeam *bool     `json:"for_hiring_team"`
	ForOwner      *bool     `json:"for_owner"`
}

type HiringTeamFreeWord struct {
	Name *string `json:"name"`
}

type HiringTeamOrderBy struct {
	Direction OrderDirection         `json:"direction"`
	Field     HiringTeamOrderByField `json:"field"`
}

type HiringTeamResponse struct {
	Data *HiringTeam `json:"data"`
}

type HiringTeamResponseGetAll struct {
	Edges      []*HiringTeamEdge `json:"edges"`
	Pagination *Pagination       `json:"pagination"`
}

type HiringTeamSelection struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type HiringTeamSelectionEdge struct {
	Node   *HiringTeamSelection `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

type HiringTeamSelectionResponseGetAll struct {
	Edges      []*HiringTeamSelectionEdge `json:"edges"`
	Pagination *Pagination                `json:"pagination"`
}

type JobPositionFilter struct {
	Name *string `json:"name"`
}

type JobPositionFreeWord struct {
	Name *string `json:"name"`
}

type JobPositionResponse struct {
	Data *JobPosition `json:"data"`
}

type JobPositionResponseGetAll struct {
	Edges      []*JobPositionEdge `json:"edges"`
	Pagination *Pagination        `json:"pagination"`
}

type JobPositionSelection struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type JobPositionSelectionEdge struct {
	Node   *JobPositionSelection `json:"node"`
	Cursor Cursor                `json:"cursor"`
}

type JobPositionSelectionResponseGetAll struct {
	Edges      []*JobPositionSelectionEdge `json:"edges"`
	Pagination *Pagination                 `json:"pagination"`
}

type JSONFormat struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type NewAttachmentInput struct {
	ID           *string `json:"id"`
	DocumentName string  `json:"document_name"`
	DocumentID   string  `json:"document_id"`
}

type NewCandidateHistoryCallInput struct {
	Name        string                       `json:"name"`
	CandidateID string                       `json:"candidate_id"`
	Type        CandidateHistoryCallTypeEnum `json:"type"`
	ContactTo   string                       `json:"contact_to"`
	Date        time.Time                    `json:"date"`
	StartTime   *time.Time                   `json:"start_time"`
	EndTime     *time.Time                   `json:"end_time"`
	Description string                       `json:"description"`
	Attachments []*NewAttachmentInput        `json:"attachments"`
}

type NewCandidateInput struct {
	Name                 string                       `json:"name"`
	Email                string                       `json:"email"`
	Phone                string                       `json:"phone"`
	Dob                  *time.Time                   `json:"dob"`
	ReferenceType        CandidateReferenceType       `json:"reference_type"`
	ReferenceValue       string                       `json:"reference_value"`
	ReferenceUID         string                       `json:"reference_uid"`
	RecruitTime          *time.Time                   `json:"recruit_time"`
	Description          string                       `json:"description"`
	Country              string                       `json:"country"`
	EntitySkillRecords   []*EntitySkillRecordInput    `json:"entity_skill_records"`
	Attachments          []*NewAttachmentInput        `json:"attachments"`
	Address              string                       `json:"address"`
	CandidateExp         []*CandidateExpInput         `json:"candidate_exp"`
	CandidateEducate     []*CandidateEducateInput     `json:"candidate_educate"`
	CandidateAward       []*CandidateAwardInput       `json:"candidate_award"`
	CandidateCertificate []*CandidateCertificateInput `json:"candidate_certificate"`
	Avatar               string                       `json:"avatar"`
	Gender               CandidateGenderEnum          `json:"gender"`
}

type NewCandidateInterview4CalendarInput struct {
	Title         string    `json:"title"`
	Description   string    `json:"description"`
	CandidateID   []string  `json:"candidate_id"`
	JobID         string    `json:"job_id"`
	InterviewDate time.Time `json:"interview_date"`
	StartFrom     time.Time `json:"start_from"`
	EndAt         time.Time `json:"end_at"`
	Interviewer   []string  `json:"interviewer"`
	Location      string    `json:"location"`
	MeetingLink   string    `json:"meeting_link"`
}

type NewCandidateInterviewInput struct {
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	CandidateJobID string    `json:"candidate_job_id"`
	InterviewDate  time.Time `json:"interview_date"`
	StartFrom      time.Time `json:"start_from"`
	EndAt          time.Time `json:"end_at"`
	Interviewer    []string  `json:"interviewer"`
	Location       string    `json:"location"`
	MeetingLink    string    `json:"meeting_link"`
}

type NewCandidateJobFeedbackInput struct {
	CandidateJobID string                `json:"candidate_job_id"`
	Feedback       string                `json:"feedback"`
	Attachments    []*NewAttachmentInput `json:"attachments"`
}

type NewCandidateJobInput struct {
	CandidateID         string                     `json:"candidate_id"`
	HiringJobID         string                     `json:"hiring_job_id"`
	RecInChargeID       string                     `json:"rec_in_charge_id"`
	Status              CandidateJobStatusOpen     `json:"status"`
	Attachments         []*NewAttachmentInput      `json:"attachments"`
	OnboardDate         *time.Time                 `json:"onboard_date"`
	OfferExpirationDate *time.Time                 `json:"offer_expiration_date"`
	Level               *CandidateJobLevel         `json:"level"`
	FailedReason        []CandidateJobFailedReason `json:"failed_reason"`
}

type NewCandidateNoteInput struct {
	CandidateID string                `json:"candidate_id"`
	Name        string                `json:"name"`
	Description string                `json:"description"`
	Attachments []*NewAttachmentInput `json:"attachments"`
}

type NewEmailTemplateInput struct {
	Event     EmailTemplateEvent    `json:"event"`
	Subject   string                `json:"subject"`
	Content   string                `json:"content"`
	SendTo    []EmailTemplateSendTo `json:"send_to"`
	RoleIds   []string              `json:"roleIds"`
	Signature string                `json:"signature"`
	Cc        []string              `json:"cc"`
	Bcc       []string              `json:"bcc"`
}

type NewEntityPermissionInput struct {
	ID           *string `json:"id"`
	ForOwner     bool    `json:"for_owner"`
	ForTeam      bool    `json:"for_team"`
	ForAll       bool    `json:"for_all"`
	PermissionID string  `json:"permission_id"`
}

type NewHiringJobInput struct {
	Name               string                    `json:"name"`
	Description        string                    `json:"description"`
	Amount             int                       `json:"amount"`
	Location           LocationEnum              `json:"location"`
	SalaryType         SalaryTypeEnum            `json:"salary_type"`
	SalaryFrom         int                       `json:"salary_from"`
	SalaryTo           int                       `json:"salary_to"`
	Currency           CurrencyEnum              `json:"currency"`
	HiringTeamID       string                    `json:"hiring_team_id"`
	RecTeamID          string                    `json:"rec_team_id"`
	CreatedBy          string                    `json:"created_by"`
	Priority           int                       `json:"priority"`
	EntitySkillRecords []*EntitySkillRecordInput `json:"entity_skill_records"`
	JobPositionID      string                    `json:"job_position_id"`
	Level              HiringJobLevel            `json:"level"`
	Note               string                    `json:"note"`
}

type NewHiringTeamInput struct {
	Name        string                     `json:"name"`
	Members     []string                   `json:"members"`
	Approvers   []*HiringTeamApproverInput `json:"approvers"`
	Description string                     `json:"description"`
}

type NewJobPositionInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewRecTeamInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	LeaderID    string `json:"leader_id"`
}

type NewRoleInput struct {
	Name              string                      `json:"name"`
	Description       *string                     `json:"description"`
	EntityPermissions []*NewEntityPermissionInput `json:"entity_permissions"`
}

type NewSkillInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	SkillTypeID *string `json:"skill_type_id"`
}

type NewSkillTypeInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewUserInput struct {
	Name         string     `json:"name"`
	WorkEmail    string     `json:"work_email"`
	Status       UserStatus `json:"status"`
	HiringTeamID *string    `json:"hiring_team_id"`
	RecTeamID    *string    `json:"rec_team_id"`
	RoleID       []string   `json:"role_id"`
}

type OutgoingEmailFilter struct {
	RecipientType []OutgoingEmailRecipientType `json:"recipient_type"`
	CandidateID   *string                      `json:"candidate_id"`
	Status        []OutgoingEmailStatus        `json:"status"`
	FromDate      *time.Time                   `json:"from_date"`
	ToDate        *time.Time                   `json:"to_date"`
	Event         *EmailTemplateEvent          `json:"event"`
}

type OutgoingEmailFreeWord struct {
	Subject *string `json:"subject"`
	Content *string `json:"content"`
}

type OutgoingEmailResponse struct {
	Data *OutgoingEmail `json:"data"`
}

type OutgoingEmailResponseGetAll struct {
	Edges      []*OutgoingEmailEdge `json:"edges"`
	Pagination *Pagination          `json:"pagination"`
}

type Pagination struct {
	Page    int `json:"page"`
	PerPage int `json:"perPage"`
	Total   int `json:"total"`
}

type PaginationInput struct {
	Page    *int `json:"page"`
	PerPage *int `json:"perPage"`
}

type PermissionGroupResponse struct {
	Data *PermissionGroup `json:"data"`
}

type PermissionGroupResponseGetAll struct {
	Edges      []*PermissionGroupEdge `json:"edges"`
	Pagination *Pagination            `json:"pagination"`
}

type RecTeamFilter struct {
	Name      *string   `json:"name"`
	LeaderIds []*string `json:"leader_ids"`
}

type RecTeamFreeWord struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

type RecTeamOrderBy struct {
	Direction OrderDirection      `json:"direction"`
	Field     RecTeamOrderByField `json:"field"`
}

type RecTeamResponse struct {
	Data *RecTeam `json:"data"`
}

type RecTeamResponseGetAll struct {
	Edges      []*RecTeamEdge `json:"edges"`
	Pagination *Pagination    `json:"pagination"`
}

type RecTeamSelection struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type RecTeamSelectionEdge struct {
	Node   *RecTeamSelection `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

type RecTeamSelectionResponseGetAll struct {
	Edges      []*RecTeamSelectionEdge `json:"edges"`
	Pagination *Pagination             `json:"pagination"`
}

type RecruitmentReportResponse struct {
	Data *ReportStatsByTime `json:"data"`
}

type ReportApplication struct {
	FromDate        time.Time `json:"from_date"`
	ToDate          time.Time `json:"to_date"`
	Applied         int       `json:"applied"`
	Interviewing    int       `json:"interviewing"`
	Offering        int       `json:"offering"`
	Hired           int       `json:"hired"`
	FailedCv        int       `json:"failed_cv"`
	FailedInterview int       `json:"failed_interview"`
	OfferLost       int       `json:"offer_lost"`
	ExStaff         int       `json:"ex_staff"`
}

type ReportApplicationEdge struct {
	Node   []*ReportApplication `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

type ReportApplicationResponse struct {
	Edges *ReportApplicationEdge `json:"edges"`
}

type ReportCandidateColumnChartEdge struct {
	Node   []*ReportRecruitment `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

type ReportCandidateColumnChartResponse struct {
	Edges *ReportCandidateColumnChartEdge `json:"edges"`
}

type ReportCandidateConversionRateChartResponse struct {
	Data *CandidateConversionRateReport `json:"data"`
}

type ReportCandidateConversionRateTableResponse struct {
	Edges      []*CandidateConversionRateReportEdge `json:"edges"`
	Pagination *Pagination                          `json:"pagination"`
}

type ReportCandidateLcc struct {
	Total        int                `json:"total"`
	NonBlackList int                `json:"non_black_list"`
	BlackList    int                `json:"black_list"`
	Recruitment  *ReportRecruitment `json:"recruitment"`
}

type ReportCandidateLCCResponse struct {
	Data *ReportCandidateLcc `json:"data"`
}

type ReportFailedApplication struct {
	FailedCv        *ApplicationReportFailReason `json:"failed_cv"`
	FailedInterview *ApplicationReportFailReason `json:"failed_interview"`
	OfferLost       *ApplicationReportFailReason `json:"offer_lost"`
}

type ReportFailedApplicationResponse struct {
	Data *ReportFailedApplication `json:"data"`
}

type ReportFilter struct {
	HiringTeamID *string            `json:"hiring_team_id"`
	FilterPeriod ReportFilterPeriod `json:"filter_period"`
	FromDate     time.Time          `json:"from_date"`
	ToDate       time.Time          `json:"to_date"`
}

type ReportHiredApplication struct {
	JobPositionName string `json:"job_position_name"`
	Intern          int    `json:"intern"`
	Fresher         int    `json:"fresher"`
	Junior          int    `json:"junior"`
	Middle          int    `json:"middle"`
	Senior          int    `json:"senior"`
	Manager         int    `json:"manager"`
	Director        int    `json:"director"`
}

type ReportHiredApplicationEdge struct {
	Node *ReportHiredApplication `json:"node"`
}

type ReportHiredApplicationResponse struct {
	Edges []*ReportHiredApplicationEdge `json:"edges"`
}

type ReportNumberByType struct {
	Type   string `json:"type"`
	Number int    `json:"number"`
}

type ReportOrderBy struct {
	Direction OrderDirection     `json:"direction"`
	Field     ReportOrderByField `json:"field"`
}

type ReportProcessingApplication struct {
	FromDate        time.Time `json:"from_date"`
	ToDate          time.Time `json:"to_date"`
	ActualInterview int       `json:"actual_interview"`
	Cancel          int       `json:"cancel"`
}

type ReportProcessingApplicationEdge struct {
	Node *ReportProcessingApplication `json:"node"`
}

type ReportProcessingApplicationResponse struct {
	Edges []*ReportProcessingApplicationEdge `json:"edges"`
}

type ReportRecruitment struct {
	Eb             int        `json:"eb"`
	Rec            int        `json:"rec"`
	HiringPlatform int        `json:"hiring_platform"`
	Reference      int        `json:"reference"`
	Headhunt       int        `json:"headhunt"`
	FromDate       *time.Time `json:"from_date"`
	ToDate         *time.Time `json:"to_date"`
}

type ReportStatsByTime struct {
	Total              int                         `json:"total"`
	NumberByType       []*ReportNumberByType       `json:"number_by_type"`
	StatsPerTimePeriod []*ReportStatsPerTimePeriod `json:"stats_per_time_period"`
}

type ReportStatsPerTimePeriod struct {
	FromDate     time.Time             `json:"from_date"`
	ToDate       time.Time             `json:"to_date"`
	Total        int                   `json:"total"`
	NumberByType []*ReportNumberByType `json:"number_by_type"`
}

type RoleFilter struct {
	Name *string `json:"name"`
}

type RoleFreeWord struct {
	Name *string `json:"name"`
}

type RoleResponse struct {
	Data *Role `json:"data"`
}

type RoleResponseGetAll struct {
	Edges      []*RoleEdge `json:"edges"`
	Pagination *Pagination `json:"pagination"`
}

type RoleSelection struct {
	ID                string              `json:"id"`
	Name              string              `json:"name"`
	EntityPermissions []*EntityPermission `json:"entity_permissions"`
}

type RoleSelectionEdge struct {
	Node   *RoleSelection `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

type RoleSelectionResponseGetAll struct {
	Edges      []*RoleSelectionEdge `json:"edges"`
	Pagination *Pagination          `json:"pagination"`
}

type SkillFilter struct {
	Name         *string  `json:"name"`
	SkillTypeIds []string `json:"skill_type_ids"`
}

type SkillFreeWord struct {
	Name *string `json:"name"`
}

type SkillResponse struct {
	Data *Skill `json:"data"`
}

type SkillResponseGetAll struct {
	Edges      []*SkillEdge `json:"edges"`
	Pagination *Pagination  `json:"pagination"`
}

type SkillSelection struct {
	ID        string              `json:"id"`
	Name      string              `json:"name"`
	SkillType *SkillTypeSelection `json:"skill_type"`
}

type SkillSelectionEdge struct {
	Node   *SkillSelection `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

type SkillSelectionResponseGetAll struct {
	Edges      []*SkillSelectionEdge `json:"edges"`
	Pagination *Pagination           `json:"pagination"`
}

type SkillTypeFilter struct {
	Name     *string  `json:"name"`
	SkillIds []string `json:"skill_ids"`
}

type SkillTypeFreeWord struct {
	Name *string `json:"name"`
}

type SkillTypeResponse struct {
	Data *SkillType `json:"data"`
}

type SkillTypeResponseGetAll struct {
	Edges      []*SkillTypeEdge `json:"edges"`
	Pagination *Pagination      `json:"pagination"`
}

type SkillTypeSelection struct {
	ID     string            `json:"id"`
	Name   string            `json:"name"`
	Skills []*SkillSelection `json:"skills"`
}

type SkillTypeSelectionEdge struct {
	Node   *SkillTypeSelection `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

type SkillTypeSelectionResponseGetAll struct {
	Edges      []*SkillTypeSelectionEdge `json:"edges"`
	Pagination *Pagination               `json:"pagination"`
}

type UpdateCandidateAttachment struct {
	Attachments   []*NewAttachmentInput `json:"attachments"`
	RecInChargeID string                `json:"rec_in_charge_id"`
}

type UpdateCandidateHistoryCallInput struct {
	Name        string                       `json:"name"`
	ContactTo   string                       `json:"contact_to"`
	Type        CandidateHistoryCallTypeEnum `json:"type"`
	Date        time.Time                    `json:"date"`
	StartTime   *time.Time                   `json:"start_time"`
	EndTime     *time.Time                   `json:"end_time"`
	Description string                       `json:"description"`
	Attachments []*NewAttachmentInput        `json:"attachments"`
}

type UpdateCandidateInput struct {
	Name                 string                       `json:"name"`
	Email                string                       `json:"email"`
	Phone                string                       `json:"phone"`
	Dob                  *time.Time                   `json:"dob"`
	ReferenceType        CandidateReferenceType       `json:"reference_type"`
	ReferenceValue       string                       `json:"reference_value"`
	ReferenceUID         string                       `json:"reference_uid"`
	RecruitTime          *time.Time                   `json:"recruit_time"`
	Description          string                       `json:"description"`
	Country              string                       `json:"country"`
	EntitySkillRecords   []*EntitySkillRecordInput    `json:"entity_skill_records"`
	Attachments          []*NewAttachmentInput        `json:"attachments"`
	Address              string                       `json:"address"`
	CandidateExp         []*CandidateExpInput         `json:"candidate_exp"`
	CandidateEducate     []*CandidateEducateInput     `json:"candidate_educate"`
	CandidateAward       []*CandidateAwardInput       `json:"candidate_award"`
	CandidateCertificate []*CandidateCertificateInput `json:"candidate_certificate"`
	Avatar               string                       `json:"avatar"`
	Gender               CandidateGenderEnum          `json:"gender"`
}

type UpdateCandidateInterviewInput struct {
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	CandidateJobID string    `json:"candidate_job_id"`
	InterviewDate  time.Time `json:"interview_date"`
	StartFrom      time.Time `json:"start_from"`
	EndAt          time.Time `json:"end_at"`
	Interviewer    []string  `json:"interviewer"`
	Location       string    `json:"location"`
	MeetingLink    string    `json:"meeting_link"`
}

type UpdateCandidateInterviewScheduleInput struct {
	InterviewDate time.Time `json:"interview_date"`
	StartFrom     time.Time `json:"start_from"`
	EndAt         time.Time `json:"end_at"`
	Interviewer   []string  `json:"interviewer"`
}

type UpdateCandidateInterviewStatusInput struct {
	Status CandidateInterviewStatusEditable `json:"status"`
}

type UpdateCandidateJobFeedbackInput struct {
	Feedback    string                `json:"feedback"`
	Attachments []*NewAttachmentInput `json:"attachments"`
}

type UpdateCandidateJobStatus struct {
	Status              CandidateJobStatus         `json:"status"`
	OnboardDate         *time.Time                 `json:"onboard_date"`
	OfferExpirationDate *time.Time                 `json:"offer_expiration_date"`
	Level               *CandidateJobLevel         `json:"level"`
	FailedReason        []CandidateJobFailedReason `json:"failed_reason"`
}

type UpdateCandidateNoteInput struct {
	Name        string                `json:"name"`
	Description string                `json:"description"`
	Attachments []*NewAttachmentInput `json:"attachments"`
}

type UpdateEmailTemplateInput struct {
	Event     EmailTemplateEvent    `json:"event"`
	Subject   string                `json:"subject"`
	Content   string                `json:"content"`
	SendTo    []EmailTemplateSendTo `json:"send_to"`
	RoleIds   []string              `json:"roleIds"`
	Signature string                `json:"signature"`
	Cc        []string              `json:"cc"`
	Bcc       []string              `json:"bcc"`
}

type UpdateEmailTemplateStatusInput struct {
	Status *EmailTemplateStatus `json:"status"`
}

type UpdateHiringJobInput struct {
	Name               string                    `json:"name"`
	Description        string                    `json:"description"`
	Amount             int                       `json:"amount"`
	Location           LocationEnum              `json:"location"`
	SalaryType         SalaryTypeEnum            `json:"salary_type"`
	SalaryFrom         int                       `json:"salary_from"`
	SalaryTo           int                       `json:"salary_to"`
	Currency           CurrencyEnum              `json:"currency"`
	HiringTeamID       string                    `json:"hiring_team_id"`
	RecTeamID          string                    `json:"rec_team_id"`
	RecInChargeID      string                    `json:"rec_in_charge_id"`
	Priority           int                       `json:"priority"`
	EntitySkillRecords []*EntitySkillRecordInput `json:"entity_skill_records"`
	JobPositionID      string                    `json:"job_position_id"`
	Level              HiringJobLevel            `json:"level"`
	Note               string                    `json:"note"`
}

type UpdateHiringJobStepInput struct {
	HiringJobIds []string                `json:"hiring_job_ids"`
	Status       HiringJobStepStatusEnum `json:"status"`
}

type UpdateHiringTeamInput struct {
	Name        string                     `json:"name"`
	Members     []string                   `json:"members"`
	Approvers   []*HiringTeamApproverInput `json:"approvers"`
	Description string                     `json:"description"`
}

type UpdateJobPositionInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type UpdateRecTeamInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	LeaderID    string `json:"leader_id"`
}

type UpdateRoleInput struct {
	Name              *string                     `json:"name"`
	Description       *string                     `json:"description"`
	EntityPermissions []*NewEntityPermissionInput `json:"entity_permissions"`
}

type UpdateSkillInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	SkillTypeID *string `json:"skill_type_id"`
}

type UpdateSkillTypeInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type UpdateUserInput struct {
	Name         string     `json:"name"`
	WorkEmail    string     `json:"work_email"`
	Status       UserStatus `json:"status"`
	HiringTeamID *string    `json:"hiring_team_id"`
	RoleID       []string   `json:"role_id"`
	RecTeamID    *string    `json:"rec_team_id"`
}

type UpdateUserStatusInput struct {
	Status UserStatus `json:"status"`
}

type UserFilter struct {
	Name                      *string     `json:"name"`
	Ids                       []string    `json:"ids"`
	IgnoreIds                 []string    `json:"ignore_ids"`
	Status                    *UserStatus `json:"status"`
	IsAbleToInterviewer       *bool       `json:"is_able_to_interviewer"`
	HiringTeamID              []string    `json:"hiring_team_id"`
	RoleID                    []string    `json:"role_id"`
	IsAbleToLeaderRecTeam     *bool       `json:"is_able_to_leader_rec_team"`
	IsAbleToManagerHiringTeam *bool       `json:"is_able_to_manager_hiring_team"`
	RecTeamIds                []string    `json:"rec_team_ids"`
}

type UserFreeWord struct {
	Name      *string `json:"name"`
	WorkEmail *string `json:"work_email"`
}

type UserResponse struct {
	Data *User `json:"data"`
}

type UserResponseGetAll struct {
	Edges      []*UserEdge `json:"edges"`
	Pagination *Pagination `json:"pagination"`
}

type UserSelection struct {
	ID           string  `json:"id"`
	Name         string  `json:"name"`
	WorkEmail    string  `json:"work_email"`
	HiringTeamID *string `json:"hiring_team_id"`
	RecTeamID    *string `json:"rec_team_id"`
}

type UserSelectionEdge struct {
	Node   *UserSelection `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

type UserSelectionResponseGetAll struct {
	Edges      []*UserSelectionEdge `json:"edges"`
	Pagination *Pagination          `json:"pagination"`
}

type AttachmentAction string

const (
	AttachmentActionUpload   AttachmentAction = "UPLOAD"
	AttachmentActionDownload AttachmentAction = "DOWNLOAD"
)

var AllAttachmentAction = []AttachmentAction{
	AttachmentActionUpload,
	AttachmentActionDownload,
}

func (e AttachmentAction) IsValid() bool {
	switch e {
	case AttachmentActionUpload, AttachmentActionDownload:
		return true
	}
	return false
}

func (e AttachmentAction) String() string {
	return string(e)
}

func (e *AttachmentAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AttachmentAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AttachmentAction", str)
	}
	return nil
}

func (e AttachmentAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AttachmentFolder string

const (
	AttachmentFolderCandidate AttachmentFolder = "candidate"
)

var AllAttachmentFolder = []AttachmentFolder{
	AttachmentFolderCandidate,
}

func (e AttachmentFolder) IsValid() bool {
	switch e {
	case AttachmentFolderCandidate:
		return true
	}
	return false
}

func (e AttachmentFolder) String() string {
	return string(e)
}

func (e *AttachmentFolder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AttachmentFolder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AttachmentFolder", str)
	}
	return nil
}

func (e AttachmentFolder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AttachmentRelationType string

const (
	AttachmentRelationTypeCandidateJobs         AttachmentRelationType = "candidate_jobs"
	AttachmentRelationTypeCandidateJobFeedbacks AttachmentRelationType = "candidate_job_feedbacks"
	AttachmentRelationTypeCandidateNotes        AttachmentRelationType = "candidate_notes"
)

var AllAttachmentRelationType = []AttachmentRelationType{
	AttachmentRelationTypeCandidateJobs,
	AttachmentRelationTypeCandidateJobFeedbacks,
	AttachmentRelationTypeCandidateNotes,
}

func (e AttachmentRelationType) IsValid() bool {
	switch e {
	case AttachmentRelationTypeCandidateJobs, AttachmentRelationTypeCandidateJobFeedbacks, AttachmentRelationTypeCandidateNotes:
		return true
	}
	return false
}

func (e AttachmentRelationType) String() string {
	return string(e)
}

func (e *AttachmentRelationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AttachmentRelationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AttachmentRelationType", str)
	}
	return nil
}

func (e AttachmentRelationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateActivityOrderField string

const (
	CandidateActivityOrderFieldCreatedAt CandidateActivityOrderField = "created_at"
)

var AllCandidateActivityOrderField = []CandidateActivityOrderField{
	CandidateActivityOrderFieldCreatedAt,
}

func (e CandidateActivityOrderField) IsValid() bool {
	switch e {
	case CandidateActivityOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e CandidateActivityOrderField) String() string {
	return string(e)
}

func (e *CandidateActivityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateActivityOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateActivityOrderField", str)
	}
	return nil
}

func (e CandidateActivityOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateGenderEnum string

const (
	CandidateGenderEnumMale   CandidateGenderEnum = "male"
	CandidateGenderEnumFemale CandidateGenderEnum = "female"
	CandidateGenderEnumOthers CandidateGenderEnum = "others"
)

var AllCandidateGenderEnum = []CandidateGenderEnum{
	CandidateGenderEnumMale,
	CandidateGenderEnumFemale,
	CandidateGenderEnumOthers,
}

func (e CandidateGenderEnum) IsValid() bool {
	switch e {
	case CandidateGenderEnumMale, CandidateGenderEnumFemale, CandidateGenderEnumOthers:
		return true
	}
	return false
}

func (e CandidateGenderEnum) String() string {
	return string(e)
}

func (e *CandidateGenderEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateGenderEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateGenderEnum", str)
	}
	return nil
}

func (e CandidateGenderEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateHistoryCallTypeEnum string

const (
	CandidateHistoryCallTypeEnumCandidate CandidateHistoryCallTypeEnum = "candidate"
	CandidateHistoryCallTypeEnumOthers    CandidateHistoryCallTypeEnum = "others"
)

var AllCandidateHistoryCallTypeEnum = []CandidateHistoryCallTypeEnum{
	CandidateHistoryCallTypeEnumCandidate,
	CandidateHistoryCallTypeEnumOthers,
}

func (e CandidateHistoryCallTypeEnum) IsValid() bool {
	switch e {
	case CandidateHistoryCallTypeEnumCandidate, CandidateHistoryCallTypeEnumOthers:
		return true
	}
	return false
}

func (e CandidateHistoryCallTypeEnum) String() string {
	return string(e)
}

func (e *CandidateHistoryCallTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateHistoryCallTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateHistoryCallTypeEnum", str)
	}
	return nil
}

func (e CandidateHistoryCallTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateInterviewStatus string

const (
	CandidateInterviewStatusInvitedToInterview CandidateInterviewStatus = "invited_to_interview"
	CandidateInterviewStatusInterviewing       CandidateInterviewStatus = "interviewing"
	CandidateInterviewStatusDone               CandidateInterviewStatus = "done"
	CandidateInterviewStatusCancelled          CandidateInterviewStatus = "cancelled"
)

var AllCandidateInterviewStatus = []CandidateInterviewStatus{
	CandidateInterviewStatusInvitedToInterview,
	CandidateInterviewStatusInterviewing,
	CandidateInterviewStatusDone,
	CandidateInterviewStatusCancelled,
}

func (e CandidateInterviewStatus) IsValid() bool {
	switch e {
	case CandidateInterviewStatusInvitedToInterview, CandidateInterviewStatusInterviewing, CandidateInterviewStatusDone, CandidateInterviewStatusCancelled:
		return true
	}
	return false
}

func (e CandidateInterviewStatus) String() string {
	return string(e)
}

func (e *CandidateInterviewStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateInterviewStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateInterviewStatus", str)
	}
	return nil
}

func (e CandidateInterviewStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateInterviewStatusEditable string

const (
	CandidateInterviewStatusEditableDone      CandidateInterviewStatusEditable = "done"
	CandidateInterviewStatusEditableCancelled CandidateInterviewStatusEditable = "cancelled"
)

var AllCandidateInterviewStatusEditable = []CandidateInterviewStatusEditable{
	CandidateInterviewStatusEditableDone,
	CandidateInterviewStatusEditableCancelled,
}

func (e CandidateInterviewStatusEditable) IsValid() bool {
	switch e {
	case CandidateInterviewStatusEditableDone, CandidateInterviewStatusEditableCancelled:
		return true
	}
	return false
}

func (e CandidateInterviewStatusEditable) String() string {
	return string(e)
}

func (e *CandidateInterviewStatusEditable) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateInterviewStatusEditable(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateInterviewStatusEditable", str)
	}
	return nil
}

func (e CandidateInterviewStatusEditable) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobFailedReason string

const (
	CandidateJobFailedReasonPoorProfessionalism      CandidateJobFailedReason = "poor_professionalism"
	CandidateJobFailedReasonPoorFitAndEngagement     CandidateJobFailedReason = "poor_fit_and_engagement"
	CandidateJobFailedReasonOverExpectations         CandidateJobFailedReason = "over_expectations"
	CandidateJobFailedReasonOverQualification        CandidateJobFailedReason = "over_qualification"
	CandidateJobFailedReasonLanguageDeficiency       CandidateJobFailedReason = "language_deficiency"
	CandidateJobFailedReasonWeakTechnicalSkills      CandidateJobFailedReason = "weak_technical_skills"
	CandidateJobFailedReasonPoorInterpersonalSkills  CandidateJobFailedReason = "poor_interpersonal_skills"
	CandidateJobFailedReasonPoorProblemSolvingSkills CandidateJobFailedReason = "poor_problem_solving_skills"
	CandidateJobFailedReasonPoorManagementSkills     CandidateJobFailedReason = "poor_management_skills"
	CandidateJobFailedReasonCandidateWithdrawal      CandidateJobFailedReason = "candidate_withdrawal"
	CandidateJobFailedReasonOthers                   CandidateJobFailedReason = "others"
)

var AllCandidateJobFailedReason = []CandidateJobFailedReason{
	CandidateJobFailedReasonPoorProfessionalism,
	CandidateJobFailedReasonPoorFitAndEngagement,
	CandidateJobFailedReasonOverExpectations,
	CandidateJobFailedReasonOverQualification,
	CandidateJobFailedReasonLanguageDeficiency,
	CandidateJobFailedReasonWeakTechnicalSkills,
	CandidateJobFailedReasonPoorInterpersonalSkills,
	CandidateJobFailedReasonPoorProblemSolvingSkills,
	CandidateJobFailedReasonPoorManagementSkills,
	CandidateJobFailedReasonCandidateWithdrawal,
	CandidateJobFailedReasonOthers,
}

func (e CandidateJobFailedReason) IsValid() bool {
	switch e {
	case CandidateJobFailedReasonPoorProfessionalism, CandidateJobFailedReasonPoorFitAndEngagement, CandidateJobFailedReasonOverExpectations, CandidateJobFailedReasonOverQualification, CandidateJobFailedReasonLanguageDeficiency, CandidateJobFailedReasonWeakTechnicalSkills, CandidateJobFailedReasonPoorInterpersonalSkills, CandidateJobFailedReasonPoorProblemSolvingSkills, CandidateJobFailedReasonPoorManagementSkills, CandidateJobFailedReasonCandidateWithdrawal, CandidateJobFailedReasonOthers:
		return true
	}
	return false
}

func (e CandidateJobFailedReason) String() string {
	return string(e)
}

func (e *CandidateJobFailedReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobFailedReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobFailedReason", str)
	}
	return nil
}

func (e CandidateJobFailedReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobLevel string

const (
	CandidateJobLevelIntern   CandidateJobLevel = "intern"
	CandidateJobLevelFresher  CandidateJobLevel = "fresher"
	CandidateJobLevelJunior   CandidateJobLevel = "junior"
	CandidateJobLevelMiddle   CandidateJobLevel = "middle"
	CandidateJobLevelSenior   CandidateJobLevel = "senior"
	CandidateJobLevelManager  CandidateJobLevel = "manager"
	CandidateJobLevelDirector CandidateJobLevel = "director"
)

var AllCandidateJobLevel = []CandidateJobLevel{
	CandidateJobLevelIntern,
	CandidateJobLevelFresher,
	CandidateJobLevelJunior,
	CandidateJobLevelMiddle,
	CandidateJobLevelSenior,
	CandidateJobLevelManager,
	CandidateJobLevelDirector,
}

func (e CandidateJobLevel) IsValid() bool {
	switch e {
	case CandidateJobLevelIntern, CandidateJobLevelFresher, CandidateJobLevelJunior, CandidateJobLevelMiddle, CandidateJobLevelSenior, CandidateJobLevelManager, CandidateJobLevelDirector:
		return true
	}
	return false
}

func (e CandidateJobLevel) String() string {
	return string(e)
}

func (e *CandidateJobLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobLevel", str)
	}
	return nil
}

func (e CandidateJobLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobOrderByAdditionalField string

const (
	CandidateJobOrderByAdditionalFieldPriority           CandidateJobOrderByAdditionalField = "priority"
	CandidateJobOrderByAdditionalFieldHiringJobCreatedAt CandidateJobOrderByAdditionalField = "hiring_job_created_at"
)

var AllCandidateJobOrderByAdditionalField = []CandidateJobOrderByAdditionalField{
	CandidateJobOrderByAdditionalFieldPriority,
	CandidateJobOrderByAdditionalFieldHiringJobCreatedAt,
}

func (e CandidateJobOrderByAdditionalField) IsValid() bool {
	switch e {
	case CandidateJobOrderByAdditionalFieldPriority, CandidateJobOrderByAdditionalFieldHiringJobCreatedAt:
		return true
	}
	return false
}

func (e CandidateJobOrderByAdditionalField) String() string {
	return string(e)
}

func (e *CandidateJobOrderByAdditionalField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobOrderByAdditionalField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobOrderByAdditionalField", str)
	}
	return nil
}

func (e CandidateJobOrderByAdditionalField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobOrderByField string

const (
	CandidateJobOrderByFieldCreatedAt          CandidateJobOrderByField = "created_at"
	CandidateJobOrderByFieldUpdatedAt          CandidateJobOrderByField = "updated_at"
	CandidateJobOrderByFieldPriority           CandidateJobOrderByField = "priority"
	CandidateJobOrderByFieldHiringJobCreatedAt CandidateJobOrderByField = "hiring_job_created_at"
)

var AllCandidateJobOrderByField = []CandidateJobOrderByField{
	CandidateJobOrderByFieldCreatedAt,
	CandidateJobOrderByFieldUpdatedAt,
	CandidateJobOrderByFieldPriority,
	CandidateJobOrderByFieldHiringJobCreatedAt,
}

func (e CandidateJobOrderByField) IsValid() bool {
	switch e {
	case CandidateJobOrderByFieldCreatedAt, CandidateJobOrderByFieldUpdatedAt, CandidateJobOrderByFieldPriority, CandidateJobOrderByFieldHiringJobCreatedAt:
		return true
	}
	return false
}

func (e CandidateJobOrderByField) String() string {
	return string(e)
}

func (e *CandidateJobOrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobOrderByField", str)
	}
	return nil
}

func (e CandidateJobOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatus string

const (
	CandidateJobStatusHired           CandidateJobStatus = "hired"
	CandidateJobStatusFailedCv        CandidateJobStatus = "failed_cv"
	CandidateJobStatusFailedInterview CandidateJobStatus = "failed_interview"
	CandidateJobStatusOfferLost       CandidateJobStatus = "offer_lost"
	CandidateJobStatusExStaff         CandidateJobStatus = "ex_staff"
	CandidateJobStatusApplied         CandidateJobStatus = "applied"
	CandidateJobStatusInterviewing    CandidateJobStatus = "interviewing"
	CandidateJobStatusOffering        CandidateJobStatus = "offering"
)

var AllCandidateJobStatus = []CandidateJobStatus{
	CandidateJobStatusHired,
	CandidateJobStatusFailedCv,
	CandidateJobStatusFailedInterview,
	CandidateJobStatusOfferLost,
	CandidateJobStatusExStaff,
	CandidateJobStatusApplied,
	CandidateJobStatusInterviewing,
	CandidateJobStatusOffering,
}

func (e CandidateJobStatus) IsValid() bool {
	switch e {
	case CandidateJobStatusHired, CandidateJobStatusFailedCv, CandidateJobStatusFailedInterview, CandidateJobStatusOfferLost, CandidateJobStatusExStaff, CandidateJobStatusApplied, CandidateJobStatusInterviewing, CandidateJobStatusOffering:
		return true
	}
	return false
}

func (e CandidateJobStatus) String() string {
	return string(e)
}

func (e *CandidateJobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatus", str)
	}
	return nil
}

func (e CandidateJobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusAbleToClose string

const (
	CandidateJobStatusAbleToCloseInterviewing CandidateJobStatusAbleToClose = "interviewing"
	CandidateJobStatusAbleToCloseOffering     CandidateJobStatusAbleToClose = "offering"
)

var AllCandidateJobStatusAbleToClose = []CandidateJobStatusAbleToClose{
	CandidateJobStatusAbleToCloseInterviewing,
	CandidateJobStatusAbleToCloseOffering,
}

func (e CandidateJobStatusAbleToClose) IsValid() bool {
	switch e {
	case CandidateJobStatusAbleToCloseInterviewing, CandidateJobStatusAbleToCloseOffering:
		return true
	}
	return false
}

func (e CandidateJobStatusAbleToClose) String() string {
	return string(e)
}

func (e *CandidateJobStatusAbleToClose) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusAbleToClose(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusAbleToClose", str)
	}
	return nil
}

func (e CandidateJobStatusAbleToClose) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusEditable string

const (
	CandidateJobStatusEditableApplied      CandidateJobStatusEditable = "applied"
	CandidateJobStatusEditableInterviewing CandidateJobStatusEditable = "interviewing"
)

var AllCandidateJobStatusEditable = []CandidateJobStatusEditable{
	CandidateJobStatusEditableApplied,
	CandidateJobStatusEditableInterviewing,
}

func (e CandidateJobStatusEditable) IsValid() bool {
	switch e {
	case CandidateJobStatusEditableApplied, CandidateJobStatusEditableInterviewing:
		return true
	}
	return false
}

func (e CandidateJobStatusEditable) String() string {
	return string(e)
}

func (e *CandidateJobStatusEditable) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusEditable(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusEditable", str)
	}
	return nil
}

func (e CandidateJobStatusEditable) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusEnded string

const (
	CandidateJobStatusEndedHired           CandidateJobStatusEnded = "hired"
	CandidateJobStatusEndedFailedCv        CandidateJobStatusEnded = "failed_cv"
	CandidateJobStatusEndedFailedInterview CandidateJobStatusEnded = "failed_interview"
	CandidateJobStatusEndedOfferLost       CandidateJobStatusEnded = "offer_lost"
	CandidateJobStatusEndedExStaff         CandidateJobStatusEnded = "ex_staff"
)

var AllCandidateJobStatusEnded = []CandidateJobStatusEnded{
	CandidateJobStatusEndedHired,
	CandidateJobStatusEndedFailedCv,
	CandidateJobStatusEndedFailedInterview,
	CandidateJobStatusEndedOfferLost,
	CandidateJobStatusEndedExStaff,
}

func (e CandidateJobStatusEnded) IsValid() bool {
	switch e {
	case CandidateJobStatusEndedHired, CandidateJobStatusEndedFailedCv, CandidateJobStatusEndedFailedInterview, CandidateJobStatusEndedOfferLost, CandidateJobStatusEndedExStaff:
		return true
	}
	return false
}

func (e CandidateJobStatusEnded) String() string {
	return string(e)
}

func (e *CandidateJobStatusEnded) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusEnded(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusEnded", str)
	}
	return nil
}

func (e CandidateJobStatusEnded) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusFailed string

const (
	CandidateJobStatusFailedOfferLost       CandidateJobStatusFailed = "offer_lost"
	CandidateJobStatusFailedFailedCv        CandidateJobStatusFailed = "failed_cv"
	CandidateJobStatusFailedFailedInterview CandidateJobStatusFailed = "failed_interview"
)

var AllCandidateJobStatusFailed = []CandidateJobStatusFailed{
	CandidateJobStatusFailedOfferLost,
	CandidateJobStatusFailedFailedCv,
	CandidateJobStatusFailedFailedInterview,
}

func (e CandidateJobStatusFailed) IsValid() bool {
	switch e {
	case CandidateJobStatusFailedOfferLost, CandidateJobStatusFailedFailedCv, CandidateJobStatusFailedFailedInterview:
		return true
	}
	return false
}

func (e CandidateJobStatusFailed) String() string {
	return string(e)
}

func (e *CandidateJobStatusFailed) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusFailed(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusFailed", str)
	}
	return nil
}

func (e CandidateJobStatusFailed) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusOpen string

const (
	CandidateJobStatusOpenApplied      CandidateJobStatusOpen = "applied"
	CandidateJobStatusOpenInterviewing CandidateJobStatusOpen = "interviewing"
	CandidateJobStatusOpenOffering     CandidateJobStatusOpen = "offering"
)

var AllCandidateJobStatusOpen = []CandidateJobStatusOpen{
	CandidateJobStatusOpenApplied,
	CandidateJobStatusOpenInterviewing,
	CandidateJobStatusOpenOffering,
}

func (e CandidateJobStatusOpen) IsValid() bool {
	switch e {
	case CandidateJobStatusOpenApplied, CandidateJobStatusOpenInterviewing, CandidateJobStatusOpenOffering:
		return true
	}
	return false
}

func (e CandidateJobStatusOpen) String() string {
	return string(e)
}

func (e *CandidateJobStatusOpen) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusOpen(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusOpen", str)
	}
	return nil
}

func (e CandidateJobStatusOpen) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateReferenceEb string

const (
	CandidateReferenceEbTiktokTechvifyOfficial CandidateReferenceEb = "tiktok_techvify_official"
	CandidateReferenceEbTiktokThedevdad        CandidateReferenceEb = "tiktok_thedevdad"
	CandidateReferenceEbLinkedinJunieTruong    CandidateReferenceEb = "linkedin_junie_truong"
	CandidateReferenceEbOtherLinkedin          CandidateReferenceEb = "other_linkedin"
	CandidateReferenceEbGroupSeeding           CandidateReferenceEb = "group_seeding"
	CandidateReferenceEbFanpageTechvifyCareers CandidateReferenceEb = "fanpage_techvify_careers"
	CandidateReferenceEbGoogleSearch           CandidateReferenceEb = "google_search"
	CandidateReferenceEbYoutubeTechvifyCareers CandidateReferenceEb = "youtube_techvify_careers"
	CandidateReferenceEbThread                 CandidateReferenceEb = "thread"
	CandidateReferenceEbInstagram              CandidateReferenceEb = "instagram"
	CandidateReferenceEbTwitter                CandidateReferenceEb = "twitter"
	CandidateReferenceEbOthers                 CandidateReferenceEb = "others"
)

var AllCandidateReferenceEb = []CandidateReferenceEb{
	CandidateReferenceEbTiktokTechvifyOfficial,
	CandidateReferenceEbTiktokThedevdad,
	CandidateReferenceEbLinkedinJunieTruong,
	CandidateReferenceEbOtherLinkedin,
	CandidateReferenceEbGroupSeeding,
	CandidateReferenceEbFanpageTechvifyCareers,
	CandidateReferenceEbGoogleSearch,
	CandidateReferenceEbYoutubeTechvifyCareers,
	CandidateReferenceEbThread,
	CandidateReferenceEbInstagram,
	CandidateReferenceEbTwitter,
	CandidateReferenceEbOthers,
}

func (e CandidateReferenceEb) IsValid() bool {
	switch e {
	case CandidateReferenceEbTiktokTechvifyOfficial, CandidateReferenceEbTiktokThedevdad, CandidateReferenceEbLinkedinJunieTruong, CandidateReferenceEbOtherLinkedin, CandidateReferenceEbGroupSeeding, CandidateReferenceEbFanpageTechvifyCareers, CandidateReferenceEbGoogleSearch, CandidateReferenceEbYoutubeTechvifyCareers, CandidateReferenceEbThread, CandidateReferenceEbInstagram, CandidateReferenceEbTwitter, CandidateReferenceEbOthers:
		return true
	}
	return false
}

func (e CandidateReferenceEb) String() string {
	return string(e)
}

func (e *CandidateReferenceEb) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateReferenceEb(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateReferenceEB", str)
	}
	return nil
}

func (e CandidateReferenceEb) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateReferenceHiringPlatform string

const (
	CandidateReferenceHiringPlatformTopcv        CandidateReferenceHiringPlatform = "topcv"
	CandidateReferenceHiringPlatformVietnamWorks CandidateReferenceHiringPlatform = "vietnam_works"
	CandidateReferenceHiringPlatformItviec       CandidateReferenceHiringPlatform = "itviec"
)

var AllCandidateReferenceHiringPlatform = []CandidateReferenceHiringPlatform{
	CandidateReferenceHiringPlatformTopcv,
	CandidateReferenceHiringPlatformVietnamWorks,
	CandidateReferenceHiringPlatformItviec,
}

func (e CandidateReferenceHiringPlatform) IsValid() bool {
	switch e {
	case CandidateReferenceHiringPlatformTopcv, CandidateReferenceHiringPlatformVietnamWorks, CandidateReferenceHiringPlatformItviec:
		return true
	}
	return false
}

func (e CandidateReferenceHiringPlatform) String() string {
	return string(e)
}

func (e *CandidateReferenceHiringPlatform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateReferenceHiringPlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateReferenceHiringPlatform", str)
	}
	return nil
}

func (e CandidateReferenceHiringPlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateReferenceRec string

const (
	CandidateReferenceRecLinkedin  CandidateReferenceRec = "linkedin"
	CandidateReferenceRecFacebook  CandidateReferenceRec = "facebook"
	CandidateReferenceRecInstagram CandidateReferenceRec = "instagram"
	CandidateReferenceRecThread    CandidateReferenceRec = "thread"
	CandidateReferenceRecGithub    CandidateReferenceRec = "github"
	CandidateReferenceRecOthers    CandidateReferenceRec = "others"
)

var AllCandidateReferenceRec = []CandidateReferenceRec{
	CandidateReferenceRecLinkedin,
	CandidateReferenceRecFacebook,
	CandidateReferenceRecInstagram,
	CandidateReferenceRecThread,
	CandidateReferenceRecGithub,
	CandidateReferenceRecOthers,
}

func (e CandidateReferenceRec) IsValid() bool {
	switch e {
	case CandidateReferenceRecLinkedin, CandidateReferenceRecFacebook, CandidateReferenceRecInstagram, CandidateReferenceRecThread, CandidateReferenceRecGithub, CandidateReferenceRecOthers:
		return true
	}
	return false
}

func (e CandidateReferenceRec) String() string {
	return string(e)
}

func (e *CandidateReferenceRec) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateReferenceRec(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateReferenceRec", str)
	}
	return nil
}

func (e CandidateReferenceRec) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateReferenceType string

const (
	CandidateReferenceTypeEb             CandidateReferenceType = "eb"
	CandidateReferenceTypeRec            CandidateReferenceType = "rec"
	CandidateReferenceTypeHiringPlatform CandidateReferenceType = "hiring_platform"
	CandidateReferenceTypeReference      CandidateReferenceType = "reference"
	CandidateReferenceTypeHeadhunt       CandidateReferenceType = "headhunt"
)

var AllCandidateReferenceType = []CandidateReferenceType{
	CandidateReferenceTypeEb,
	CandidateReferenceTypeRec,
	CandidateReferenceTypeHiringPlatform,
	CandidateReferenceTypeReference,
	CandidateReferenceTypeHeadhunt,
}

func (e CandidateReferenceType) IsValid() bool {
	switch e {
	case CandidateReferenceTypeEb, CandidateReferenceTypeRec, CandidateReferenceTypeHiringPlatform, CandidateReferenceTypeReference, CandidateReferenceTypeHeadhunt:
		return true
	}
	return false
}

func (e CandidateReferenceType) String() string {
	return string(e)
}

func (e *CandidateReferenceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateReferenceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateReferenceType", str)
	}
	return nil
}

func (e CandidateReferenceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateStatusEnum string

const (
	CandidateStatusEnumApplied         CandidateStatusEnum = "applied"
	CandidateStatusEnumInterviewing    CandidateStatusEnum = "interviewing"
	CandidateStatusEnumOffering        CandidateStatusEnum = "offering"
	CandidateStatusEnumHired           CandidateStatusEnum = "hired"
	CandidateStatusEnumFailedCv        CandidateStatusEnum = "failed_cv"
	CandidateStatusEnumFailedInterview CandidateStatusEnum = "failed_interview"
	CandidateStatusEnumOfferLost       CandidateStatusEnum = "offer_lost"
	CandidateStatusEnumExStaff         CandidateStatusEnum = "ex_staff"
	CandidateStatusEnumNew             CandidateStatusEnum = "new"
)

var AllCandidateStatusEnum = []CandidateStatusEnum{
	CandidateStatusEnumApplied,
	CandidateStatusEnumInterviewing,
	CandidateStatusEnumOffering,
	CandidateStatusEnumHired,
	CandidateStatusEnumFailedCv,
	CandidateStatusEnumFailedInterview,
	CandidateStatusEnumOfferLost,
	CandidateStatusEnumExStaff,
	CandidateStatusEnumNew,
}

func (e CandidateStatusEnum) IsValid() bool {
	switch e {
	case CandidateStatusEnumApplied, CandidateStatusEnumInterviewing, CandidateStatusEnumOffering, CandidateStatusEnumHired, CandidateStatusEnumFailedCv, CandidateStatusEnumFailedInterview, CandidateStatusEnumOfferLost, CandidateStatusEnumExStaff, CandidateStatusEnumNew:
		return true
	}
	return false
}

func (e CandidateStatusEnum) String() string {
	return string(e)
}

func (e *CandidateStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateStatusEnum", str)
	}
	return nil
}

func (e CandidateStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CurrencyEnum string

const (
	CurrencyEnumVnd CurrencyEnum = "vnd"
	CurrencyEnumUsd CurrencyEnum = "usd"
	CurrencyEnumJpy CurrencyEnum = "jpy"
)

var AllCurrencyEnum = []CurrencyEnum{
	CurrencyEnumVnd,
	CurrencyEnumUsd,
	CurrencyEnumJpy,
}

func (e CurrencyEnum) IsValid() bool {
	switch e {
	case CurrencyEnumVnd, CurrencyEnumUsd, CurrencyEnumJpy:
		return true
	}
	return false
}

func (e CurrencyEnum) String() string {
	return string(e)
}

func (e *CurrencyEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CurrencyEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CurrencyEnum", str)
	}
	return nil
}

func (e CurrencyEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateApplicationEventEnum string

const (
	EmailTemplateApplicationEventEnumCandidateAppliedToKiv           EmailTemplateApplicationEventEnum = "candidate_applied_to_kiv"
	EmailTemplateApplicationEventEnumCandidateInterviewingToKiv      EmailTemplateApplicationEventEnum = "candidate_interviewing_to_kiv"
	EmailTemplateApplicationEventEnumCandidateInterviewingToOffering EmailTemplateApplicationEventEnum = "candidate_interviewing_to_offering"
)

var AllEmailTemplateApplicationEventEnum = []EmailTemplateApplicationEventEnum{
	EmailTemplateApplicationEventEnumCandidateAppliedToKiv,
	EmailTemplateApplicationEventEnumCandidateInterviewingToKiv,
	EmailTemplateApplicationEventEnumCandidateInterviewingToOffering,
}

func (e EmailTemplateApplicationEventEnum) IsValid() bool {
	switch e {
	case EmailTemplateApplicationEventEnumCandidateAppliedToKiv, EmailTemplateApplicationEventEnumCandidateInterviewingToKiv, EmailTemplateApplicationEventEnumCandidateInterviewingToOffering:
		return true
	}
	return false
}

func (e EmailTemplateApplicationEventEnum) String() string {
	return string(e)
}

func (e *EmailTemplateApplicationEventEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateApplicationEventEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateApplicationEventEnum", str)
	}
	return nil
}

func (e EmailTemplateApplicationEventEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateApplicationSendToEnum string

const (
	EmailTemplateApplicationSendToEnumJobRequest        EmailTemplateApplicationSendToEnum = "job_request"
	EmailTemplateApplicationSendToEnumHiringTeamManager EmailTemplateApplicationSendToEnum = "hiring_team_manager"
	EmailTemplateApplicationSendToEnumHiringTeamMember  EmailTemplateApplicationSendToEnum = "hiring_team_member"
	EmailTemplateApplicationSendToEnumRole              EmailTemplateApplicationSendToEnum = "role"
	EmailTemplateApplicationSendToEnumCandidate         EmailTemplateApplicationSendToEnum = "candidate"
)

var AllEmailTemplateApplicationSendToEnum = []EmailTemplateApplicationSendToEnum{
	EmailTemplateApplicationSendToEnumJobRequest,
	EmailTemplateApplicationSendToEnumHiringTeamManager,
	EmailTemplateApplicationSendToEnumHiringTeamMember,
	EmailTemplateApplicationSendToEnumRole,
	EmailTemplateApplicationSendToEnumCandidate,
}

func (e EmailTemplateApplicationSendToEnum) IsValid() bool {
	switch e {
	case EmailTemplateApplicationSendToEnumJobRequest, EmailTemplateApplicationSendToEnumHiringTeamManager, EmailTemplateApplicationSendToEnumHiringTeamMember, EmailTemplateApplicationSendToEnumRole, EmailTemplateApplicationSendToEnumCandidate:
		return true
	}
	return false
}

func (e EmailTemplateApplicationSendToEnum) String() string {
	return string(e)
}

func (e *EmailTemplateApplicationSendToEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateApplicationSendToEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateApplicationSendToEnum", str)
	}
	return nil
}

func (e EmailTemplateApplicationSendToEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateEvent string

const (
	EmailTemplateEventCandidateAppliedToKiv           EmailTemplateEvent = "candidate_applied_to_kiv"
	EmailTemplateEventCandidateInterviewingToKiv      EmailTemplateEvent = "candidate_interviewing_to_kiv"
	EmailTemplateEventCandidateInterviewingToOffering EmailTemplateEvent = "candidate_interviewing_to_offering"
	EmailTemplateEventCreatedInterview                EmailTemplateEvent = "created_interview"
	EmailTemplateEventUpdatingInterview               EmailTemplateEvent = "updating_interview"
	EmailTemplateEventCancelInterview                 EmailTemplateEvent = "cancel_interview"
)

var AllEmailTemplateEvent = []EmailTemplateEvent{
	EmailTemplateEventCandidateAppliedToKiv,
	EmailTemplateEventCandidateInterviewingToKiv,
	EmailTemplateEventCandidateInterviewingToOffering,
	EmailTemplateEventCreatedInterview,
	EmailTemplateEventUpdatingInterview,
	EmailTemplateEventCancelInterview,
}

func (e EmailTemplateEvent) IsValid() bool {
	switch e {
	case EmailTemplateEventCandidateAppliedToKiv, EmailTemplateEventCandidateInterviewingToKiv, EmailTemplateEventCandidateInterviewingToOffering, EmailTemplateEventCreatedInterview, EmailTemplateEventUpdatingInterview, EmailTemplateEventCancelInterview:
		return true
	}
	return false
}

func (e EmailTemplateEvent) String() string {
	return string(e)
}

func (e *EmailTemplateEvent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateEvent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateEvent", str)
	}
	return nil
}

func (e EmailTemplateEvent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateInterviewEventEnum string

const (
	EmailTemplateInterviewEventEnumCreatedInterview  EmailTemplateInterviewEventEnum = "created_interview"
	EmailTemplateInterviewEventEnumUpdatingInterview EmailTemplateInterviewEventEnum = "updating_interview"
	EmailTemplateInterviewEventEnumCancelInterview   EmailTemplateInterviewEventEnum = "cancel_interview"
)

var AllEmailTemplateInterviewEventEnum = []EmailTemplateInterviewEventEnum{
	EmailTemplateInterviewEventEnumCreatedInterview,
	EmailTemplateInterviewEventEnumUpdatingInterview,
	EmailTemplateInterviewEventEnumCancelInterview,
}

func (e EmailTemplateInterviewEventEnum) IsValid() bool {
	switch e {
	case EmailTemplateInterviewEventEnumCreatedInterview, EmailTemplateInterviewEventEnumUpdatingInterview, EmailTemplateInterviewEventEnumCancelInterview:
		return true
	}
	return false
}

func (e EmailTemplateInterviewEventEnum) String() string {
	return string(e)
}

func (e *EmailTemplateInterviewEventEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateInterviewEventEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateInterviewEventEnum", str)
	}
	return nil
}

func (e EmailTemplateInterviewEventEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateSendTo string

const (
	EmailTemplateSendToInterviewer       EmailTemplateSendTo = "interviewer"
	EmailTemplateSendToJobRequest        EmailTemplateSendTo = "job_request"
	EmailTemplateSendToHiringTeamManager EmailTemplateSendTo = "hiring_team_manager"
	EmailTemplateSendToHiringTeamMember  EmailTemplateSendTo = "hiring_team_member"
	EmailTemplateSendToRole              EmailTemplateSendTo = "role"
	EmailTemplateSendToCandidate         EmailTemplateSendTo = "candidate"
)

var AllEmailTemplateSendTo = []EmailTemplateSendTo{
	EmailTemplateSendToInterviewer,
	EmailTemplateSendToJobRequest,
	EmailTemplateSendToHiringTeamManager,
	EmailTemplateSendToHiringTeamMember,
	EmailTemplateSendToRole,
	EmailTemplateSendToCandidate,
}

func (e EmailTemplateSendTo) IsValid() bool {
	switch e {
	case EmailTemplateSendToInterviewer, EmailTemplateSendToJobRequest, EmailTemplateSendToHiringTeamManager, EmailTemplateSendToHiringTeamMember, EmailTemplateSendToRole, EmailTemplateSendToCandidate:
		return true
	}
	return false
}

func (e EmailTemplateSendTo) String() string {
	return string(e)
}

func (e *EmailTemplateSendTo) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateSendTo(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateSendTo", str)
	}
	return nil
}

func (e EmailTemplateSendTo) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateStatus string

const (
	EmailTemplateStatusActive   EmailTemplateStatus = "active"
	EmailTemplateStatusInactive EmailTemplateStatus = "inactive"
)

var AllEmailTemplateStatus = []EmailTemplateStatus{
	EmailTemplateStatusActive,
	EmailTemplateStatusInactive,
}

func (e EmailTemplateStatus) IsValid() bool {
	switch e {
	case EmailTemplateStatusActive, EmailTemplateStatusInactive:
		return true
	}
	return false
}

func (e EmailTemplateStatus) String() string {
	return string(e)
}

func (e *EmailTemplateStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateStatus", str)
	}
	return nil
}

func (e EmailTemplateStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringJobLevel string

const (
	HiringJobLevelIntern   HiringJobLevel = "intern"
	HiringJobLevelFresher  HiringJobLevel = "fresher"
	HiringJobLevelJunior   HiringJobLevel = "junior"
	HiringJobLevelMiddle   HiringJobLevel = "middle"
	HiringJobLevelSenior   HiringJobLevel = "senior"
	HiringJobLevelManager  HiringJobLevel = "manager"
	HiringJobLevelDirector HiringJobLevel = "director"
)

var AllHiringJobLevel = []HiringJobLevel{
	HiringJobLevelIntern,
	HiringJobLevelFresher,
	HiringJobLevelJunior,
	HiringJobLevelMiddle,
	HiringJobLevelSenior,
	HiringJobLevelManager,
	HiringJobLevelDirector,
}

func (e HiringJobLevel) IsValid() bool {
	switch e {
	case HiringJobLevelIntern, HiringJobLevelFresher, HiringJobLevelJunior, HiringJobLevelMiddle, HiringJobLevelSenior, HiringJobLevelManager, HiringJobLevelDirector:
		return true
	}
	return false
}

func (e HiringJobLevel) String() string {
	return string(e)
}

func (e *HiringJobLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringJobLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringJobLevel", str)
	}
	return nil
}

func (e HiringJobLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringJobOrderByAdditionalField string

const (
	HiringJobOrderByAdditionalFieldTotalCandidatesRecruited HiringJobOrderByAdditionalField = "total_candidates_recruited"
)

var AllHiringJobOrderByAdditionalField = []HiringJobOrderByAdditionalField{
	HiringJobOrderByAdditionalFieldTotalCandidatesRecruited,
}

func (e HiringJobOrderByAdditionalField) IsValid() bool {
	switch e {
	case HiringJobOrderByAdditionalFieldTotalCandidatesRecruited:
		return true
	}
	return false
}

func (e HiringJobOrderByAdditionalField) String() string {
	return string(e)
}

func (e *HiringJobOrderByAdditionalField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringJobOrderByAdditionalField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringJobOrderByAdditionalField", str)
	}
	return nil
}

func (e HiringJobOrderByAdditionalField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringJobOrderByField string

const (
	HiringJobOrderByFieldName                     HiringJobOrderByField = "name"
	HiringJobOrderByFieldCreatedAt                HiringJobOrderByField = "created_at"
	HiringJobOrderByFieldAmount                   HiringJobOrderByField = "amount"
	HiringJobOrderByFieldSalaryFrom               HiringJobOrderByField = "salary_from"
	HiringJobOrderByFieldSalaryTo                 HiringJobOrderByField = "salary_to"
	HiringJobOrderByFieldLastApplyDate            HiringJobOrderByField = "last_apply_date"
	HiringJobOrderByFieldTotalCandidatesRecruited HiringJobOrderByField = "total_candidates_recruited"
	HiringJobOrderByFieldPriority                 HiringJobOrderByField = "priority"
)

var AllHiringJobOrderByField = []HiringJobOrderByField{
	HiringJobOrderByFieldName,
	HiringJobOrderByFieldCreatedAt,
	HiringJobOrderByFieldAmount,
	HiringJobOrderByFieldSalaryFrom,
	HiringJobOrderByFieldSalaryTo,
	HiringJobOrderByFieldLastApplyDate,
	HiringJobOrderByFieldTotalCandidatesRecruited,
	HiringJobOrderByFieldPriority,
}

func (e HiringJobOrderByField) IsValid() bool {
	switch e {
	case HiringJobOrderByFieldName, HiringJobOrderByFieldCreatedAt, HiringJobOrderByFieldAmount, HiringJobOrderByFieldSalaryFrom, HiringJobOrderByFieldSalaryTo, HiringJobOrderByFieldLastApplyDate, HiringJobOrderByFieldTotalCandidatesRecruited, HiringJobOrderByFieldPriority:
		return true
	}
	return false
}

func (e HiringJobOrderByField) String() string {
	return string(e)
}

func (e *HiringJobOrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringJobOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringJobOrderByField", str)
	}
	return nil
}

func (e HiringJobOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringJobStatus string

const (
	HiringJobStatusPendingApprovals HiringJobStatus = "pending_approvals"
	HiringJobStatusOpened           HiringJobStatus = "opened"
	HiringJobStatusClosed           HiringJobStatus = "closed"
	HiringJobStatusCancelled        HiringJobStatus = "cancelled"
)

var AllHiringJobStatus = []HiringJobStatus{
	HiringJobStatusPendingApprovals,
	HiringJobStatusOpened,
	HiringJobStatusClosed,
	HiringJobStatusCancelled,
}

func (e HiringJobStatus) IsValid() bool {
	switch e {
	case HiringJobStatusPendingApprovals, HiringJobStatusOpened, HiringJobStatusClosed, HiringJobStatusCancelled:
		return true
	}
	return false
}

func (e HiringJobStatus) String() string {
	return string(e)
}

func (e *HiringJobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringJobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringJobStatus", str)
	}
	return nil
}

func (e HiringJobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringJobStepStatusEnum string

const (
	HiringJobStepStatusEnumWaiting  HiringJobStepStatusEnum = "waiting"
	HiringJobStepStatusEnumPending  HiringJobStepStatusEnum = "pending"
	HiringJobStepStatusEnumAccepted HiringJobStepStatusEnum = "accepted"
	HiringJobStepStatusEnumRejected HiringJobStepStatusEnum = "rejected"
)

var AllHiringJobStepStatusEnum = []HiringJobStepStatusEnum{
	HiringJobStepStatusEnumWaiting,
	HiringJobStepStatusEnumPending,
	HiringJobStepStatusEnumAccepted,
	HiringJobStepStatusEnumRejected,
}

func (e HiringJobStepStatusEnum) IsValid() bool {
	switch e {
	case HiringJobStepStatusEnumWaiting, HiringJobStepStatusEnumPending, HiringJobStepStatusEnumAccepted, HiringJobStepStatusEnumRejected:
		return true
	}
	return false
}

func (e HiringJobStepStatusEnum) String() string {
	return string(e)
}

func (e *HiringJobStepStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringJobStepStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringJobStepStatusEnum", str)
	}
	return nil
}

func (e HiringJobStepStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringTeamOrderByAdditionalField string

const (
	HiringTeamOrderByAdditionalFieldOpeningRequests HiringTeamOrderByAdditionalField = "opening_requests"
	HiringTeamOrderByAdditionalFieldNewestApplied   HiringTeamOrderByAdditionalField = "newest_applied"
)

var AllHiringTeamOrderByAdditionalField = []HiringTeamOrderByAdditionalField{
	HiringTeamOrderByAdditionalFieldOpeningRequests,
	HiringTeamOrderByAdditionalFieldNewestApplied,
}

func (e HiringTeamOrderByAdditionalField) IsValid() bool {
	switch e {
	case HiringTeamOrderByAdditionalFieldOpeningRequests, HiringTeamOrderByAdditionalFieldNewestApplied:
		return true
	}
	return false
}

func (e HiringTeamOrderByAdditionalField) String() string {
	return string(e)
}

func (e *HiringTeamOrderByAdditionalField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringTeamOrderByAdditionalField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringTeamOrderByAdditionalField", str)
	}
	return nil
}

func (e HiringTeamOrderByAdditionalField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringTeamOrderByField string

const (
	HiringTeamOrderByFieldName            HiringTeamOrderByField = "name"
	HiringTeamOrderByFieldCreatedAt       HiringTeamOrderByField = "created_at"
	HiringTeamOrderByFieldOpeningRequests HiringTeamOrderByField = "opening_requests"
	HiringTeamOrderByFieldNewestApplied   HiringTeamOrderByField = "newest_applied"
)

var AllHiringTeamOrderByField = []HiringTeamOrderByField{
	HiringTeamOrderByFieldName,
	HiringTeamOrderByFieldCreatedAt,
	HiringTeamOrderByFieldOpeningRequests,
	HiringTeamOrderByFieldNewestApplied,
}

func (e HiringTeamOrderByField) IsValid() bool {
	switch e {
	case HiringTeamOrderByFieldName, HiringTeamOrderByFieldCreatedAt, HiringTeamOrderByFieldOpeningRequests, HiringTeamOrderByFieldNewestApplied:
		return true
	}
	return false
}

func (e HiringTeamOrderByField) String() string {
	return string(e)
}

func (e *HiringTeamOrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringTeamOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringTeamOrderByField", str)
	}
	return nil
}

func (e HiringTeamOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type I18nLanguage string

const (
	I18nLanguageEn I18nLanguage = "en"
	I18nLanguageVi I18nLanguage = "vi"
)

var AllI18nLanguage = []I18nLanguage{
	I18nLanguageEn,
	I18nLanguageVi,
}

func (e I18nLanguage) IsValid() bool {
	switch e {
	case I18nLanguageEn, I18nLanguageVi:
		return true
	}
	return false
}

func (e I18nLanguage) String() string {
	return string(e)
}

func (e *I18nLanguage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = I18nLanguage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid I18nLanguage", str)
	}
	return nil
}

func (e I18nLanguage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocationEnum string

const (
	LocationEnumHaNoi     LocationEnum = "ha_noi"
	LocationEnumHoChiMinh LocationEnum = "ho_chi_minh"
	LocationEnumDaNang    LocationEnum = "da_nang"
	LocationEnumJapan     LocationEnum = "japan"
	LocationEnumSingapore LocationEnum = "singapore"
)

var AllLocationEnum = []LocationEnum{
	LocationEnumHaNoi,
	LocationEnumHoChiMinh,
	LocationEnumDaNang,
	LocationEnumJapan,
	LocationEnumSingapore,
}

func (e LocationEnum) IsValid() bool {
	switch e {
	case LocationEnumHaNoi, LocationEnumHoChiMinh, LocationEnumDaNang, LocationEnumJapan, LocationEnumSingapore:
		return true
	}
	return false
}

func (e LocationEnum) String() string {
	return string(e)
}

func (e *LocationEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationEnum", str)
	}
	return nil
}

func (e LocationEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OutgoingEmailRecipientType string

const (
	OutgoingEmailRecipientTypeCandidate         OutgoingEmailRecipientType = "candidate"
	OutgoingEmailRecipientTypeInterviewer       OutgoingEmailRecipientType = "interviewer"
	OutgoingEmailRecipientTypeJobRequest        OutgoingEmailRecipientType = "job_request"
	OutgoingEmailRecipientTypeHiringTeamManager OutgoingEmailRecipientType = "hiring_team_manager"
	OutgoingEmailRecipientTypeHiringTeamMember  OutgoingEmailRecipientType = "hiring_team_member"
	OutgoingEmailRecipientTypeRole              OutgoingEmailRecipientType = "role"
)

var AllOutgoingEmailRecipientType = []OutgoingEmailRecipientType{
	OutgoingEmailRecipientTypeCandidate,
	OutgoingEmailRecipientTypeInterviewer,
	OutgoingEmailRecipientTypeJobRequest,
	OutgoingEmailRecipientTypeHiringTeamManager,
	OutgoingEmailRecipientTypeHiringTeamMember,
	OutgoingEmailRecipientTypeRole,
}

func (e OutgoingEmailRecipientType) IsValid() bool {
	switch e {
	case OutgoingEmailRecipientTypeCandidate, OutgoingEmailRecipientTypeInterviewer, OutgoingEmailRecipientTypeJobRequest, OutgoingEmailRecipientTypeHiringTeamManager, OutgoingEmailRecipientTypeHiringTeamMember, OutgoingEmailRecipientTypeRole:
		return true
	}
	return false
}

func (e OutgoingEmailRecipientType) String() string {
	return string(e)
}

func (e *OutgoingEmailRecipientType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OutgoingEmailRecipientType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OutgoingEmailRecipientType", str)
	}
	return nil
}

func (e OutgoingEmailRecipientType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OutgoingEmailStatus string

const (
	OutgoingEmailStatusPending OutgoingEmailStatus = "pending"
	OutgoingEmailStatusSent    OutgoingEmailStatus = "sent"
	OutgoingEmailStatusFailed  OutgoingEmailStatus = "failed"
)

var AllOutgoingEmailStatus = []OutgoingEmailStatus{
	OutgoingEmailStatusPending,
	OutgoingEmailStatusSent,
	OutgoingEmailStatusFailed,
}

func (e OutgoingEmailStatus) IsValid() bool {
	switch e {
	case OutgoingEmailStatusPending, OutgoingEmailStatusSent, OutgoingEmailStatusFailed:
		return true
	}
	return false
}

func (e OutgoingEmailStatus) String() string {
	return string(e)
}

func (e *OutgoingEmailStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OutgoingEmailStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OutgoingEmailStatus", str)
	}
	return nil
}

func (e OutgoingEmailStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Period string

const (
	PeriodAll     Period = "all"
	PeriodDay     Period = "day"
	PeriodWeek    Period = "week"
	PeriodMonth   Period = "month"
	PeriodQuarter Period = "quarter"
	PeriodYear    Period = "year"
)

var AllPeriod = []Period{
	PeriodAll,
	PeriodDay,
	PeriodWeek,
	PeriodMonth,
	PeriodQuarter,
	PeriodYear,
}

func (e Period) IsValid() bool {
	switch e {
	case PeriodAll, PeriodDay, PeriodWeek, PeriodMonth, PeriodQuarter, PeriodYear:
		return true
	}
	return false
}

func (e Period) String() string {
	return string(e)
}

func (e *Period) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Period(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Period", str)
	}
	return nil
}

func (e Period) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PermissionGroupType string

const (
	PermissionGroupTypeSystem   PermissionGroupType = "system"
	PermissionGroupTypeFunction PermissionGroupType = "function"
)

var AllPermissionGroupType = []PermissionGroupType{
	PermissionGroupTypeSystem,
	PermissionGroupTypeFunction,
}

func (e PermissionGroupType) IsValid() bool {
	switch e {
	case PermissionGroupTypeSystem, PermissionGroupTypeFunction:
		return true
	}
	return false
}

func (e PermissionGroupType) String() string {
	return string(e)
}

func (e *PermissionGroupType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionGroupType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionGroupType", str)
	}
	return nil
}

func (e PermissionGroupType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RecTeamOrderByField string

const (
	RecTeamOrderByFieldName      RecTeamOrderByField = "name"
	RecTeamOrderByFieldCreatedAt RecTeamOrderByField = "created_at"
	RecTeamOrderByFieldLeader    RecTeamOrderByField = "leader"
)

var AllRecTeamOrderByField = []RecTeamOrderByField{
	RecTeamOrderByFieldName,
	RecTeamOrderByFieldCreatedAt,
	RecTeamOrderByFieldLeader,
}

func (e RecTeamOrderByField) IsValid() bool {
	switch e {
	case RecTeamOrderByFieldName, RecTeamOrderByFieldCreatedAt, RecTeamOrderByFieldLeader:
		return true
	}
	return false
}

func (e RecTeamOrderByField) String() string {
	return string(e)
}

func (e *RecTeamOrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecTeamOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecTeamOrderByField", str)
	}
	return nil
}

func (e RecTeamOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReportFilterPeriod string

const (
	ReportFilterPeriodAll     ReportFilterPeriod = "all"
	ReportFilterPeriodYear    ReportFilterPeriod = "year"
	ReportFilterPeriodQuarter ReportFilterPeriod = "quarter"
	ReportFilterPeriodMonth   ReportFilterPeriod = "month"
	ReportFilterPeriodWeek    ReportFilterPeriod = "week"
)

var AllReportFilterPeriod = []ReportFilterPeriod{
	ReportFilterPeriodAll,
	ReportFilterPeriodYear,
	ReportFilterPeriodQuarter,
	ReportFilterPeriodMonth,
	ReportFilterPeriodWeek,
}

func (e ReportFilterPeriod) IsValid() bool {
	switch e {
	case ReportFilterPeriodAll, ReportFilterPeriodYear, ReportFilterPeriodQuarter, ReportFilterPeriodMonth, ReportFilterPeriodWeek:
		return true
	}
	return false
}

func (e ReportFilterPeriod) String() string {
	return string(e)
}

func (e *ReportFilterPeriod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportFilterPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportFilterPeriod", str)
	}
	return nil
}

func (e ReportFilterPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReportOrderByField string

const (
	ReportOrderByFieldHiringTeamName       ReportOrderByField = "hiring_team_name"
	ReportOrderByFieldHiringTeamCreatedAt  ReportOrderByField = "hiring_team_created_at"
	ReportOrderByFieldJobPositionName      ReportOrderByField = "job_position_name"
	ReportOrderByFieldJobPositionCreatedAt ReportOrderByField = "job_position_created_at"
)

var AllReportOrderByField = []ReportOrderByField{
	ReportOrderByFieldHiringTeamName,
	ReportOrderByFieldHiringTeamCreatedAt,
	ReportOrderByFieldJobPositionName,
	ReportOrderByFieldJobPositionCreatedAt,
}

func (e ReportOrderByField) IsValid() bool {
	switch e {
	case ReportOrderByFieldHiringTeamName, ReportOrderByFieldHiringTeamCreatedAt, ReportOrderByFieldJobPositionName, ReportOrderByFieldJobPositionCreatedAt:
		return true
	}
	return false
}

func (e ReportOrderByField) String() string {
	return string(e)
}

func (e *ReportOrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportOrderByField", str)
	}
	return nil
}

func (e ReportOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SalaryTypeEnum string

const (
	SalaryTypeEnumRange     SalaryTypeEnum = "range"
	SalaryTypeEnumUpTo      SalaryTypeEnum = "up_to"
	SalaryTypeEnumNegotiate SalaryTypeEnum = "negotiate"
	SalaryTypeEnumMinimum   SalaryTypeEnum = "minimum"
)

var AllSalaryTypeEnum = []SalaryTypeEnum{
	SalaryTypeEnumRange,
	SalaryTypeEnumUpTo,
	SalaryTypeEnumNegotiate,
	SalaryTypeEnumMinimum,
}

func (e SalaryTypeEnum) IsValid() bool {
	switch e {
	case SalaryTypeEnumRange, SalaryTypeEnumUpTo, SalaryTypeEnumNegotiate, SalaryTypeEnumMinimum:
		return true
	}
	return false
}

func (e SalaryTypeEnum) String() string {
	return string(e)
}

func (e *SalaryTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SalaryTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SalaryTypeEnum", str)
	}
	return nil
}

func (e SalaryTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "active"
	UserStatusInactive UserStatus = "inactive"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusInactive,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusInactive:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuditTrailAction string

const (
	AuditTrailActionCreate AuditTrailAction = "create"
	AuditTrailActionUpdate AuditTrailAction = "update"
	AuditTrailActionDelete AuditTrailAction = "delete"
)

var AllAuditTrailAction = []AuditTrailAction{
	AuditTrailActionCreate,
	AuditTrailActionUpdate,
	AuditTrailActionDelete,
}

func (e AuditTrailAction) IsValid() bool {
	switch e {
	case AuditTrailActionCreate, AuditTrailActionUpdate, AuditTrailActionDelete:
		return true
	}
	return false
}

func (e AuditTrailAction) String() string {
	return string(e)
}

func (e *AuditTrailAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditTrailAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid auditTrailAction", str)
	}
	return nil
}

func (e AuditTrailAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectModule string

const (
	ProjectModuleHiringTeams           ProjectModule = "hiring_teams"
	ProjectModuleJobPositions          ProjectModule = "job_positions"
	ProjectModuleHiringJobs            ProjectModule = "hiring_jobs"
	ProjectModuleCandidates            ProjectModule = "candidates"
	ProjectModuleSkills                ProjectModule = "skills"
	ProjectModuleEmailTemplates        ProjectModule = "email_templates"
	ProjectModuleUsers                 ProjectModule = "users"
	ProjectModuleSkillTypes            ProjectModule = "skill_types"
	ProjectModuleRoles                 ProjectModule = "roles"
	ProjectModuleRecTeams              ProjectModule = "rec_teams"
	ProjectModuleCandidateNotes        ProjectModule = "candidate_notes"
	ProjectModuleCandidateHistoryCalls ProjectModule = "candidate_history_calls"
)

var AllProjectModule = []ProjectModule{
	ProjectModuleHiringTeams,
	ProjectModuleJobPositions,
	ProjectModuleHiringJobs,
	ProjectModuleCandidates,
	ProjectModuleSkills,
	ProjectModuleEmailTemplates,
	ProjectModuleUsers,
	ProjectModuleSkillTypes,
	ProjectModuleRoles,
	ProjectModuleRecTeams,
	ProjectModuleCandidateNotes,
	ProjectModuleCandidateHistoryCalls,
}

func (e ProjectModule) IsValid() bool {
	switch e {
	case ProjectModuleHiringTeams, ProjectModuleJobPositions, ProjectModuleHiringJobs, ProjectModuleCandidates, ProjectModuleSkills, ProjectModuleEmailTemplates, ProjectModuleUsers, ProjectModuleSkillTypes, ProjectModuleRoles, ProjectModuleRecTeams, ProjectModuleCandidateNotes, ProjectModuleCandidateHistoryCalls:
		return true
	}
	return false
}

func (e ProjectModule) String() string {
	return string(e)
}

func (e *ProjectModule) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectModule(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid projectModule", str)
	}
	return nil
}

func (e ProjectModule) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
