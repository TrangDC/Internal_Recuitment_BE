// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package ent

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ApplicationReportFailReason struct {
	PoorProfessionalism      int `json:"poor_professionalism"`
	PoorFitAndEngagement     int `json:"poor_fit_and_engagement"`
	OverExpectations         int `json:"over_expectations"`
	OverQualification        int `json:"over_qualification"`
	LanguageDeficiency       int `json:"language_deficiency"`
	WeakTechnicalSkills      int `json:"weak_technical_skills"`
	PoorInterpersonalSkills  int `json:"poor_interpersonal_skills"`
	PoorProblemSolvingSkills int `json:"poor_problem_solving_skills"`
	PoorManagementSkills     int `json:"poor_management_skills"`
	CandidateWithdrawal      int `json:"candidate_withdrawal"`
	Others                   int `json:"others"`
}

type ApplicationReportProcessing struct {
	InviteToInterview int `json:"invite_to_interview"`
	Interviewing      int `json:"interviewing"`
	Done              int `json:"done"`
	Cancelled         int `json:"cancelled"`
}

type ApplicationReportTable struct {
	Processing  *ApplicationReportProcessing `json:"processing"`
	Kiv         *ApplicationReportFailReason `json:"kiv"`
	OfferedLost *ApplicationReportFailReason `json:"offered_lost"`
}

type AttachmentInput struct {
	ID       string           `json:"id"`
	Folder   AttachmentFolder `json:"folder"`
	FileName string           `json:"fileName"`
	Action   AttachmentAction `json:"action"`
}

type AttachmentResponse struct {
	FileName string           `json:"fileName"`
	URL      string           `json:"url"`
	Action   AttachmentAction `json:"action"`
	ID       string           `json:"id"`
}

type AuditTrailFilter struct {
	RecordID   *string           `json:"recordId"`
	Module     *ProjectModule    `json:"module"`
	ActionType *AuditTrailAction `json:"actionType"`
	FromDate   *time.Time        `json:"fromDate"`
	ToDate     *time.Time        `json:"toDate"`
}

type AuditTrailFreeWord struct {
	RecordChange *string `json:"recordChange"`
}

type AuditTrailResponse struct {
	Data *AuditTrail `json:"data"`
}

type AuditTrailResponseGetAll struct {
	Edges      []*AuditTrailEdge `json:"edges"`
	Pagination *Pagination       `json:"pagination"`
}

type AuthenticationToken struct {
	AccessToken  string    `json:"accessToken"`
	RefreshToken string    `json:"refreshToken"`
	TokenType    string    `json:"tokenType"`
	ExpiresAt    time.Time `json:"expiresAt"`
	Email        string    `json:"email"`
}

type Base64Response struct {
	Data string `json:"data"`
}

type CandidateConversionRateReport struct {
	ID           string `json:"id"`
	TeamName     string `json:"team_name"`
	Applied      int    `json:"applied"`
	Interviewing int    `json:"interviewing"`
	Offering     int    `json:"offering"`
	Hired        int    `json:"hired"`
}

type CandidateConversionRateReportEdge struct {
	Node   *CandidateConversionRateReport `json:"node"`
	Cursor Cursor                         `json:"cursor"`
}

type CandidateConversionRateReportResponse struct {
	Data []*ReportNumberByType `json:"data"`
}

type CandidateFilter struct {
	Name                *string                    `json:"name"`
	Email               *string                    `json:"email"`
	Phone               *string                    `json:"phone"`
	DobFromDate         *time.Time                 `json:"dob_from_date"`
	DobToDate           *time.Time                 `json:"dob_to_date"`
	Status              *CandidateStatusEnum       `json:"status"`
	FromDate            *time.Time                 `json:"from_date"`
	ToDate              *time.Time                 `json:"to_date"`
	IsBlackList         *bool                      `json:"is_black_list"`
	JobID               *string                    `json:"job_id"`
	IsAbleToInterview   *bool                      `json:"is_able_to_interview"`
	FailedReason        []CandidateJobFailedReason `json:"failed_reason"`
	ReferenceUID        []string                   `json:"reference_uid"`
	RecruitTimeFromDate *time.Time                 `json:"recruit_time_from_date"`
	RecruitTimeToDate   *time.Time                 `json:"recruit_time_to_date"`
	SkillTypeIds        []string                   `json:"skill_type_ids"`
	SkillIds            []string                   `json:"skill_ids"`
	ReferenceType       []CandidateReferenceType   `json:"reference_type"`
}

type CandidateFreeWord struct {
	Name  *string `json:"name"`
	Email *string `json:"email"`
	Phone *string `json:"phone"`
}

type CandidateInterviewCalendarFilter struct {
	InterviewDate     *time.Time `json:"interview_date"`
	StartFrom         *time.Time `json:"start_from"`
	EndAt             *time.Time `json:"end_at"`
	Interviewer       []string   `json:"interviewer"`
	FromDate          *time.Time `json:"from_date"`
	ToDate            *time.Time `json:"to_date"`
	TeamID            *string    `json:"team_id"`
	HiringJobID       *string    `json:"hiring_job_id"`
	InterviewDateFrom *time.Time `json:"interview_date_from"`
	InterviewDateTo   *time.Time `json:"interview_date_to"`
}

type CandidateInterviewFilter struct {
	CandidateJobID string     `json:"candidate_job_id"`
	InterviewDate  *time.Time `json:"interview_date"`
	StartFrom      *time.Time `json:"start_from"`
	EndAt          *time.Time `json:"end_at"`
	Interviewer    []string   `json:"interviewer"`
	FromDate       *time.Time `json:"from_date"`
	ToDate         *time.Time `json:"to_date"`
}

type CandidateInterviewFreeWord struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
}

type CandidateInterviewResponse struct {
	Data *CandidateInterview `json:"data"`
}

type CandidateInterviewResponseGetAll struct {
	Edges      []*CandidateInterviewEdge `json:"edges"`
	Pagination *Pagination               `json:"pagination"`
}

type CandidateInterviewResponseValidate struct {
	Data *CandidateInterviewValidate `json:"data"`
}

type CandidateInterviewValidate struct {
	InterviewerInvalid        []string `json:"interviewer_invalid"`
	InvalidSchedule           bool     `json:"invalid_schedule"`
	CandidateName             string   `json:"candidate_name"`
	CandidateJobInvalidStatus bool     `json:"candidate_job_invalid_status"`
}

type CandidateInterviewValidateInput struct {
	ID             *string   `json:"id"`
	Title          string    `json:"title"`
	CandidateJobID *string   `json:"candidate_job_id"`
	CandidateID    *string   `json:"candidate_id"`
	JobID          *string   `json:"job_id"`
	InterviewDate  time.Time `json:"interview_date"`
	StartFrom      time.Time `json:"start_from"`
	EndAt          time.Time `json:"end_at"`
	Interviewer    []string  `json:"interviewer"`
}

type CandidateJobByOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     CandidateJobOrderByField `json:"field"`
}

type CandidateJobFeedbackFilter struct {
	CandidateJobID string  `json:"candidate_job_id"`
	CreatedBy      *string `json:"created_by"`
}

type CandidateJobFeedbackFreeWord struct {
	Feedback *string `json:"feedback"`
	UserName *string `json:"user_name"`
}

type CandidateJobFeedbackResponse struct {
	Data *CandidateJobFeedback `json:"data"`
}

type CandidateJobFeedbackResponseGetAll struct {
	Edges      []*CandidateJobFeedbackEdge `json:"edges"`
	Pagination *Pagination                 `json:"pagination"`
}

type CandidateJobFilter struct {
	Status       *CandidateJobStatus        `json:"status"`
	FromDate     *time.Time                 `json:"from_date"`
	ToDate       *time.Time                 `json:"to_date"`
	TeamID       *string                    `json:"team_id"`
	HiringJobID  *string                    `json:"hiring_job_id"`
	CandidateID  string                     `json:"candidate_id"`
	FailedReason []CandidateJobFailedReason `json:"failed_reason"`
}

type CandidateJobFreeWord struct {
	Team      *string `json:"team"`
	HiringJob *string `json:"hiring_job"`
}

type CandidateJobGroupByInterview struct {
	Hired        *CandidateJobGroupInterviewFeedback `json:"hired"`
	Kiv          *CandidateJobGroupInterviewFeedback `json:"kiv"`
	OfferLost    *CandidateJobGroupInterviewFeedback `json:"offer_lost"`
	ExStaff      *CandidateJobGroupInterviewFeedback `json:"ex_staff"`
	Applied      *CandidateJobGroupInterviewFeedback `json:"applied"`
	Interviewing *CandidateJobGroupInterviewFeedback `json:"interviewing"`
	Offering     *CandidateJobGroupInterviewFeedback `json:"offering"`
}

type CandidateJobGroupByInterviewResponse struct {
	Data *CandidateJobGroupByInterview `json:"data"`
}

type CandidateJobGroupByStatus struct {
	Hired        []*CandidateJob `json:"hired"`
	Kiv          []*CandidateJob `json:"kiv"`
	OfferLost    []*CandidateJob `json:"offer_lost"`
	ExStaff      []*CandidateJob `json:"ex_staff"`
	Applied      []*CandidateJob `json:"applied"`
	Interviewing []*CandidateJob `json:"interviewing"`
	Offering     []*CandidateJob `json:"offering"`
}

type CandidateJobGroupByStatusFilter struct {
	HiringJobID  []string       `json:"hiring_job_id"`
	TeamID       []string       `json:"team_id"`
	Priority     []int          `json:"priority"`
	SkillID      []string       `json:"skill_id"`
	FromDate     *time.Time     `json:"from_date"`
	ToDate       *time.Time     `json:"to_date"`
	Location     []LocationEnum `json:"location"`
	CreatedByIds []string       `json:"created_by_ids"`
}

type CandidateJobGroupByStatusFreeWord struct {
	JobTitle *string `json:"job_title"`
}

type CandidateJobGroupByStatusResponse struct {
	Data       *CandidateJobGroupByStatus `json:"data"`
	Pagination *Pagination                `json:"pagination"`
}

type CandidateJobGroupInterviewFeedback struct {
	Interview []*CandidateInterview   `json:"interview"`
	Feedback  []*CandidateJobFeedback `json:"feedback"`
}

type CandidateJobResponse struct {
	Data *CandidateJob `json:"data"`
}

type CandidateJobResponseGetAll struct {
	Edges      []*CandidateJobEdge `json:"edges"`
	Pagination *Pagination         `json:"pagination"`
}

type CandidateReport struct {
	Total           int                   `json:"total"`
	ActiveNumber    int                   `json:"active_number"`
	BlacklistNumber int                   `json:"blacklist_number"`
	NumberByRefType []*ReportNumberByType `json:"number_by_ref_type"`
	StatsByTime     *ReportStatsByTime    `json:"stats_by_time"`
}

type CandidateReportResponse struct {
	Data *CandidateReport `json:"data"`
}

type CandidateResponse struct {
	Data *Candidate `json:"data"`
}

type CandidateResponseGetAll struct {
	Edges      []*CandidateEdge `json:"edges"`
	Pagination *Pagination      `json:"pagination"`
}

type CandidateSelection struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Phone string `json:"phone"`
	Email string `json:"email"`
}

type CandidateSelectionEdge struct {
	Node   *CandidateSelection `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

type CandidateSelectionResponseGetAll struct {
	Edges      []*CandidateSelectionEdge `json:"edges"`
	Pagination *Pagination               `json:"pagination"`
}

type EmailTemplateFilter struct {
	Event  []*EmailTemplateEvent  `json:"event"`
	Status *EmailTemplateStatus   `json:"status"`
	SendTo []*EmailTemplateSendTo `json:"send_to"`
}

type EmailTemplateFreeWord struct {
	Subject *string `json:"subject"`
}

type EmailTemplateKeyword struct {
	General      []*JSONFormat `json:"general"`
	Team         []*JSONFormat `json:"team"`
	HiringJob    []*JSONFormat `json:"hiringJob"`
	Candidate    []*JSONFormat `json:"candidate"`
	CandidateJob []*JSONFormat `json:"candidateJob"`
	Interview    []*JSONFormat `json:"interview"`
	Link         []*JSONFormat `json:"link"`
}

type EmailTemplateKeywordFilter struct {
	Event EmailTemplateEvent `json:"event"`
}

type EmailTemplateResponse struct {
	Data *EmailTemplate `json:"data"`
}

type EmailTemplateResponseGetAll struct {
	Edges      []*EmailTemplateEdge `json:"edges"`
	Pagination *Pagination          `json:"pagination"`
}

type EntitySkillRecord struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	SkillID     string  `json:"skill_id"`
	OrderID     int     `json:"orderId"`
}

type EntitySkillRecordInput struct {
	ID      *string `json:"id"`
	SkillID string  `json:"skill_id"`
	OrderID int     `json:"orderId"`
}

type EntitySkillType struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Description  *string              `json:"description"`
	EntitySkills []*EntitySkillRecord `json:"entity_skills"`
	OrderID      int                  `json:"orderId"`
}

type GetEmailTemplateKeywordResponse struct {
	Data *EmailTemplateKeyword `json:"data"`
}

type HiringJobFilter struct {
	Name         *string          `json:"name"`
	TeamIds      []string         `json:"team_ids"`
	Status       *HiringJobStatus `json:"status"`
	Priority     *int             `json:"priority"`
	Location     []*LocationEnum  `json:"location"`
	SkillIds     []string         `json:"skill_ids"`
	CreatedByIds []string         `json:"created_by_ids"`
	ForOwner     *bool            `json:"for_owner"`
	ForTeam      *bool            `json:"for_team"`
}

type HiringJobFreeWord struct {
	Name *string `json:"name"`
}

type HiringJobOrderBy struct {
	Direction OrderDirection        `json:"direction"`
	Field     HiringJobOrderByField `json:"field"`
}

type HiringJobResponse struct {
	Data *HiringJob `json:"data"`
}

type HiringJobResponseGetAll struct {
	Edges      []*HiringJobEdge `json:"edges"`
	Pagination *Pagination      `json:"pagination"`
}

type HiringJobSelection struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type HiringJobSelectionEdge struct {
	Node   *HiringJobSelection `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

type HiringJobSelectionResponseGetAll struct {
	Edges      []*HiringJobSelectionEdge `json:"edges"`
	Pagination *Pagination               `json:"pagination"`
}

type JSONFormat struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type NewAttachmentInput struct {
	ID           *string `json:"id"`
	DocumentName string  `json:"document_name"`
	DocumentID   string  `json:"document_id"`
}

type NewCandidateInput struct {
	Name               string                    `json:"name"`
	Email              string                    `json:"email"`
	Phone              string                    `json:"phone"`
	Dob                *time.Time                `json:"dob"`
	ReferenceType      CandidateReferenceType    `json:"reference_type"`
	ReferenceValue     string                    `json:"reference_value"`
	ReferenceUID       string                    `json:"reference_uid"`
	RecruitTime        *time.Time                `json:"recruit_time"`
	Description        string                    `json:"description"`
	Country            string                    `json:"country"`
	EntitySkillRecords []*EntitySkillRecordInput `json:"entity_skill_records"`
	Attachments        []*NewAttachmentInput     `json:"attachments"`
}

type NewCandidateInterview4CalendarInput struct {
	Title         string    `json:"title"`
	Description   string    `json:"description"`
	CandidateID   []string  `json:"candidate_id"`
	JobID         string    `json:"job_id"`
	InterviewDate time.Time `json:"interview_date"`
	StartFrom     time.Time `json:"start_from"`
	EndAt         time.Time `json:"end_at"`
	Interviewer   []string  `json:"interviewer"`
	Location      string    `json:"location"`
	MeetingLink   string    `json:"meeting_link"`
}

type NewCandidateInterviewInput struct {
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	CandidateJobID string    `json:"candidate_job_id"`
	InterviewDate  time.Time `json:"interview_date"`
	StartFrom      time.Time `json:"start_from"`
	EndAt          time.Time `json:"end_at"`
	Interviewer    []string  `json:"interviewer"`
	Location       string    `json:"location"`
	MeetingLink    string    `json:"meeting_link"`
}

type NewCandidateJobFeedbackInput struct {
	CandidateJobID string                `json:"candidate_job_id"`
	Feedback       string                `json:"feedback"`
	Attachments    []*NewAttachmentInput `json:"attachments"`
}

type NewCandidateJobInput struct {
	CandidateID         string                     `json:"candidate_id"`
	HiringJobID         string                     `json:"hiring_job_id"`
	Status              CandidateJobStatusOpen     `json:"status"`
	Attachments         []*NewAttachmentInput      `json:"attachments"`
	OnboardDate         *time.Time                 `json:"onboard_date"`
	OfferExpirationDate *time.Time                 `json:"offer_expiration_date"`
	FailedReason        []CandidateJobFailedReason `json:"failed_reason"`
}

type NewEmailTemplateInput struct {
	Event     EmailTemplateEvent    `json:"event"`
	Subject   string                `json:"subject"`
	Content   string                `json:"content"`
	SendTo    []EmailTemplateSendTo `json:"send_to"`
	RoleIds   []string              `json:"roleIds"`
	Signature string                `json:"signature"`
	Cc        []string              `json:"cc"`
	Bcc       []string              `json:"bcc"`
}

type NewEntityPermissionInput struct {
	ID           *string `json:"id"`
	ForOwner     bool    `json:"for_owner"`
	ForTeam      bool    `json:"for_team"`
	ForAll       bool    `json:"for_all"`
	PermissionID string  `json:"permission_id"`
}

type NewHiringJobInput struct {
	Status             HiringJobStatus           `json:"status"`
	Name               string                    `json:"name"`
	Description        string                    `json:"description"`
	Amount             int                       `json:"amount"`
	Location           LocationEnum              `json:"location"`
	SalaryType         SalaryTypeEnum            `json:"salary_type"`
	SalaryFrom         int                       `json:"salary_from"`
	SalaryTo           int                       `json:"salary_to"`
	Currency           CurrencyEnum              `json:"currency"`
	TeamID             string                    `json:"team_id"`
	CreatedBy          string                    `json:"created_by"`
	Priority           int                       `json:"priority"`
	EntitySkillRecords []*EntitySkillRecordInput `json:"entity_skill_records"`
}

type NewRoleInput struct {
	Name              string                      `json:"name"`
	Description       *string                     `json:"description"`
	EntityPermissions []*NewEntityPermissionInput `json:"entity_permissions"`
}

type NewSkillInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	SkillTypeID *string `json:"skill_type_id"`
}

type NewSkillTypeInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type NewTeamInput struct {
	Name    string   `json:"name"`
	Members []string `json:"members"`
}

type NewUserInput struct {
	Name              string                      `json:"name"`
	WorkEmail         string                      `json:"work_email"`
	Status            UserStatus                  `json:"status"`
	EntityPermissions []*NewEntityPermissionInput `json:"entity_permissions"`
	TeamID            *string                     `json:"team_id"`
	RoleID            []string                    `json:"role_id"`
}

type Pagination struct {
	Page    int `json:"page"`
	PerPage int `json:"perPage"`
	Total   int `json:"total"`
}

type PaginationInput struct {
	Page    *int `json:"page"`
	PerPage *int `json:"perPage"`
}

type PermissionGroupResponse struct {
	Data *PermissionGroup `json:"data"`
}

type PermissionGroupResponseGetAll struct {
	Edges      []*PermissionGroupEdge `json:"edges"`
	Pagination *Pagination            `json:"pagination"`
}

type RecruitmentReportResponse struct {
	Data *ReportStatsByTime `json:"data"`
}

type ReportApplication struct {
	FromDate     time.Time `json:"from_date"`
	ToDate       time.Time `json:"to_date"`
	Applied      int       `json:"applied"`
	Interviewing int       `json:"interviewing"`
	Offering     int       `json:"offering"`
	Hired        int       `json:"hired"`
	Kiv          int       `json:"kiv"`
	OfferLost    int       `json:"offer_lost"`
	ExStaff      int       `json:"ex_staff"`
}

type ReportApplicationEdge struct {
	Node   []*ReportApplication `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

type ReportApplicationReportTableResponse struct {
	Data *ApplicationReportTable `json:"data"`
}

type ReportApplicationResponse struct {
	Edges *ReportApplicationEdge `json:"edges"`
}

type ReportCandidateColumnChartEdge struct {
	Node   []*ReportRecruitment `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

type ReportCandidateColumnChartResponse struct {
	Edges *ReportCandidateColumnChartEdge `json:"edges"`
}

type ReportCandidateConversionRateChartResponse struct {
	Data *CandidateConversionRateReport `json:"data"`
}

type ReportCandidateConversionRateTableResponse struct {
	Edges      []*CandidateConversionRateReportEdge `json:"edges"`
	Pagination *Pagination                          `json:"pagination"`
}

type ReportCandidateLcc struct {
	Total        int                `json:"total"`
	NonBlackList int                `json:"non_black_list"`
	BlackList    int                `json:"black_list"`
	Recruitment  *ReportRecruitment `json:"recruitment"`
}

type ReportCandidateLCCResponse struct {
	Data *ReportCandidateLcc `json:"data"`
}

type ReportFilter struct {
	FilterPeriod ReportFilterPeriod `json:"filter_period"`
	FromDate     time.Time          `json:"from_date"`
	ToDate       time.Time          `json:"to_date"`
}

type ReportNumberByType struct {
	Type   string `json:"type"`
	Number int    `json:"number"`
}

type ReportOrderBy struct {
	Direction OrderDirection     `json:"direction"`
	Field     ReportOrderByField `json:"field"`
}

type ReportRecruitment struct {
	Eb             int        `json:"eb"`
	Rec            int        `json:"rec"`
	HiringPlatform int        `json:"hiring_platform"`
	Reference      int        `json:"reference"`
	Headhunt       int        `json:"headhunt"`
	FromDate       *time.Time `json:"from_date"`
	ToDate         *time.Time `json:"to_date"`
}

type ReportStatsByTime struct {
	Total              int                         `json:"total"`
	NumberByType       []*ReportNumberByType       `json:"number_by_type"`
	StatsPerTimePeriod []*ReportStatsPerTimePeriod `json:"stats_per_time_period"`
}

type ReportStatsPerTimePeriod struct {
	FromDate     time.Time             `json:"from_date"`
	ToDate       time.Time             `json:"to_date"`
	Total        int                   `json:"total"`
	NumberByType []*ReportNumberByType `json:"number_by_type"`
}

type RoleFilter struct {
	Name *string `json:"name"`
}

type RoleFreeWord struct {
	Name *string `json:"name"`
}

type RoleResponse struct {
	Data *Role `json:"data"`
}

type RoleResponseGetAll struct {
	Edges      []*RoleEdge `json:"edges"`
	Pagination *Pagination `json:"pagination"`
}

type RoleSelection struct {
	ID     string            `json:"id"`
	Name   string            `json:"name"`
	Skills []*SkillSelection `json:"skills"`
}

type RoleSelectionEdge struct {
	Node   *RoleSelection `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

type RoleSelectionResponseGetAll struct {
	Edges      []*RoleSelectionEdge `json:"edges"`
	Pagination *Pagination          `json:"pagination"`
}

type SkillFilter struct {
	Name *string `json:"name"`
}

type SkillFreeWord struct {
	Name *string `json:"name"`
}

type SkillResponse struct {
	Data *Skill `json:"data"`
}

type SkillResponseGetAll struct {
	Edges      []*SkillEdge `json:"edges"`
	Pagination *Pagination  `json:"pagination"`
}

type SkillSelection struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type SkillSelectionEdge struct {
	Node   *SkillSelection `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

type SkillSelectionResponseGetAll struct {
	Edges      []*SkillSelectionEdge `json:"edges"`
	Pagination *Pagination           `json:"pagination"`
}

type SkillTypeFilter struct {
	Name *string `json:"name"`
}

type SkillTypeFreeWord struct {
	Name *string `json:"name"`
}

type SkillTypeResponse struct {
	Data *SkillType `json:"data"`
}

type SkillTypeResponseGetAll struct {
	Edges      []*SkillTypeEdge `json:"edges"`
	Pagination *Pagination      `json:"pagination"`
}

type SkillTypeSelection struct {
	ID     string            `json:"id"`
	Name   string            `json:"name"`
	Skills []*SkillSelection `json:"skills"`
}

type SkillTypeSelectionEdge struct {
	Node   *SkillTypeSelection `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

type SkillTypeSelectionResponseGetAll struct {
	Edges      []*SkillTypeSelectionEdge `json:"edges"`
	Pagination *Pagination               `json:"pagination"`
}

type TeamFilter struct {
	Name     *string `json:"name"`
	ForTeam  *bool   `json:"for_team"`
	ForOwner *bool   `json:"for_owner"`
}

type TeamFreeWord struct {
	Name *string `json:"name"`
}

type TeamOrderBy struct {
	Direction OrderDirection   `json:"direction"`
	Field     TeamOrderByField `json:"field"`
}

type TeamResponse struct {
	Data *Team `json:"data"`
}

type TeamResponseGetAll struct {
	Edges      []*TeamEdge `json:"edges"`
	Pagination *Pagination `json:"pagination"`
}

type TeamSelection struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type TeamSelectionEdge struct {
	Node   *TeamSelection `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

type TeamSelectionResponseGetAll struct {
	Edges      []*TeamSelectionEdge `json:"edges"`
	Pagination *Pagination          `json:"pagination"`
}

type UpdateCandidateAttachment struct {
	Attachments []*NewAttachmentInput `json:"attachments"`
}

type UpdateCandidateInput struct {
	Name               string                    `json:"name"`
	Email              string                    `json:"email"`
	Phone              string                    `json:"phone"`
	Dob                *time.Time                `json:"dob"`
	ReferenceType      CandidateReferenceType    `json:"reference_type"`
	ReferenceValue     string                    `json:"reference_value"`
	ReferenceUID       string                    `json:"reference_uid"`
	RecruitTime        *time.Time                `json:"recruit_time"`
	Description        string                    `json:"description"`
	Country            string                    `json:"country"`
	EntitySkillRecords []*EntitySkillRecordInput `json:"entity_skill_records"`
	Attachments        []*NewAttachmentInput     `json:"attachments"`
}

type UpdateCandidateInterviewInput struct {
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	CandidateJobID string    `json:"candidate_job_id"`
	InterviewDate  time.Time `json:"interview_date"`
	StartFrom      time.Time `json:"start_from"`
	EndAt          time.Time `json:"end_at"`
	Interviewer    []string  `json:"interviewer"`
	Location       string    `json:"location"`
	MeetingLink    string    `json:"meeting_link"`
}

type UpdateCandidateInterviewScheduleInput struct {
	InterviewDate time.Time `json:"interview_date"`
	StartFrom     time.Time `json:"start_from"`
	EndAt         time.Time `json:"end_at"`
	Interviewer   []string  `json:"interviewer"`
}

type UpdateCandidateInterviewStatusInput struct {
	Status CandidateInterviewStatusEditable `json:"status"`
}

type UpdateCandidateJobFeedbackInput struct {
	Feedback    string                `json:"feedback"`
	Attachments []*NewAttachmentInput `json:"attachments"`
}

type UpdateCandidateJobStatus struct {
	Status              CandidateJobStatus         `json:"status"`
	OnboardDate         *time.Time                 `json:"onboard_date"`
	OfferExpirationDate *time.Time                 `json:"offer_expiration_date"`
	FailedReason        []CandidateJobFailedReason `json:"failed_reason"`
}

type UpdateEmailTemplateInput struct {
	Event     EmailTemplateEvent    `json:"event"`
	Subject   string                `json:"subject"`
	Content   string                `json:"content"`
	SendTo    []EmailTemplateSendTo `json:"send_to"`
	RoleIds   []string              `json:"roleIds"`
	Signature string                `json:"signature"`
	Cc        []string              `json:"cc"`
	Bcc       []string              `json:"bcc"`
}

type UpdateEmailTemplateStatusInput struct {
	Status *EmailTemplateStatus `json:"status"`
}

type UpdateHiringJobInput struct {
	Name               string                    `json:"name"`
	Description        string                    `json:"description"`
	Amount             int                       `json:"amount"`
	Location           LocationEnum              `json:"location"`
	SalaryType         SalaryTypeEnum            `json:"salary_type"`
	SalaryFrom         int                       `json:"salary_from"`
	SalaryTo           int                       `json:"salary_to"`
	Currency           CurrencyEnum              `json:"currency"`
	TeamID             string                    `json:"team_id"`
	CreatedBy          string                    `json:"created_by"`
	Priority           int                       `json:"priority"`
	EntitySkillRecords []*EntitySkillRecordInput `json:"entity_skill_records"`
}

type UpdateRoleInput struct {
	Name              *string                     `json:"name"`
	Description       *string                     `json:"description"`
	EntityPermissions []*NewEntityPermissionInput `json:"entity_permissions"`
}

type UpdateSkillInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	SkillTypeID *string `json:"skill_type_id"`
}

type UpdateSkillTypeInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type UpdateTeamInput struct {
	Name    string   `json:"name"`
	Members []string `json:"members"`
}

type UpdateUserInput struct {
	Name              string                      `json:"name"`
	WorkEmail         string                      `json:"work_email"`
	Status            UserStatus                  `json:"status"`
	EntityPermissions []*NewEntityPermissionInput `json:"entity_permissions"`
	TeamID            *string                     `json:"team_id"`
	RoleID            []string                    `json:"role_id"`
}

type UpdateUserStatusInput struct {
	Status UserStatus `json:"status"`
}

type UserFilter struct {
	Name                *string     `json:"name"`
	Ids                 []string    `json:"ids"`
	IgnoreIds           []string    `json:"ignore_ids"`
	NotInTeam           *bool       `json:"not_in_team"`
	Status              *UserStatus `json:"status"`
	IsAbleToInterviewer *bool       `json:"is_able_to_interviewer"`
	TeamID              []string    `json:"team_id"`
	RoleID              []string    `json:"role_id"`
}

type UserFreeWord struct {
	Name      *string `json:"name"`
	WorkEmail *string `json:"work_email"`
}

type UserResponse struct {
	Data *User `json:"data"`
}

type UserResponseGetAll struct {
	Edges      []*UserEdge `json:"edges"`
	Pagination *Pagination `json:"pagination"`
}

type UserSelection struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	WorkEmail string `json:"work_email"`
}

type UserSelectionEdge struct {
	Node   *UserSelection `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

type UserSelectionResponseGetAll struct {
	Edges      []*UserSelectionEdge `json:"edges"`
	Pagination *Pagination          `json:"pagination"`
}

type AttachmentAction string

const (
	AttachmentActionUpload   AttachmentAction = "UPLOAD"
	AttachmentActionDownload AttachmentAction = "DOWNLOAD"
)

var AllAttachmentAction = []AttachmentAction{
	AttachmentActionUpload,
	AttachmentActionDownload,
}

func (e AttachmentAction) IsValid() bool {
	switch e {
	case AttachmentActionUpload, AttachmentActionDownload:
		return true
	}
	return false
}

func (e AttachmentAction) String() string {
	return string(e)
}

func (e *AttachmentAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AttachmentAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AttachmentAction", str)
	}
	return nil
}

func (e AttachmentAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AttachmentFolder string

const (
	AttachmentFolderCandidate         AttachmentFolder = "candidate"
	AttachmentFolderCandidateFeedback AttachmentFolder = "candidate_feedback"
)

var AllAttachmentFolder = []AttachmentFolder{
	AttachmentFolderCandidate,
	AttachmentFolderCandidateFeedback,
}

func (e AttachmentFolder) IsValid() bool {
	switch e {
	case AttachmentFolderCandidate, AttachmentFolderCandidateFeedback:
		return true
	}
	return false
}

func (e AttachmentFolder) String() string {
	return string(e)
}

func (e *AttachmentFolder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AttachmentFolder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AttachmentFolder", str)
	}
	return nil
}

func (e AttachmentFolder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AttachmentRelationType string

const (
	AttachmentRelationTypeCandidateJobs         AttachmentRelationType = "candidate_jobs"
	AttachmentRelationTypeCandidateJobFeedbacks AttachmentRelationType = "candidate_job_feedbacks"
)

var AllAttachmentRelationType = []AttachmentRelationType{
	AttachmentRelationTypeCandidateJobs,
	AttachmentRelationTypeCandidateJobFeedbacks,
}

func (e AttachmentRelationType) IsValid() bool {
	switch e {
	case AttachmentRelationTypeCandidateJobs, AttachmentRelationTypeCandidateJobFeedbacks:
		return true
	}
	return false
}

func (e AttachmentRelationType) String() string {
	return string(e)
}

func (e *AttachmentRelationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AttachmentRelationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AttachmentRelationType", str)
	}
	return nil
}

func (e AttachmentRelationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateInterviewStatus string

const (
	CandidateInterviewStatusInvitedToInterview CandidateInterviewStatus = "invited_to_interview"
	CandidateInterviewStatusInterviewing       CandidateInterviewStatus = "interviewing"
	CandidateInterviewStatusDone               CandidateInterviewStatus = "done"
	CandidateInterviewStatusCancelled          CandidateInterviewStatus = "cancelled"
)

var AllCandidateInterviewStatus = []CandidateInterviewStatus{
	CandidateInterviewStatusInvitedToInterview,
	CandidateInterviewStatusInterviewing,
	CandidateInterviewStatusDone,
	CandidateInterviewStatusCancelled,
}

func (e CandidateInterviewStatus) IsValid() bool {
	switch e {
	case CandidateInterviewStatusInvitedToInterview, CandidateInterviewStatusInterviewing, CandidateInterviewStatusDone, CandidateInterviewStatusCancelled:
		return true
	}
	return false
}

func (e CandidateInterviewStatus) String() string {
	return string(e)
}

func (e *CandidateInterviewStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateInterviewStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateInterviewStatus", str)
	}
	return nil
}

func (e CandidateInterviewStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateInterviewStatusEditable string

const (
	CandidateInterviewStatusEditableDone      CandidateInterviewStatusEditable = "done"
	CandidateInterviewStatusEditableCancelled CandidateInterviewStatusEditable = "cancelled"
)

var AllCandidateInterviewStatusEditable = []CandidateInterviewStatusEditable{
	CandidateInterviewStatusEditableDone,
	CandidateInterviewStatusEditableCancelled,
}

func (e CandidateInterviewStatusEditable) IsValid() bool {
	switch e {
	case CandidateInterviewStatusEditableDone, CandidateInterviewStatusEditableCancelled:
		return true
	}
	return false
}

func (e CandidateInterviewStatusEditable) String() string {
	return string(e)
}

func (e *CandidateInterviewStatusEditable) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateInterviewStatusEditable(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateInterviewStatusEditable", str)
	}
	return nil
}

func (e CandidateInterviewStatusEditable) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobFailedReason string

const (
	CandidateJobFailedReasonPoorProfessionalism      CandidateJobFailedReason = "poor_professionalism"
	CandidateJobFailedReasonPoorFitAndEngagement     CandidateJobFailedReason = "poor_fit_and_engagement"
	CandidateJobFailedReasonOverExpectations         CandidateJobFailedReason = "over_expectations"
	CandidateJobFailedReasonOverQualification        CandidateJobFailedReason = "over_qualification"
	CandidateJobFailedReasonLanguageDeficiency       CandidateJobFailedReason = "language_deficiency"
	CandidateJobFailedReasonWeakTechnicalSkills      CandidateJobFailedReason = "weak_technical_skills"
	CandidateJobFailedReasonPoorInterpersonalSkills  CandidateJobFailedReason = "poor_interpersonal_skills"
	CandidateJobFailedReasonPoorProblemSolvingSkills CandidateJobFailedReason = "poor_problem_solving_skills"
	CandidateJobFailedReasonPoorManagementSkills     CandidateJobFailedReason = "poor_management_skills"
	CandidateJobFailedReasonCandidateWithdrawal      CandidateJobFailedReason = "candidate_withdrawal"
	CandidateJobFailedReasonOthers                   CandidateJobFailedReason = "others"
)

var AllCandidateJobFailedReason = []CandidateJobFailedReason{
	CandidateJobFailedReasonPoorProfessionalism,
	CandidateJobFailedReasonPoorFitAndEngagement,
	CandidateJobFailedReasonOverExpectations,
	CandidateJobFailedReasonOverQualification,
	CandidateJobFailedReasonLanguageDeficiency,
	CandidateJobFailedReasonWeakTechnicalSkills,
	CandidateJobFailedReasonPoorInterpersonalSkills,
	CandidateJobFailedReasonPoorProblemSolvingSkills,
	CandidateJobFailedReasonPoorManagementSkills,
	CandidateJobFailedReasonCandidateWithdrawal,
	CandidateJobFailedReasonOthers,
}

func (e CandidateJobFailedReason) IsValid() bool {
	switch e {
	case CandidateJobFailedReasonPoorProfessionalism, CandidateJobFailedReasonPoorFitAndEngagement, CandidateJobFailedReasonOverExpectations, CandidateJobFailedReasonOverQualification, CandidateJobFailedReasonLanguageDeficiency, CandidateJobFailedReasonWeakTechnicalSkills, CandidateJobFailedReasonPoorInterpersonalSkills, CandidateJobFailedReasonPoorProblemSolvingSkills, CandidateJobFailedReasonPoorManagementSkills, CandidateJobFailedReasonCandidateWithdrawal, CandidateJobFailedReasonOthers:
		return true
	}
	return false
}

func (e CandidateJobFailedReason) String() string {
	return string(e)
}

func (e *CandidateJobFailedReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobFailedReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobFailedReason", str)
	}
	return nil
}

func (e CandidateJobFailedReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobOrderByAdditionalField string

const (
	CandidateJobOrderByAdditionalFieldPriority           CandidateJobOrderByAdditionalField = "priority"
	CandidateJobOrderByAdditionalFieldHiringJobCreatedAt CandidateJobOrderByAdditionalField = "hiring_job_created_at"
)

var AllCandidateJobOrderByAdditionalField = []CandidateJobOrderByAdditionalField{
	CandidateJobOrderByAdditionalFieldPriority,
	CandidateJobOrderByAdditionalFieldHiringJobCreatedAt,
}

func (e CandidateJobOrderByAdditionalField) IsValid() bool {
	switch e {
	case CandidateJobOrderByAdditionalFieldPriority, CandidateJobOrderByAdditionalFieldHiringJobCreatedAt:
		return true
	}
	return false
}

func (e CandidateJobOrderByAdditionalField) String() string {
	return string(e)
}

func (e *CandidateJobOrderByAdditionalField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobOrderByAdditionalField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobOrderByAdditionalField", str)
	}
	return nil
}

func (e CandidateJobOrderByAdditionalField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobOrderByField string

const (
	CandidateJobOrderByFieldCreatedAt          CandidateJobOrderByField = "created_at"
	CandidateJobOrderByFieldUpdatedAt          CandidateJobOrderByField = "updated_at"
	CandidateJobOrderByFieldPriority           CandidateJobOrderByField = "priority"
	CandidateJobOrderByFieldHiringJobCreatedAt CandidateJobOrderByField = "hiring_job_created_at"
)

var AllCandidateJobOrderByField = []CandidateJobOrderByField{
	CandidateJobOrderByFieldCreatedAt,
	CandidateJobOrderByFieldUpdatedAt,
	CandidateJobOrderByFieldPriority,
	CandidateJobOrderByFieldHiringJobCreatedAt,
}

func (e CandidateJobOrderByField) IsValid() bool {
	switch e {
	case CandidateJobOrderByFieldCreatedAt, CandidateJobOrderByFieldUpdatedAt, CandidateJobOrderByFieldPriority, CandidateJobOrderByFieldHiringJobCreatedAt:
		return true
	}
	return false
}

func (e CandidateJobOrderByField) String() string {
	return string(e)
}

func (e *CandidateJobOrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobOrderByField", str)
	}
	return nil
}

func (e CandidateJobOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatus string

const (
	CandidateJobStatusHired        CandidateJobStatus = "hired"
	CandidateJobStatusKiv          CandidateJobStatus = "kiv"
	CandidateJobStatusOfferLost    CandidateJobStatus = "offer_lost"
	CandidateJobStatusExStaff      CandidateJobStatus = "ex_staff"
	CandidateJobStatusApplied      CandidateJobStatus = "applied"
	CandidateJobStatusInterviewing CandidateJobStatus = "interviewing"
	CandidateJobStatusOffering     CandidateJobStatus = "offering"
	CandidateJobStatusNew          CandidateJobStatus = "new"
)

var AllCandidateJobStatus = []CandidateJobStatus{
	CandidateJobStatusHired,
	CandidateJobStatusKiv,
	CandidateJobStatusOfferLost,
	CandidateJobStatusExStaff,
	CandidateJobStatusApplied,
	CandidateJobStatusInterviewing,
	CandidateJobStatusOffering,
	CandidateJobStatusNew,
}

func (e CandidateJobStatus) IsValid() bool {
	switch e {
	case CandidateJobStatusHired, CandidateJobStatusKiv, CandidateJobStatusOfferLost, CandidateJobStatusExStaff, CandidateJobStatusApplied, CandidateJobStatusInterviewing, CandidateJobStatusOffering, CandidateJobStatusNew:
		return true
	}
	return false
}

func (e CandidateJobStatus) String() string {
	return string(e)
}

func (e *CandidateJobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatus", str)
	}
	return nil
}

func (e CandidateJobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusAbleToClose string

const (
	CandidateJobStatusAbleToCloseInterviewing CandidateJobStatusAbleToClose = "interviewing"
	CandidateJobStatusAbleToCloseOffering     CandidateJobStatusAbleToClose = "offering"
)

var AllCandidateJobStatusAbleToClose = []CandidateJobStatusAbleToClose{
	CandidateJobStatusAbleToCloseInterviewing,
	CandidateJobStatusAbleToCloseOffering,
}

func (e CandidateJobStatusAbleToClose) IsValid() bool {
	switch e {
	case CandidateJobStatusAbleToCloseInterviewing, CandidateJobStatusAbleToCloseOffering:
		return true
	}
	return false
}

func (e CandidateJobStatusAbleToClose) String() string {
	return string(e)
}

func (e *CandidateJobStatusAbleToClose) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusAbleToClose(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusAbleToClose", str)
	}
	return nil
}

func (e CandidateJobStatusAbleToClose) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusEditable string

const (
	CandidateJobStatusEditableApplied      CandidateJobStatusEditable = "applied"
	CandidateJobStatusEditableInterviewing CandidateJobStatusEditable = "interviewing"
)

var AllCandidateJobStatusEditable = []CandidateJobStatusEditable{
	CandidateJobStatusEditableApplied,
	CandidateJobStatusEditableInterviewing,
}

func (e CandidateJobStatusEditable) IsValid() bool {
	switch e {
	case CandidateJobStatusEditableApplied, CandidateJobStatusEditableInterviewing:
		return true
	}
	return false
}

func (e CandidateJobStatusEditable) String() string {
	return string(e)
}

func (e *CandidateJobStatusEditable) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusEditable(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusEditable", str)
	}
	return nil
}

func (e CandidateJobStatusEditable) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusEnded string

const (
	CandidateJobStatusEndedHired     CandidateJobStatusEnded = "hired"
	CandidateJobStatusEndedKiv       CandidateJobStatusEnded = "kiv"
	CandidateJobStatusEndedOfferLost CandidateJobStatusEnded = "offer_lost"
	CandidateJobStatusEndedExStaff   CandidateJobStatusEnded = "ex_staff"
)

var AllCandidateJobStatusEnded = []CandidateJobStatusEnded{
	CandidateJobStatusEndedHired,
	CandidateJobStatusEndedKiv,
	CandidateJobStatusEndedOfferLost,
	CandidateJobStatusEndedExStaff,
}

func (e CandidateJobStatusEnded) IsValid() bool {
	switch e {
	case CandidateJobStatusEndedHired, CandidateJobStatusEndedKiv, CandidateJobStatusEndedOfferLost, CandidateJobStatusEndedExStaff:
		return true
	}
	return false
}

func (e CandidateJobStatusEnded) String() string {
	return string(e)
}

func (e *CandidateJobStatusEnded) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusEnded(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusEnded", str)
	}
	return nil
}

func (e CandidateJobStatusEnded) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusFailed string

const (
	CandidateJobStatusFailedOfferLost CandidateJobStatusFailed = "offer_lost"
	CandidateJobStatusFailedKiv       CandidateJobStatusFailed = "kiv"
)

var AllCandidateJobStatusFailed = []CandidateJobStatusFailed{
	CandidateJobStatusFailedOfferLost,
	CandidateJobStatusFailedKiv,
}

func (e CandidateJobStatusFailed) IsValid() bool {
	switch e {
	case CandidateJobStatusFailedOfferLost, CandidateJobStatusFailedKiv:
		return true
	}
	return false
}

func (e CandidateJobStatusFailed) String() string {
	return string(e)
}

func (e *CandidateJobStatusFailed) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusFailed(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusFailed", str)
	}
	return nil
}

func (e CandidateJobStatusFailed) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateJobStatusOpen string

const (
	CandidateJobStatusOpenApplied      CandidateJobStatusOpen = "applied"
	CandidateJobStatusOpenInterviewing CandidateJobStatusOpen = "interviewing"
	CandidateJobStatusOpenOffering     CandidateJobStatusOpen = "offering"
)

var AllCandidateJobStatusOpen = []CandidateJobStatusOpen{
	CandidateJobStatusOpenApplied,
	CandidateJobStatusOpenInterviewing,
	CandidateJobStatusOpenOffering,
}

func (e CandidateJobStatusOpen) IsValid() bool {
	switch e {
	case CandidateJobStatusOpenApplied, CandidateJobStatusOpenInterviewing, CandidateJobStatusOpenOffering:
		return true
	}
	return false
}

func (e CandidateJobStatusOpen) String() string {
	return string(e)
}

func (e *CandidateJobStatusOpen) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateJobStatusOpen(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateJobStatusOpen", str)
	}
	return nil
}

func (e CandidateJobStatusOpen) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateReferenceEb string

const (
	CandidateReferenceEbTiktokTechvifyOfficial CandidateReferenceEb = "tiktok_techvify_official"
	CandidateReferenceEbTiktokThedevdad        CandidateReferenceEb = "tiktok_thedevdad"
	CandidateReferenceEbLinkedinJunieTruong    CandidateReferenceEb = "linkedin_junie_truong"
	CandidateReferenceEbOtherLinkedin          CandidateReferenceEb = "other_linkedin"
	CandidateReferenceEbGroupSeeding           CandidateReferenceEb = "group_seeding"
	CandidateReferenceEbFanpageTechvifyCareers CandidateReferenceEb = "fanpage_techvify_careers"
	CandidateReferenceEbGoogleSearch           CandidateReferenceEb = "google_search"
	CandidateReferenceEbYoutubeTechvifyCareers CandidateReferenceEb = "youtube_techvify_careers"
	CandidateReferenceEbThread                 CandidateReferenceEb = "thread"
	CandidateReferenceEbInstagram              CandidateReferenceEb = "instagram"
	CandidateReferenceEbTwitter                CandidateReferenceEb = "twitter"
	CandidateReferenceEbOthers                 CandidateReferenceEb = "others"
)

var AllCandidateReferenceEb = []CandidateReferenceEb{
	CandidateReferenceEbTiktokTechvifyOfficial,
	CandidateReferenceEbTiktokThedevdad,
	CandidateReferenceEbLinkedinJunieTruong,
	CandidateReferenceEbOtherLinkedin,
	CandidateReferenceEbGroupSeeding,
	CandidateReferenceEbFanpageTechvifyCareers,
	CandidateReferenceEbGoogleSearch,
	CandidateReferenceEbYoutubeTechvifyCareers,
	CandidateReferenceEbThread,
	CandidateReferenceEbInstagram,
	CandidateReferenceEbTwitter,
	CandidateReferenceEbOthers,
}

func (e CandidateReferenceEb) IsValid() bool {
	switch e {
	case CandidateReferenceEbTiktokTechvifyOfficial, CandidateReferenceEbTiktokThedevdad, CandidateReferenceEbLinkedinJunieTruong, CandidateReferenceEbOtherLinkedin, CandidateReferenceEbGroupSeeding, CandidateReferenceEbFanpageTechvifyCareers, CandidateReferenceEbGoogleSearch, CandidateReferenceEbYoutubeTechvifyCareers, CandidateReferenceEbThread, CandidateReferenceEbInstagram, CandidateReferenceEbTwitter, CandidateReferenceEbOthers:
		return true
	}
	return false
}

func (e CandidateReferenceEb) String() string {
	return string(e)
}

func (e *CandidateReferenceEb) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateReferenceEb(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateReferenceEB", str)
	}
	return nil
}

func (e CandidateReferenceEb) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateReferenceHiringPlatform string

const (
	CandidateReferenceHiringPlatformTopcv        CandidateReferenceHiringPlatform = "topcv"
	CandidateReferenceHiringPlatformVietnamWorks CandidateReferenceHiringPlatform = "vietnam_works"
	CandidateReferenceHiringPlatformItviec       CandidateReferenceHiringPlatform = "itviec"
)

var AllCandidateReferenceHiringPlatform = []CandidateReferenceHiringPlatform{
	CandidateReferenceHiringPlatformTopcv,
	CandidateReferenceHiringPlatformVietnamWorks,
	CandidateReferenceHiringPlatformItviec,
}

func (e CandidateReferenceHiringPlatform) IsValid() bool {
	switch e {
	case CandidateReferenceHiringPlatformTopcv, CandidateReferenceHiringPlatformVietnamWorks, CandidateReferenceHiringPlatformItviec:
		return true
	}
	return false
}

func (e CandidateReferenceHiringPlatform) String() string {
	return string(e)
}

func (e *CandidateReferenceHiringPlatform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateReferenceHiringPlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateReferenceHiringPlatform", str)
	}
	return nil
}

func (e CandidateReferenceHiringPlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateReferenceRec string

const (
	CandidateReferenceRecLinkedin  CandidateReferenceRec = "linkedin"
	CandidateReferenceRecFacebook  CandidateReferenceRec = "facebook"
	CandidateReferenceRecInstagram CandidateReferenceRec = "instagram"
	CandidateReferenceRecThread    CandidateReferenceRec = "thread"
	CandidateReferenceRecGithub    CandidateReferenceRec = "github"
	CandidateReferenceRecOthers    CandidateReferenceRec = "others"
)

var AllCandidateReferenceRec = []CandidateReferenceRec{
	CandidateReferenceRecLinkedin,
	CandidateReferenceRecFacebook,
	CandidateReferenceRecInstagram,
	CandidateReferenceRecThread,
	CandidateReferenceRecGithub,
	CandidateReferenceRecOthers,
}

func (e CandidateReferenceRec) IsValid() bool {
	switch e {
	case CandidateReferenceRecLinkedin, CandidateReferenceRecFacebook, CandidateReferenceRecInstagram, CandidateReferenceRecThread, CandidateReferenceRecGithub, CandidateReferenceRecOthers:
		return true
	}
	return false
}

func (e CandidateReferenceRec) String() string {
	return string(e)
}

func (e *CandidateReferenceRec) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateReferenceRec(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateReferenceRec", str)
	}
	return nil
}

func (e CandidateReferenceRec) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateReferenceType string

const (
	CandidateReferenceTypeEb             CandidateReferenceType = "eb"
	CandidateReferenceTypeRec            CandidateReferenceType = "rec"
	CandidateReferenceTypeHiringPlatform CandidateReferenceType = "hiring_platform"
	CandidateReferenceTypeReference      CandidateReferenceType = "reference"
	CandidateReferenceTypeHeadhunt       CandidateReferenceType = "headhunt"
)

var AllCandidateReferenceType = []CandidateReferenceType{
	CandidateReferenceTypeEb,
	CandidateReferenceTypeRec,
	CandidateReferenceTypeHiringPlatform,
	CandidateReferenceTypeReference,
	CandidateReferenceTypeHeadhunt,
}

func (e CandidateReferenceType) IsValid() bool {
	switch e {
	case CandidateReferenceTypeEb, CandidateReferenceTypeRec, CandidateReferenceTypeHiringPlatform, CandidateReferenceTypeReference, CandidateReferenceTypeHeadhunt:
		return true
	}
	return false
}

func (e CandidateReferenceType) String() string {
	return string(e)
}

func (e *CandidateReferenceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateReferenceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateReferenceType", str)
	}
	return nil
}

func (e CandidateReferenceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CandidateStatusEnum string

const (
	CandidateStatusEnumApplied      CandidateStatusEnum = "applied"
	CandidateStatusEnumInterviewing CandidateStatusEnum = "interviewing"
	CandidateStatusEnumOffering     CandidateStatusEnum = "offering"
	CandidateStatusEnumHired        CandidateStatusEnum = "hired"
	CandidateStatusEnumKiv          CandidateStatusEnum = "kiv"
	CandidateStatusEnumOfferLost    CandidateStatusEnum = "offer_lost"
	CandidateStatusEnumExStaff      CandidateStatusEnum = "ex_staff"
	CandidateStatusEnumNew          CandidateStatusEnum = "new"
)

var AllCandidateStatusEnum = []CandidateStatusEnum{
	CandidateStatusEnumApplied,
	CandidateStatusEnumInterviewing,
	CandidateStatusEnumOffering,
	CandidateStatusEnumHired,
	CandidateStatusEnumKiv,
	CandidateStatusEnumOfferLost,
	CandidateStatusEnumExStaff,
	CandidateStatusEnumNew,
}

func (e CandidateStatusEnum) IsValid() bool {
	switch e {
	case CandidateStatusEnumApplied, CandidateStatusEnumInterviewing, CandidateStatusEnumOffering, CandidateStatusEnumHired, CandidateStatusEnumKiv, CandidateStatusEnumOfferLost, CandidateStatusEnumExStaff, CandidateStatusEnumNew:
		return true
	}
	return false
}

func (e CandidateStatusEnum) String() string {
	return string(e)
}

func (e *CandidateStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CandidateStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CandidateStatusEnum", str)
	}
	return nil
}

func (e CandidateStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CurrencyEnum string

const (
	CurrencyEnumVnd CurrencyEnum = "vnd"
	CurrencyEnumUsd CurrencyEnum = "usd"
	CurrencyEnumJpy CurrencyEnum = "jpy"
)

var AllCurrencyEnum = []CurrencyEnum{
	CurrencyEnumVnd,
	CurrencyEnumUsd,
	CurrencyEnumJpy,
}

func (e CurrencyEnum) IsValid() bool {
	switch e {
	case CurrencyEnumVnd, CurrencyEnumUsd, CurrencyEnumJpy:
		return true
	}
	return false
}

func (e CurrencyEnum) String() string {
	return string(e)
}

func (e *CurrencyEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CurrencyEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CurrencyEnum", str)
	}
	return nil
}

func (e CurrencyEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateApplicationEventEnum string

const (
	EmailTemplateApplicationEventEnumCandidateAppliedToKiv           EmailTemplateApplicationEventEnum = "candidate_applied_to_kiv"
	EmailTemplateApplicationEventEnumCandidateInterviewingToKiv      EmailTemplateApplicationEventEnum = "candidate_interviewing_to_kiv"
	EmailTemplateApplicationEventEnumCandidateInterviewingToOffering EmailTemplateApplicationEventEnum = "candidate_interviewing_to_offering"
)

var AllEmailTemplateApplicationEventEnum = []EmailTemplateApplicationEventEnum{
	EmailTemplateApplicationEventEnumCandidateAppliedToKiv,
	EmailTemplateApplicationEventEnumCandidateInterviewingToKiv,
	EmailTemplateApplicationEventEnumCandidateInterviewingToOffering,
}

func (e EmailTemplateApplicationEventEnum) IsValid() bool {
	switch e {
	case EmailTemplateApplicationEventEnumCandidateAppliedToKiv, EmailTemplateApplicationEventEnumCandidateInterviewingToKiv, EmailTemplateApplicationEventEnumCandidateInterviewingToOffering:
		return true
	}
	return false
}

func (e EmailTemplateApplicationEventEnum) String() string {
	return string(e)
}

func (e *EmailTemplateApplicationEventEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateApplicationEventEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateApplicationEventEnum", str)
	}
	return nil
}

func (e EmailTemplateApplicationEventEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateApplicationSendToEnum string

const (
	EmailTemplateApplicationSendToEnumJobRequest  EmailTemplateApplicationSendToEnum = "job_request"
	EmailTemplateApplicationSendToEnumTeamManager EmailTemplateApplicationSendToEnum = "team_manager"
	EmailTemplateApplicationSendToEnumTeamMember  EmailTemplateApplicationSendToEnum = "team_member"
	EmailTemplateApplicationSendToEnumRole        EmailTemplateApplicationSendToEnum = "role"
	EmailTemplateApplicationSendToEnumCandidate   EmailTemplateApplicationSendToEnum = "candidate"
)

var AllEmailTemplateApplicationSendToEnum = []EmailTemplateApplicationSendToEnum{
	EmailTemplateApplicationSendToEnumJobRequest,
	EmailTemplateApplicationSendToEnumTeamManager,
	EmailTemplateApplicationSendToEnumTeamMember,
	EmailTemplateApplicationSendToEnumRole,
	EmailTemplateApplicationSendToEnumCandidate,
}

func (e EmailTemplateApplicationSendToEnum) IsValid() bool {
	switch e {
	case EmailTemplateApplicationSendToEnumJobRequest, EmailTemplateApplicationSendToEnumTeamManager, EmailTemplateApplicationSendToEnumTeamMember, EmailTemplateApplicationSendToEnumRole, EmailTemplateApplicationSendToEnumCandidate:
		return true
	}
	return false
}

func (e EmailTemplateApplicationSendToEnum) String() string {
	return string(e)
}

func (e *EmailTemplateApplicationSendToEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateApplicationSendToEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateApplicationSendToEnum", str)
	}
	return nil
}

func (e EmailTemplateApplicationSendToEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateEvent string

const (
	EmailTemplateEventCandidateAppliedToKiv           EmailTemplateEvent = "candidate_applied_to_kiv"
	EmailTemplateEventCandidateInterviewingToKiv      EmailTemplateEvent = "candidate_interviewing_to_kiv"
	EmailTemplateEventCandidateInterviewingToOffering EmailTemplateEvent = "candidate_interviewing_to_offering"
	EmailTemplateEventCreatedInterview                EmailTemplateEvent = "created_interview"
	EmailTemplateEventUpdatingInterview               EmailTemplateEvent = "updating_interview"
	EmailTemplateEventCancelInterview                 EmailTemplateEvent = "cancel_interview"
)

var AllEmailTemplateEvent = []EmailTemplateEvent{
	EmailTemplateEventCandidateAppliedToKiv,
	EmailTemplateEventCandidateInterviewingToKiv,
	EmailTemplateEventCandidateInterviewingToOffering,
	EmailTemplateEventCreatedInterview,
	EmailTemplateEventUpdatingInterview,
	EmailTemplateEventCancelInterview,
}

func (e EmailTemplateEvent) IsValid() bool {
	switch e {
	case EmailTemplateEventCandidateAppliedToKiv, EmailTemplateEventCandidateInterviewingToKiv, EmailTemplateEventCandidateInterviewingToOffering, EmailTemplateEventCreatedInterview, EmailTemplateEventUpdatingInterview, EmailTemplateEventCancelInterview:
		return true
	}
	return false
}

func (e EmailTemplateEvent) String() string {
	return string(e)
}

func (e *EmailTemplateEvent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateEvent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateEvent", str)
	}
	return nil
}

func (e EmailTemplateEvent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateInterviewEventEnum string

const (
	EmailTemplateInterviewEventEnumCreatedInterview  EmailTemplateInterviewEventEnum = "created_interview"
	EmailTemplateInterviewEventEnumUpdatingInterview EmailTemplateInterviewEventEnum = "updating_interview"
	EmailTemplateInterviewEventEnumCancelInterview   EmailTemplateInterviewEventEnum = "cancel_interview"
)

var AllEmailTemplateInterviewEventEnum = []EmailTemplateInterviewEventEnum{
	EmailTemplateInterviewEventEnumCreatedInterview,
	EmailTemplateInterviewEventEnumUpdatingInterview,
	EmailTemplateInterviewEventEnumCancelInterview,
}

func (e EmailTemplateInterviewEventEnum) IsValid() bool {
	switch e {
	case EmailTemplateInterviewEventEnumCreatedInterview, EmailTemplateInterviewEventEnumUpdatingInterview, EmailTemplateInterviewEventEnumCancelInterview:
		return true
	}
	return false
}

func (e EmailTemplateInterviewEventEnum) String() string {
	return string(e)
}

func (e *EmailTemplateInterviewEventEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateInterviewEventEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateInterviewEventEnum", str)
	}
	return nil
}

func (e EmailTemplateInterviewEventEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateSendTo string

const (
	EmailTemplateSendToInterviewer EmailTemplateSendTo = "interviewer"
	EmailTemplateSendToJobRequest  EmailTemplateSendTo = "job_request"
	EmailTemplateSendToTeamManager EmailTemplateSendTo = "team_manager"
	EmailTemplateSendToTeamMember  EmailTemplateSendTo = "team_member"
	EmailTemplateSendToRole        EmailTemplateSendTo = "role"
	EmailTemplateSendToCandidate   EmailTemplateSendTo = "candidate"
)

var AllEmailTemplateSendTo = []EmailTemplateSendTo{
	EmailTemplateSendToInterviewer,
	EmailTemplateSendToJobRequest,
	EmailTemplateSendToTeamManager,
	EmailTemplateSendToTeamMember,
	EmailTemplateSendToRole,
	EmailTemplateSendToCandidate,
}

func (e EmailTemplateSendTo) IsValid() bool {
	switch e {
	case EmailTemplateSendToInterviewer, EmailTemplateSendToJobRequest, EmailTemplateSendToTeamManager, EmailTemplateSendToTeamMember, EmailTemplateSendToRole, EmailTemplateSendToCandidate:
		return true
	}
	return false
}

func (e EmailTemplateSendTo) String() string {
	return string(e)
}

func (e *EmailTemplateSendTo) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateSendTo(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateSendTo", str)
	}
	return nil
}

func (e EmailTemplateSendTo) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateStatus string

const (
	EmailTemplateStatusActive   EmailTemplateStatus = "active"
	EmailTemplateStatusInactive EmailTemplateStatus = "inactive"
)

var AllEmailTemplateStatus = []EmailTemplateStatus{
	EmailTemplateStatusActive,
	EmailTemplateStatusInactive,
}

func (e EmailTemplateStatus) IsValid() bool {
	switch e {
	case EmailTemplateStatusActive, EmailTemplateStatusInactive:
		return true
	}
	return false
}

func (e EmailTemplateStatus) String() string {
	return string(e)
}

func (e *EmailTemplateStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateStatus", str)
	}
	return nil
}

func (e EmailTemplateStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringJobOrderByAdditionalField string

const (
	HiringJobOrderByAdditionalFieldTotalCandidatesRecruited HiringJobOrderByAdditionalField = "total_candidates_recruited"
)

var AllHiringJobOrderByAdditionalField = []HiringJobOrderByAdditionalField{
	HiringJobOrderByAdditionalFieldTotalCandidatesRecruited,
}

func (e HiringJobOrderByAdditionalField) IsValid() bool {
	switch e {
	case HiringJobOrderByAdditionalFieldTotalCandidatesRecruited:
		return true
	}
	return false
}

func (e HiringJobOrderByAdditionalField) String() string {
	return string(e)
}

func (e *HiringJobOrderByAdditionalField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringJobOrderByAdditionalField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringJobOrderByAdditionalField", str)
	}
	return nil
}

func (e HiringJobOrderByAdditionalField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringJobOrderByField string

const (
	HiringJobOrderByFieldName                     HiringJobOrderByField = "name"
	HiringJobOrderByFieldCreatedAt                HiringJobOrderByField = "created_at"
	HiringJobOrderByFieldAmount                   HiringJobOrderByField = "amount"
	HiringJobOrderByFieldSalaryFrom               HiringJobOrderByField = "salary_from"
	HiringJobOrderByFieldSalaryTo                 HiringJobOrderByField = "salary_to"
	HiringJobOrderByFieldLastApplyDate            HiringJobOrderByField = "last_apply_date"
	HiringJobOrderByFieldTotalCandidatesRecruited HiringJobOrderByField = "total_candidates_recruited"
	HiringJobOrderByFieldPriority                 HiringJobOrderByField = "priority"
)

var AllHiringJobOrderByField = []HiringJobOrderByField{
	HiringJobOrderByFieldName,
	HiringJobOrderByFieldCreatedAt,
	HiringJobOrderByFieldAmount,
	HiringJobOrderByFieldSalaryFrom,
	HiringJobOrderByFieldSalaryTo,
	HiringJobOrderByFieldLastApplyDate,
	HiringJobOrderByFieldTotalCandidatesRecruited,
	HiringJobOrderByFieldPriority,
}

func (e HiringJobOrderByField) IsValid() bool {
	switch e {
	case HiringJobOrderByFieldName, HiringJobOrderByFieldCreatedAt, HiringJobOrderByFieldAmount, HiringJobOrderByFieldSalaryFrom, HiringJobOrderByFieldSalaryTo, HiringJobOrderByFieldLastApplyDate, HiringJobOrderByFieldTotalCandidatesRecruited, HiringJobOrderByFieldPriority:
		return true
	}
	return false
}

func (e HiringJobOrderByField) String() string {
	return string(e)
}

func (e *HiringJobOrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringJobOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringJobOrderByField", str)
	}
	return nil
}

func (e HiringJobOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringJobStatus string

const (
	HiringJobStatusDraft  HiringJobStatus = "draft"
	HiringJobStatusOpened HiringJobStatus = "opened"
	HiringJobStatusClosed HiringJobStatus = "closed"
)

var AllHiringJobStatus = []HiringJobStatus{
	HiringJobStatusDraft,
	HiringJobStatusOpened,
	HiringJobStatusClosed,
}

func (e HiringJobStatus) IsValid() bool {
	switch e {
	case HiringJobStatusDraft, HiringJobStatusOpened, HiringJobStatusClosed:
		return true
	}
	return false
}

func (e HiringJobStatus) String() string {
	return string(e)
}

func (e *HiringJobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringJobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringJobStatus", str)
	}
	return nil
}

func (e HiringJobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type I18nLanguage string

const (
	I18nLanguageEn I18nLanguage = "en"
	I18nLanguageVi I18nLanguage = "vi"
)

var AllI18nLanguage = []I18nLanguage{
	I18nLanguageEn,
	I18nLanguageVi,
}

func (e I18nLanguage) IsValid() bool {
	switch e {
	case I18nLanguageEn, I18nLanguageVi:
		return true
	}
	return false
}

func (e I18nLanguage) String() string {
	return string(e)
}

func (e *I18nLanguage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = I18nLanguage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid I18nLanguage", str)
	}
	return nil
}

func (e I18nLanguage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocationEnum string

const (
	LocationEnumHaNoi     LocationEnum = "ha_noi"
	LocationEnumHoChiMinh LocationEnum = "ho_chi_minh"
	LocationEnumDaNang    LocationEnum = "da_nang"
	LocationEnumJapan     LocationEnum = "japan"
	LocationEnumSingapore LocationEnum = "singapore"
)

var AllLocationEnum = []LocationEnum{
	LocationEnumHaNoi,
	LocationEnumHoChiMinh,
	LocationEnumDaNang,
	LocationEnumJapan,
	LocationEnumSingapore,
}

func (e LocationEnum) IsValid() bool {
	switch e {
	case LocationEnumHaNoi, LocationEnumHoChiMinh, LocationEnumDaNang, LocationEnumJapan, LocationEnumSingapore:
		return true
	}
	return false
}

func (e LocationEnum) String() string {
	return string(e)
}

func (e *LocationEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationEnum", str)
	}
	return nil
}

func (e LocationEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Period string

const (
	PeriodAll     Period = "all"
	PeriodDay     Period = "day"
	PeriodWeek    Period = "week"
	PeriodMonth   Period = "month"
	PeriodQuarter Period = "quarter"
	PeriodYear    Period = "year"
)

var AllPeriod = []Period{
	PeriodAll,
	PeriodDay,
	PeriodWeek,
	PeriodMonth,
	PeriodQuarter,
	PeriodYear,
}

func (e Period) IsValid() bool {
	switch e {
	case PeriodAll, PeriodDay, PeriodWeek, PeriodMonth, PeriodQuarter, PeriodYear:
		return true
	}
	return false
}

func (e Period) String() string {
	return string(e)
}

func (e *Period) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Period(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Period", str)
	}
	return nil
}

func (e Period) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PermissionGroupType string

const (
	PermissionGroupTypeSystem   PermissionGroupType = "system"
	PermissionGroupTypeFunction PermissionGroupType = "function"
)

var AllPermissionGroupType = []PermissionGroupType{
	PermissionGroupTypeSystem,
	PermissionGroupTypeFunction,
}

func (e PermissionGroupType) IsValid() bool {
	switch e {
	case PermissionGroupTypeSystem, PermissionGroupTypeFunction:
		return true
	}
	return false
}

func (e PermissionGroupType) String() string {
	return string(e)
}

func (e *PermissionGroupType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionGroupType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionGroupType", str)
	}
	return nil
}

func (e PermissionGroupType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReportFilterPeriod string

const (
	ReportFilterPeriodAll     ReportFilterPeriod = "all"
	ReportFilterPeriodYear    ReportFilterPeriod = "year"
	ReportFilterPeriodQuarter ReportFilterPeriod = "quarter"
	ReportFilterPeriodMonth   ReportFilterPeriod = "month"
	ReportFilterPeriodWeek    ReportFilterPeriod = "week"
)

var AllReportFilterPeriod = []ReportFilterPeriod{
	ReportFilterPeriodAll,
	ReportFilterPeriodYear,
	ReportFilterPeriodQuarter,
	ReportFilterPeriodMonth,
	ReportFilterPeriodWeek,
}

func (e ReportFilterPeriod) IsValid() bool {
	switch e {
	case ReportFilterPeriodAll, ReportFilterPeriodYear, ReportFilterPeriodQuarter, ReportFilterPeriodMonth, ReportFilterPeriodWeek:
		return true
	}
	return false
}

func (e ReportFilterPeriod) String() string {
	return string(e)
}

func (e *ReportFilterPeriod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportFilterPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportFilterPeriod", str)
	}
	return nil
}

func (e ReportFilterPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReportOrderByField string

const (
	ReportOrderByFieldTeamName      ReportOrderByField = "team_name"
	ReportOrderByFieldTeamCreatedAt ReportOrderByField = "team_created_at"
)

var AllReportOrderByField = []ReportOrderByField{
	ReportOrderByFieldTeamName,
	ReportOrderByFieldTeamCreatedAt,
}

func (e ReportOrderByField) IsValid() bool {
	switch e {
	case ReportOrderByFieldTeamName, ReportOrderByFieldTeamCreatedAt:
		return true
	}
	return false
}

func (e ReportOrderByField) String() string {
	return string(e)
}

func (e *ReportOrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportOrderByField", str)
	}
	return nil
}

func (e ReportOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SalaryTypeEnum string

const (
	SalaryTypeEnumRange     SalaryTypeEnum = "range"
	SalaryTypeEnumUpTo      SalaryTypeEnum = "up_to"
	SalaryTypeEnumNegotiate SalaryTypeEnum = "negotiate"
	SalaryTypeEnumMinimum   SalaryTypeEnum = "minimum"
)

var AllSalaryTypeEnum = []SalaryTypeEnum{
	SalaryTypeEnumRange,
	SalaryTypeEnumUpTo,
	SalaryTypeEnumNegotiate,
	SalaryTypeEnumMinimum,
}

func (e SalaryTypeEnum) IsValid() bool {
	switch e {
	case SalaryTypeEnumRange, SalaryTypeEnumUpTo, SalaryTypeEnumNegotiate, SalaryTypeEnumMinimum:
		return true
	}
	return false
}

func (e SalaryTypeEnum) String() string {
	return string(e)
}

func (e *SalaryTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SalaryTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SalaryTypeEnum", str)
	}
	return nil
}

func (e SalaryTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamOrderByAdditionalField string

const (
	TeamOrderByAdditionalFieldOpeningRequests TeamOrderByAdditionalField = "opening_requests"
	TeamOrderByAdditionalFieldNewestApplied   TeamOrderByAdditionalField = "newest_applied"
)

var AllTeamOrderByAdditionalField = []TeamOrderByAdditionalField{
	TeamOrderByAdditionalFieldOpeningRequests,
	TeamOrderByAdditionalFieldNewestApplied,
}

func (e TeamOrderByAdditionalField) IsValid() bool {
	switch e {
	case TeamOrderByAdditionalFieldOpeningRequests, TeamOrderByAdditionalFieldNewestApplied:
		return true
	}
	return false
}

func (e TeamOrderByAdditionalField) String() string {
	return string(e)
}

func (e *TeamOrderByAdditionalField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamOrderByAdditionalField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamOrderByAdditionalField", str)
	}
	return nil
}

func (e TeamOrderByAdditionalField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamOrderByField string

const (
	TeamOrderByFieldName            TeamOrderByField = "name"
	TeamOrderByFieldCreatedAt       TeamOrderByField = "created_at"
	TeamOrderByFieldOpeningRequests TeamOrderByField = "opening_requests"
	TeamOrderByFieldNewestApplied   TeamOrderByField = "newest_applied"
)

var AllTeamOrderByField = []TeamOrderByField{
	TeamOrderByFieldName,
	TeamOrderByFieldCreatedAt,
	TeamOrderByFieldOpeningRequests,
	TeamOrderByFieldNewestApplied,
}

func (e TeamOrderByField) IsValid() bool {
	switch e {
	case TeamOrderByFieldName, TeamOrderByFieldCreatedAt, TeamOrderByFieldOpeningRequests, TeamOrderByFieldNewestApplied:
		return true
	}
	return false
}

func (e TeamOrderByField) String() string {
	return string(e)
}

func (e *TeamOrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamOrderByField", str)
	}
	return nil
}

func (e TeamOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "active"
	UserStatusInactive UserStatus = "inactive"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusInactive,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusInactive:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuditTrailAction string

const (
	AuditTrailActionCreate AuditTrailAction = "create"
	AuditTrailActionUpdate AuditTrailAction = "update"
	AuditTrailActionDelete AuditTrailAction = "delete"
)

var AllAuditTrailAction = []AuditTrailAction{
	AuditTrailActionCreate,
	AuditTrailActionUpdate,
	AuditTrailActionDelete,
}

func (e AuditTrailAction) IsValid() bool {
	switch e {
	case AuditTrailActionCreate, AuditTrailActionUpdate, AuditTrailActionDelete:
		return true
	}
	return false
}

func (e AuditTrailAction) String() string {
	return string(e)
}

func (e *AuditTrailAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditTrailAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid auditTrailAction", str)
	}
	return nil
}

func (e AuditTrailAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectModule string

const (
	ProjectModuleTeams      ProjectModule = "teams"
	ProjectModuleHiringJobs ProjectModule = "hiring_jobs"
	ProjectModuleCandidates ProjectModule = "candidates"
	ProjectModuleSkills     ProjectModule = "skills"
)

var AllProjectModule = []ProjectModule{
	ProjectModuleTeams,
	ProjectModuleHiringJobs,
	ProjectModuleCandidates,
	ProjectModuleSkills,
}

func (e ProjectModule) IsValid() bool {
	switch e {
	case ProjectModuleTeams, ProjectModuleHiringJobs, ProjectModuleCandidates, ProjectModuleSkills:
		return true
	}
	return false
}

func (e ProjectModule) String() string {
	return string(e)
}

func (e *ProjectModule) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectModule(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid projectModule", str)
	}
	return nil
}

func (e ProjectModule) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
