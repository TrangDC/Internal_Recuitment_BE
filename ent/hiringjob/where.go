// Code generated by ent, DO NOT EDIT.

package hiringjob

import (
	"time"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlug), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// SalaryFrom applies equality check predicate on the "salary_from" field. It's identical to SalaryFromEQ.
func SalaryFrom(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalaryFrom), v))
	})
}

// SalaryTo applies equality check predicate on the "salary_to" field. It's identical to SalaryToEQ.
func SalaryTo(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalaryTo), v))
	})
}

// LastApplyDate applies equality check predicate on the "last_apply_date" field. It's identical to LastApplyDateEQ.
func LastApplyDate(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastApplyDate), v))
	})
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// HiringTeamID applies equality check predicate on the "hiring_team_id" field. It's identical to HiringTeamIDEQ.
func HiringTeamID(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHiringTeamID), v))
	})
}

// RecTeamID applies equality check predicate on the "rec_team_id" field. It's identical to RecTeamIDEQ.
func RecTeamID(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecTeamID), v))
	})
}

// RecInChargeID applies equality check predicate on the "rec_in_charge_id" field. It's identical to RecInChargeIDEQ.
func RecInChargeID(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecInChargeID), v))
	})
}

// JobPositionID applies equality check predicate on the "job_position_id" field. It's identical to JobPositionIDEQ.
func JobPositionID(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobPositionID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlug), v))
	})
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSlug), v))
	})
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSlug), v...))
	})
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSlug), v...))
	})
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSlug), v))
	})
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSlug), v))
	})
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSlug), v))
	})
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSlug), v))
	})
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSlug), v))
	})
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSlug), v))
	})
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSlug), v))
	})
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSlug), v))
	})
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSlug), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v Location) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v Location) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocation), v))
	})
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...Location) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLocation), v...))
	})
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...Location) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLocation), v...))
	})
}

// SalaryTypeEQ applies the EQ predicate on the "salary_type" field.
func SalaryTypeEQ(v SalaryType) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalaryType), v))
	})
}

// SalaryTypeNEQ applies the NEQ predicate on the "salary_type" field.
func SalaryTypeNEQ(v SalaryType) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalaryType), v))
	})
}

// SalaryTypeIn applies the In predicate on the "salary_type" field.
func SalaryTypeIn(vs ...SalaryType) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSalaryType), v...))
	})
}

// SalaryTypeNotIn applies the NotIn predicate on the "salary_type" field.
func SalaryTypeNotIn(vs ...SalaryType) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSalaryType), v...))
	})
}

// SalaryFromEQ applies the EQ predicate on the "salary_from" field.
func SalaryFromEQ(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalaryFrom), v))
	})
}

// SalaryFromNEQ applies the NEQ predicate on the "salary_from" field.
func SalaryFromNEQ(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalaryFrom), v))
	})
}

// SalaryFromIn applies the In predicate on the "salary_from" field.
func SalaryFromIn(vs ...int) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSalaryFrom), v...))
	})
}

// SalaryFromNotIn applies the NotIn predicate on the "salary_from" field.
func SalaryFromNotIn(vs ...int) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSalaryFrom), v...))
	})
}

// SalaryFromGT applies the GT predicate on the "salary_from" field.
func SalaryFromGT(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalaryFrom), v))
	})
}

// SalaryFromGTE applies the GTE predicate on the "salary_from" field.
func SalaryFromGTE(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalaryFrom), v))
	})
}

// SalaryFromLT applies the LT predicate on the "salary_from" field.
func SalaryFromLT(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalaryFrom), v))
	})
}

// SalaryFromLTE applies the LTE predicate on the "salary_from" field.
func SalaryFromLTE(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalaryFrom), v))
	})
}

// SalaryToEQ applies the EQ predicate on the "salary_to" field.
func SalaryToEQ(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSalaryTo), v))
	})
}

// SalaryToNEQ applies the NEQ predicate on the "salary_to" field.
func SalaryToNEQ(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSalaryTo), v))
	})
}

// SalaryToIn applies the In predicate on the "salary_to" field.
func SalaryToIn(vs ...int) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSalaryTo), v...))
	})
}

// SalaryToNotIn applies the NotIn predicate on the "salary_to" field.
func SalaryToNotIn(vs ...int) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSalaryTo), v...))
	})
}

// SalaryToGT applies the GT predicate on the "salary_to" field.
func SalaryToGT(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSalaryTo), v))
	})
}

// SalaryToGTE applies the GTE predicate on the "salary_to" field.
func SalaryToGTE(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSalaryTo), v))
	})
}

// SalaryToLT applies the LT predicate on the "salary_to" field.
func SalaryToLT(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSalaryTo), v))
	})
}

// SalaryToLTE applies the LTE predicate on the "salary_to" field.
func SalaryToLTE(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSalaryTo), v))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v Currency) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v Currency) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...Currency) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...Currency) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// LastApplyDateEQ applies the EQ predicate on the "last_apply_date" field.
func LastApplyDateEQ(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateNEQ applies the NEQ predicate on the "last_apply_date" field.
func LastApplyDateNEQ(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateIn applies the In predicate on the "last_apply_date" field.
func LastApplyDateIn(vs ...time.Time) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastApplyDate), v...))
	})
}

// LastApplyDateNotIn applies the NotIn predicate on the "last_apply_date" field.
func LastApplyDateNotIn(vs ...time.Time) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastApplyDate), v...))
	})
}

// LastApplyDateGT applies the GT predicate on the "last_apply_date" field.
func LastApplyDateGT(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateGTE applies the GTE predicate on the "last_apply_date" field.
func LastApplyDateGTE(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateLT applies the LT predicate on the "last_apply_date" field.
func LastApplyDateLT(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateLTE applies the LTE predicate on the "last_apply_date" field.
func LastApplyDateLTE(v time.Time) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastApplyDate), v))
	})
}

// LastApplyDateIsNil applies the IsNil predicate on the "last_apply_date" field.
func LastApplyDateIsNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastApplyDate)))
	})
}

// LastApplyDateNotNil applies the NotNil predicate on the "last_apply_date" field.
func LastApplyDateNotNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastApplyDate)))
	})
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriority), v))
	})
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPriority), v...))
	})
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPriority), v...))
	})
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriority), v))
	})
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriority), v))
	})
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriority), v))
	})
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriority), v))
	})
}

// HiringTeamIDEQ applies the EQ predicate on the "hiring_team_id" field.
func HiringTeamIDEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHiringTeamID), v))
	})
}

// HiringTeamIDNEQ applies the NEQ predicate on the "hiring_team_id" field.
func HiringTeamIDNEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHiringTeamID), v))
	})
}

// HiringTeamIDIn applies the In predicate on the "hiring_team_id" field.
func HiringTeamIDIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHiringTeamID), v...))
	})
}

// HiringTeamIDNotIn applies the NotIn predicate on the "hiring_team_id" field.
func HiringTeamIDNotIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHiringTeamID), v...))
	})
}

// HiringTeamIDIsNil applies the IsNil predicate on the "hiring_team_id" field.
func HiringTeamIDIsNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHiringTeamID)))
	})
}

// HiringTeamIDNotNil applies the NotNil predicate on the "hiring_team_id" field.
func HiringTeamIDNotNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHiringTeamID)))
	})
}

// RecTeamIDEQ applies the EQ predicate on the "rec_team_id" field.
func RecTeamIDEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecTeamID), v))
	})
}

// RecTeamIDNEQ applies the NEQ predicate on the "rec_team_id" field.
func RecTeamIDNEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecTeamID), v))
	})
}

// RecTeamIDIn applies the In predicate on the "rec_team_id" field.
func RecTeamIDIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecTeamID), v...))
	})
}

// RecTeamIDNotIn applies the NotIn predicate on the "rec_team_id" field.
func RecTeamIDNotIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecTeamID), v...))
	})
}

// RecInChargeIDEQ applies the EQ predicate on the "rec_in_charge_id" field.
func RecInChargeIDEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecInChargeID), v))
	})
}

// RecInChargeIDNEQ applies the NEQ predicate on the "rec_in_charge_id" field.
func RecInChargeIDNEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecInChargeID), v))
	})
}

// RecInChargeIDIn applies the In predicate on the "rec_in_charge_id" field.
func RecInChargeIDIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecInChargeID), v...))
	})
}

// RecInChargeIDNotIn applies the NotIn predicate on the "rec_in_charge_id" field.
func RecInChargeIDNotIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecInChargeID), v...))
	})
}

// RecInChargeIDIsNil applies the IsNil predicate on the "rec_in_charge_id" field.
func RecInChargeIDIsNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecInChargeID)))
	})
}

// RecInChargeIDNotNil applies the NotNil predicate on the "rec_in_charge_id" field.
func RecInChargeIDNotNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecInChargeID)))
	})
}

// JobPositionIDEQ applies the EQ predicate on the "job_position_id" field.
func JobPositionIDEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobPositionID), v))
	})
}

// JobPositionIDNEQ applies the NEQ predicate on the "job_position_id" field.
func JobPositionIDNEQ(v uuid.UUID) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJobPositionID), v))
	})
}

// JobPositionIDIn applies the In predicate on the "job_position_id" field.
func JobPositionIDIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJobPositionID), v...))
	})
}

// JobPositionIDNotIn applies the NotIn predicate on the "job_position_id" field.
func JobPositionIDNotIn(vs ...uuid.UUID) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJobPositionID), v...))
	})
}

// JobPositionIDIsNil applies the IsNil predicate on the "job_position_id" field.
func JobPositionIDIsNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJobPositionID)))
	})
}

// JobPositionIDNotNil applies the NotNil predicate on the "job_position_id" field.
func JobPositionIDNotNil() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJobPositionID)))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v Level) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v Level) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...Level) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...Level) predicate.HiringJob {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.HiringJob(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// HasOwnerEdge applies the HasEdge predicate on the "owner_edge" edge.
func HasOwnerEdge() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerEdgeTable, OwnerEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerEdgeWith applies the HasEdge predicate on the "owner_edge" edge with a given conditions (other predicates).
func HasOwnerEdgeWith(preds ...predicate.User) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerEdgeTable, OwnerEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidateJobEdges applies the HasEdge predicate on the "candidate_job_edges" edge.
func HasCandidateJobEdges() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateJobEdgesTable, CandidateJobEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidateJobEdgesWith applies the HasEdge predicate on the "candidate_job_edges" edge with a given conditions (other predicates).
func HasCandidateJobEdgesWith(preds ...predicate.CandidateJob) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CandidateJobEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidateJobEdgesTable, CandidateJobEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHiringJobSkillEdges applies the HasEdge predicate on the "hiring_job_skill_edges" edge.
func HasHiringJobSkillEdges() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringJobSkillEdgesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HiringJobSkillEdgesTable, HiringJobSkillEdgesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHiringJobSkillEdgesWith applies the HasEdge predicate on the "hiring_job_skill_edges" edge with a given conditions (other predicates).
func HasHiringJobSkillEdgesWith(preds ...predicate.EntitySkill) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringJobSkillEdgesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HiringJobSkillEdgesTable, HiringJobSkillEdgesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHiringTeamEdge applies the HasEdge predicate on the "hiring_team_edge" edge.
func HasHiringTeamEdge() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringTeamEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HiringTeamEdgeTable, HiringTeamEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHiringTeamEdgeWith applies the HasEdge predicate on the "hiring_team_edge" edge with a given conditions (other predicates).
func HasHiringTeamEdgeWith(preds ...predicate.HiringTeam) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HiringTeamEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HiringTeamEdgeTable, HiringTeamEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobPositionEdge applies the HasEdge predicate on the "job_position_edge" edge.
func HasJobPositionEdge() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobPositionEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobPositionEdgeTable, JobPositionEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobPositionEdgeWith applies the HasEdge predicate on the "job_position_edge" edge with a given conditions (other predicates).
func HasJobPositionEdgeWith(preds ...predicate.JobPosition) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobPositionEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobPositionEdgeTable, JobPositionEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprovalUsers applies the HasEdge predicate on the "approval_users" edge.
func HasApprovalUsers() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalUsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ApprovalUsersTable, ApprovalUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovalUsersWith applies the HasEdge predicate on the "approval_users" edge with a given conditions (other predicates).
func HasApprovalUsersWith(preds ...predicate.User) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalUsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ApprovalUsersTable, ApprovalUsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecTeamEdge applies the HasEdge predicate on the "rec_team_edge" edge.
func HasRecTeamEdge() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecTeamEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RecTeamEdgeTable, RecTeamEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecTeamEdgeWith applies the HasEdge predicate on the "rec_team_edge" edge with a given conditions (other predicates).
func HasRecTeamEdgeWith(preds ...predicate.RecTeam) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecTeamEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RecTeamEdgeTable, RecTeamEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecInChargeEdge applies the HasEdge predicate on the "rec_in_charge_edge" edge.
func HasRecInChargeEdge() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecInChargeEdgeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RecInChargeEdgeTable, RecInChargeEdgeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecInChargeEdgeWith applies the HasEdge predicate on the "rec_in_charge_edge" edge with a given conditions (other predicates).
func HasRecInChargeEdgeWith(preds ...predicate.User) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecInChargeEdgeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RecInChargeEdgeTable, RecInChargeEdgeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApprovalSteps applies the HasEdge predicate on the "approval_steps" edge.
func HasApprovalSteps() predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalStepsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ApprovalStepsTable, ApprovalStepsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovalStepsWith applies the HasEdge predicate on the "approval_steps" edge with a given conditions (other predicates).
func HasApprovalStepsWith(preds ...predicate.HiringJobStep) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApprovalStepsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ApprovalStepsTable, ApprovalStepsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HiringJob) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HiringJob) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HiringJob) predicate.HiringJob {
	return predicate.HiringJob(func(s *sql.Selector) {
		p(s.Not())
	})
}
