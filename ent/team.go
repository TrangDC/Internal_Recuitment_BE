// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/team"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges TeamEdges `json:"edges"`
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// The uniqueness of the user is enforced on the edge schema
	UserEdges []*User `json:"user_edges,omitempty"`
	// HiringTeam holds the value of the hiring_team edge.
	HiringTeam []*HiringJob `json:"hiring_team,omitempty"`
	// UserTeams holds the value of the user_teams edge.
	UserTeams []*TeamManager `json:"user_teams,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedUserEdges  map[string][]*User
	namedHiringTeam map[string][]*HiringJob
	namedUserTeams  map[string][]*TeamManager
}

// UserEdgesOrErr returns the UserEdges value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) UserEdgesOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.UserEdges, nil
	}
	return nil, &NotLoadedError{edge: "user_edges"}
}

// HiringTeamOrErr returns the HiringTeam value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) HiringTeamOrErr() ([]*HiringJob, error) {
	if e.loadedTypes[1] {
		return e.HiringTeam, nil
	}
	return nil, &NotLoadedError{edge: "hiring_team"}
}

// UserTeamsOrErr returns the UserTeams value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) UserTeamsOrErr() ([]*TeamManager, error) {
	if e.loadedTypes[2] {
		return e.UserTeams, nil
	}
	return nil, &NotLoadedError{edge: "user_teams"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldSlug, team.FieldName:
			values[i] = new(sql.NullString)
		case team.FieldCreatedAt, team.FieldUpdatedAt, team.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case team.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Team", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case team.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case team.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case team.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = value.Time
			}
		case team.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				t.Slug = value.String
			}
		case team.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		}
	}
	return nil
}

// QueryUserEdges queries the "user_edges" edge of the Team entity.
func (t *Team) QueryUserEdges() *UserQuery {
	return (&TeamClient{config: t.config}).QueryUserEdges(t)
}

// QueryHiringTeam queries the "hiring_team" edge of the Team entity.
func (t *Team) QueryHiringTeam() *HiringJobQuery {
	return (&TeamClient{config: t.config}).QueryHiringTeam(t)
}

// QueryUserTeams queries the "user_teams" edge of the Team entity.
func (t *Team) QueryUserTeams() *TeamManagerQuery {
	return (&TeamClient{config: t.config}).QueryUserTeams(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return (&TeamClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(t.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(t.Slug)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedUserEdges returns the UserEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Team) NamedUserEdges(name string) ([]*User, error) {
	if t.Edges.namedUserEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedUserEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Team) appendNamedUserEdges(name string, edges ...*User) {
	if t.Edges.namedUserEdges == nil {
		t.Edges.namedUserEdges = make(map[string][]*User)
	}
	if len(edges) == 0 {
		t.Edges.namedUserEdges[name] = []*User{}
	} else {
		t.Edges.namedUserEdges[name] = append(t.Edges.namedUserEdges[name], edges...)
	}
}

// NamedHiringTeam returns the HiringTeam named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Team) NamedHiringTeam(name string) ([]*HiringJob, error) {
	if t.Edges.namedHiringTeam == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedHiringTeam[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Team) appendNamedHiringTeam(name string, edges ...*HiringJob) {
	if t.Edges.namedHiringTeam == nil {
		t.Edges.namedHiringTeam = make(map[string][]*HiringJob)
	}
	if len(edges) == 0 {
		t.Edges.namedHiringTeam[name] = []*HiringJob{}
	} else {
		t.Edges.namedHiringTeam[name] = append(t.Edges.namedHiringTeam[name], edges...)
	}
}

// NamedUserTeams returns the UserTeams named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Team) NamedUserTeams(name string) ([]*TeamManager, error) {
	if t.Edges.namedUserTeams == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedUserTeams[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Team) appendNamedUserTeams(name string, edges ...*TeamManager) {
	if t.Edges.namedUserTeams == nil {
		t.Edges.namedUserTeams = make(map[string][]*TeamManager)
	}
	if len(edges) == 0 {
		t.Edges.namedUserTeams[name] = []*TeamManager{}
	} else {
		t.Edges.namedUserTeams[name] = append(t.Edges.namedUserTeams[name], edges...)
	}
}

// Teams is a parsable slice of Team.
type Teams []*Team

func (t Teams) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
