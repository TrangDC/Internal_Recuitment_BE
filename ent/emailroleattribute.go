// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/emailroleattribute"
	"trec/ent/role"
	"trec/ent/team"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// EmailRoleAttribute is the model entity for the EmailRoleAttribute schema.
type EmailRoleAttribute struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// EmailTemplateID holds the value of the "email_template_id" field.
	EmailTemplateID uuid.UUID `json:"email_template_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID uuid.UUID `json:"role_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailRoleAttributeQuery when eager-loading is set.
	Edges EmailRoleAttributeEdges `json:"edges"`
}

// EmailRoleAttributeEdges holds the relations/edges for other nodes in the graph.
type EmailRoleAttributeEdges struct {
	// EmailTemplateEdge holds the value of the email_template_edge edge.
	EmailTemplateEdge *Team `json:"email_template_edge,omitempty"`
	// RoleEdge holds the value of the role_edge edge.
	RoleEdge *Role `json:"role_edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// EmailTemplateEdgeOrErr returns the EmailTemplateEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailRoleAttributeEdges) EmailTemplateEdgeOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.EmailTemplateEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.EmailTemplateEdge, nil
	}
	return nil, &NotLoadedError{edge: "email_template_edge"}
}

// RoleEdgeOrErr returns the RoleEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailRoleAttributeEdges) RoleEdgeOrErr() (*Role, error) {
	if e.loadedTypes[1] {
		if e.RoleEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.RoleEdge, nil
	}
	return nil, &NotLoadedError{edge: "role_edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailRoleAttribute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailroleattribute.FieldCreatedAt, emailroleattribute.FieldUpdatedAt, emailroleattribute.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case emailroleattribute.FieldID, emailroleattribute.FieldEmailTemplateID, emailroleattribute.FieldRoleID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EmailRoleAttribute", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailRoleAttribute fields.
func (era *EmailRoleAttribute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailroleattribute.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				era.ID = *value
			}
		case emailroleattribute.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				era.CreatedAt = value.Time
			}
		case emailroleattribute.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				era.UpdatedAt = value.Time
			}
		case emailroleattribute.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				era.DeletedAt = value.Time
			}
		case emailroleattribute.FieldEmailTemplateID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field email_template_id", values[i])
			} else if value != nil {
				era.EmailTemplateID = *value
			}
		case emailroleattribute.FieldRoleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value != nil {
				era.RoleID = *value
			}
		}
	}
	return nil
}

// QueryEmailTemplateEdge queries the "email_template_edge" edge of the EmailRoleAttribute entity.
func (era *EmailRoleAttribute) QueryEmailTemplateEdge() *TeamQuery {
	return (&EmailRoleAttributeClient{config: era.config}).QueryEmailTemplateEdge(era)
}

// QueryRoleEdge queries the "role_edge" edge of the EmailRoleAttribute entity.
func (era *EmailRoleAttribute) QueryRoleEdge() *RoleQuery {
	return (&EmailRoleAttributeClient{config: era.config}).QueryRoleEdge(era)
}

// Update returns a builder for updating this EmailRoleAttribute.
// Note that you need to call EmailRoleAttribute.Unwrap() before calling this method if this EmailRoleAttribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (era *EmailRoleAttribute) Update() *EmailRoleAttributeUpdateOne {
	return (&EmailRoleAttributeClient{config: era.config}).UpdateOne(era)
}

// Unwrap unwraps the EmailRoleAttribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (era *EmailRoleAttribute) Unwrap() *EmailRoleAttribute {
	_tx, ok := era.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailRoleAttribute is not a transactional entity")
	}
	era.config.driver = _tx.drv
	return era
}

// String implements the fmt.Stringer.
func (era *EmailRoleAttribute) String() string {
	var builder strings.Builder
	builder.WriteString("EmailRoleAttribute(")
	builder.WriteString(fmt.Sprintf("id=%v, ", era.ID))
	builder.WriteString("created_at=")
	builder.WriteString(era.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(era.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(era.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email_template_id=")
	builder.WriteString(fmt.Sprintf("%v", era.EmailTemplateID))
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", era.RoleID))
	builder.WriteByte(')')
	return builder.String()
}

// EmailRoleAttributes is a parsable slice of EmailRoleAttribute.
type EmailRoleAttributes []*EmailRoleAttribute

func (era EmailRoleAttributes) config(cfg config) {
	for _i := range era {
		era[_i].config = cfg
	}
}
