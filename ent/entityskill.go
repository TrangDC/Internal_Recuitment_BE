// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/candidate"
	"trec/ent/entityskill"
	"trec/ent/hiringjob"
	"trec/ent/skill"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// EntitySkill is the model entity for the EntitySkill schema.
type EntitySkill struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType entityskill.EntityType `json:"entity_type,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID uuid.UUID `json:"entity_id,omitempty"`
	// SkillID holds the value of the "skill_id" field.
	SkillID uuid.UUID `json:"skill_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntitySkillQuery when eager-loading is set.
	Edges EntitySkillEdges `json:"edges"`
}

// EntitySkillEdges holds the relations/edges for other nodes in the graph.
type EntitySkillEdges struct {
	// SkillEdge holds the value of the skill_edge edge.
	SkillEdge *Skill `json:"skill_edge,omitempty"`
	// HiringJobEdge holds the value of the hiring_job_edge edge.
	HiringJobEdge *HiringJob `json:"hiring_job_edge,omitempty"`
	// CandidateEdge holds the value of the candidate_edge edge.
	CandidateEdge *Candidate `json:"candidate_edge,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// SkillEdgeOrErr returns the SkillEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitySkillEdges) SkillEdgeOrErr() (*Skill, error) {
	if e.loadedTypes[0] {
		if e.SkillEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: skill.Label}
		}
		return e.SkillEdge, nil
	}
	return nil, &NotLoadedError{edge: "skill_edge"}
}

// HiringJobEdgeOrErr returns the HiringJobEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitySkillEdges) HiringJobEdgeOrErr() (*HiringJob, error) {
	if e.loadedTypes[1] {
		if e.HiringJobEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hiringjob.Label}
		}
		return e.HiringJobEdge, nil
	}
	return nil, &NotLoadedError{edge: "hiring_job_edge"}
}

// CandidateEdgeOrErr returns the CandidateEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitySkillEdges) CandidateEdgeOrErr() (*Candidate, error) {
	if e.loadedTypes[2] {
		if e.CandidateEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidate.Label}
		}
		return e.CandidateEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_edge"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntitySkill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entityskill.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case entityskill.FieldEntityType:
			values[i] = new(sql.NullString)
		case entityskill.FieldCreatedAt, entityskill.FieldUpdatedAt, entityskill.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case entityskill.FieldID, entityskill.FieldEntityID, entityskill.FieldSkillID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EntitySkill", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntitySkill fields.
func (es *EntitySkill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entityskill.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				es.ID = *value
			}
		case entityskill.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				es.CreatedAt = value.Time
			}
		case entityskill.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				es.UpdatedAt = value.Time
			}
		case entityskill.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				es.DeletedAt = value.Time
			}
		case entityskill.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				es.EntityType = entityskill.EntityType(value.String)
			}
		case entityskill.FieldEntityID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value != nil {
				es.EntityID = *value
			}
		case entityskill.FieldSkillID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field skill_id", values[i])
			} else if value != nil {
				es.SkillID = *value
			}
		case entityskill.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				es.OrderID = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySkillEdge queries the "skill_edge" edge of the EntitySkill entity.
func (es *EntitySkill) QuerySkillEdge() *SkillQuery {
	return (&EntitySkillClient{config: es.config}).QuerySkillEdge(es)
}

// QueryHiringJobEdge queries the "hiring_job_edge" edge of the EntitySkill entity.
func (es *EntitySkill) QueryHiringJobEdge() *HiringJobQuery {
	return (&EntitySkillClient{config: es.config}).QueryHiringJobEdge(es)
}

// QueryCandidateEdge queries the "candidate_edge" edge of the EntitySkill entity.
func (es *EntitySkill) QueryCandidateEdge() *CandidateQuery {
	return (&EntitySkillClient{config: es.config}).QueryCandidateEdge(es)
}

// Update returns a builder for updating this EntitySkill.
// Note that you need to call EntitySkill.Unwrap() before calling this method if this EntitySkill
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *EntitySkill) Update() *EntitySkillUpdateOne {
	return (&EntitySkillClient{config: es.config}).UpdateOne(es)
}

// Unwrap unwraps the EntitySkill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *EntitySkill) Unwrap() *EntitySkill {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntitySkill is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *EntitySkill) String() string {
	var builder strings.Builder
	builder.WriteString("EntitySkill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("created_at=")
	builder.WriteString(es.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(es.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(es.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(fmt.Sprintf("%v", es.EntityType))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", es.EntityID))
	builder.WriteString(", ")
	builder.WriteString("skill_id=")
	builder.WriteString(fmt.Sprintf("%v", es.SkillID))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", es.OrderID))
	builder.WriteByte(')')
	return builder.String()
}

// EntitySkills is a parsable slice of EntitySkill.
type EntitySkills []*EntitySkill

func (es EntitySkills) config(cfg config) {
	for _i := range es {
		es[_i].config = cfg
	}
}
