// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobstep"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateJobStepQuery is the builder for querying CandidateJobStep entities.
type CandidateJobStepQuery struct {
	config
	limit                *int
	offset               *int
	unique               *bool
	order                []OrderFunc
	fields               []string
	predicates           []predicate.CandidateJobStep
	withCandidateJobEdge *CandidateJobQuery
	modifiers            []func(*sql.Selector)
	loadTotal            []func(context.Context, []*CandidateJobStep) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CandidateJobStepQuery builder.
func (cjsq *CandidateJobStepQuery) Where(ps ...predicate.CandidateJobStep) *CandidateJobStepQuery {
	cjsq.predicates = append(cjsq.predicates, ps...)
	return cjsq
}

// Limit adds a limit step to the query.
func (cjsq *CandidateJobStepQuery) Limit(limit int) *CandidateJobStepQuery {
	cjsq.limit = &limit
	return cjsq
}

// Offset adds an offset step to the query.
func (cjsq *CandidateJobStepQuery) Offset(offset int) *CandidateJobStepQuery {
	cjsq.offset = &offset
	return cjsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cjsq *CandidateJobStepQuery) Unique(unique bool) *CandidateJobStepQuery {
	cjsq.unique = &unique
	return cjsq
}

// Order adds an order step to the query.
func (cjsq *CandidateJobStepQuery) Order(o ...OrderFunc) *CandidateJobStepQuery {
	cjsq.order = append(cjsq.order, o...)
	return cjsq
}

// QueryCandidateJobEdge chains the current query on the "candidate_job_edge" edge.
func (cjsq *CandidateJobStepQuery) QueryCandidateJobEdge() *CandidateJobQuery {
	query := &CandidateJobQuery{config: cjsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cjsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cjsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(candidatejobstep.Table, candidatejobstep.FieldID, selector),
			sqlgraph.To(candidatejob.Table, candidatejob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, candidatejobstep.CandidateJobEdgeTable, candidatejobstep.CandidateJobEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(cjsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CandidateJobStep entity from the query.
// Returns a *NotFoundError when no CandidateJobStep was found.
func (cjsq *CandidateJobStepQuery) First(ctx context.Context) (*CandidateJobStep, error) {
	nodes, err := cjsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{candidatejobstep.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cjsq *CandidateJobStepQuery) FirstX(ctx context.Context) *CandidateJobStep {
	node, err := cjsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CandidateJobStep ID from the query.
// Returns a *NotFoundError when no CandidateJobStep ID was found.
func (cjsq *CandidateJobStepQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cjsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{candidatejobstep.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cjsq *CandidateJobStepQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cjsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CandidateJobStep entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CandidateJobStep entity is found.
// Returns a *NotFoundError when no CandidateJobStep entities are found.
func (cjsq *CandidateJobStepQuery) Only(ctx context.Context) (*CandidateJobStep, error) {
	nodes, err := cjsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{candidatejobstep.Label}
	default:
		return nil, &NotSingularError{candidatejobstep.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cjsq *CandidateJobStepQuery) OnlyX(ctx context.Context) *CandidateJobStep {
	node, err := cjsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CandidateJobStep ID in the query.
// Returns a *NotSingularError when more than one CandidateJobStep ID is found.
// Returns a *NotFoundError when no entities are found.
func (cjsq *CandidateJobStepQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cjsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{candidatejobstep.Label}
	default:
		err = &NotSingularError{candidatejobstep.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cjsq *CandidateJobStepQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cjsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CandidateJobSteps.
func (cjsq *CandidateJobStepQuery) All(ctx context.Context) ([]*CandidateJobStep, error) {
	if err := cjsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cjsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cjsq *CandidateJobStepQuery) AllX(ctx context.Context) []*CandidateJobStep {
	nodes, err := cjsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CandidateJobStep IDs.
func (cjsq *CandidateJobStepQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := cjsq.Select(candidatejobstep.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cjsq *CandidateJobStepQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cjsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cjsq *CandidateJobStepQuery) Count(ctx context.Context) (int, error) {
	if err := cjsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cjsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cjsq *CandidateJobStepQuery) CountX(ctx context.Context) int {
	count, err := cjsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cjsq *CandidateJobStepQuery) Exist(ctx context.Context) (bool, error) {
	if err := cjsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cjsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cjsq *CandidateJobStepQuery) ExistX(ctx context.Context) bool {
	exist, err := cjsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CandidateJobStepQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cjsq *CandidateJobStepQuery) Clone() *CandidateJobStepQuery {
	if cjsq == nil {
		return nil
	}
	return &CandidateJobStepQuery{
		config:               cjsq.config,
		limit:                cjsq.limit,
		offset:               cjsq.offset,
		order:                append([]OrderFunc{}, cjsq.order...),
		predicates:           append([]predicate.CandidateJobStep{}, cjsq.predicates...),
		withCandidateJobEdge: cjsq.withCandidateJobEdge.Clone(),
		// clone intermediate query.
		sql:    cjsq.sql.Clone(),
		path:   cjsq.path,
		unique: cjsq.unique,
	}
}

// WithCandidateJobEdge tells the query-builder to eager-load the nodes that are connected to
// the "candidate_job_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (cjsq *CandidateJobStepQuery) WithCandidateJobEdge(opts ...func(*CandidateJobQuery)) *CandidateJobStepQuery {
	query := &CandidateJobQuery{config: cjsq.config}
	for _, opt := range opts {
		opt(query)
	}
	cjsq.withCandidateJobEdge = query
	return cjsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CandidateJobStep.Query().
//		GroupBy(candidatejobstep.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cjsq *CandidateJobStepQuery) GroupBy(field string, fields ...string) *CandidateJobStepGroupBy {
	grbuild := &CandidateJobStepGroupBy{config: cjsq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cjsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cjsq.sqlQuery(ctx), nil
	}
	grbuild.label = candidatejobstep.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.CandidateJobStep.Query().
//		Select(candidatejobstep.FieldCreatedAt).
//		Scan(ctx, &v)
func (cjsq *CandidateJobStepQuery) Select(fields ...string) *CandidateJobStepSelect {
	cjsq.fields = append(cjsq.fields, fields...)
	selbuild := &CandidateJobStepSelect{CandidateJobStepQuery: cjsq}
	selbuild.label = candidatejobstep.Label
	selbuild.flds, selbuild.scan = &cjsq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a CandidateJobStepSelect configured with the given aggregations.
func (cjsq *CandidateJobStepQuery) Aggregate(fns ...AggregateFunc) *CandidateJobStepSelect {
	return cjsq.Select().Aggregate(fns...)
}

func (cjsq *CandidateJobStepQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cjsq.fields {
		if !candidatejobstep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cjsq.path != nil {
		prev, err := cjsq.path(ctx)
		if err != nil {
			return err
		}
		cjsq.sql = prev
	}
	return nil
}

func (cjsq *CandidateJobStepQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CandidateJobStep, error) {
	var (
		nodes       = []*CandidateJobStep{}
		_spec       = cjsq.querySpec()
		loadedTypes = [1]bool{
			cjsq.withCandidateJobEdge != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CandidateJobStep).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CandidateJobStep{config: cjsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cjsq.modifiers) > 0 {
		_spec.Modifiers = cjsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cjsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cjsq.withCandidateJobEdge; query != nil {
		if err := cjsq.loadCandidateJobEdge(ctx, query, nodes, nil,
			func(n *CandidateJobStep, e *CandidateJob) { n.Edges.CandidateJobEdge = e }); err != nil {
			return nil, err
		}
	}
	for i := range cjsq.loadTotal {
		if err := cjsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cjsq *CandidateJobStepQuery) loadCandidateJobEdge(ctx context.Context, query *CandidateJobQuery, nodes []*CandidateJobStep, init func(*CandidateJobStep), assign func(*CandidateJobStep, *CandidateJob)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CandidateJobStep)
	for i := range nodes {
		fk := nodes[i].CandidateJobID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(candidatejob.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "candidate_job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cjsq *CandidateJobStepQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cjsq.querySpec()
	if len(cjsq.modifiers) > 0 {
		_spec.Modifiers = cjsq.modifiers
	}
	_spec.Node.Columns = cjsq.fields
	if len(cjsq.fields) > 0 {
		_spec.Unique = cjsq.unique != nil && *cjsq.unique
	}
	return sqlgraph.CountNodes(ctx, cjsq.driver, _spec)
}

func (cjsq *CandidateJobStepQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := cjsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (cjsq *CandidateJobStepQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidatejobstep.Table,
			Columns: candidatejobstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatejobstep.FieldID,
			},
		},
		From:   cjsq.sql,
		Unique: true,
	}
	if unique := cjsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cjsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidatejobstep.FieldID)
		for i := range fields {
			if fields[i] != candidatejobstep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cjsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cjsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cjsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cjsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cjsq *CandidateJobStepQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cjsq.driver.Dialect())
	t1 := builder.Table(candidatejobstep.Table)
	columns := cjsq.fields
	if len(columns) == 0 {
		columns = candidatejobstep.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cjsq.sql != nil {
		selector = cjsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cjsq.unique != nil && *cjsq.unique {
		selector.Distinct()
	}
	for _, p := range cjsq.predicates {
		p(selector)
	}
	for _, p := range cjsq.order {
		p(selector)
	}
	if offset := cjsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cjsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CandidateJobStepGroupBy is the group-by builder for CandidateJobStep entities.
type CandidateJobStepGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cjsgb *CandidateJobStepGroupBy) Aggregate(fns ...AggregateFunc) *CandidateJobStepGroupBy {
	cjsgb.fns = append(cjsgb.fns, fns...)
	return cjsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cjsgb *CandidateJobStepGroupBy) Scan(ctx context.Context, v any) error {
	query, err := cjsgb.path(ctx)
	if err != nil {
		return err
	}
	cjsgb.sql = query
	return cjsgb.sqlScan(ctx, v)
}

func (cjsgb *CandidateJobStepGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range cjsgb.fields {
		if !candidatejobstep.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cjsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cjsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cjsgb *CandidateJobStepGroupBy) sqlQuery() *sql.Selector {
	selector := cjsgb.sql.Select()
	aggregation := make([]string, 0, len(cjsgb.fns))
	for _, fn := range cjsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cjsgb.fields)+len(cjsgb.fns))
		for _, f := range cjsgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cjsgb.fields...)...)
}

// CandidateJobStepSelect is the builder for selecting fields of CandidateJobStep entities.
type CandidateJobStepSelect struct {
	*CandidateJobStepQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cjss *CandidateJobStepSelect) Aggregate(fns ...AggregateFunc) *CandidateJobStepSelect {
	cjss.fns = append(cjss.fns, fns...)
	return cjss
}

// Scan applies the selector query and scans the result into the given value.
func (cjss *CandidateJobStepSelect) Scan(ctx context.Context, v any) error {
	if err := cjss.prepareQuery(ctx); err != nil {
		return err
	}
	cjss.sql = cjss.CandidateJobStepQuery.sqlQuery(ctx)
	return cjss.sqlScan(ctx, v)
}

func (cjss *CandidateJobStepSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(cjss.fns))
	for _, fn := range cjss.fns {
		aggregation = append(aggregation, fn(cjss.sql))
	}
	switch n := len(*cjss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		cjss.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		cjss.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := cjss.sql.Query()
	if err := cjss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
