// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/hiringjob"
	"trec/ent/recteam"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RecTeamCreate is the builder for creating a RecTeam entity.
type RecTeamCreate struct {
	config
	mutation *RecTeamMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rtc *RecTeamCreate) SetCreatedAt(t time.Time) *RecTeamCreate {
	rtc.mutation.SetCreatedAt(t)
	return rtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rtc *RecTeamCreate) SetNillableCreatedAt(t *time.Time) *RecTeamCreate {
	if t != nil {
		rtc.SetCreatedAt(*t)
	}
	return rtc
}

// SetUpdatedAt sets the "updated_at" field.
func (rtc *RecTeamCreate) SetUpdatedAt(t time.Time) *RecTeamCreate {
	rtc.mutation.SetUpdatedAt(t)
	return rtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rtc *RecTeamCreate) SetNillableUpdatedAt(t *time.Time) *RecTeamCreate {
	if t != nil {
		rtc.SetUpdatedAt(*t)
	}
	return rtc
}

// SetDeletedAt sets the "deleted_at" field.
func (rtc *RecTeamCreate) SetDeletedAt(t time.Time) *RecTeamCreate {
	rtc.mutation.SetDeletedAt(t)
	return rtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rtc *RecTeamCreate) SetNillableDeletedAt(t *time.Time) *RecTeamCreate {
	if t != nil {
		rtc.SetDeletedAt(*t)
	}
	return rtc
}

// SetName sets the "name" field.
func (rtc *RecTeamCreate) SetName(s string) *RecTeamCreate {
	rtc.mutation.SetName(s)
	return rtc
}

// SetDescription sets the "description" field.
func (rtc *RecTeamCreate) SetDescription(s string) *RecTeamCreate {
	rtc.mutation.SetDescription(s)
	return rtc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rtc *RecTeamCreate) SetNillableDescription(s *string) *RecTeamCreate {
	if s != nil {
		rtc.SetDescription(*s)
	}
	return rtc
}

// SetLeaderID sets the "leader_id" field.
func (rtc *RecTeamCreate) SetLeaderID(u uuid.UUID) *RecTeamCreate {
	rtc.mutation.SetLeaderID(u)
	return rtc
}

// SetNillableLeaderID sets the "leader_id" field if the given value is not nil.
func (rtc *RecTeamCreate) SetNillableLeaderID(u *uuid.UUID) *RecTeamCreate {
	if u != nil {
		rtc.SetLeaderID(*u)
	}
	return rtc
}

// SetID sets the "id" field.
func (rtc *RecTeamCreate) SetID(u uuid.UUID) *RecTeamCreate {
	rtc.mutation.SetID(u)
	return rtc
}

// AddRecMemberEdgeIDs adds the "rec_member_edges" edge to the User entity by IDs.
func (rtc *RecTeamCreate) AddRecMemberEdgeIDs(ids ...uuid.UUID) *RecTeamCreate {
	rtc.mutation.AddRecMemberEdgeIDs(ids...)
	return rtc
}

// AddRecMemberEdges adds the "rec_member_edges" edges to the User entity.
func (rtc *RecTeamCreate) AddRecMemberEdges(u ...*User) *RecTeamCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rtc.AddRecMemberEdgeIDs(ids...)
}

// AddRecTeamJobEdgeIDs adds the "rec_team_job_edges" edge to the HiringJob entity by IDs.
func (rtc *RecTeamCreate) AddRecTeamJobEdgeIDs(ids ...uuid.UUID) *RecTeamCreate {
	rtc.mutation.AddRecTeamJobEdgeIDs(ids...)
	return rtc
}

// AddRecTeamJobEdges adds the "rec_team_job_edges" edges to the HiringJob entity.
func (rtc *RecTeamCreate) AddRecTeamJobEdges(h ...*HiringJob) *RecTeamCreate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return rtc.AddRecTeamJobEdgeIDs(ids...)
}

// SetRecLeaderEdgeID sets the "rec_leader_edge" edge to the User entity by ID.
func (rtc *RecTeamCreate) SetRecLeaderEdgeID(id uuid.UUID) *RecTeamCreate {
	rtc.mutation.SetRecLeaderEdgeID(id)
	return rtc
}

// SetNillableRecLeaderEdgeID sets the "rec_leader_edge" edge to the User entity by ID if the given value is not nil.
func (rtc *RecTeamCreate) SetNillableRecLeaderEdgeID(id *uuid.UUID) *RecTeamCreate {
	if id != nil {
		rtc = rtc.SetRecLeaderEdgeID(*id)
	}
	return rtc
}

// SetRecLeaderEdge sets the "rec_leader_edge" edge to the User entity.
func (rtc *RecTeamCreate) SetRecLeaderEdge(u *User) *RecTeamCreate {
	return rtc.SetRecLeaderEdgeID(u.ID)
}

// Mutation returns the RecTeamMutation object of the builder.
func (rtc *RecTeamCreate) Mutation() *RecTeamMutation {
	return rtc.mutation
}

// Save creates the RecTeam in the database.
func (rtc *RecTeamCreate) Save(ctx context.Context) (*RecTeam, error) {
	var (
		err  error
		node *RecTeam
	)
	rtc.defaults()
	if len(rtc.hooks) == 0 {
		if err = rtc.check(); err != nil {
			return nil, err
		}
		node, err = rtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecTeamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtc.check(); err != nil {
				return nil, err
			}
			rtc.mutation = mutation
			if node, err = rtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rtc.hooks) - 1; i >= 0; i-- {
			if rtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rtc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rtc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RecTeam)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RecTeamMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *RecTeamCreate) SaveX(ctx context.Context) *RecTeam {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *RecTeamCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *RecTeamCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtc *RecTeamCreate) defaults() {
	if _, ok := rtc.mutation.CreatedAt(); !ok {
		v := recteam.DefaultCreatedAt()
		rtc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *RecTeamCreate) check() error {
	if _, ok := rtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RecTeam.created_at"`)}
	}
	if _, ok := rtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RecTeam.name"`)}
	}
	if v, ok := rtc.mutation.Name(); ok {
		if err := recteam.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RecTeam.name": %w`, err)}
		}
	}
	if v, ok := rtc.mutation.Description(); ok {
		if err := recteam.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RecTeam.description": %w`, err)}
		}
	}
	return nil
}

func (rtc *RecTeamCreate) sqlSave(ctx context.Context) (*RecTeam, error) {
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rtc *RecTeamCreate) createSpec() (*RecTeam, *sqlgraph.CreateSpec) {
	var (
		_node = &RecTeam{config: rtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: recteam.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: recteam.FieldID,
			},
		}
	)
	if id, ok := rtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rtc.mutation.CreatedAt(); ok {
		_spec.SetField(recteam.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rtc.mutation.UpdatedAt(); ok {
		_spec.SetField(recteam.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rtc.mutation.DeletedAt(); ok {
		_spec.SetField(recteam.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rtc.mutation.Name(); ok {
		_spec.SetField(recteam.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rtc.mutation.Description(); ok {
		_spec.SetField(recteam.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := rtc.mutation.RecMemberEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recteam.RecMemberEdgesTable,
			Columns: []string{recteam.RecMemberEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.RecTeamJobEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recteam.RecTeamJobEdgesTable,
			Columns: []string{recteam.RecTeamJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.RecLeaderEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   recteam.RecLeaderEdgeTable,
			Columns: []string{recteam.RecLeaderEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LeaderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecTeamCreateBulk is the builder for creating many RecTeam entities in bulk.
type RecTeamCreateBulk struct {
	config
	builders []*RecTeamCreate
}

// Save creates the RecTeam entities in the database.
func (rtcb *RecTeamCreateBulk) Save(ctx context.Context) ([]*RecTeam, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*RecTeam, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecTeamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *RecTeamCreateBulk) SaveX(ctx context.Context) []*RecTeam {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *RecTeamCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *RecTeamCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
