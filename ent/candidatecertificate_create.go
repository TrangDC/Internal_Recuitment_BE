// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidate"
	"trec/ent/candidatecertificate"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateCertificateCreate is the builder for creating a CandidateCertificate entity.
type CandidateCertificateCreate struct {
	config
	mutation *CandidateCertificateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CandidateCertificateCreate) SetCreatedAt(t time.Time) *CandidateCertificateCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CandidateCertificateCreate) SetNillableCreatedAt(t *time.Time) *CandidateCertificateCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CandidateCertificateCreate) SetUpdatedAt(t time.Time) *CandidateCertificateCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CandidateCertificateCreate) SetNillableUpdatedAt(t *time.Time) *CandidateCertificateCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetDeletedAt sets the "deleted_at" field.
func (ccc *CandidateCertificateCreate) SetDeletedAt(t time.Time) *CandidateCertificateCreate {
	ccc.mutation.SetDeletedAt(t)
	return ccc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccc *CandidateCertificateCreate) SetNillableDeletedAt(t *time.Time) *CandidateCertificateCreate {
	if t != nil {
		ccc.SetDeletedAt(*t)
	}
	return ccc
}

// SetCandidateID sets the "candidate_id" field.
func (ccc *CandidateCertificateCreate) SetCandidateID(u uuid.UUID) *CandidateCertificateCreate {
	ccc.mutation.SetCandidateID(u)
	return ccc
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (ccc *CandidateCertificateCreate) SetNillableCandidateID(u *uuid.UUID) *CandidateCertificateCreate {
	if u != nil {
		ccc.SetCandidateID(*u)
	}
	return ccc
}

// SetName sets the "name" field.
func (ccc *CandidateCertificateCreate) SetName(s string) *CandidateCertificateCreate {
	ccc.mutation.SetName(s)
	return ccc
}

// SetScore sets the "score" field.
func (ccc *CandidateCertificateCreate) SetScore(s string) *CandidateCertificateCreate {
	ccc.mutation.SetScore(s)
	return ccc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ccc *CandidateCertificateCreate) SetNillableScore(s *string) *CandidateCertificateCreate {
	if s != nil {
		ccc.SetScore(*s)
	}
	return ccc
}

// SetAchievedDate sets the "achieved_date" field.
func (ccc *CandidateCertificateCreate) SetAchievedDate(t time.Time) *CandidateCertificateCreate {
	ccc.mutation.SetAchievedDate(t)
	return ccc
}

// SetNillableAchievedDate sets the "achieved_date" field if the given value is not nil.
func (ccc *CandidateCertificateCreate) SetNillableAchievedDate(t *time.Time) *CandidateCertificateCreate {
	if t != nil {
		ccc.SetAchievedDate(*t)
	}
	return ccc
}

// SetOrderID sets the "order_id" field.
func (ccc *CandidateCertificateCreate) SetOrderID(i int) *CandidateCertificateCreate {
	ccc.mutation.SetOrderID(i)
	return ccc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ccc *CandidateCertificateCreate) SetNillableOrderID(i *int) *CandidateCertificateCreate {
	if i != nil {
		ccc.SetOrderID(*i)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CandidateCertificateCreate) SetID(u uuid.UUID) *CandidateCertificateCreate {
	ccc.mutation.SetID(u)
	return ccc
}

// AddAttachmentEdgeIDs adds the "attachment_edges" edge to the Attachment entity by IDs.
func (ccc *CandidateCertificateCreate) AddAttachmentEdgeIDs(ids ...uuid.UUID) *CandidateCertificateCreate {
	ccc.mutation.AddAttachmentEdgeIDs(ids...)
	return ccc
}

// AddAttachmentEdges adds the "attachment_edges" edges to the Attachment entity.
func (ccc *CandidateCertificateCreate) AddAttachmentEdges(a ...*Attachment) *CandidateCertificateCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ccc.AddAttachmentEdgeIDs(ids...)
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (ccc *CandidateCertificateCreate) SetCandidateEdgeID(id uuid.UUID) *CandidateCertificateCreate {
	ccc.mutation.SetCandidateEdgeID(id)
	return ccc
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (ccc *CandidateCertificateCreate) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateCertificateCreate {
	if id != nil {
		ccc = ccc.SetCandidateEdgeID(*id)
	}
	return ccc
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (ccc *CandidateCertificateCreate) SetCandidateEdge(c *Candidate) *CandidateCertificateCreate {
	return ccc.SetCandidateEdgeID(c.ID)
}

// Mutation returns the CandidateCertificateMutation object of the builder.
func (ccc *CandidateCertificateCreate) Mutation() *CandidateCertificateMutation {
	return ccc.mutation
}

// Save creates the CandidateCertificate in the database.
func (ccc *CandidateCertificateCreate) Save(ctx context.Context) (*CandidateCertificate, error) {
	var (
		err  error
		node *CandidateCertificate
	)
	ccc.defaults()
	if len(ccc.hooks) == 0 {
		if err = ccc.check(); err != nil {
			return nil, err
		}
		node, err = ccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateCertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccc.check(); err != nil {
				return nil, err
			}
			ccc.mutation = mutation
			if node, err = ccc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ccc.hooks) - 1; i >= 0; i-- {
			if ccc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ccc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateCertificate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateCertificateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CandidateCertificateCreate) SaveX(ctx context.Context) *CandidateCertificate {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CandidateCertificateCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CandidateCertificateCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CandidateCertificateCreate) defaults() {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := candidatecertificate.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CandidateCertificateCreate) check() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CandidateCertificate.created_at"`)}
	}
	if _, ok := ccc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CandidateCertificate.name"`)}
	}
	if v, ok := ccc.mutation.Name(); ok {
		if err := candidatecertificate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CandidateCertificate.name": %w`, err)}
		}
	}
	if v, ok := ccc.mutation.Score(); ok {
		if err := candidatecertificate.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "CandidateCertificate.score": %w`, err)}
		}
	}
	return nil
}

func (ccc *CandidateCertificateCreate) sqlSave(ctx context.Context) (*CandidateCertificate, error) {
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ccc *CandidateCertificateCreate) createSpec() (*CandidateCertificate, *sqlgraph.CreateSpec) {
	var (
		_node = &CandidateCertificate{config: ccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: candidatecertificate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidatecertificate.FieldID,
			},
		}
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.SetField(candidatecertificate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.SetField(candidatecertificate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.DeletedAt(); ok {
		_spec.SetField(candidatecertificate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ccc.mutation.Name(); ok {
		_spec.SetField(candidatecertificate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ccc.mutation.Score(); ok {
		_spec.SetField(candidatecertificate.FieldScore, field.TypeString, value)
		_node.Score = value
	}
	if value, ok := ccc.mutation.AchievedDate(); ok {
		_spec.SetField(candidatecertificate.FieldAchievedDate, field.TypeTime, value)
		_node.AchievedDate = value
	}
	if value, ok := ccc.mutation.OrderID(); ok {
		_spec.SetField(candidatecertificate.FieldOrderID, field.TypeInt, value)
		_node.OrderID = value
	}
	if nodes := ccc.mutation.AttachmentEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   candidatecertificate.AttachmentEdgesTable,
			Columns: []string{candidatecertificate.AttachmentEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidatecertificate.CandidateEdgeTable,
			Columns: []string{candidatecertificate.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CandidateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CandidateCertificateCreateBulk is the builder for creating many CandidateCertificate entities in bulk.
type CandidateCertificateCreateBulk struct {
	config
	builders []*CandidateCertificateCreate
}

// Save creates the CandidateCertificate entities in the database.
func (cccb *CandidateCertificateCreateBulk) Save(ctx context.Context) ([]*CandidateCertificate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CandidateCertificate, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CandidateCertificateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CandidateCertificateCreateBulk) SaveX(ctx context.Context) []*CandidateCertificate {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CandidateCertificateCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CandidateCertificateCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
