// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/candidatejob"
	"trec/ent/entityskill"
	"trec/ent/hiringjob"
	"trec/ent/hiringjobstep"
	"trec/ent/hiringteam"
	"trec/ent/jobposition"
	"trec/ent/predicate"
	"trec/ent/recteam"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HiringJobUpdate is the builder for updating HiringJob entities.
type HiringJobUpdate struct {
	config
	hooks    []Hook
	mutation *HiringJobMutation
}

// Where appends a list predicates to the HiringJobUpdate builder.
func (hju *HiringJobUpdate) Where(ps ...predicate.HiringJob) *HiringJobUpdate {
	hju.mutation.Where(ps...)
	return hju
}

// SetUpdatedAt sets the "updated_at" field.
func (hju *HiringJobUpdate) SetUpdatedAt(t time.Time) *HiringJobUpdate {
	hju.mutation.SetUpdatedAt(t)
	return hju
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableUpdatedAt(t *time.Time) *HiringJobUpdate {
	if t != nil {
		hju.SetUpdatedAt(*t)
	}
	return hju
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hju *HiringJobUpdate) ClearUpdatedAt() *HiringJobUpdate {
	hju.mutation.ClearUpdatedAt()
	return hju
}

// SetDeletedAt sets the "deleted_at" field.
func (hju *HiringJobUpdate) SetDeletedAt(t time.Time) *HiringJobUpdate {
	hju.mutation.SetDeletedAt(t)
	return hju
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableDeletedAt(t *time.Time) *HiringJobUpdate {
	if t != nil {
		hju.SetDeletedAt(*t)
	}
	return hju
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (hju *HiringJobUpdate) ClearDeletedAt() *HiringJobUpdate {
	hju.mutation.ClearDeletedAt()
	return hju
}

// SetSlug sets the "slug" field.
func (hju *HiringJobUpdate) SetSlug(s string) *HiringJobUpdate {
	hju.mutation.SetSlug(s)
	return hju
}

// SetName sets the "name" field.
func (hju *HiringJobUpdate) SetName(s string) *HiringJobUpdate {
	hju.mutation.SetName(s)
	return hju
}

// SetDescription sets the "description" field.
func (hju *HiringJobUpdate) SetDescription(s string) *HiringJobUpdate {
	hju.mutation.SetDescription(s)
	return hju
}

// SetAmount sets the "amount" field.
func (hju *HiringJobUpdate) SetAmount(i int) *HiringJobUpdate {
	hju.mutation.ResetAmount()
	hju.mutation.SetAmount(i)
	return hju
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableAmount(i *int) *HiringJobUpdate {
	if i != nil {
		hju.SetAmount(*i)
	}
	return hju
}

// AddAmount adds i to the "amount" field.
func (hju *HiringJobUpdate) AddAmount(i int) *HiringJobUpdate {
	hju.mutation.AddAmount(i)
	return hju
}

// SetStatus sets the "status" field.
func (hju *HiringJobUpdate) SetStatus(h hiringjob.Status) *HiringJobUpdate {
	hju.mutation.SetStatus(h)
	return hju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableStatus(h *hiringjob.Status) *HiringJobUpdate {
	if h != nil {
		hju.SetStatus(*h)
	}
	return hju
}

// SetCreatedBy sets the "created_by" field.
func (hju *HiringJobUpdate) SetCreatedBy(u uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetCreatedBy(u)
	return hju
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableCreatedBy(u *uuid.UUID) *HiringJobUpdate {
	if u != nil {
		hju.SetCreatedBy(*u)
	}
	return hju
}

// ClearCreatedBy clears the value of the "created_by" field.
func (hju *HiringJobUpdate) ClearCreatedBy() *HiringJobUpdate {
	hju.mutation.ClearCreatedBy()
	return hju
}

// SetLocation sets the "location" field.
func (hju *HiringJobUpdate) SetLocation(h hiringjob.Location) *HiringJobUpdate {
	hju.mutation.SetLocation(h)
	return hju
}

// SetSalaryType sets the "salary_type" field.
func (hju *HiringJobUpdate) SetSalaryType(ht hiringjob.SalaryType) *HiringJobUpdate {
	hju.mutation.SetSalaryType(ht)
	return hju
}

// SetSalaryFrom sets the "salary_from" field.
func (hju *HiringJobUpdate) SetSalaryFrom(i int) *HiringJobUpdate {
	hju.mutation.ResetSalaryFrom()
	hju.mutation.SetSalaryFrom(i)
	return hju
}

// SetNillableSalaryFrom sets the "salary_from" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableSalaryFrom(i *int) *HiringJobUpdate {
	if i != nil {
		hju.SetSalaryFrom(*i)
	}
	return hju
}

// AddSalaryFrom adds i to the "salary_from" field.
func (hju *HiringJobUpdate) AddSalaryFrom(i int) *HiringJobUpdate {
	hju.mutation.AddSalaryFrom(i)
	return hju
}

// SetSalaryTo sets the "salary_to" field.
func (hju *HiringJobUpdate) SetSalaryTo(i int) *HiringJobUpdate {
	hju.mutation.ResetSalaryTo()
	hju.mutation.SetSalaryTo(i)
	return hju
}

// SetNillableSalaryTo sets the "salary_to" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableSalaryTo(i *int) *HiringJobUpdate {
	if i != nil {
		hju.SetSalaryTo(*i)
	}
	return hju
}

// AddSalaryTo adds i to the "salary_to" field.
func (hju *HiringJobUpdate) AddSalaryTo(i int) *HiringJobUpdate {
	hju.mutation.AddSalaryTo(i)
	return hju
}

// SetCurrency sets the "currency" field.
func (hju *HiringJobUpdate) SetCurrency(h hiringjob.Currency) *HiringJobUpdate {
	hju.mutation.SetCurrency(h)
	return hju
}

// SetLastApplyDate sets the "last_apply_date" field.
func (hju *HiringJobUpdate) SetLastApplyDate(t time.Time) *HiringJobUpdate {
	hju.mutation.SetLastApplyDate(t)
	return hju
}

// SetNillableLastApplyDate sets the "last_apply_date" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableLastApplyDate(t *time.Time) *HiringJobUpdate {
	if t != nil {
		hju.SetLastApplyDate(*t)
	}
	return hju
}

// ClearLastApplyDate clears the value of the "last_apply_date" field.
func (hju *HiringJobUpdate) ClearLastApplyDate() *HiringJobUpdate {
	hju.mutation.ClearLastApplyDate()
	return hju
}

// SetPriority sets the "priority" field.
func (hju *HiringJobUpdate) SetPriority(i int) *HiringJobUpdate {
	hju.mutation.ResetPriority()
	hju.mutation.SetPriority(i)
	return hju
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillablePriority(i *int) *HiringJobUpdate {
	if i != nil {
		hju.SetPriority(*i)
	}
	return hju
}

// AddPriority adds i to the "priority" field.
func (hju *HiringJobUpdate) AddPriority(i int) *HiringJobUpdate {
	hju.mutation.AddPriority(i)
	return hju
}

// SetHiringTeamID sets the "hiring_team_id" field.
func (hju *HiringJobUpdate) SetHiringTeamID(u uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetHiringTeamID(u)
	return hju
}

// SetNillableHiringTeamID sets the "hiring_team_id" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableHiringTeamID(u *uuid.UUID) *HiringJobUpdate {
	if u != nil {
		hju.SetHiringTeamID(*u)
	}
	return hju
}

// ClearHiringTeamID clears the value of the "hiring_team_id" field.
func (hju *HiringJobUpdate) ClearHiringTeamID() *HiringJobUpdate {
	hju.mutation.ClearHiringTeamID()
	return hju
}

// SetRecTeamID sets the "rec_team_id" field.
func (hju *HiringJobUpdate) SetRecTeamID(u uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetRecTeamID(u)
	return hju
}

// SetRecInChargeID sets the "rec_in_charge_id" field.
func (hju *HiringJobUpdate) SetRecInChargeID(u uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetRecInChargeID(u)
	return hju
}

// SetNillableRecInChargeID sets the "rec_in_charge_id" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableRecInChargeID(u *uuid.UUID) *HiringJobUpdate {
	if u != nil {
		hju.SetRecInChargeID(*u)
	}
	return hju
}

// ClearRecInChargeID clears the value of the "rec_in_charge_id" field.
func (hju *HiringJobUpdate) ClearRecInChargeID() *HiringJobUpdate {
	hju.mutation.ClearRecInChargeID()
	return hju
}

// SetJobPositionID sets the "job_position_id" field.
func (hju *HiringJobUpdate) SetJobPositionID(u uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetJobPositionID(u)
	return hju
}

// SetNillableJobPositionID sets the "job_position_id" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableJobPositionID(u *uuid.UUID) *HiringJobUpdate {
	if u != nil {
		hju.SetJobPositionID(*u)
	}
	return hju
}

// ClearJobPositionID clears the value of the "job_position_id" field.
func (hju *HiringJobUpdate) ClearJobPositionID() *HiringJobUpdate {
	hju.mutation.ClearJobPositionID()
	return hju
}

// SetLevel sets the "level" field.
func (hju *HiringJobUpdate) SetLevel(h hiringjob.Level) *HiringJobUpdate {
	hju.mutation.SetLevel(h)
	return hju
}

// SetNote sets the "note" field.
func (hju *HiringJobUpdate) SetNote(s string) *HiringJobUpdate {
	hju.mutation.SetNote(s)
	return hju
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableNote(s *string) *HiringJobUpdate {
	if s != nil {
		hju.SetNote(*s)
	}
	return hju
}

// ClearNote clears the value of the "note" field.
func (hju *HiringJobUpdate) ClearNote() *HiringJobUpdate {
	hju.mutation.ClearNote()
	return hju
}

// SetOpenedAt sets the "opened_at" field.
func (hju *HiringJobUpdate) SetOpenedAt(t time.Time) *HiringJobUpdate {
	hju.mutation.SetOpenedAt(t)
	return hju
}

// SetNillableOpenedAt sets the "opened_at" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableOpenedAt(t *time.Time) *HiringJobUpdate {
	if t != nil {
		hju.SetOpenedAt(*t)
	}
	return hju
}

// ClearOpenedAt clears the value of the "opened_at" field.
func (hju *HiringJobUpdate) ClearOpenedAt() *HiringJobUpdate {
	hju.mutation.ClearOpenedAt()
	return hju
}

// SetClosedAt sets the "closed_at" field.
func (hju *HiringJobUpdate) SetClosedAt(t time.Time) *HiringJobUpdate {
	hju.mutation.SetClosedAt(t)
	return hju
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableClosedAt(t *time.Time) *HiringJobUpdate {
	if t != nil {
		hju.SetClosedAt(*t)
	}
	return hju
}

// ClearClosedAt clears the value of the "closed_at" field.
func (hju *HiringJobUpdate) ClearClosedAt() *HiringJobUpdate {
	hju.mutation.ClearClosedAt()
	return hju
}

// SetOwnerEdgeID sets the "owner_edge" edge to the User entity by ID.
func (hju *HiringJobUpdate) SetOwnerEdgeID(id uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetOwnerEdgeID(id)
	return hju
}

// SetNillableOwnerEdgeID sets the "owner_edge" edge to the User entity by ID if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableOwnerEdgeID(id *uuid.UUID) *HiringJobUpdate {
	if id != nil {
		hju = hju.SetOwnerEdgeID(*id)
	}
	return hju
}

// SetOwnerEdge sets the "owner_edge" edge to the User entity.
func (hju *HiringJobUpdate) SetOwnerEdge(u *User) *HiringJobUpdate {
	return hju.SetOwnerEdgeID(u.ID)
}

// AddCandidateJobEdgeIDs adds the "candidate_job_edges" edge to the CandidateJob entity by IDs.
func (hju *HiringJobUpdate) AddCandidateJobEdgeIDs(ids ...uuid.UUID) *HiringJobUpdate {
	hju.mutation.AddCandidateJobEdgeIDs(ids...)
	return hju
}

// AddCandidateJobEdges adds the "candidate_job_edges" edges to the CandidateJob entity.
func (hju *HiringJobUpdate) AddCandidateJobEdges(c ...*CandidateJob) *HiringJobUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hju.AddCandidateJobEdgeIDs(ids...)
}

// AddHiringJobSkillEdgeIDs adds the "hiring_job_skill_edges" edge to the EntitySkill entity by IDs.
func (hju *HiringJobUpdate) AddHiringJobSkillEdgeIDs(ids ...uuid.UUID) *HiringJobUpdate {
	hju.mutation.AddHiringJobSkillEdgeIDs(ids...)
	return hju
}

// AddHiringJobSkillEdges adds the "hiring_job_skill_edges" edges to the EntitySkill entity.
func (hju *HiringJobUpdate) AddHiringJobSkillEdges(e ...*EntitySkill) *HiringJobUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hju.AddHiringJobSkillEdgeIDs(ids...)
}

// SetHiringTeamEdgeID sets the "hiring_team_edge" edge to the HiringTeam entity by ID.
func (hju *HiringJobUpdate) SetHiringTeamEdgeID(id uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetHiringTeamEdgeID(id)
	return hju
}

// SetNillableHiringTeamEdgeID sets the "hiring_team_edge" edge to the HiringTeam entity by ID if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableHiringTeamEdgeID(id *uuid.UUID) *HiringJobUpdate {
	if id != nil {
		hju = hju.SetHiringTeamEdgeID(*id)
	}
	return hju
}

// SetHiringTeamEdge sets the "hiring_team_edge" edge to the HiringTeam entity.
func (hju *HiringJobUpdate) SetHiringTeamEdge(h *HiringTeam) *HiringJobUpdate {
	return hju.SetHiringTeamEdgeID(h.ID)
}

// SetJobPositionEdgeID sets the "job_position_edge" edge to the JobPosition entity by ID.
func (hju *HiringJobUpdate) SetJobPositionEdgeID(id uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetJobPositionEdgeID(id)
	return hju
}

// SetNillableJobPositionEdgeID sets the "job_position_edge" edge to the JobPosition entity by ID if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableJobPositionEdgeID(id *uuid.UUID) *HiringJobUpdate {
	if id != nil {
		hju = hju.SetJobPositionEdgeID(*id)
	}
	return hju
}

// SetJobPositionEdge sets the "job_position_edge" edge to the JobPosition entity.
func (hju *HiringJobUpdate) SetJobPositionEdge(j *JobPosition) *HiringJobUpdate {
	return hju.SetJobPositionEdgeID(j.ID)
}

// AddApprovalUserIDs adds the "approval_users" edge to the User entity by IDs.
func (hju *HiringJobUpdate) AddApprovalUserIDs(ids ...uuid.UUID) *HiringJobUpdate {
	hju.mutation.AddApprovalUserIDs(ids...)
	return hju
}

// AddApprovalUsers adds the "approval_users" edges to the User entity.
func (hju *HiringJobUpdate) AddApprovalUsers(u ...*User) *HiringJobUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hju.AddApprovalUserIDs(ids...)
}

// SetRecTeamEdgeID sets the "rec_team_edge" edge to the RecTeam entity by ID.
func (hju *HiringJobUpdate) SetRecTeamEdgeID(id uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetRecTeamEdgeID(id)
	return hju
}

// SetRecTeamEdge sets the "rec_team_edge" edge to the RecTeam entity.
func (hju *HiringJobUpdate) SetRecTeamEdge(r *RecTeam) *HiringJobUpdate {
	return hju.SetRecTeamEdgeID(r.ID)
}

// SetRecInChargeEdgeID sets the "rec_in_charge_edge" edge to the User entity by ID.
func (hju *HiringJobUpdate) SetRecInChargeEdgeID(id uuid.UUID) *HiringJobUpdate {
	hju.mutation.SetRecInChargeEdgeID(id)
	return hju
}

// SetNillableRecInChargeEdgeID sets the "rec_in_charge_edge" edge to the User entity by ID if the given value is not nil.
func (hju *HiringJobUpdate) SetNillableRecInChargeEdgeID(id *uuid.UUID) *HiringJobUpdate {
	if id != nil {
		hju = hju.SetRecInChargeEdgeID(*id)
	}
	return hju
}

// SetRecInChargeEdge sets the "rec_in_charge_edge" edge to the User entity.
func (hju *HiringJobUpdate) SetRecInChargeEdge(u *User) *HiringJobUpdate {
	return hju.SetRecInChargeEdgeID(u.ID)
}

// AddApprovalStepIDs adds the "approval_steps" edge to the HiringJobStep entity by IDs.
func (hju *HiringJobUpdate) AddApprovalStepIDs(ids ...uuid.UUID) *HiringJobUpdate {
	hju.mutation.AddApprovalStepIDs(ids...)
	return hju
}

// AddApprovalSteps adds the "approval_steps" edges to the HiringJobStep entity.
func (hju *HiringJobUpdate) AddApprovalSteps(h ...*HiringJobStep) *HiringJobUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hju.AddApprovalStepIDs(ids...)
}

// Mutation returns the HiringJobMutation object of the builder.
func (hju *HiringJobUpdate) Mutation() *HiringJobMutation {
	return hju.mutation
}

// ClearOwnerEdge clears the "owner_edge" edge to the User entity.
func (hju *HiringJobUpdate) ClearOwnerEdge() *HiringJobUpdate {
	hju.mutation.ClearOwnerEdge()
	return hju
}

// ClearCandidateJobEdges clears all "candidate_job_edges" edges to the CandidateJob entity.
func (hju *HiringJobUpdate) ClearCandidateJobEdges() *HiringJobUpdate {
	hju.mutation.ClearCandidateJobEdges()
	return hju
}

// RemoveCandidateJobEdgeIDs removes the "candidate_job_edges" edge to CandidateJob entities by IDs.
func (hju *HiringJobUpdate) RemoveCandidateJobEdgeIDs(ids ...uuid.UUID) *HiringJobUpdate {
	hju.mutation.RemoveCandidateJobEdgeIDs(ids...)
	return hju
}

// RemoveCandidateJobEdges removes "candidate_job_edges" edges to CandidateJob entities.
func (hju *HiringJobUpdate) RemoveCandidateJobEdges(c ...*CandidateJob) *HiringJobUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hju.RemoveCandidateJobEdgeIDs(ids...)
}

// ClearHiringJobSkillEdges clears all "hiring_job_skill_edges" edges to the EntitySkill entity.
func (hju *HiringJobUpdate) ClearHiringJobSkillEdges() *HiringJobUpdate {
	hju.mutation.ClearHiringJobSkillEdges()
	return hju
}

// RemoveHiringJobSkillEdgeIDs removes the "hiring_job_skill_edges" edge to EntitySkill entities by IDs.
func (hju *HiringJobUpdate) RemoveHiringJobSkillEdgeIDs(ids ...uuid.UUID) *HiringJobUpdate {
	hju.mutation.RemoveHiringJobSkillEdgeIDs(ids...)
	return hju
}

// RemoveHiringJobSkillEdges removes "hiring_job_skill_edges" edges to EntitySkill entities.
func (hju *HiringJobUpdate) RemoveHiringJobSkillEdges(e ...*EntitySkill) *HiringJobUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hju.RemoveHiringJobSkillEdgeIDs(ids...)
}

// ClearHiringTeamEdge clears the "hiring_team_edge" edge to the HiringTeam entity.
func (hju *HiringJobUpdate) ClearHiringTeamEdge() *HiringJobUpdate {
	hju.mutation.ClearHiringTeamEdge()
	return hju
}

// ClearJobPositionEdge clears the "job_position_edge" edge to the JobPosition entity.
func (hju *HiringJobUpdate) ClearJobPositionEdge() *HiringJobUpdate {
	hju.mutation.ClearJobPositionEdge()
	return hju
}

// ClearApprovalUsers clears all "approval_users" edges to the User entity.
func (hju *HiringJobUpdate) ClearApprovalUsers() *HiringJobUpdate {
	hju.mutation.ClearApprovalUsers()
	return hju
}

// RemoveApprovalUserIDs removes the "approval_users" edge to User entities by IDs.
func (hju *HiringJobUpdate) RemoveApprovalUserIDs(ids ...uuid.UUID) *HiringJobUpdate {
	hju.mutation.RemoveApprovalUserIDs(ids...)
	return hju
}

// RemoveApprovalUsers removes "approval_users" edges to User entities.
func (hju *HiringJobUpdate) RemoveApprovalUsers(u ...*User) *HiringJobUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hju.RemoveApprovalUserIDs(ids...)
}

// ClearRecTeamEdge clears the "rec_team_edge" edge to the RecTeam entity.
func (hju *HiringJobUpdate) ClearRecTeamEdge() *HiringJobUpdate {
	hju.mutation.ClearRecTeamEdge()
	return hju
}

// ClearRecInChargeEdge clears the "rec_in_charge_edge" edge to the User entity.
func (hju *HiringJobUpdate) ClearRecInChargeEdge() *HiringJobUpdate {
	hju.mutation.ClearRecInChargeEdge()
	return hju
}

// ClearApprovalSteps clears all "approval_steps" edges to the HiringJobStep entity.
func (hju *HiringJobUpdate) ClearApprovalSteps() *HiringJobUpdate {
	hju.mutation.ClearApprovalSteps()
	return hju
}

// RemoveApprovalStepIDs removes the "approval_steps" edge to HiringJobStep entities by IDs.
func (hju *HiringJobUpdate) RemoveApprovalStepIDs(ids ...uuid.UUID) *HiringJobUpdate {
	hju.mutation.RemoveApprovalStepIDs(ids...)
	return hju
}

// RemoveApprovalSteps removes "approval_steps" edges to HiringJobStep entities.
func (hju *HiringJobUpdate) RemoveApprovalSteps(h ...*HiringJobStep) *HiringJobUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hju.RemoveApprovalStepIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hju *HiringJobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hju.hooks) == 0 {
		if err = hju.check(); err != nil {
			return 0, err
		}
		affected, err = hju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiringJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hju.check(); err != nil {
				return 0, err
			}
			hju.mutation = mutation
			affected, err = hju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hju.hooks) - 1; i >= 0; i-- {
			if hju.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hju *HiringJobUpdate) SaveX(ctx context.Context) int {
	affected, err := hju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hju *HiringJobUpdate) Exec(ctx context.Context) error {
	_, err := hju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hju *HiringJobUpdate) ExecX(ctx context.Context) {
	if err := hju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hju *HiringJobUpdate) check() error {
	if v, ok := hju.mutation.Slug(); ok {
		if err := hiringjob.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "HiringJob.slug": %w`, err)}
		}
	}
	if v, ok := hju.mutation.Name(); ok {
		if err := hiringjob.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "HiringJob.name": %w`, err)}
		}
	}
	if v, ok := hju.mutation.Description(); ok {
		if err := hiringjob.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "HiringJob.description": %w`, err)}
		}
	}
	if v, ok := hju.mutation.Status(); ok {
		if err := hiringjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HiringJob.status": %w`, err)}
		}
	}
	if v, ok := hju.mutation.Location(); ok {
		if err := hiringjob.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "HiringJob.location": %w`, err)}
		}
	}
	if v, ok := hju.mutation.SalaryType(); ok {
		if err := hiringjob.SalaryTypeValidator(v); err != nil {
			return &ValidationError{Name: "salary_type", err: fmt.Errorf(`ent: validator failed for field "HiringJob.salary_type": %w`, err)}
		}
	}
	if v, ok := hju.mutation.Currency(); ok {
		if err := hiringjob.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "HiringJob.currency": %w`, err)}
		}
	}
	if v, ok := hju.mutation.Level(); ok {
		if err := hiringjob.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "HiringJob.level": %w`, err)}
		}
	}
	if v, ok := hju.mutation.Note(); ok {
		if err := hiringjob.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "HiringJob.note": %w`, err)}
		}
	}
	if _, ok := hju.mutation.RecTeamEdgeID(); hju.mutation.RecTeamEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringJob.rec_team_edge"`)
	}
	return nil
}

func (hju *HiringJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringjob.Table,
			Columns: hiringjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringjob.FieldID,
			},
		},
	}
	if ps := hju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hju.mutation.UpdatedAt(); ok {
		_spec.SetField(hiringjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if hju.mutation.UpdatedAtCleared() {
		_spec.ClearField(hiringjob.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hju.mutation.DeletedAt(); ok {
		_spec.SetField(hiringjob.FieldDeletedAt, field.TypeTime, value)
	}
	if hju.mutation.DeletedAtCleared() {
		_spec.ClearField(hiringjob.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := hju.mutation.Slug(); ok {
		_spec.SetField(hiringjob.FieldSlug, field.TypeString, value)
	}
	if value, ok := hju.mutation.Name(); ok {
		_spec.SetField(hiringjob.FieldName, field.TypeString, value)
	}
	if value, ok := hju.mutation.Description(); ok {
		_spec.SetField(hiringjob.FieldDescription, field.TypeString, value)
	}
	if value, ok := hju.mutation.Amount(); ok {
		_spec.SetField(hiringjob.FieldAmount, field.TypeInt, value)
	}
	if value, ok := hju.mutation.AddedAmount(); ok {
		_spec.AddField(hiringjob.FieldAmount, field.TypeInt, value)
	}
	if value, ok := hju.mutation.Status(); ok {
		_spec.SetField(hiringjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := hju.mutation.Location(); ok {
		_spec.SetField(hiringjob.FieldLocation, field.TypeEnum, value)
	}
	if value, ok := hju.mutation.SalaryType(); ok {
		_spec.SetField(hiringjob.FieldSalaryType, field.TypeEnum, value)
	}
	if value, ok := hju.mutation.SalaryFrom(); ok {
		_spec.SetField(hiringjob.FieldSalaryFrom, field.TypeInt, value)
	}
	if value, ok := hju.mutation.AddedSalaryFrom(); ok {
		_spec.AddField(hiringjob.FieldSalaryFrom, field.TypeInt, value)
	}
	if value, ok := hju.mutation.SalaryTo(); ok {
		_spec.SetField(hiringjob.FieldSalaryTo, field.TypeInt, value)
	}
	if value, ok := hju.mutation.AddedSalaryTo(); ok {
		_spec.AddField(hiringjob.FieldSalaryTo, field.TypeInt, value)
	}
	if value, ok := hju.mutation.Currency(); ok {
		_spec.SetField(hiringjob.FieldCurrency, field.TypeEnum, value)
	}
	if value, ok := hju.mutation.LastApplyDate(); ok {
		_spec.SetField(hiringjob.FieldLastApplyDate, field.TypeTime, value)
	}
	if hju.mutation.LastApplyDateCleared() {
		_spec.ClearField(hiringjob.FieldLastApplyDate, field.TypeTime)
	}
	if value, ok := hju.mutation.Priority(); ok {
		_spec.SetField(hiringjob.FieldPriority, field.TypeInt, value)
	}
	if value, ok := hju.mutation.AddedPriority(); ok {
		_spec.AddField(hiringjob.FieldPriority, field.TypeInt, value)
	}
	if value, ok := hju.mutation.Level(); ok {
		_spec.SetField(hiringjob.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := hju.mutation.Note(); ok {
		_spec.SetField(hiringjob.FieldNote, field.TypeString, value)
	}
	if hju.mutation.NoteCleared() {
		_spec.ClearField(hiringjob.FieldNote, field.TypeString)
	}
	if value, ok := hju.mutation.OpenedAt(); ok {
		_spec.SetField(hiringjob.FieldOpenedAt, field.TypeTime, value)
	}
	if hju.mutation.OpenedAtCleared() {
		_spec.ClearField(hiringjob.FieldOpenedAt, field.TypeTime)
	}
	if value, ok := hju.mutation.ClosedAt(); ok {
		_spec.SetField(hiringjob.FieldClosedAt, field.TypeTime, value)
	}
	if hju.mutation.ClosedAtCleared() {
		_spec.ClearField(hiringjob.FieldClosedAt, field.TypeTime)
	}
	if hju.mutation.OwnerEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.OwnerEdgeTable,
			Columns: []string{hiringjob.OwnerEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.OwnerEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.OwnerEdgeTable,
			Columns: []string{hiringjob.OwnerEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hju.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.CandidateJobEdgesTable,
			Columns: []string{hiringjob.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.RemovedCandidateJobEdgesIDs(); len(nodes) > 0 && !hju.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.CandidateJobEdgesTable,
			Columns: []string{hiringjob.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.CandidateJobEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.CandidateJobEdgesTable,
			Columns: []string{hiringjob.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hju.mutation.HiringJobSkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.HiringJobSkillEdgesTable,
			Columns: []string{hiringjob.HiringJobSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.RemovedHiringJobSkillEdgesIDs(); len(nodes) > 0 && !hju.mutation.HiringJobSkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.HiringJobSkillEdgesTable,
			Columns: []string{hiringjob.HiringJobSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.HiringJobSkillEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.HiringJobSkillEdgesTable,
			Columns: []string{hiringjob.HiringJobSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hju.mutation.HiringTeamEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.HiringTeamEdgeTable,
			Columns: []string{hiringjob.HiringTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.HiringTeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.HiringTeamEdgeTable,
			Columns: []string{hiringjob.HiringTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hju.mutation.JobPositionEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.JobPositionEdgeTable,
			Columns: []string{hiringjob.JobPositionEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: jobposition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.JobPositionEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.JobPositionEdgeTable,
			Columns: []string{hiringjob.JobPositionEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: jobposition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hju.mutation.ApprovalUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hiringjob.ApprovalUsersTable,
			Columns: hiringjob.ApprovalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		createE := &HiringJobStepCreate{config: hju.config, mutation: newHiringJobStepMutation(hju.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.RemovedApprovalUsersIDs(); len(nodes) > 0 && !hju.mutation.ApprovalUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hiringjob.ApprovalUsersTable,
			Columns: hiringjob.ApprovalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &HiringJobStepCreate{config: hju.config, mutation: newHiringJobStepMutation(hju.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.ApprovalUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hiringjob.ApprovalUsersTable,
			Columns: hiringjob.ApprovalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &HiringJobStepCreate{config: hju.config, mutation: newHiringJobStepMutation(hju.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hju.mutation.RecTeamEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.RecTeamEdgeTable,
			Columns: []string{hiringjob.RecTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: recteam.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.RecTeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.RecTeamEdgeTable,
			Columns: []string{hiringjob.RecTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: recteam.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hju.mutation.RecInChargeEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.RecInChargeEdgeTable,
			Columns: []string{hiringjob.RecInChargeEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.RecInChargeEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.RecInChargeEdgeTable,
			Columns: []string{hiringjob.RecInChargeEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hju.mutation.ApprovalStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hiringjob.ApprovalStepsTable,
			Columns: []string{hiringjob.ApprovalStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringjobstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.RemovedApprovalStepsIDs(); len(nodes) > 0 && !hju.mutation.ApprovalStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hiringjob.ApprovalStepsTable,
			Columns: []string{hiringjob.ApprovalStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringjobstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hju.mutation.ApprovalStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hiringjob.ApprovalStepsTable,
			Columns: []string{hiringjob.ApprovalStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringjobstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hiringjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HiringJobUpdateOne is the builder for updating a single HiringJob entity.
type HiringJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HiringJobMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hjuo *HiringJobUpdateOne) SetUpdatedAt(t time.Time) *HiringJobUpdateOne {
	hjuo.mutation.SetUpdatedAt(t)
	return hjuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableUpdatedAt(t *time.Time) *HiringJobUpdateOne {
	if t != nil {
		hjuo.SetUpdatedAt(*t)
	}
	return hjuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hjuo *HiringJobUpdateOne) ClearUpdatedAt() *HiringJobUpdateOne {
	hjuo.mutation.ClearUpdatedAt()
	return hjuo
}

// SetDeletedAt sets the "deleted_at" field.
func (hjuo *HiringJobUpdateOne) SetDeletedAt(t time.Time) *HiringJobUpdateOne {
	hjuo.mutation.SetDeletedAt(t)
	return hjuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableDeletedAt(t *time.Time) *HiringJobUpdateOne {
	if t != nil {
		hjuo.SetDeletedAt(*t)
	}
	return hjuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (hjuo *HiringJobUpdateOne) ClearDeletedAt() *HiringJobUpdateOne {
	hjuo.mutation.ClearDeletedAt()
	return hjuo
}

// SetSlug sets the "slug" field.
func (hjuo *HiringJobUpdateOne) SetSlug(s string) *HiringJobUpdateOne {
	hjuo.mutation.SetSlug(s)
	return hjuo
}

// SetName sets the "name" field.
func (hjuo *HiringJobUpdateOne) SetName(s string) *HiringJobUpdateOne {
	hjuo.mutation.SetName(s)
	return hjuo
}

// SetDescription sets the "description" field.
func (hjuo *HiringJobUpdateOne) SetDescription(s string) *HiringJobUpdateOne {
	hjuo.mutation.SetDescription(s)
	return hjuo
}

// SetAmount sets the "amount" field.
func (hjuo *HiringJobUpdateOne) SetAmount(i int) *HiringJobUpdateOne {
	hjuo.mutation.ResetAmount()
	hjuo.mutation.SetAmount(i)
	return hjuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableAmount(i *int) *HiringJobUpdateOne {
	if i != nil {
		hjuo.SetAmount(*i)
	}
	return hjuo
}

// AddAmount adds i to the "amount" field.
func (hjuo *HiringJobUpdateOne) AddAmount(i int) *HiringJobUpdateOne {
	hjuo.mutation.AddAmount(i)
	return hjuo
}

// SetStatus sets the "status" field.
func (hjuo *HiringJobUpdateOne) SetStatus(h hiringjob.Status) *HiringJobUpdateOne {
	hjuo.mutation.SetStatus(h)
	return hjuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableStatus(h *hiringjob.Status) *HiringJobUpdateOne {
	if h != nil {
		hjuo.SetStatus(*h)
	}
	return hjuo
}

// SetCreatedBy sets the "created_by" field.
func (hjuo *HiringJobUpdateOne) SetCreatedBy(u uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetCreatedBy(u)
	return hjuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *HiringJobUpdateOne {
	if u != nil {
		hjuo.SetCreatedBy(*u)
	}
	return hjuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (hjuo *HiringJobUpdateOne) ClearCreatedBy() *HiringJobUpdateOne {
	hjuo.mutation.ClearCreatedBy()
	return hjuo
}

// SetLocation sets the "location" field.
func (hjuo *HiringJobUpdateOne) SetLocation(h hiringjob.Location) *HiringJobUpdateOne {
	hjuo.mutation.SetLocation(h)
	return hjuo
}

// SetSalaryType sets the "salary_type" field.
func (hjuo *HiringJobUpdateOne) SetSalaryType(ht hiringjob.SalaryType) *HiringJobUpdateOne {
	hjuo.mutation.SetSalaryType(ht)
	return hjuo
}

// SetSalaryFrom sets the "salary_from" field.
func (hjuo *HiringJobUpdateOne) SetSalaryFrom(i int) *HiringJobUpdateOne {
	hjuo.mutation.ResetSalaryFrom()
	hjuo.mutation.SetSalaryFrom(i)
	return hjuo
}

// SetNillableSalaryFrom sets the "salary_from" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableSalaryFrom(i *int) *HiringJobUpdateOne {
	if i != nil {
		hjuo.SetSalaryFrom(*i)
	}
	return hjuo
}

// AddSalaryFrom adds i to the "salary_from" field.
func (hjuo *HiringJobUpdateOne) AddSalaryFrom(i int) *HiringJobUpdateOne {
	hjuo.mutation.AddSalaryFrom(i)
	return hjuo
}

// SetSalaryTo sets the "salary_to" field.
func (hjuo *HiringJobUpdateOne) SetSalaryTo(i int) *HiringJobUpdateOne {
	hjuo.mutation.ResetSalaryTo()
	hjuo.mutation.SetSalaryTo(i)
	return hjuo
}

// SetNillableSalaryTo sets the "salary_to" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableSalaryTo(i *int) *HiringJobUpdateOne {
	if i != nil {
		hjuo.SetSalaryTo(*i)
	}
	return hjuo
}

// AddSalaryTo adds i to the "salary_to" field.
func (hjuo *HiringJobUpdateOne) AddSalaryTo(i int) *HiringJobUpdateOne {
	hjuo.mutation.AddSalaryTo(i)
	return hjuo
}

// SetCurrency sets the "currency" field.
func (hjuo *HiringJobUpdateOne) SetCurrency(h hiringjob.Currency) *HiringJobUpdateOne {
	hjuo.mutation.SetCurrency(h)
	return hjuo
}

// SetLastApplyDate sets the "last_apply_date" field.
func (hjuo *HiringJobUpdateOne) SetLastApplyDate(t time.Time) *HiringJobUpdateOne {
	hjuo.mutation.SetLastApplyDate(t)
	return hjuo
}

// SetNillableLastApplyDate sets the "last_apply_date" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableLastApplyDate(t *time.Time) *HiringJobUpdateOne {
	if t != nil {
		hjuo.SetLastApplyDate(*t)
	}
	return hjuo
}

// ClearLastApplyDate clears the value of the "last_apply_date" field.
func (hjuo *HiringJobUpdateOne) ClearLastApplyDate() *HiringJobUpdateOne {
	hjuo.mutation.ClearLastApplyDate()
	return hjuo
}

// SetPriority sets the "priority" field.
func (hjuo *HiringJobUpdateOne) SetPriority(i int) *HiringJobUpdateOne {
	hjuo.mutation.ResetPriority()
	hjuo.mutation.SetPriority(i)
	return hjuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillablePriority(i *int) *HiringJobUpdateOne {
	if i != nil {
		hjuo.SetPriority(*i)
	}
	return hjuo
}

// AddPriority adds i to the "priority" field.
func (hjuo *HiringJobUpdateOne) AddPriority(i int) *HiringJobUpdateOne {
	hjuo.mutation.AddPriority(i)
	return hjuo
}

// SetHiringTeamID sets the "hiring_team_id" field.
func (hjuo *HiringJobUpdateOne) SetHiringTeamID(u uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetHiringTeamID(u)
	return hjuo
}

// SetNillableHiringTeamID sets the "hiring_team_id" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableHiringTeamID(u *uuid.UUID) *HiringJobUpdateOne {
	if u != nil {
		hjuo.SetHiringTeamID(*u)
	}
	return hjuo
}

// ClearHiringTeamID clears the value of the "hiring_team_id" field.
func (hjuo *HiringJobUpdateOne) ClearHiringTeamID() *HiringJobUpdateOne {
	hjuo.mutation.ClearHiringTeamID()
	return hjuo
}

// SetRecTeamID sets the "rec_team_id" field.
func (hjuo *HiringJobUpdateOne) SetRecTeamID(u uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetRecTeamID(u)
	return hjuo
}

// SetRecInChargeID sets the "rec_in_charge_id" field.
func (hjuo *HiringJobUpdateOne) SetRecInChargeID(u uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetRecInChargeID(u)
	return hjuo
}

// SetNillableRecInChargeID sets the "rec_in_charge_id" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableRecInChargeID(u *uuid.UUID) *HiringJobUpdateOne {
	if u != nil {
		hjuo.SetRecInChargeID(*u)
	}
	return hjuo
}

// ClearRecInChargeID clears the value of the "rec_in_charge_id" field.
func (hjuo *HiringJobUpdateOne) ClearRecInChargeID() *HiringJobUpdateOne {
	hjuo.mutation.ClearRecInChargeID()
	return hjuo
}

// SetJobPositionID sets the "job_position_id" field.
func (hjuo *HiringJobUpdateOne) SetJobPositionID(u uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetJobPositionID(u)
	return hjuo
}

// SetNillableJobPositionID sets the "job_position_id" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableJobPositionID(u *uuid.UUID) *HiringJobUpdateOne {
	if u != nil {
		hjuo.SetJobPositionID(*u)
	}
	return hjuo
}

// ClearJobPositionID clears the value of the "job_position_id" field.
func (hjuo *HiringJobUpdateOne) ClearJobPositionID() *HiringJobUpdateOne {
	hjuo.mutation.ClearJobPositionID()
	return hjuo
}

// SetLevel sets the "level" field.
func (hjuo *HiringJobUpdateOne) SetLevel(h hiringjob.Level) *HiringJobUpdateOne {
	hjuo.mutation.SetLevel(h)
	return hjuo
}

// SetNote sets the "note" field.
func (hjuo *HiringJobUpdateOne) SetNote(s string) *HiringJobUpdateOne {
	hjuo.mutation.SetNote(s)
	return hjuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableNote(s *string) *HiringJobUpdateOne {
	if s != nil {
		hjuo.SetNote(*s)
	}
	return hjuo
}

// ClearNote clears the value of the "note" field.
func (hjuo *HiringJobUpdateOne) ClearNote() *HiringJobUpdateOne {
	hjuo.mutation.ClearNote()
	return hjuo
}

// SetOpenedAt sets the "opened_at" field.
func (hjuo *HiringJobUpdateOne) SetOpenedAt(t time.Time) *HiringJobUpdateOne {
	hjuo.mutation.SetOpenedAt(t)
	return hjuo
}

// SetNillableOpenedAt sets the "opened_at" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableOpenedAt(t *time.Time) *HiringJobUpdateOne {
	if t != nil {
		hjuo.SetOpenedAt(*t)
	}
	return hjuo
}

// ClearOpenedAt clears the value of the "opened_at" field.
func (hjuo *HiringJobUpdateOne) ClearOpenedAt() *HiringJobUpdateOne {
	hjuo.mutation.ClearOpenedAt()
	return hjuo
}

// SetClosedAt sets the "closed_at" field.
func (hjuo *HiringJobUpdateOne) SetClosedAt(t time.Time) *HiringJobUpdateOne {
	hjuo.mutation.SetClosedAt(t)
	return hjuo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableClosedAt(t *time.Time) *HiringJobUpdateOne {
	if t != nil {
		hjuo.SetClosedAt(*t)
	}
	return hjuo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (hjuo *HiringJobUpdateOne) ClearClosedAt() *HiringJobUpdateOne {
	hjuo.mutation.ClearClosedAt()
	return hjuo
}

// SetOwnerEdgeID sets the "owner_edge" edge to the User entity by ID.
func (hjuo *HiringJobUpdateOne) SetOwnerEdgeID(id uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetOwnerEdgeID(id)
	return hjuo
}

// SetNillableOwnerEdgeID sets the "owner_edge" edge to the User entity by ID if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableOwnerEdgeID(id *uuid.UUID) *HiringJobUpdateOne {
	if id != nil {
		hjuo = hjuo.SetOwnerEdgeID(*id)
	}
	return hjuo
}

// SetOwnerEdge sets the "owner_edge" edge to the User entity.
func (hjuo *HiringJobUpdateOne) SetOwnerEdge(u *User) *HiringJobUpdateOne {
	return hjuo.SetOwnerEdgeID(u.ID)
}

// AddCandidateJobEdgeIDs adds the "candidate_job_edges" edge to the CandidateJob entity by IDs.
func (hjuo *HiringJobUpdateOne) AddCandidateJobEdgeIDs(ids ...uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.AddCandidateJobEdgeIDs(ids...)
	return hjuo
}

// AddCandidateJobEdges adds the "candidate_job_edges" edges to the CandidateJob entity.
func (hjuo *HiringJobUpdateOne) AddCandidateJobEdges(c ...*CandidateJob) *HiringJobUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hjuo.AddCandidateJobEdgeIDs(ids...)
}

// AddHiringJobSkillEdgeIDs adds the "hiring_job_skill_edges" edge to the EntitySkill entity by IDs.
func (hjuo *HiringJobUpdateOne) AddHiringJobSkillEdgeIDs(ids ...uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.AddHiringJobSkillEdgeIDs(ids...)
	return hjuo
}

// AddHiringJobSkillEdges adds the "hiring_job_skill_edges" edges to the EntitySkill entity.
func (hjuo *HiringJobUpdateOne) AddHiringJobSkillEdges(e ...*EntitySkill) *HiringJobUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hjuo.AddHiringJobSkillEdgeIDs(ids...)
}

// SetHiringTeamEdgeID sets the "hiring_team_edge" edge to the HiringTeam entity by ID.
func (hjuo *HiringJobUpdateOne) SetHiringTeamEdgeID(id uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetHiringTeamEdgeID(id)
	return hjuo
}

// SetNillableHiringTeamEdgeID sets the "hiring_team_edge" edge to the HiringTeam entity by ID if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableHiringTeamEdgeID(id *uuid.UUID) *HiringJobUpdateOne {
	if id != nil {
		hjuo = hjuo.SetHiringTeamEdgeID(*id)
	}
	return hjuo
}

// SetHiringTeamEdge sets the "hiring_team_edge" edge to the HiringTeam entity.
func (hjuo *HiringJobUpdateOne) SetHiringTeamEdge(h *HiringTeam) *HiringJobUpdateOne {
	return hjuo.SetHiringTeamEdgeID(h.ID)
}

// SetJobPositionEdgeID sets the "job_position_edge" edge to the JobPosition entity by ID.
func (hjuo *HiringJobUpdateOne) SetJobPositionEdgeID(id uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetJobPositionEdgeID(id)
	return hjuo
}

// SetNillableJobPositionEdgeID sets the "job_position_edge" edge to the JobPosition entity by ID if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableJobPositionEdgeID(id *uuid.UUID) *HiringJobUpdateOne {
	if id != nil {
		hjuo = hjuo.SetJobPositionEdgeID(*id)
	}
	return hjuo
}

// SetJobPositionEdge sets the "job_position_edge" edge to the JobPosition entity.
func (hjuo *HiringJobUpdateOne) SetJobPositionEdge(j *JobPosition) *HiringJobUpdateOne {
	return hjuo.SetJobPositionEdgeID(j.ID)
}

// AddApprovalUserIDs adds the "approval_users" edge to the User entity by IDs.
func (hjuo *HiringJobUpdateOne) AddApprovalUserIDs(ids ...uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.AddApprovalUserIDs(ids...)
	return hjuo
}

// AddApprovalUsers adds the "approval_users" edges to the User entity.
func (hjuo *HiringJobUpdateOne) AddApprovalUsers(u ...*User) *HiringJobUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hjuo.AddApprovalUserIDs(ids...)
}

// SetRecTeamEdgeID sets the "rec_team_edge" edge to the RecTeam entity by ID.
func (hjuo *HiringJobUpdateOne) SetRecTeamEdgeID(id uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetRecTeamEdgeID(id)
	return hjuo
}

// SetRecTeamEdge sets the "rec_team_edge" edge to the RecTeam entity.
func (hjuo *HiringJobUpdateOne) SetRecTeamEdge(r *RecTeam) *HiringJobUpdateOne {
	return hjuo.SetRecTeamEdgeID(r.ID)
}

// SetRecInChargeEdgeID sets the "rec_in_charge_edge" edge to the User entity by ID.
func (hjuo *HiringJobUpdateOne) SetRecInChargeEdgeID(id uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.SetRecInChargeEdgeID(id)
	return hjuo
}

// SetNillableRecInChargeEdgeID sets the "rec_in_charge_edge" edge to the User entity by ID if the given value is not nil.
func (hjuo *HiringJobUpdateOne) SetNillableRecInChargeEdgeID(id *uuid.UUID) *HiringJobUpdateOne {
	if id != nil {
		hjuo = hjuo.SetRecInChargeEdgeID(*id)
	}
	return hjuo
}

// SetRecInChargeEdge sets the "rec_in_charge_edge" edge to the User entity.
func (hjuo *HiringJobUpdateOne) SetRecInChargeEdge(u *User) *HiringJobUpdateOne {
	return hjuo.SetRecInChargeEdgeID(u.ID)
}

// AddApprovalStepIDs adds the "approval_steps" edge to the HiringJobStep entity by IDs.
func (hjuo *HiringJobUpdateOne) AddApprovalStepIDs(ids ...uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.AddApprovalStepIDs(ids...)
	return hjuo
}

// AddApprovalSteps adds the "approval_steps" edges to the HiringJobStep entity.
func (hjuo *HiringJobUpdateOne) AddApprovalSteps(h ...*HiringJobStep) *HiringJobUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hjuo.AddApprovalStepIDs(ids...)
}

// Mutation returns the HiringJobMutation object of the builder.
func (hjuo *HiringJobUpdateOne) Mutation() *HiringJobMutation {
	return hjuo.mutation
}

// ClearOwnerEdge clears the "owner_edge" edge to the User entity.
func (hjuo *HiringJobUpdateOne) ClearOwnerEdge() *HiringJobUpdateOne {
	hjuo.mutation.ClearOwnerEdge()
	return hjuo
}

// ClearCandidateJobEdges clears all "candidate_job_edges" edges to the CandidateJob entity.
func (hjuo *HiringJobUpdateOne) ClearCandidateJobEdges() *HiringJobUpdateOne {
	hjuo.mutation.ClearCandidateJobEdges()
	return hjuo
}

// RemoveCandidateJobEdgeIDs removes the "candidate_job_edges" edge to CandidateJob entities by IDs.
func (hjuo *HiringJobUpdateOne) RemoveCandidateJobEdgeIDs(ids ...uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.RemoveCandidateJobEdgeIDs(ids...)
	return hjuo
}

// RemoveCandidateJobEdges removes "candidate_job_edges" edges to CandidateJob entities.
func (hjuo *HiringJobUpdateOne) RemoveCandidateJobEdges(c ...*CandidateJob) *HiringJobUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hjuo.RemoveCandidateJobEdgeIDs(ids...)
}

// ClearHiringJobSkillEdges clears all "hiring_job_skill_edges" edges to the EntitySkill entity.
func (hjuo *HiringJobUpdateOne) ClearHiringJobSkillEdges() *HiringJobUpdateOne {
	hjuo.mutation.ClearHiringJobSkillEdges()
	return hjuo
}

// RemoveHiringJobSkillEdgeIDs removes the "hiring_job_skill_edges" edge to EntitySkill entities by IDs.
func (hjuo *HiringJobUpdateOne) RemoveHiringJobSkillEdgeIDs(ids ...uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.RemoveHiringJobSkillEdgeIDs(ids...)
	return hjuo
}

// RemoveHiringJobSkillEdges removes "hiring_job_skill_edges" edges to EntitySkill entities.
func (hjuo *HiringJobUpdateOne) RemoveHiringJobSkillEdges(e ...*EntitySkill) *HiringJobUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hjuo.RemoveHiringJobSkillEdgeIDs(ids...)
}

// ClearHiringTeamEdge clears the "hiring_team_edge" edge to the HiringTeam entity.
func (hjuo *HiringJobUpdateOne) ClearHiringTeamEdge() *HiringJobUpdateOne {
	hjuo.mutation.ClearHiringTeamEdge()
	return hjuo
}

// ClearJobPositionEdge clears the "job_position_edge" edge to the JobPosition entity.
func (hjuo *HiringJobUpdateOne) ClearJobPositionEdge() *HiringJobUpdateOne {
	hjuo.mutation.ClearJobPositionEdge()
	return hjuo
}

// ClearApprovalUsers clears all "approval_users" edges to the User entity.
func (hjuo *HiringJobUpdateOne) ClearApprovalUsers() *HiringJobUpdateOne {
	hjuo.mutation.ClearApprovalUsers()
	return hjuo
}

// RemoveApprovalUserIDs removes the "approval_users" edge to User entities by IDs.
func (hjuo *HiringJobUpdateOne) RemoveApprovalUserIDs(ids ...uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.RemoveApprovalUserIDs(ids...)
	return hjuo
}

// RemoveApprovalUsers removes "approval_users" edges to User entities.
func (hjuo *HiringJobUpdateOne) RemoveApprovalUsers(u ...*User) *HiringJobUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hjuo.RemoveApprovalUserIDs(ids...)
}

// ClearRecTeamEdge clears the "rec_team_edge" edge to the RecTeam entity.
func (hjuo *HiringJobUpdateOne) ClearRecTeamEdge() *HiringJobUpdateOne {
	hjuo.mutation.ClearRecTeamEdge()
	return hjuo
}

// ClearRecInChargeEdge clears the "rec_in_charge_edge" edge to the User entity.
func (hjuo *HiringJobUpdateOne) ClearRecInChargeEdge() *HiringJobUpdateOne {
	hjuo.mutation.ClearRecInChargeEdge()
	return hjuo
}

// ClearApprovalSteps clears all "approval_steps" edges to the HiringJobStep entity.
func (hjuo *HiringJobUpdateOne) ClearApprovalSteps() *HiringJobUpdateOne {
	hjuo.mutation.ClearApprovalSteps()
	return hjuo
}

// RemoveApprovalStepIDs removes the "approval_steps" edge to HiringJobStep entities by IDs.
func (hjuo *HiringJobUpdateOne) RemoveApprovalStepIDs(ids ...uuid.UUID) *HiringJobUpdateOne {
	hjuo.mutation.RemoveApprovalStepIDs(ids...)
	return hjuo
}

// RemoveApprovalSteps removes "approval_steps" edges to HiringJobStep entities.
func (hjuo *HiringJobUpdateOne) RemoveApprovalSteps(h ...*HiringJobStep) *HiringJobUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hjuo.RemoveApprovalStepIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hjuo *HiringJobUpdateOne) Select(field string, fields ...string) *HiringJobUpdateOne {
	hjuo.fields = append([]string{field}, fields...)
	return hjuo
}

// Save executes the query and returns the updated HiringJob entity.
func (hjuo *HiringJobUpdateOne) Save(ctx context.Context) (*HiringJob, error) {
	var (
		err  error
		node *HiringJob
	)
	if len(hjuo.hooks) == 0 {
		if err = hjuo.check(); err != nil {
			return nil, err
		}
		node, err = hjuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HiringJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hjuo.check(); err != nil {
				return nil, err
			}
			hjuo.mutation = mutation
			node, err = hjuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hjuo.hooks) - 1; i >= 0; i-- {
			if hjuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hjuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hjuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HiringJob)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HiringJobMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hjuo *HiringJobUpdateOne) SaveX(ctx context.Context) *HiringJob {
	node, err := hjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hjuo *HiringJobUpdateOne) Exec(ctx context.Context) error {
	_, err := hjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hjuo *HiringJobUpdateOne) ExecX(ctx context.Context) {
	if err := hjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hjuo *HiringJobUpdateOne) check() error {
	if v, ok := hjuo.mutation.Slug(); ok {
		if err := hiringjob.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "HiringJob.slug": %w`, err)}
		}
	}
	if v, ok := hjuo.mutation.Name(); ok {
		if err := hiringjob.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "HiringJob.name": %w`, err)}
		}
	}
	if v, ok := hjuo.mutation.Description(); ok {
		if err := hiringjob.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "HiringJob.description": %w`, err)}
		}
	}
	if v, ok := hjuo.mutation.Status(); ok {
		if err := hiringjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HiringJob.status": %w`, err)}
		}
	}
	if v, ok := hjuo.mutation.Location(); ok {
		if err := hiringjob.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "HiringJob.location": %w`, err)}
		}
	}
	if v, ok := hjuo.mutation.SalaryType(); ok {
		if err := hiringjob.SalaryTypeValidator(v); err != nil {
			return &ValidationError{Name: "salary_type", err: fmt.Errorf(`ent: validator failed for field "HiringJob.salary_type": %w`, err)}
		}
	}
	if v, ok := hjuo.mutation.Currency(); ok {
		if err := hiringjob.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "HiringJob.currency": %w`, err)}
		}
	}
	if v, ok := hjuo.mutation.Level(); ok {
		if err := hiringjob.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "HiringJob.level": %w`, err)}
		}
	}
	if v, ok := hjuo.mutation.Note(); ok {
		if err := hiringjob.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "HiringJob.note": %w`, err)}
		}
	}
	if _, ok := hjuo.mutation.RecTeamEdgeID(); hjuo.mutation.RecTeamEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HiringJob.rec_team_edge"`)
	}
	return nil
}

func (hjuo *HiringJobUpdateOne) sqlSave(ctx context.Context) (_node *HiringJob, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringjob.Table,
			Columns: hiringjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringjob.FieldID,
			},
		},
	}
	id, ok := hjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HiringJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hiringjob.FieldID)
		for _, f := range fields {
			if !hiringjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hiringjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hjuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hiringjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if hjuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(hiringjob.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := hjuo.mutation.DeletedAt(); ok {
		_spec.SetField(hiringjob.FieldDeletedAt, field.TypeTime, value)
	}
	if hjuo.mutation.DeletedAtCleared() {
		_spec.ClearField(hiringjob.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := hjuo.mutation.Slug(); ok {
		_spec.SetField(hiringjob.FieldSlug, field.TypeString, value)
	}
	if value, ok := hjuo.mutation.Name(); ok {
		_spec.SetField(hiringjob.FieldName, field.TypeString, value)
	}
	if value, ok := hjuo.mutation.Description(); ok {
		_spec.SetField(hiringjob.FieldDescription, field.TypeString, value)
	}
	if value, ok := hjuo.mutation.Amount(); ok {
		_spec.SetField(hiringjob.FieldAmount, field.TypeInt, value)
	}
	if value, ok := hjuo.mutation.AddedAmount(); ok {
		_spec.AddField(hiringjob.FieldAmount, field.TypeInt, value)
	}
	if value, ok := hjuo.mutation.Status(); ok {
		_spec.SetField(hiringjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := hjuo.mutation.Location(); ok {
		_spec.SetField(hiringjob.FieldLocation, field.TypeEnum, value)
	}
	if value, ok := hjuo.mutation.SalaryType(); ok {
		_spec.SetField(hiringjob.FieldSalaryType, field.TypeEnum, value)
	}
	if value, ok := hjuo.mutation.SalaryFrom(); ok {
		_spec.SetField(hiringjob.FieldSalaryFrom, field.TypeInt, value)
	}
	if value, ok := hjuo.mutation.AddedSalaryFrom(); ok {
		_spec.AddField(hiringjob.FieldSalaryFrom, field.TypeInt, value)
	}
	if value, ok := hjuo.mutation.SalaryTo(); ok {
		_spec.SetField(hiringjob.FieldSalaryTo, field.TypeInt, value)
	}
	if value, ok := hjuo.mutation.AddedSalaryTo(); ok {
		_spec.AddField(hiringjob.FieldSalaryTo, field.TypeInt, value)
	}
	if value, ok := hjuo.mutation.Currency(); ok {
		_spec.SetField(hiringjob.FieldCurrency, field.TypeEnum, value)
	}
	if value, ok := hjuo.mutation.LastApplyDate(); ok {
		_spec.SetField(hiringjob.FieldLastApplyDate, field.TypeTime, value)
	}
	if hjuo.mutation.LastApplyDateCleared() {
		_spec.ClearField(hiringjob.FieldLastApplyDate, field.TypeTime)
	}
	if value, ok := hjuo.mutation.Priority(); ok {
		_spec.SetField(hiringjob.FieldPriority, field.TypeInt, value)
	}
	if value, ok := hjuo.mutation.AddedPriority(); ok {
		_spec.AddField(hiringjob.FieldPriority, field.TypeInt, value)
	}
	if value, ok := hjuo.mutation.Level(); ok {
		_spec.SetField(hiringjob.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := hjuo.mutation.Note(); ok {
		_spec.SetField(hiringjob.FieldNote, field.TypeString, value)
	}
	if hjuo.mutation.NoteCleared() {
		_spec.ClearField(hiringjob.FieldNote, field.TypeString)
	}
	if value, ok := hjuo.mutation.OpenedAt(); ok {
		_spec.SetField(hiringjob.FieldOpenedAt, field.TypeTime, value)
	}
	if hjuo.mutation.OpenedAtCleared() {
		_spec.ClearField(hiringjob.FieldOpenedAt, field.TypeTime)
	}
	if value, ok := hjuo.mutation.ClosedAt(); ok {
		_spec.SetField(hiringjob.FieldClosedAt, field.TypeTime, value)
	}
	if hjuo.mutation.ClosedAtCleared() {
		_spec.ClearField(hiringjob.FieldClosedAt, field.TypeTime)
	}
	if hjuo.mutation.OwnerEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.OwnerEdgeTable,
			Columns: []string{hiringjob.OwnerEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.OwnerEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.OwnerEdgeTable,
			Columns: []string{hiringjob.OwnerEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hjuo.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.CandidateJobEdgesTable,
			Columns: []string{hiringjob.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.RemovedCandidateJobEdgesIDs(); len(nodes) > 0 && !hjuo.mutation.CandidateJobEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.CandidateJobEdgesTable,
			Columns: []string{hiringjob.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.CandidateJobEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.CandidateJobEdgesTable,
			Columns: []string{hiringjob.CandidateJobEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hjuo.mutation.HiringJobSkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.HiringJobSkillEdgesTable,
			Columns: []string{hiringjob.HiringJobSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.RemovedHiringJobSkillEdgesIDs(); len(nodes) > 0 && !hjuo.mutation.HiringJobSkillEdgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.HiringJobSkillEdgesTable,
			Columns: []string{hiringjob.HiringJobSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.HiringJobSkillEdgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hiringjob.HiringJobSkillEdgesTable,
			Columns: []string{hiringjob.HiringJobSkillEdgesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entityskill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hjuo.mutation.HiringTeamEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.HiringTeamEdgeTable,
			Columns: []string{hiringjob.HiringTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.HiringTeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.HiringTeamEdgeTable,
			Columns: []string{hiringjob.HiringTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringteam.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hjuo.mutation.JobPositionEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.JobPositionEdgeTable,
			Columns: []string{hiringjob.JobPositionEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: jobposition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.JobPositionEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.JobPositionEdgeTable,
			Columns: []string{hiringjob.JobPositionEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: jobposition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hjuo.mutation.ApprovalUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hiringjob.ApprovalUsersTable,
			Columns: hiringjob.ApprovalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		createE := &HiringJobStepCreate{config: hjuo.config, mutation: newHiringJobStepMutation(hjuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.RemovedApprovalUsersIDs(); len(nodes) > 0 && !hjuo.mutation.ApprovalUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hiringjob.ApprovalUsersTable,
			Columns: hiringjob.ApprovalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &HiringJobStepCreate{config: hjuo.config, mutation: newHiringJobStepMutation(hjuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.ApprovalUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hiringjob.ApprovalUsersTable,
			Columns: hiringjob.ApprovalUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &HiringJobStepCreate{config: hjuo.config, mutation: newHiringJobStepMutation(hjuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hjuo.mutation.RecTeamEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.RecTeamEdgeTable,
			Columns: []string{hiringjob.RecTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: recteam.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.RecTeamEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.RecTeamEdgeTable,
			Columns: []string{hiringjob.RecTeamEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: recteam.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hjuo.mutation.RecInChargeEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.RecInChargeEdgeTable,
			Columns: []string{hiringjob.RecInChargeEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.RecInChargeEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hiringjob.RecInChargeEdgeTable,
			Columns: []string{hiringjob.RecInChargeEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hjuo.mutation.ApprovalStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hiringjob.ApprovalStepsTable,
			Columns: []string{hiringjob.ApprovalStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringjobstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.RemovedApprovalStepsIDs(); len(nodes) > 0 && !hjuo.mutation.ApprovalStepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hiringjob.ApprovalStepsTable,
			Columns: []string{hiringjob.ApprovalStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringjobstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hjuo.mutation.ApprovalStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hiringjob.ApprovalStepsTable,
			Columns: []string{hiringjob.ApprovalStepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: hiringjobstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HiringJob{config: hjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hiringjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
