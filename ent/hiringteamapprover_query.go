// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"trec/ent/hiringteam"
	"trec/ent/hiringteamapprover"
	"trec/ent/predicate"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HiringTeamApproverQuery is the builder for querying HiringTeamApprover entities.
type HiringTeamApproverQuery struct {
	config
	limit              *int
	offset             *int
	unique             *bool
	order              []OrderFunc
	fields             []string
	predicates         []predicate.HiringTeamApprover
	withUserEdge       *UserQuery
	withHiringTeamEdge *HiringTeamQuery
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*HiringTeamApprover) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HiringTeamApproverQuery builder.
func (htaq *HiringTeamApproverQuery) Where(ps ...predicate.HiringTeamApprover) *HiringTeamApproverQuery {
	htaq.predicates = append(htaq.predicates, ps...)
	return htaq
}

// Limit adds a limit step to the query.
func (htaq *HiringTeamApproverQuery) Limit(limit int) *HiringTeamApproverQuery {
	htaq.limit = &limit
	return htaq
}

// Offset adds an offset step to the query.
func (htaq *HiringTeamApproverQuery) Offset(offset int) *HiringTeamApproverQuery {
	htaq.offset = &offset
	return htaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (htaq *HiringTeamApproverQuery) Unique(unique bool) *HiringTeamApproverQuery {
	htaq.unique = &unique
	return htaq
}

// Order adds an order step to the query.
func (htaq *HiringTeamApproverQuery) Order(o ...OrderFunc) *HiringTeamApproverQuery {
	htaq.order = append(htaq.order, o...)
	return htaq
}

// QueryUserEdge chains the current query on the "user_edge" edge.
func (htaq *HiringTeamApproverQuery) QueryUserEdge() *UserQuery {
	query := &UserQuery{config: htaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteamapprover.Table, hiringteamapprover.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringteamapprover.UserEdgeTable, hiringteamapprover.UserEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(htaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHiringTeamEdge chains the current query on the "hiring_team_edge" edge.
func (htaq *HiringTeamApproverQuery) QueryHiringTeamEdge() *HiringTeamQuery {
	query := &HiringTeamQuery{config: htaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hiringteamapprover.Table, hiringteamapprover.FieldID, selector),
			sqlgraph.To(hiringteam.Table, hiringteam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hiringteamapprover.HiringTeamEdgeTable, hiringteamapprover.HiringTeamEdgeColumn),
		)
		fromU = sqlgraph.SetNeighbors(htaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HiringTeamApprover entity from the query.
// Returns a *NotFoundError when no HiringTeamApprover was found.
func (htaq *HiringTeamApproverQuery) First(ctx context.Context) (*HiringTeamApprover, error) {
	nodes, err := htaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hiringteamapprover.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (htaq *HiringTeamApproverQuery) FirstX(ctx context.Context) *HiringTeamApprover {
	node, err := htaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HiringTeamApprover ID from the query.
// Returns a *NotFoundError when no HiringTeamApprover ID was found.
func (htaq *HiringTeamApproverQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = htaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hiringteamapprover.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (htaq *HiringTeamApproverQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := htaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HiringTeamApprover entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HiringTeamApprover entity is found.
// Returns a *NotFoundError when no HiringTeamApprover entities are found.
func (htaq *HiringTeamApproverQuery) Only(ctx context.Context) (*HiringTeamApprover, error) {
	nodes, err := htaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hiringteamapprover.Label}
	default:
		return nil, &NotSingularError{hiringteamapprover.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (htaq *HiringTeamApproverQuery) OnlyX(ctx context.Context) *HiringTeamApprover {
	node, err := htaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HiringTeamApprover ID in the query.
// Returns a *NotSingularError when more than one HiringTeamApprover ID is found.
// Returns a *NotFoundError when no entities are found.
func (htaq *HiringTeamApproverQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = htaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hiringteamapprover.Label}
	default:
		err = &NotSingularError{hiringteamapprover.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (htaq *HiringTeamApproverQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := htaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HiringTeamApprovers.
func (htaq *HiringTeamApproverQuery) All(ctx context.Context) ([]*HiringTeamApprover, error) {
	if err := htaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return htaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (htaq *HiringTeamApproverQuery) AllX(ctx context.Context) []*HiringTeamApprover {
	nodes, err := htaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HiringTeamApprover IDs.
func (htaq *HiringTeamApproverQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := htaq.Select(hiringteamapprover.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (htaq *HiringTeamApproverQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := htaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (htaq *HiringTeamApproverQuery) Count(ctx context.Context) (int, error) {
	if err := htaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return htaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (htaq *HiringTeamApproverQuery) CountX(ctx context.Context) int {
	count, err := htaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (htaq *HiringTeamApproverQuery) Exist(ctx context.Context) (bool, error) {
	if err := htaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return htaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (htaq *HiringTeamApproverQuery) ExistX(ctx context.Context) bool {
	exist, err := htaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HiringTeamApproverQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (htaq *HiringTeamApproverQuery) Clone() *HiringTeamApproverQuery {
	if htaq == nil {
		return nil
	}
	return &HiringTeamApproverQuery{
		config:             htaq.config,
		limit:              htaq.limit,
		offset:             htaq.offset,
		order:              append([]OrderFunc{}, htaq.order...),
		predicates:         append([]predicate.HiringTeamApprover{}, htaq.predicates...),
		withUserEdge:       htaq.withUserEdge.Clone(),
		withHiringTeamEdge: htaq.withHiringTeamEdge.Clone(),
		// clone intermediate query.
		sql:    htaq.sql.Clone(),
		path:   htaq.path,
		unique: htaq.unique,
	}
}

// WithUserEdge tells the query-builder to eager-load the nodes that are connected to
// the "user_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (htaq *HiringTeamApproverQuery) WithUserEdge(opts ...func(*UserQuery)) *HiringTeamApproverQuery {
	query := &UserQuery{config: htaq.config}
	for _, opt := range opts {
		opt(query)
	}
	htaq.withUserEdge = query
	return htaq
}

// WithHiringTeamEdge tells the query-builder to eager-load the nodes that are connected to
// the "hiring_team_edge" edge. The optional arguments are used to configure the query builder of the edge.
func (htaq *HiringTeamApproverQuery) WithHiringTeamEdge(opts ...func(*HiringTeamQuery)) *HiringTeamApproverQuery {
	query := &HiringTeamQuery{config: htaq.config}
	for _, opt := range opts {
		opt(query)
	}
	htaq.withHiringTeamEdge = query
	return htaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HiringTeamApprover.Query().
//		GroupBy(hiringteamapprover.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (htaq *HiringTeamApproverQuery) GroupBy(field string, fields ...string) *HiringTeamApproverGroupBy {
	grbuild := &HiringTeamApproverGroupBy{config: htaq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := htaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return htaq.sqlQuery(ctx), nil
	}
	grbuild.label = hiringteamapprover.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.HiringTeamApprover.Query().
//		Select(hiringteamapprover.FieldCreatedAt).
//		Scan(ctx, &v)
func (htaq *HiringTeamApproverQuery) Select(fields ...string) *HiringTeamApproverSelect {
	htaq.fields = append(htaq.fields, fields...)
	selbuild := &HiringTeamApproverSelect{HiringTeamApproverQuery: htaq}
	selbuild.label = hiringteamapprover.Label
	selbuild.flds, selbuild.scan = &htaq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a HiringTeamApproverSelect configured with the given aggregations.
func (htaq *HiringTeamApproverQuery) Aggregate(fns ...AggregateFunc) *HiringTeamApproverSelect {
	return htaq.Select().Aggregate(fns...)
}

func (htaq *HiringTeamApproverQuery) prepareQuery(ctx context.Context) error {
	for _, f := range htaq.fields {
		if !hiringteamapprover.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if htaq.path != nil {
		prev, err := htaq.path(ctx)
		if err != nil {
			return err
		}
		htaq.sql = prev
	}
	return nil
}

func (htaq *HiringTeamApproverQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HiringTeamApprover, error) {
	var (
		nodes       = []*HiringTeamApprover{}
		_spec       = htaq.querySpec()
		loadedTypes = [2]bool{
			htaq.withUserEdge != nil,
			htaq.withHiringTeamEdge != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HiringTeamApprover).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HiringTeamApprover{config: htaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(htaq.modifiers) > 0 {
		_spec.Modifiers = htaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, htaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := htaq.withUserEdge; query != nil {
		if err := htaq.loadUserEdge(ctx, query, nodes, nil,
			func(n *HiringTeamApprover, e *User) { n.Edges.UserEdge = e }); err != nil {
			return nil, err
		}
	}
	if query := htaq.withHiringTeamEdge; query != nil {
		if err := htaq.loadHiringTeamEdge(ctx, query, nodes, nil,
			func(n *HiringTeamApprover, e *HiringTeam) { n.Edges.HiringTeamEdge = e }); err != nil {
			return nil, err
		}
	}
	for i := range htaq.loadTotal {
		if err := htaq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (htaq *HiringTeamApproverQuery) loadUserEdge(ctx context.Context, query *UserQuery, nodes []*HiringTeamApprover, init func(*HiringTeamApprover), assign func(*HiringTeamApprover, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HiringTeamApprover)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (htaq *HiringTeamApproverQuery) loadHiringTeamEdge(ctx context.Context, query *HiringTeamQuery, nodes []*HiringTeamApprover, init func(*HiringTeamApprover), assign func(*HiringTeamApprover, *HiringTeam)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*HiringTeamApprover)
	for i := range nodes {
		fk := nodes[i].HiringTeamID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(hiringteam.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hiring_team_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (htaq *HiringTeamApproverQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := htaq.querySpec()
	if len(htaq.modifiers) > 0 {
		_spec.Modifiers = htaq.modifiers
	}
	_spec.Node.Columns = htaq.fields
	if len(htaq.fields) > 0 {
		_spec.Unique = htaq.unique != nil && *htaq.unique
	}
	return sqlgraph.CountNodes(ctx, htaq.driver, _spec)
}

func (htaq *HiringTeamApproverQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := htaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (htaq *HiringTeamApproverQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hiringteamapprover.Table,
			Columns: hiringteamapprover.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: hiringteamapprover.FieldID,
			},
		},
		From:   htaq.sql,
		Unique: true,
	}
	if unique := htaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := htaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hiringteamapprover.FieldID)
		for i := range fields {
			if fields[i] != hiringteamapprover.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := htaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := htaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := htaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := htaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (htaq *HiringTeamApproverQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(htaq.driver.Dialect())
	t1 := builder.Table(hiringteamapprover.Table)
	columns := htaq.fields
	if len(columns) == 0 {
		columns = hiringteamapprover.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if htaq.sql != nil {
		selector = htaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if htaq.unique != nil && *htaq.unique {
		selector.Distinct()
	}
	for _, p := range htaq.predicates {
		p(selector)
	}
	for _, p := range htaq.order {
		p(selector)
	}
	if offset := htaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := htaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HiringTeamApproverGroupBy is the group-by builder for HiringTeamApprover entities.
type HiringTeamApproverGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (htagb *HiringTeamApproverGroupBy) Aggregate(fns ...AggregateFunc) *HiringTeamApproverGroupBy {
	htagb.fns = append(htagb.fns, fns...)
	return htagb
}

// Scan applies the group-by query and scans the result into the given value.
func (htagb *HiringTeamApproverGroupBy) Scan(ctx context.Context, v any) error {
	query, err := htagb.path(ctx)
	if err != nil {
		return err
	}
	htagb.sql = query
	return htagb.sqlScan(ctx, v)
}

func (htagb *HiringTeamApproverGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range htagb.fields {
		if !hiringteamapprover.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := htagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (htagb *HiringTeamApproverGroupBy) sqlQuery() *sql.Selector {
	selector := htagb.sql.Select()
	aggregation := make([]string, 0, len(htagb.fns))
	for _, fn := range htagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(htagb.fields)+len(htagb.fns))
		for _, f := range htagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(htagb.fields...)...)
}

// HiringTeamApproverSelect is the builder for selecting fields of HiringTeamApprover entities.
type HiringTeamApproverSelect struct {
	*HiringTeamApproverQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (htas *HiringTeamApproverSelect) Aggregate(fns ...AggregateFunc) *HiringTeamApproverSelect {
	htas.fns = append(htas.fns, fns...)
	return htas
}

// Scan applies the selector query and scans the result into the given value.
func (htas *HiringTeamApproverSelect) Scan(ctx context.Context, v any) error {
	if err := htas.prepareQuery(ctx); err != nil {
		return err
	}
	htas.sql = htas.HiringTeamApproverQuery.sqlQuery(ctx)
	return htas.sqlScan(ctx, v)
}

func (htas *HiringTeamApproverSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(htas.fns))
	for _, fn := range htas.fns {
		aggregation = append(aggregation, fn(htas.sql))
	}
	switch n := len(*htas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		htas.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		htas.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := htas.sql.Query()
	if err := htas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
