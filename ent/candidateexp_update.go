// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/candidate"
	"trec/ent/candidateexp"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CandidateExpUpdate is the builder for updating CandidateExp entities.
type CandidateExpUpdate struct {
	config
	hooks    []Hook
	mutation *CandidateExpMutation
}

// Where appends a list predicates to the CandidateExpUpdate builder.
func (ceu *CandidateExpUpdate) Where(ps ...predicate.CandidateExp) *CandidateExpUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetUpdatedAt sets the "updated_at" field.
func (ceu *CandidateExpUpdate) SetUpdatedAt(t time.Time) *CandidateExpUpdate {
	ceu.mutation.SetUpdatedAt(t)
	return ceu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableUpdatedAt(t *time.Time) *CandidateExpUpdate {
	if t != nil {
		ceu.SetUpdatedAt(*t)
	}
	return ceu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ceu *CandidateExpUpdate) ClearUpdatedAt() *CandidateExpUpdate {
	ceu.mutation.ClearUpdatedAt()
	return ceu
}

// SetDeletedAt sets the "deleted_at" field.
func (ceu *CandidateExpUpdate) SetDeletedAt(t time.Time) *CandidateExpUpdate {
	ceu.mutation.SetDeletedAt(t)
	return ceu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableDeletedAt(t *time.Time) *CandidateExpUpdate {
	if t != nil {
		ceu.SetDeletedAt(*t)
	}
	return ceu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ceu *CandidateExpUpdate) ClearDeletedAt() *CandidateExpUpdate {
	ceu.mutation.ClearDeletedAt()
	return ceu
}

// SetCandidateID sets the "candidate_id" field.
func (ceu *CandidateExpUpdate) SetCandidateID(u uuid.UUID) *CandidateExpUpdate {
	ceu.mutation.SetCandidateID(u)
	return ceu
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableCandidateID(u *uuid.UUID) *CandidateExpUpdate {
	if u != nil {
		ceu.SetCandidateID(*u)
	}
	return ceu
}

// ClearCandidateID clears the value of the "candidate_id" field.
func (ceu *CandidateExpUpdate) ClearCandidateID() *CandidateExpUpdate {
	ceu.mutation.ClearCandidateID()
	return ceu
}

// SetPosition sets the "position" field.
func (ceu *CandidateExpUpdate) SetPosition(s string) *CandidateExpUpdate {
	ceu.mutation.SetPosition(s)
	return ceu
}

// SetCompany sets the "company" field.
func (ceu *CandidateExpUpdate) SetCompany(s string) *CandidateExpUpdate {
	ceu.mutation.SetCompany(s)
	return ceu
}

// SetLocation sets the "location" field.
func (ceu *CandidateExpUpdate) SetLocation(s string) *CandidateExpUpdate {
	ceu.mutation.SetLocation(s)
	return ceu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableLocation(s *string) *CandidateExpUpdate {
	if s != nil {
		ceu.SetLocation(*s)
	}
	return ceu
}

// ClearLocation clears the value of the "location" field.
func (ceu *CandidateExpUpdate) ClearLocation() *CandidateExpUpdate {
	ceu.mutation.ClearLocation()
	return ceu
}

// SetDescription sets the "description" field.
func (ceu *CandidateExpUpdate) SetDescription(s string) *CandidateExpUpdate {
	ceu.mutation.SetDescription(s)
	return ceu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableDescription(s *string) *CandidateExpUpdate {
	if s != nil {
		ceu.SetDescription(*s)
	}
	return ceu
}

// ClearDescription clears the value of the "description" field.
func (ceu *CandidateExpUpdate) ClearDescription() *CandidateExpUpdate {
	ceu.mutation.ClearDescription()
	return ceu
}

// SetStartDate sets the "start_date" field.
func (ceu *CandidateExpUpdate) SetStartDate(t time.Time) *CandidateExpUpdate {
	ceu.mutation.SetStartDate(t)
	return ceu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableStartDate(t *time.Time) *CandidateExpUpdate {
	if t != nil {
		ceu.SetStartDate(*t)
	}
	return ceu
}

// ClearStartDate clears the value of the "start_date" field.
func (ceu *CandidateExpUpdate) ClearStartDate() *CandidateExpUpdate {
	ceu.mutation.ClearStartDate()
	return ceu
}

// SetEndDate sets the "end_date" field.
func (ceu *CandidateExpUpdate) SetEndDate(t time.Time) *CandidateExpUpdate {
	ceu.mutation.SetEndDate(t)
	return ceu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableEndDate(t *time.Time) *CandidateExpUpdate {
	if t != nil {
		ceu.SetEndDate(*t)
	}
	return ceu
}

// ClearEndDate clears the value of the "end_date" field.
func (ceu *CandidateExpUpdate) ClearEndDate() *CandidateExpUpdate {
	ceu.mutation.ClearEndDate()
	return ceu
}

// SetOrderID sets the "order_id" field.
func (ceu *CandidateExpUpdate) SetOrderID(i int) *CandidateExpUpdate {
	ceu.mutation.ResetOrderID()
	ceu.mutation.SetOrderID(i)
	return ceu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableOrderID(i *int) *CandidateExpUpdate {
	if i != nil {
		ceu.SetOrderID(*i)
	}
	return ceu
}

// AddOrderID adds i to the "order_id" field.
func (ceu *CandidateExpUpdate) AddOrderID(i int) *CandidateExpUpdate {
	ceu.mutation.AddOrderID(i)
	return ceu
}

// ClearOrderID clears the value of the "order_id" field.
func (ceu *CandidateExpUpdate) ClearOrderID() *CandidateExpUpdate {
	ceu.mutation.ClearOrderID()
	return ceu
}

// SetIsCurrent sets the "is_current" field.
func (ceu *CandidateExpUpdate) SetIsCurrent(b bool) *CandidateExpUpdate {
	ceu.mutation.SetIsCurrent(b)
	return ceu
}

// SetNillableIsCurrent sets the "is_current" field if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableIsCurrent(b *bool) *CandidateExpUpdate {
	if b != nil {
		ceu.SetIsCurrent(*b)
	}
	return ceu
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (ceu *CandidateExpUpdate) SetCandidateEdgeID(id uuid.UUID) *CandidateExpUpdate {
	ceu.mutation.SetCandidateEdgeID(id)
	return ceu
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (ceu *CandidateExpUpdate) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateExpUpdate {
	if id != nil {
		ceu = ceu.SetCandidateEdgeID(*id)
	}
	return ceu
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (ceu *CandidateExpUpdate) SetCandidateEdge(c *Candidate) *CandidateExpUpdate {
	return ceu.SetCandidateEdgeID(c.ID)
}

// Mutation returns the CandidateExpMutation object of the builder.
func (ceu *CandidateExpUpdate) Mutation() *CandidateExpMutation {
	return ceu.mutation
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (ceu *CandidateExpUpdate) ClearCandidateEdge() *CandidateExpUpdate {
	ceu.mutation.ClearCandidateEdge()
	return ceu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *CandidateExpUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ceu.hooks) == 0 {
		if err = ceu.check(); err != nil {
			return 0, err
		}
		affected, err = ceu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateExpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceu.check(); err != nil {
				return 0, err
			}
			ceu.mutation = mutation
			affected, err = ceu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ceu.hooks) - 1; i >= 0; i-- {
			if ceu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *CandidateExpUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *CandidateExpUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *CandidateExpUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceu *CandidateExpUpdate) check() error {
	if v, ok := ceu.mutation.Position(); ok {
		if err := candidateexp.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "CandidateExp.position": %w`, err)}
		}
	}
	if v, ok := ceu.mutation.Company(); ok {
		if err := candidateexp.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "CandidateExp.company": %w`, err)}
		}
	}
	return nil
}

func (ceu *CandidateExpUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidateexp.Table,
			Columns: candidateexp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateexp.FieldID,
			},
		},
	}
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateexp.FieldUpdatedAt, field.TypeTime, value)
	}
	if ceu.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidateexp.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ceu.mutation.DeletedAt(); ok {
		_spec.SetField(candidateexp.FieldDeletedAt, field.TypeTime, value)
	}
	if ceu.mutation.DeletedAtCleared() {
		_spec.ClearField(candidateexp.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ceu.mutation.Position(); ok {
		_spec.SetField(candidateexp.FieldPosition, field.TypeString, value)
	}
	if value, ok := ceu.mutation.Company(); ok {
		_spec.SetField(candidateexp.FieldCompany, field.TypeString, value)
	}
	if value, ok := ceu.mutation.Location(); ok {
		_spec.SetField(candidateexp.FieldLocation, field.TypeString, value)
	}
	if ceu.mutation.LocationCleared() {
		_spec.ClearField(candidateexp.FieldLocation, field.TypeString)
	}
	if value, ok := ceu.mutation.Description(); ok {
		_spec.SetField(candidateexp.FieldDescription, field.TypeString, value)
	}
	if ceu.mutation.DescriptionCleared() {
		_spec.ClearField(candidateexp.FieldDescription, field.TypeString)
	}
	if value, ok := ceu.mutation.StartDate(); ok {
		_spec.SetField(candidateexp.FieldStartDate, field.TypeTime, value)
	}
	if ceu.mutation.StartDateCleared() {
		_spec.ClearField(candidateexp.FieldStartDate, field.TypeTime)
	}
	if value, ok := ceu.mutation.EndDate(); ok {
		_spec.SetField(candidateexp.FieldEndDate, field.TypeTime, value)
	}
	if ceu.mutation.EndDateCleared() {
		_spec.ClearField(candidateexp.FieldEndDate, field.TypeTime)
	}
	if value, ok := ceu.mutation.OrderID(); ok {
		_spec.SetField(candidateexp.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedOrderID(); ok {
		_spec.AddField(candidateexp.FieldOrderID, field.TypeInt, value)
	}
	if ceu.mutation.OrderIDCleared() {
		_spec.ClearField(candidateexp.FieldOrderID, field.TypeInt)
	}
	if value, ok := ceu.mutation.IsCurrent(); ok {
		_spec.SetField(candidateexp.FieldIsCurrent, field.TypeBool, value)
	}
	if ceu.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateexp.CandidateEdgeTable,
			Columns: []string{candidateexp.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateexp.CandidateEdgeTable,
			Columns: []string{candidateexp.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidateexp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CandidateExpUpdateOne is the builder for updating a single CandidateExp entity.
type CandidateExpUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CandidateExpMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ceuo *CandidateExpUpdateOne) SetUpdatedAt(t time.Time) *CandidateExpUpdateOne {
	ceuo.mutation.SetUpdatedAt(t)
	return ceuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableUpdatedAt(t *time.Time) *CandidateExpUpdateOne {
	if t != nil {
		ceuo.SetUpdatedAt(*t)
	}
	return ceuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ceuo *CandidateExpUpdateOne) ClearUpdatedAt() *CandidateExpUpdateOne {
	ceuo.mutation.ClearUpdatedAt()
	return ceuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ceuo *CandidateExpUpdateOne) SetDeletedAt(t time.Time) *CandidateExpUpdateOne {
	ceuo.mutation.SetDeletedAt(t)
	return ceuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableDeletedAt(t *time.Time) *CandidateExpUpdateOne {
	if t != nil {
		ceuo.SetDeletedAt(*t)
	}
	return ceuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ceuo *CandidateExpUpdateOne) ClearDeletedAt() *CandidateExpUpdateOne {
	ceuo.mutation.ClearDeletedAt()
	return ceuo
}

// SetCandidateID sets the "candidate_id" field.
func (ceuo *CandidateExpUpdateOne) SetCandidateID(u uuid.UUID) *CandidateExpUpdateOne {
	ceuo.mutation.SetCandidateID(u)
	return ceuo
}

// SetNillableCandidateID sets the "candidate_id" field if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableCandidateID(u *uuid.UUID) *CandidateExpUpdateOne {
	if u != nil {
		ceuo.SetCandidateID(*u)
	}
	return ceuo
}

// ClearCandidateID clears the value of the "candidate_id" field.
func (ceuo *CandidateExpUpdateOne) ClearCandidateID() *CandidateExpUpdateOne {
	ceuo.mutation.ClearCandidateID()
	return ceuo
}

// SetPosition sets the "position" field.
func (ceuo *CandidateExpUpdateOne) SetPosition(s string) *CandidateExpUpdateOne {
	ceuo.mutation.SetPosition(s)
	return ceuo
}

// SetCompany sets the "company" field.
func (ceuo *CandidateExpUpdateOne) SetCompany(s string) *CandidateExpUpdateOne {
	ceuo.mutation.SetCompany(s)
	return ceuo
}

// SetLocation sets the "location" field.
func (ceuo *CandidateExpUpdateOne) SetLocation(s string) *CandidateExpUpdateOne {
	ceuo.mutation.SetLocation(s)
	return ceuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableLocation(s *string) *CandidateExpUpdateOne {
	if s != nil {
		ceuo.SetLocation(*s)
	}
	return ceuo
}

// ClearLocation clears the value of the "location" field.
func (ceuo *CandidateExpUpdateOne) ClearLocation() *CandidateExpUpdateOne {
	ceuo.mutation.ClearLocation()
	return ceuo
}

// SetDescription sets the "description" field.
func (ceuo *CandidateExpUpdateOne) SetDescription(s string) *CandidateExpUpdateOne {
	ceuo.mutation.SetDescription(s)
	return ceuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableDescription(s *string) *CandidateExpUpdateOne {
	if s != nil {
		ceuo.SetDescription(*s)
	}
	return ceuo
}

// ClearDescription clears the value of the "description" field.
func (ceuo *CandidateExpUpdateOne) ClearDescription() *CandidateExpUpdateOne {
	ceuo.mutation.ClearDescription()
	return ceuo
}

// SetStartDate sets the "start_date" field.
func (ceuo *CandidateExpUpdateOne) SetStartDate(t time.Time) *CandidateExpUpdateOne {
	ceuo.mutation.SetStartDate(t)
	return ceuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableStartDate(t *time.Time) *CandidateExpUpdateOne {
	if t != nil {
		ceuo.SetStartDate(*t)
	}
	return ceuo
}

// ClearStartDate clears the value of the "start_date" field.
func (ceuo *CandidateExpUpdateOne) ClearStartDate() *CandidateExpUpdateOne {
	ceuo.mutation.ClearStartDate()
	return ceuo
}

// SetEndDate sets the "end_date" field.
func (ceuo *CandidateExpUpdateOne) SetEndDate(t time.Time) *CandidateExpUpdateOne {
	ceuo.mutation.SetEndDate(t)
	return ceuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableEndDate(t *time.Time) *CandidateExpUpdateOne {
	if t != nil {
		ceuo.SetEndDate(*t)
	}
	return ceuo
}

// ClearEndDate clears the value of the "end_date" field.
func (ceuo *CandidateExpUpdateOne) ClearEndDate() *CandidateExpUpdateOne {
	ceuo.mutation.ClearEndDate()
	return ceuo
}

// SetOrderID sets the "order_id" field.
func (ceuo *CandidateExpUpdateOne) SetOrderID(i int) *CandidateExpUpdateOne {
	ceuo.mutation.ResetOrderID()
	ceuo.mutation.SetOrderID(i)
	return ceuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableOrderID(i *int) *CandidateExpUpdateOne {
	if i != nil {
		ceuo.SetOrderID(*i)
	}
	return ceuo
}

// AddOrderID adds i to the "order_id" field.
func (ceuo *CandidateExpUpdateOne) AddOrderID(i int) *CandidateExpUpdateOne {
	ceuo.mutation.AddOrderID(i)
	return ceuo
}

// ClearOrderID clears the value of the "order_id" field.
func (ceuo *CandidateExpUpdateOne) ClearOrderID() *CandidateExpUpdateOne {
	ceuo.mutation.ClearOrderID()
	return ceuo
}

// SetIsCurrent sets the "is_current" field.
func (ceuo *CandidateExpUpdateOne) SetIsCurrent(b bool) *CandidateExpUpdateOne {
	ceuo.mutation.SetIsCurrent(b)
	return ceuo
}

// SetNillableIsCurrent sets the "is_current" field if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableIsCurrent(b *bool) *CandidateExpUpdateOne {
	if b != nil {
		ceuo.SetIsCurrent(*b)
	}
	return ceuo
}

// SetCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID.
func (ceuo *CandidateExpUpdateOne) SetCandidateEdgeID(id uuid.UUID) *CandidateExpUpdateOne {
	ceuo.mutation.SetCandidateEdgeID(id)
	return ceuo
}

// SetNillableCandidateEdgeID sets the "candidate_edge" edge to the Candidate entity by ID if the given value is not nil.
func (ceuo *CandidateExpUpdateOne) SetNillableCandidateEdgeID(id *uuid.UUID) *CandidateExpUpdateOne {
	if id != nil {
		ceuo = ceuo.SetCandidateEdgeID(*id)
	}
	return ceuo
}

// SetCandidateEdge sets the "candidate_edge" edge to the Candidate entity.
func (ceuo *CandidateExpUpdateOne) SetCandidateEdge(c *Candidate) *CandidateExpUpdateOne {
	return ceuo.SetCandidateEdgeID(c.ID)
}

// Mutation returns the CandidateExpMutation object of the builder.
func (ceuo *CandidateExpUpdateOne) Mutation() *CandidateExpMutation {
	return ceuo.mutation
}

// ClearCandidateEdge clears the "candidate_edge" edge to the Candidate entity.
func (ceuo *CandidateExpUpdateOne) ClearCandidateEdge() *CandidateExpUpdateOne {
	ceuo.mutation.ClearCandidateEdge()
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *CandidateExpUpdateOne) Select(field string, fields ...string) *CandidateExpUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated CandidateExp entity.
func (ceuo *CandidateExpUpdateOne) Save(ctx context.Context) (*CandidateExp, error) {
	var (
		err  error
		node *CandidateExp
	)
	if len(ceuo.hooks) == 0 {
		if err = ceuo.check(); err != nil {
			return nil, err
		}
		node, err = ceuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CandidateExpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceuo.check(); err != nil {
				return nil, err
			}
			ceuo.mutation = mutation
			node, err = ceuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ceuo.hooks) - 1; i >= 0; i-- {
			if ceuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ceuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CandidateExp)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CandidateExpMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *CandidateExpUpdateOne) SaveX(ctx context.Context) *CandidateExp {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *CandidateExpUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *CandidateExpUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceuo *CandidateExpUpdateOne) check() error {
	if v, ok := ceuo.mutation.Position(); ok {
		if err := candidateexp.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "CandidateExp.position": %w`, err)}
		}
	}
	if v, ok := ceuo.mutation.Company(); ok {
		if err := candidateexp.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "CandidateExp.company": %w`, err)}
		}
	}
	return nil
}

func (ceuo *CandidateExpUpdateOne) sqlSave(ctx context.Context) (_node *CandidateExp, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   candidateexp.Table,
			Columns: candidateexp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: candidateexp.FieldID,
			},
		},
	}
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CandidateExp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, candidateexp.FieldID)
		for _, f := range fields {
			if !candidateexp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != candidateexp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.UpdatedAt(); ok {
		_spec.SetField(candidateexp.FieldUpdatedAt, field.TypeTime, value)
	}
	if ceuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(candidateexp.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ceuo.mutation.DeletedAt(); ok {
		_spec.SetField(candidateexp.FieldDeletedAt, field.TypeTime, value)
	}
	if ceuo.mutation.DeletedAtCleared() {
		_spec.ClearField(candidateexp.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ceuo.mutation.Position(); ok {
		_spec.SetField(candidateexp.FieldPosition, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.Company(); ok {
		_spec.SetField(candidateexp.FieldCompany, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.Location(); ok {
		_spec.SetField(candidateexp.FieldLocation, field.TypeString, value)
	}
	if ceuo.mutation.LocationCleared() {
		_spec.ClearField(candidateexp.FieldLocation, field.TypeString)
	}
	if value, ok := ceuo.mutation.Description(); ok {
		_spec.SetField(candidateexp.FieldDescription, field.TypeString, value)
	}
	if ceuo.mutation.DescriptionCleared() {
		_spec.ClearField(candidateexp.FieldDescription, field.TypeString)
	}
	if value, ok := ceuo.mutation.StartDate(); ok {
		_spec.SetField(candidateexp.FieldStartDate, field.TypeTime, value)
	}
	if ceuo.mutation.StartDateCleared() {
		_spec.ClearField(candidateexp.FieldStartDate, field.TypeTime)
	}
	if value, ok := ceuo.mutation.EndDate(); ok {
		_spec.SetField(candidateexp.FieldEndDate, field.TypeTime, value)
	}
	if ceuo.mutation.EndDateCleared() {
		_spec.ClearField(candidateexp.FieldEndDate, field.TypeTime)
	}
	if value, ok := ceuo.mutation.OrderID(); ok {
		_spec.SetField(candidateexp.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedOrderID(); ok {
		_spec.AddField(candidateexp.FieldOrderID, field.TypeInt, value)
	}
	if ceuo.mutation.OrderIDCleared() {
		_spec.ClearField(candidateexp.FieldOrderID, field.TypeInt)
	}
	if value, ok := ceuo.mutation.IsCurrent(); ok {
		_spec.SetField(candidateexp.FieldIsCurrent, field.TypeBool, value)
	}
	if ceuo.mutation.CandidateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateexp.CandidateEdgeTable,
			Columns: []string{candidateexp.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.CandidateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   candidateexp.CandidateEdgeTable,
			Columns: []string{candidateexp.CandidateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CandidateExp{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{candidateexp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
