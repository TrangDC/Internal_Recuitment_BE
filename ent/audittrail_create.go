// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/audittrail"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AuditTrailCreate is the builder for creating a AuditTrail entity.
type AuditTrailCreate struct {
	config
	mutation *AuditTrailMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (atc *AuditTrailCreate) SetCreatedAt(t time.Time) *AuditTrailCreate {
	atc.mutation.SetCreatedAt(t)
	return atc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atc *AuditTrailCreate) SetNillableCreatedAt(t *time.Time) *AuditTrailCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetUpdatedAt sets the "updated_at" field.
func (atc *AuditTrailCreate) SetUpdatedAt(t time.Time) *AuditTrailCreate {
	atc.mutation.SetUpdatedAt(t)
	return atc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atc *AuditTrailCreate) SetNillableUpdatedAt(t *time.Time) *AuditTrailCreate {
	if t != nil {
		atc.SetUpdatedAt(*t)
	}
	return atc
}

// SetDeletedAt sets the "deleted_at" field.
func (atc *AuditTrailCreate) SetDeletedAt(t time.Time) *AuditTrailCreate {
	atc.mutation.SetDeletedAt(t)
	return atc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atc *AuditTrailCreate) SetNillableDeletedAt(t *time.Time) *AuditTrailCreate {
	if t != nil {
		atc.SetDeletedAt(*t)
	}
	return atc
}

// SetCreatedBy sets the "created_by" field.
func (atc *AuditTrailCreate) SetCreatedBy(u uuid.UUID) *AuditTrailCreate {
	atc.mutation.SetCreatedBy(u)
	return atc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (atc *AuditTrailCreate) SetNillableCreatedBy(u *uuid.UUID) *AuditTrailCreate {
	if u != nil {
		atc.SetCreatedBy(*u)
	}
	return atc
}

// SetRecordId sets the "recordId" field.
func (atc *AuditTrailCreate) SetRecordId(u uuid.UUID) *AuditTrailCreate {
	atc.mutation.SetRecordId(u)
	return atc
}

// SetModule sets the "module" field.
func (atc *AuditTrailCreate) SetModule(a audittrail.Module) *AuditTrailCreate {
	atc.mutation.SetModule(a)
	return atc
}

// SetActionType sets the "actionType" field.
func (atc *AuditTrailCreate) SetActionType(at audittrail.ActionType) *AuditTrailCreate {
	atc.mutation.SetActionType(at)
	return atc
}

// SetNillableActionType sets the "actionType" field if the given value is not nil.
func (atc *AuditTrailCreate) SetNillableActionType(at *audittrail.ActionType) *AuditTrailCreate {
	if at != nil {
		atc.SetActionType(*at)
	}
	return atc
}

// SetNote sets the "note" field.
func (atc *AuditTrailCreate) SetNote(s string) *AuditTrailCreate {
	atc.mutation.SetNote(s)
	return atc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (atc *AuditTrailCreate) SetNillableNote(s *string) *AuditTrailCreate {
	if s != nil {
		atc.SetNote(*s)
	}
	return atc
}

// SetRecordChanges sets the "record_changes" field.
func (atc *AuditTrailCreate) SetRecordChanges(s string) *AuditTrailCreate {
	atc.mutation.SetRecordChanges(s)
	return atc
}

// SetNillableRecordChanges sets the "record_changes" field if the given value is not nil.
func (atc *AuditTrailCreate) SetNillableRecordChanges(s *string) *AuditTrailCreate {
	if s != nil {
		atc.SetRecordChanges(*s)
	}
	return atc
}

// SetID sets the "id" field.
func (atc *AuditTrailCreate) SetID(u uuid.UUID) *AuditTrailCreate {
	atc.mutation.SetID(u)
	return atc
}

// SetUserEdgeID sets the "user_edge" edge to the User entity by ID.
func (atc *AuditTrailCreate) SetUserEdgeID(id uuid.UUID) *AuditTrailCreate {
	atc.mutation.SetUserEdgeID(id)
	return atc
}

// SetNillableUserEdgeID sets the "user_edge" edge to the User entity by ID if the given value is not nil.
func (atc *AuditTrailCreate) SetNillableUserEdgeID(id *uuid.UUID) *AuditTrailCreate {
	if id != nil {
		atc = atc.SetUserEdgeID(*id)
	}
	return atc
}

// SetUserEdge sets the "user_edge" edge to the User entity.
func (atc *AuditTrailCreate) SetUserEdge(u *User) *AuditTrailCreate {
	return atc.SetUserEdgeID(u.ID)
}

// Mutation returns the AuditTrailMutation object of the builder.
func (atc *AuditTrailCreate) Mutation() *AuditTrailMutation {
	return atc.mutation
}

// Save creates the AuditTrail in the database.
func (atc *AuditTrailCreate) Save(ctx context.Context) (*AuditTrail, error) {
	var (
		err  error
		node *AuditTrail
	)
	atc.defaults()
	if len(atc.hooks) == 0 {
		if err = atc.check(); err != nil {
			return nil, err
		}
		node, err = atc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuditTrailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atc.check(); err != nil {
				return nil, err
			}
			atc.mutation = mutation
			if node, err = atc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(atc.hooks) - 1; i >= 0; i-- {
			if atc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, atc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AuditTrail)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AuditTrailMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AuditTrailCreate) SaveX(ctx context.Context) *AuditTrail {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AuditTrailCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AuditTrailCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AuditTrailCreate) defaults() {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		v := audittrail.DefaultCreatedAt()
		atc.mutation.SetCreatedAt(v)
	}
	if _, ok := atc.mutation.ActionType(); !ok {
		v := audittrail.DefaultActionType
		atc.mutation.SetActionType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AuditTrailCreate) check() error {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuditTrail.created_at"`)}
	}
	if _, ok := atc.mutation.RecordId(); !ok {
		return &ValidationError{Name: "recordId", err: errors.New(`ent: missing required field "AuditTrail.recordId"`)}
	}
	if _, ok := atc.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`ent: missing required field "AuditTrail.module"`)}
	}
	if v, ok := atc.mutation.Module(); ok {
		if err := audittrail.ModuleValidator(v); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf(`ent: validator failed for field "AuditTrail.module": %w`, err)}
		}
	}
	if v, ok := atc.mutation.ActionType(); ok {
		if err := audittrail.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "actionType", err: fmt.Errorf(`ent: validator failed for field "AuditTrail.actionType": %w`, err)}
		}
	}
	if v, ok := atc.mutation.Note(); ok {
		if err := audittrail.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "AuditTrail.note": %w`, err)}
		}
	}
	return nil
}

func (atc *AuditTrailCreate) sqlSave(ctx context.Context) (*AuditTrail, error) {
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (atc *AuditTrailCreate) createSpec() (*AuditTrail, *sqlgraph.CreateSpec) {
	var (
		_node = &AuditTrail{config: atc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: audittrail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: audittrail.FieldID,
			},
		}
	)
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := atc.mutation.CreatedAt(); ok {
		_spec.SetField(audittrail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := atc.mutation.UpdatedAt(); ok {
		_spec.SetField(audittrail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := atc.mutation.DeletedAt(); ok {
		_spec.SetField(audittrail.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := atc.mutation.RecordId(); ok {
		_spec.SetField(audittrail.FieldRecordId, field.TypeUUID, value)
		_node.RecordId = value
	}
	if value, ok := atc.mutation.Module(); ok {
		_spec.SetField(audittrail.FieldModule, field.TypeEnum, value)
		_node.Module = value
	}
	if value, ok := atc.mutation.ActionType(); ok {
		_spec.SetField(audittrail.FieldActionType, field.TypeEnum, value)
		_node.ActionType = value
	}
	if value, ok := atc.mutation.Note(); ok {
		_spec.SetField(audittrail.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := atc.mutation.RecordChanges(); ok {
		_spec.SetField(audittrail.FieldRecordChanges, field.TypeString, value)
		_node.RecordChanges = value
	}
	if nodes := atc.mutation.UserEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audittrail.UserEdgeTable,
			Columns: []string{audittrail.UserEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuditTrailCreateBulk is the builder for creating many AuditTrail entities in bulk.
type AuditTrailCreateBulk struct {
	config
	builders []*AuditTrailCreate
}

// Save creates the AuditTrail entities in the database.
func (atcb *AuditTrailCreateBulk) Save(ctx context.Context) ([]*AuditTrail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AuditTrail, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuditTrailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AuditTrailCreateBulk) SaveX(ctx context.Context) []*AuditTrail {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AuditTrailCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AuditTrailCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
