// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/attachment"
	"trec/ent/candidateinterview"
	"trec/ent/candidatejob"
	"trec/ent/candidatejobfeedback"
	"trec/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AttachmentUpdate is the builder for updating Attachment entities.
type AttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *AttachmentMutation
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (au *AttachmentUpdate) Where(ps ...predicate.Attachment) *AttachmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AttachmentUpdate) SetUpdatedAt(t time.Time) *AttachmentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableUpdatedAt(t *time.Time) *AttachmentUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AttachmentUpdate) ClearUpdatedAt() *AttachmentUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AttachmentUpdate) SetDeletedAt(t time.Time) *AttachmentUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableDeletedAt(t *time.Time) *AttachmentUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AttachmentUpdate) ClearDeletedAt() *AttachmentUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetDocumentID sets the "document_id" field.
func (au *AttachmentUpdate) SetDocumentID(u uuid.UUID) *AttachmentUpdate {
	au.mutation.SetDocumentID(u)
	return au
}

// SetDocumentName sets the "document_name" field.
func (au *AttachmentUpdate) SetDocumentName(s string) *AttachmentUpdate {
	au.mutation.SetDocumentName(s)
	return au
}

// SetRelationType sets the "relation_type" field.
func (au *AttachmentUpdate) SetRelationType(at attachment.RelationType) *AttachmentUpdate {
	au.mutation.SetRelationType(at)
	return au
}

// SetRelationID sets the "relation_id" field.
func (au *AttachmentUpdate) SetRelationID(u uuid.UUID) *AttachmentUpdate {
	au.mutation.SetRelationID(u)
	return au
}

// SetNillableRelationID sets the "relation_id" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableRelationID(u *uuid.UUID) *AttachmentUpdate {
	if u != nil {
		au.SetRelationID(*u)
	}
	return au
}

// ClearRelationID clears the value of the "relation_id" field.
func (au *AttachmentUpdate) ClearRelationID() *AttachmentUpdate {
	au.mutation.ClearRelationID()
	return au
}

// SetCandidateJobID sets the "candidate_job" edge to the CandidateJob entity by ID.
func (au *AttachmentUpdate) SetCandidateJobID(id uuid.UUID) *AttachmentUpdate {
	au.mutation.SetCandidateJobID(id)
	return au
}

// SetNillableCandidateJobID sets the "candidate_job" edge to the CandidateJob entity by ID if the given value is not nil.
func (au *AttachmentUpdate) SetNillableCandidateJobID(id *uuid.UUID) *AttachmentUpdate {
	if id != nil {
		au = au.SetCandidateJobID(*id)
	}
	return au
}

// SetCandidateJob sets the "candidate_job" edge to the CandidateJob entity.
func (au *AttachmentUpdate) SetCandidateJob(c *CandidateJob) *AttachmentUpdate {
	return au.SetCandidateJobID(c.ID)
}

// SetCandidateJobFeedbackID sets the "candidate_job_feedback" edge to the CandidateJobFeedback entity by ID.
func (au *AttachmentUpdate) SetCandidateJobFeedbackID(id uuid.UUID) *AttachmentUpdate {
	au.mutation.SetCandidateJobFeedbackID(id)
	return au
}

// SetNillableCandidateJobFeedbackID sets the "candidate_job_feedback" edge to the CandidateJobFeedback entity by ID if the given value is not nil.
func (au *AttachmentUpdate) SetNillableCandidateJobFeedbackID(id *uuid.UUID) *AttachmentUpdate {
	if id != nil {
		au = au.SetCandidateJobFeedbackID(*id)
	}
	return au
}

// SetCandidateJobFeedback sets the "candidate_job_feedback" edge to the CandidateJobFeedback entity.
func (au *AttachmentUpdate) SetCandidateJobFeedback(c *CandidateJobFeedback) *AttachmentUpdate {
	return au.SetCandidateJobFeedbackID(c.ID)
}

// SetCandidateInterviewID sets the "candidate_interview" edge to the CandidateInterview entity by ID.
func (au *AttachmentUpdate) SetCandidateInterviewID(id uuid.UUID) *AttachmentUpdate {
	au.mutation.SetCandidateInterviewID(id)
	return au
}

// SetNillableCandidateInterviewID sets the "candidate_interview" edge to the CandidateInterview entity by ID if the given value is not nil.
func (au *AttachmentUpdate) SetNillableCandidateInterviewID(id *uuid.UUID) *AttachmentUpdate {
	if id != nil {
		au = au.SetCandidateInterviewID(*id)
	}
	return au
}

// SetCandidateInterview sets the "candidate_interview" edge to the CandidateInterview entity.
func (au *AttachmentUpdate) SetCandidateInterview(c *CandidateInterview) *AttachmentUpdate {
	return au.SetCandidateInterviewID(c.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (au *AttachmentUpdate) Mutation() *AttachmentMutation {
	return au.mutation
}

// ClearCandidateJob clears the "candidate_job" edge to the CandidateJob entity.
func (au *AttachmentUpdate) ClearCandidateJob() *AttachmentUpdate {
	au.mutation.ClearCandidateJob()
	return au
}

// ClearCandidateJobFeedback clears the "candidate_job_feedback" edge to the CandidateJobFeedback entity.
func (au *AttachmentUpdate) ClearCandidateJobFeedback() *AttachmentUpdate {
	au.mutation.ClearCandidateJobFeedback()
	return au
}

// ClearCandidateInterview clears the "candidate_interview" edge to the CandidateInterview entity.
func (au *AttachmentUpdate) ClearCandidateInterview() *AttachmentUpdate {
	au.mutation.ClearCandidateInterview()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttachmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttachmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttachmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttachmentUpdate) check() error {
	if v, ok := au.mutation.DocumentName(); ok {
		if err := attachment.DocumentNameValidator(v); err != nil {
			return &ValidationError{Name: "document_name", err: fmt.Errorf(`ent: validator failed for field "Attachment.document_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.RelationType(); ok {
		if err := attachment.RelationTypeValidator(v); err != nil {
			return &ValidationError{Name: "relation_type", err: fmt.Errorf(`ent: validator failed for field "Attachment.relation_type": %w`, err)}
		}
	}
	return nil
}

func (au *AttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attachment.Table,
			Columns: attachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: attachment.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(attachment.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(attachment.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(attachment.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(attachment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.DocumentID(); ok {
		_spec.SetField(attachment.FieldDocumentID, field.TypeUUID, value)
	}
	if value, ok := au.mutation.DocumentName(); ok {
		_spec.SetField(attachment.FieldDocumentName, field.TypeString, value)
	}
	if value, ok := au.mutation.RelationType(); ok {
		_spec.SetField(attachment.FieldRelationType, field.TypeEnum, value)
	}
	if au.mutation.CandidateJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateJobTable,
			Columns: []string{attachment.CandidateJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CandidateJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateJobTable,
			Columns: []string{attachment.CandidateJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CandidateJobFeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateJobFeedbackTable,
			Columns: []string{attachment.CandidateJobFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejobfeedback.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CandidateJobFeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateJobFeedbackTable,
			Columns: []string{attachment.CandidateJobFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejobfeedback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CandidateInterviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateInterviewTable,
			Columns: []string{attachment.CandidateInterviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CandidateInterviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateInterviewTable,
			Columns: []string{attachment.CandidateInterviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AttachmentUpdateOne is the builder for updating a single Attachment entity.
type AttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttachmentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AttachmentUpdateOne) SetUpdatedAt(t time.Time) *AttachmentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableUpdatedAt(t *time.Time) *AttachmentUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AttachmentUpdateOne) ClearUpdatedAt() *AttachmentUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AttachmentUpdateOne) SetDeletedAt(t time.Time) *AttachmentUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableDeletedAt(t *time.Time) *AttachmentUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AttachmentUpdateOne) ClearDeletedAt() *AttachmentUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetDocumentID sets the "document_id" field.
func (auo *AttachmentUpdateOne) SetDocumentID(u uuid.UUID) *AttachmentUpdateOne {
	auo.mutation.SetDocumentID(u)
	return auo
}

// SetDocumentName sets the "document_name" field.
func (auo *AttachmentUpdateOne) SetDocumentName(s string) *AttachmentUpdateOne {
	auo.mutation.SetDocumentName(s)
	return auo
}

// SetRelationType sets the "relation_type" field.
func (auo *AttachmentUpdateOne) SetRelationType(at attachment.RelationType) *AttachmentUpdateOne {
	auo.mutation.SetRelationType(at)
	return auo
}

// SetRelationID sets the "relation_id" field.
func (auo *AttachmentUpdateOne) SetRelationID(u uuid.UUID) *AttachmentUpdateOne {
	auo.mutation.SetRelationID(u)
	return auo
}

// SetNillableRelationID sets the "relation_id" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableRelationID(u *uuid.UUID) *AttachmentUpdateOne {
	if u != nil {
		auo.SetRelationID(*u)
	}
	return auo
}

// ClearRelationID clears the value of the "relation_id" field.
func (auo *AttachmentUpdateOne) ClearRelationID() *AttachmentUpdateOne {
	auo.mutation.ClearRelationID()
	return auo
}

// SetCandidateJobID sets the "candidate_job" edge to the CandidateJob entity by ID.
func (auo *AttachmentUpdateOne) SetCandidateJobID(id uuid.UUID) *AttachmentUpdateOne {
	auo.mutation.SetCandidateJobID(id)
	return auo
}

// SetNillableCandidateJobID sets the "candidate_job" edge to the CandidateJob entity by ID if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableCandidateJobID(id *uuid.UUID) *AttachmentUpdateOne {
	if id != nil {
		auo = auo.SetCandidateJobID(*id)
	}
	return auo
}

// SetCandidateJob sets the "candidate_job" edge to the CandidateJob entity.
func (auo *AttachmentUpdateOne) SetCandidateJob(c *CandidateJob) *AttachmentUpdateOne {
	return auo.SetCandidateJobID(c.ID)
}

// SetCandidateJobFeedbackID sets the "candidate_job_feedback" edge to the CandidateJobFeedback entity by ID.
func (auo *AttachmentUpdateOne) SetCandidateJobFeedbackID(id uuid.UUID) *AttachmentUpdateOne {
	auo.mutation.SetCandidateJobFeedbackID(id)
	return auo
}

// SetNillableCandidateJobFeedbackID sets the "candidate_job_feedback" edge to the CandidateJobFeedback entity by ID if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableCandidateJobFeedbackID(id *uuid.UUID) *AttachmentUpdateOne {
	if id != nil {
		auo = auo.SetCandidateJobFeedbackID(*id)
	}
	return auo
}

// SetCandidateJobFeedback sets the "candidate_job_feedback" edge to the CandidateJobFeedback entity.
func (auo *AttachmentUpdateOne) SetCandidateJobFeedback(c *CandidateJobFeedback) *AttachmentUpdateOne {
	return auo.SetCandidateJobFeedbackID(c.ID)
}

// SetCandidateInterviewID sets the "candidate_interview" edge to the CandidateInterview entity by ID.
func (auo *AttachmentUpdateOne) SetCandidateInterviewID(id uuid.UUID) *AttachmentUpdateOne {
	auo.mutation.SetCandidateInterviewID(id)
	return auo
}

// SetNillableCandidateInterviewID sets the "candidate_interview" edge to the CandidateInterview entity by ID if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableCandidateInterviewID(id *uuid.UUID) *AttachmentUpdateOne {
	if id != nil {
		auo = auo.SetCandidateInterviewID(*id)
	}
	return auo
}

// SetCandidateInterview sets the "candidate_interview" edge to the CandidateInterview entity.
func (auo *AttachmentUpdateOne) SetCandidateInterview(c *CandidateInterview) *AttachmentUpdateOne {
	return auo.SetCandidateInterviewID(c.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (auo *AttachmentUpdateOne) Mutation() *AttachmentMutation {
	return auo.mutation
}

// ClearCandidateJob clears the "candidate_job" edge to the CandidateJob entity.
func (auo *AttachmentUpdateOne) ClearCandidateJob() *AttachmentUpdateOne {
	auo.mutation.ClearCandidateJob()
	return auo
}

// ClearCandidateJobFeedback clears the "candidate_job_feedback" edge to the CandidateJobFeedback entity.
func (auo *AttachmentUpdateOne) ClearCandidateJobFeedback() *AttachmentUpdateOne {
	auo.mutation.ClearCandidateJobFeedback()
	return auo
}

// ClearCandidateInterview clears the "candidate_interview" edge to the CandidateInterview entity.
func (auo *AttachmentUpdateOne) ClearCandidateInterview() *AttachmentUpdateOne {
	auo.mutation.ClearCandidateInterview()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttachmentUpdateOne) Select(field string, fields ...string) *AttachmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attachment entity.
func (auo *AttachmentUpdateOne) Save(ctx context.Context) (*Attachment, error) {
	var (
		err  error
		node *Attachment
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Attachment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AttachmentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttachmentUpdateOne) SaveX(ctx context.Context) *Attachment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttachmentUpdateOne) check() error {
	if v, ok := auo.mutation.DocumentName(); ok {
		if err := attachment.DocumentNameValidator(v); err != nil {
			return &ValidationError{Name: "document_name", err: fmt.Errorf(`ent: validator failed for field "Attachment.document_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.RelationType(); ok {
		if err := attachment.RelationTypeValidator(v); err != nil {
			return &ValidationError{Name: "relation_type", err: fmt.Errorf(`ent: validator failed for field "Attachment.relation_type": %w`, err)}
		}
	}
	return nil
}

func (auo *AttachmentUpdateOne) sqlSave(ctx context.Context) (_node *Attachment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attachment.Table,
			Columns: attachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: attachment.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attachment.FieldID)
		for _, f := range fields {
			if !attachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(attachment.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(attachment.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(attachment.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(attachment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.DocumentID(); ok {
		_spec.SetField(attachment.FieldDocumentID, field.TypeUUID, value)
	}
	if value, ok := auo.mutation.DocumentName(); ok {
		_spec.SetField(attachment.FieldDocumentName, field.TypeString, value)
	}
	if value, ok := auo.mutation.RelationType(); ok {
		_spec.SetField(attachment.FieldRelationType, field.TypeEnum, value)
	}
	if auo.mutation.CandidateJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateJobTable,
			Columns: []string{attachment.CandidateJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CandidateJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateJobTable,
			Columns: []string{attachment.CandidateJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CandidateJobFeedbackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateJobFeedbackTable,
			Columns: []string{attachment.CandidateJobFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejobfeedback.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CandidateJobFeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateJobFeedbackTable,
			Columns: []string{attachment.CandidateJobFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidatejobfeedback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CandidateInterviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateInterviewTable,
			Columns: []string{attachment.CandidateInterviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterview.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CandidateInterviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.CandidateInterviewTable,
			Columns: []string{attachment.CandidateInterviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: candidateinterview.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Attachment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
