// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"trec/ent/candidateinterview"
	"trec/ent/candidatejob"
	"trec/ent/user"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CandidateInterview is the model entity for the CandidateInterview schema.
type CandidateInterview struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CandidateJobStatus holds the value of the "candidate_job_status" field.
	CandidateJobStatus candidateinterview.CandidateJobStatus `json:"candidate_job_status,omitempty"`
	// CandidateJobID holds the value of the "candidate_job_id" field.
	CandidateJobID uuid.UUID `json:"candidate_job_id,omitempty"`
	// InterviewDate holds the value of the "interview_date" field.
	InterviewDate time.Time `json:"interview_date,omitempty"`
	// StartFrom holds the value of the "start_from" field.
	StartFrom time.Time `json:"start_from,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status candidateinterview.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CandidateInterviewQuery when eager-loading is set.
	Edges CandidateInterviewEdges `json:"edges"`
}

// CandidateInterviewEdges holds the relations/edges for other nodes in the graph.
type CandidateInterviewEdges struct {
	// CandidateJobEdge holds the value of the candidate_job_edge edge.
	CandidateJobEdge *CandidateJob `json:"candidate_job_edge,omitempty"`
	// AttachmentEdges holds the value of the attachment_edges edge.
	AttachmentEdges []*Attachment `json:"attachment_edges,omitempty"`
	// InterviewerEdges holds the value of the interviewer_edges edge.
	InterviewerEdges []*User `json:"interviewer_edges,omitempty"`
	// CreatedByEdge holds the value of the created_by_edge edge.
	CreatedByEdge *User `json:"created_by_edge,omitempty"`
	// UserInterviewers holds the value of the user_interviewers edge.
	UserInterviewers []*CandidateInterviewer `json:"user_interviewers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedAttachmentEdges  map[string][]*Attachment
	namedInterviewerEdges map[string][]*User
	namedUserInterviewers map[string][]*CandidateInterviewer
}

// CandidateJobEdgeOrErr returns the CandidateJobEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateInterviewEdges) CandidateJobEdgeOrErr() (*CandidateJob, error) {
	if e.loadedTypes[0] {
		if e.CandidateJobEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: candidatejob.Label}
		}
		return e.CandidateJobEdge, nil
	}
	return nil, &NotLoadedError{edge: "candidate_job_edge"}
}

// AttachmentEdgesOrErr returns the AttachmentEdges value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateInterviewEdges) AttachmentEdgesOrErr() ([]*Attachment, error) {
	if e.loadedTypes[1] {
		return e.AttachmentEdges, nil
	}
	return nil, &NotLoadedError{edge: "attachment_edges"}
}

// InterviewerEdgesOrErr returns the InterviewerEdges value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateInterviewEdges) InterviewerEdgesOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.InterviewerEdges, nil
	}
	return nil, &NotLoadedError{edge: "interviewer_edges"}
}

// CreatedByEdgeOrErr returns the CreatedByEdge value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CandidateInterviewEdges) CreatedByEdgeOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.CreatedByEdge == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedByEdge, nil
	}
	return nil, &NotLoadedError{edge: "created_by_edge"}
}

// UserInterviewersOrErr returns the UserInterviewers value or an error if the edge
// was not loaded in eager-loading.
func (e CandidateInterviewEdges) UserInterviewersOrErr() ([]*CandidateInterviewer, error) {
	if e.loadedTypes[4] {
		return e.UserInterviewers, nil
	}
	return nil, &NotLoadedError{edge: "user_interviewers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CandidateInterview) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case candidateinterview.FieldTitle, candidateinterview.FieldCandidateJobStatus, candidateinterview.FieldDescription, candidateinterview.FieldStatus:
			values[i] = new(sql.NullString)
		case candidateinterview.FieldCreatedAt, candidateinterview.FieldUpdatedAt, candidateinterview.FieldDeletedAt, candidateinterview.FieldInterviewDate, candidateinterview.FieldStartFrom, candidateinterview.FieldEndAt:
			values[i] = new(sql.NullTime)
		case candidateinterview.FieldID, candidateinterview.FieldCandidateJobID, candidateinterview.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CandidateInterview", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CandidateInterview fields.
func (ci *CandidateInterview) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case candidateinterview.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ci.ID = *value
			}
		case candidateinterview.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		case candidateinterview.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ci.UpdatedAt = value.Time
			}
		case candidateinterview.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ci.DeletedAt = value.Time
			}
		case candidateinterview.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ci.Title = value.String
			}
		case candidateinterview.FieldCandidateJobStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_job_status", values[i])
			} else if value.Valid {
				ci.CandidateJobStatus = candidateinterview.CandidateJobStatus(value.String)
			}
		case candidateinterview.FieldCandidateJobID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_job_id", values[i])
			} else if value != nil {
				ci.CandidateJobID = *value
			}
		case candidateinterview.FieldInterviewDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field interview_date", values[i])
			} else if value.Valid {
				ci.InterviewDate = value.Time
			}
		case candidateinterview.FieldStartFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_from", values[i])
			} else if value.Valid {
				ci.StartFrom = value.Time
			}
		case candidateinterview.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				ci.EndAt = value.Time
			}
		case candidateinterview.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				ci.CreatedBy = *value
			}
		case candidateinterview.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ci.Description = value.String
			}
		case candidateinterview.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ci.Status = candidateinterview.Status(value.String)
			}
		}
	}
	return nil
}

// QueryCandidateJobEdge queries the "candidate_job_edge" edge of the CandidateInterview entity.
func (ci *CandidateInterview) QueryCandidateJobEdge() *CandidateJobQuery {
	return (&CandidateInterviewClient{config: ci.config}).QueryCandidateJobEdge(ci)
}

// QueryAttachmentEdges queries the "attachment_edges" edge of the CandidateInterview entity.
func (ci *CandidateInterview) QueryAttachmentEdges() *AttachmentQuery {
	return (&CandidateInterviewClient{config: ci.config}).QueryAttachmentEdges(ci)
}

// QueryInterviewerEdges queries the "interviewer_edges" edge of the CandidateInterview entity.
func (ci *CandidateInterview) QueryInterviewerEdges() *UserQuery {
	return (&CandidateInterviewClient{config: ci.config}).QueryInterviewerEdges(ci)
}

// QueryCreatedByEdge queries the "created_by_edge" edge of the CandidateInterview entity.
func (ci *CandidateInterview) QueryCreatedByEdge() *UserQuery {
	return (&CandidateInterviewClient{config: ci.config}).QueryCreatedByEdge(ci)
}

// QueryUserInterviewers queries the "user_interviewers" edge of the CandidateInterview entity.
func (ci *CandidateInterview) QueryUserInterviewers() *CandidateInterviewerQuery {
	return (&CandidateInterviewClient{config: ci.config}).QueryUserInterviewers(ci)
}

// Update returns a builder for updating this CandidateInterview.
// Note that you need to call CandidateInterview.Unwrap() before calling this method if this CandidateInterview
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CandidateInterview) Update() *CandidateInterviewUpdateOne {
	return (&CandidateInterviewClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the CandidateInterview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CandidateInterview) Unwrap() *CandidateInterview {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CandidateInterview is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CandidateInterview) String() string {
	var builder strings.Builder
	builder.WriteString("CandidateInterview(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ci.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ci.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ci.Title)
	builder.WriteString(", ")
	builder.WriteString("candidate_job_status=")
	builder.WriteString(fmt.Sprintf("%v", ci.CandidateJobStatus))
	builder.WriteString(", ")
	builder.WriteString("candidate_job_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.CandidateJobID))
	builder.WriteString(", ")
	builder.WriteString("interview_date=")
	builder.WriteString(ci.InterviewDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_from=")
	builder.WriteString(ci.StartFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(ci.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ci.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ci.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ci.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAttachmentEdges returns the AttachmentEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ci *CandidateInterview) NamedAttachmentEdges(name string) ([]*Attachment, error) {
	if ci.Edges.namedAttachmentEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ci.Edges.namedAttachmentEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ci *CandidateInterview) appendNamedAttachmentEdges(name string, edges ...*Attachment) {
	if ci.Edges.namedAttachmentEdges == nil {
		ci.Edges.namedAttachmentEdges = make(map[string][]*Attachment)
	}
	if len(edges) == 0 {
		ci.Edges.namedAttachmentEdges[name] = []*Attachment{}
	} else {
		ci.Edges.namedAttachmentEdges[name] = append(ci.Edges.namedAttachmentEdges[name], edges...)
	}
}

// NamedInterviewerEdges returns the InterviewerEdges named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ci *CandidateInterview) NamedInterviewerEdges(name string) ([]*User, error) {
	if ci.Edges.namedInterviewerEdges == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ci.Edges.namedInterviewerEdges[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ci *CandidateInterview) appendNamedInterviewerEdges(name string, edges ...*User) {
	if ci.Edges.namedInterviewerEdges == nil {
		ci.Edges.namedInterviewerEdges = make(map[string][]*User)
	}
	if len(edges) == 0 {
		ci.Edges.namedInterviewerEdges[name] = []*User{}
	} else {
		ci.Edges.namedInterviewerEdges[name] = append(ci.Edges.namedInterviewerEdges[name], edges...)
	}
}

// NamedUserInterviewers returns the UserInterviewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ci *CandidateInterview) NamedUserInterviewers(name string) ([]*CandidateInterviewer, error) {
	if ci.Edges.namedUserInterviewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ci.Edges.namedUserInterviewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ci *CandidateInterview) appendNamedUserInterviewers(name string, edges ...*CandidateInterviewer) {
	if ci.Edges.namedUserInterviewers == nil {
		ci.Edges.namedUserInterviewers = make(map[string][]*CandidateInterviewer)
	}
	if len(edges) == 0 {
		ci.Edges.namedUserInterviewers[name] = []*CandidateInterviewer{}
	} else {
		ci.Edges.namedUserInterviewers[name] = append(ci.Edges.namedUserInterviewers[name], edges...)
	}
}

// CandidateInterviews is a parsable slice of CandidateInterview.
type CandidateInterviews []*CandidateInterview

func (ci CandidateInterviews) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}
