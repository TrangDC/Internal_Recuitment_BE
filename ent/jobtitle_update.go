// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"trec/ent/jobtitle"
	"trec/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobTitleUpdate is the builder for updating JobTitle entities.
type JobTitleUpdate struct {
	config
	hooks    []Hook
	mutation *JobTitleMutation
}

// Where appends a list predicates to the JobTitleUpdate builder.
func (jtu *JobTitleUpdate) Where(ps ...predicate.JobTitle) *JobTitleUpdate {
	jtu.mutation.Where(ps...)
	return jtu
}

// SetCode sets the "code" field.
func (jtu *JobTitleUpdate) SetCode(s string) *JobTitleUpdate {
	jtu.mutation.SetCode(s)
	return jtu
}

// SetName sets the "name" field.
func (jtu *JobTitleUpdate) SetName(s string) *JobTitleUpdate {
	jtu.mutation.SetName(s)
	return jtu
}

// SetDescription sets the "description" field.
func (jtu *JobTitleUpdate) SetDescription(s string) *JobTitleUpdate {
	jtu.mutation.SetDescription(s)
	return jtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jtu *JobTitleUpdate) SetNillableDescription(s *string) *JobTitleUpdate {
	if s != nil {
		jtu.SetDescription(*s)
	}
	return jtu
}

// ClearDescription clears the value of the "description" field.
func (jtu *JobTitleUpdate) ClearDescription() *JobTitleUpdate {
	jtu.mutation.ClearDescription()
	return jtu
}

// SetSpecification sets the "specification" field.
func (jtu *JobTitleUpdate) SetSpecification(s string) *JobTitleUpdate {
	jtu.mutation.SetSpecification(s)
	return jtu
}

// SetNillableSpecification sets the "specification" field if the given value is not nil.
func (jtu *JobTitleUpdate) SetNillableSpecification(s *string) *JobTitleUpdate {
	if s != nil {
		jtu.SetSpecification(*s)
	}
	return jtu
}

// ClearSpecification clears the value of the "specification" field.
func (jtu *JobTitleUpdate) ClearSpecification() *JobTitleUpdate {
	jtu.mutation.ClearSpecification()
	return jtu
}

// SetUpdatedAt sets the "updated_at" field.
func (jtu *JobTitleUpdate) SetUpdatedAt(t time.Time) *JobTitleUpdate {
	jtu.mutation.SetUpdatedAt(t)
	return jtu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jtu *JobTitleUpdate) SetNillableUpdatedAt(t *time.Time) *JobTitleUpdate {
	if t != nil {
		jtu.SetUpdatedAt(*t)
	}
	return jtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jtu *JobTitleUpdate) ClearUpdatedAt() *JobTitleUpdate {
	jtu.mutation.ClearUpdatedAt()
	return jtu
}

// SetDeletedAt sets the "deleted_at" field.
func (jtu *JobTitleUpdate) SetDeletedAt(t time.Time) *JobTitleUpdate {
	jtu.mutation.SetDeletedAt(t)
	return jtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jtu *JobTitleUpdate) SetNillableDeletedAt(t *time.Time) *JobTitleUpdate {
	if t != nil {
		jtu.SetDeletedAt(*t)
	}
	return jtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jtu *JobTitleUpdate) ClearDeletedAt() *JobTitleUpdate {
	jtu.mutation.ClearDeletedAt()
	return jtu
}

// Mutation returns the JobTitleMutation object of the builder.
func (jtu *JobTitleUpdate) Mutation() *JobTitleMutation {
	return jtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jtu *JobTitleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(jtu.hooks) == 0 {
		if err = jtu.check(); err != nil {
			return 0, err
		}
		affected, err = jtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobTitleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jtu.check(); err != nil {
				return 0, err
			}
			jtu.mutation = mutation
			affected, err = jtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(jtu.hooks) - 1; i >= 0; i-- {
			if jtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (jtu *JobTitleUpdate) SaveX(ctx context.Context) int {
	affected, err := jtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jtu *JobTitleUpdate) Exec(ctx context.Context) error {
	_, err := jtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtu *JobTitleUpdate) ExecX(ctx context.Context) {
	if err := jtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jtu *JobTitleUpdate) check() error {
	if v, ok := jtu.mutation.Code(); ok {
		if err := jobtitle.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "JobTitle.code": %w`, err)}
		}
	}
	if v, ok := jtu.mutation.Name(); ok {
		if err := jobtitle.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "JobTitle.name": %w`, err)}
		}
	}
	if v, ok := jtu.mutation.Description(); ok {
		if err := jobtitle.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "JobTitle.description": %w`, err)}
		}
	}
	if v, ok := jtu.mutation.Specification(); ok {
		if err := jobtitle.SpecificationValidator(v); err != nil {
			return &ValidationError{Name: "specification", err: fmt.Errorf(`ent: validator failed for field "JobTitle.specification": %w`, err)}
		}
	}
	return nil
}

func (jtu *JobTitleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobtitle.Table,
			Columns: jobtitle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: jobtitle.FieldID,
			},
		},
	}
	if ps := jtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jtu.mutation.Code(); ok {
		_spec.SetField(jobtitle.FieldCode, field.TypeString, value)
	}
	if value, ok := jtu.mutation.Name(); ok {
		_spec.SetField(jobtitle.FieldName, field.TypeString, value)
	}
	if value, ok := jtu.mutation.Description(); ok {
		_spec.SetField(jobtitle.FieldDescription, field.TypeString, value)
	}
	if jtu.mutation.DescriptionCleared() {
		_spec.ClearField(jobtitle.FieldDescription, field.TypeString)
	}
	if value, ok := jtu.mutation.Specification(); ok {
		_spec.SetField(jobtitle.FieldSpecification, field.TypeString, value)
	}
	if jtu.mutation.SpecificationCleared() {
		_spec.ClearField(jobtitle.FieldSpecification, field.TypeString)
	}
	if value, ok := jtu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtitle.FieldUpdatedAt, field.TypeTime, value)
	}
	if jtu.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobtitle.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := jtu.mutation.DeletedAt(); ok {
		_spec.SetField(jobtitle.FieldDeletedAt, field.TypeTime, value)
	}
	if jtu.mutation.DeletedAtCleared() {
		_spec.ClearField(jobtitle.FieldDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtitle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// JobTitleUpdateOne is the builder for updating a single JobTitle entity.
type JobTitleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobTitleMutation
}

// SetCode sets the "code" field.
func (jtuo *JobTitleUpdateOne) SetCode(s string) *JobTitleUpdateOne {
	jtuo.mutation.SetCode(s)
	return jtuo
}

// SetName sets the "name" field.
func (jtuo *JobTitleUpdateOne) SetName(s string) *JobTitleUpdateOne {
	jtuo.mutation.SetName(s)
	return jtuo
}

// SetDescription sets the "description" field.
func (jtuo *JobTitleUpdateOne) SetDescription(s string) *JobTitleUpdateOne {
	jtuo.mutation.SetDescription(s)
	return jtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jtuo *JobTitleUpdateOne) SetNillableDescription(s *string) *JobTitleUpdateOne {
	if s != nil {
		jtuo.SetDescription(*s)
	}
	return jtuo
}

// ClearDescription clears the value of the "description" field.
func (jtuo *JobTitleUpdateOne) ClearDescription() *JobTitleUpdateOne {
	jtuo.mutation.ClearDescription()
	return jtuo
}

// SetSpecification sets the "specification" field.
func (jtuo *JobTitleUpdateOne) SetSpecification(s string) *JobTitleUpdateOne {
	jtuo.mutation.SetSpecification(s)
	return jtuo
}

// SetNillableSpecification sets the "specification" field if the given value is not nil.
func (jtuo *JobTitleUpdateOne) SetNillableSpecification(s *string) *JobTitleUpdateOne {
	if s != nil {
		jtuo.SetSpecification(*s)
	}
	return jtuo
}

// ClearSpecification clears the value of the "specification" field.
func (jtuo *JobTitleUpdateOne) ClearSpecification() *JobTitleUpdateOne {
	jtuo.mutation.ClearSpecification()
	return jtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (jtuo *JobTitleUpdateOne) SetUpdatedAt(t time.Time) *JobTitleUpdateOne {
	jtuo.mutation.SetUpdatedAt(t)
	return jtuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jtuo *JobTitleUpdateOne) SetNillableUpdatedAt(t *time.Time) *JobTitleUpdateOne {
	if t != nil {
		jtuo.SetUpdatedAt(*t)
	}
	return jtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (jtuo *JobTitleUpdateOne) ClearUpdatedAt() *JobTitleUpdateOne {
	jtuo.mutation.ClearUpdatedAt()
	return jtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (jtuo *JobTitleUpdateOne) SetDeletedAt(t time.Time) *JobTitleUpdateOne {
	jtuo.mutation.SetDeletedAt(t)
	return jtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jtuo *JobTitleUpdateOne) SetNillableDeletedAt(t *time.Time) *JobTitleUpdateOne {
	if t != nil {
		jtuo.SetDeletedAt(*t)
	}
	return jtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (jtuo *JobTitleUpdateOne) ClearDeletedAt() *JobTitleUpdateOne {
	jtuo.mutation.ClearDeletedAt()
	return jtuo
}

// Mutation returns the JobTitleMutation object of the builder.
func (jtuo *JobTitleUpdateOne) Mutation() *JobTitleMutation {
	return jtuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jtuo *JobTitleUpdateOne) Select(field string, fields ...string) *JobTitleUpdateOne {
	jtuo.fields = append([]string{field}, fields...)
	return jtuo
}

// Save executes the query and returns the updated JobTitle entity.
func (jtuo *JobTitleUpdateOne) Save(ctx context.Context) (*JobTitle, error) {
	var (
		err  error
		node *JobTitle
	)
	if len(jtuo.hooks) == 0 {
		if err = jtuo.check(); err != nil {
			return nil, err
		}
		node, err = jtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobTitleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jtuo.check(); err != nil {
				return nil, err
			}
			jtuo.mutation = mutation
			node, err = jtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(jtuo.hooks) - 1; i >= 0; i-- {
			if jtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jtuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, jtuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*JobTitle)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from JobTitleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (jtuo *JobTitleUpdateOne) SaveX(ctx context.Context) *JobTitle {
	node, err := jtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jtuo *JobTitleUpdateOne) Exec(ctx context.Context) error {
	_, err := jtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtuo *JobTitleUpdateOne) ExecX(ctx context.Context) {
	if err := jtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jtuo *JobTitleUpdateOne) check() error {
	if v, ok := jtuo.mutation.Code(); ok {
		if err := jobtitle.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "JobTitle.code": %w`, err)}
		}
	}
	if v, ok := jtuo.mutation.Name(); ok {
		if err := jobtitle.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "JobTitle.name": %w`, err)}
		}
	}
	if v, ok := jtuo.mutation.Description(); ok {
		if err := jobtitle.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "JobTitle.description": %w`, err)}
		}
	}
	if v, ok := jtuo.mutation.Specification(); ok {
		if err := jobtitle.SpecificationValidator(v); err != nil {
			return &ValidationError{Name: "specification", err: fmt.Errorf(`ent: validator failed for field "JobTitle.specification": %w`, err)}
		}
	}
	return nil
}

func (jtuo *JobTitleUpdateOne) sqlSave(ctx context.Context) (_node *JobTitle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jobtitle.Table,
			Columns: jobtitle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: jobtitle.FieldID,
			},
		},
	}
	id, ok := jtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobTitle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobtitle.FieldID)
		for _, f := range fields {
			if !jobtitle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobtitle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jtuo.mutation.Code(); ok {
		_spec.SetField(jobtitle.FieldCode, field.TypeString, value)
	}
	if value, ok := jtuo.mutation.Name(); ok {
		_spec.SetField(jobtitle.FieldName, field.TypeString, value)
	}
	if value, ok := jtuo.mutation.Description(); ok {
		_spec.SetField(jobtitle.FieldDescription, field.TypeString, value)
	}
	if jtuo.mutation.DescriptionCleared() {
		_spec.ClearField(jobtitle.FieldDescription, field.TypeString)
	}
	if value, ok := jtuo.mutation.Specification(); ok {
		_spec.SetField(jobtitle.FieldSpecification, field.TypeString, value)
	}
	if jtuo.mutation.SpecificationCleared() {
		_spec.ClearField(jobtitle.FieldSpecification, field.TypeString)
	}
	if value, ok := jtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtitle.FieldUpdatedAt, field.TypeTime, value)
	}
	if jtuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobtitle.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := jtuo.mutation.DeletedAt(); ok {
		_spec.SetField(jobtitle.FieldDeletedAt, field.TypeTime, value)
	}
	if jtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(jobtitle.FieldDeletedAt, field.TypeTime)
	}
	_node = &JobTitle{config: jtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtitle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
