// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"trec/ent/emailroleattribute"
	"trec/ent/emailtemplate"
	"trec/ent/predicate"
	"trec/ent/role"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EmailRoleAttributeUpdate is the builder for updating EmailRoleAttribute entities.
type EmailRoleAttributeUpdate struct {
	config
	hooks    []Hook
	mutation *EmailRoleAttributeMutation
}

// Where appends a list predicates to the EmailRoleAttributeUpdate builder.
func (erau *EmailRoleAttributeUpdate) Where(ps ...predicate.EmailRoleAttribute) *EmailRoleAttributeUpdate {
	erau.mutation.Where(ps...)
	return erau
}

// SetUpdatedAt sets the "updated_at" field.
func (erau *EmailRoleAttributeUpdate) SetUpdatedAt(t time.Time) *EmailRoleAttributeUpdate {
	erau.mutation.SetUpdatedAt(t)
	return erau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (erau *EmailRoleAttributeUpdate) SetNillableUpdatedAt(t *time.Time) *EmailRoleAttributeUpdate {
	if t != nil {
		erau.SetUpdatedAt(*t)
	}
	return erau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (erau *EmailRoleAttributeUpdate) ClearUpdatedAt() *EmailRoleAttributeUpdate {
	erau.mutation.ClearUpdatedAt()
	return erau
}

// SetDeletedAt sets the "deleted_at" field.
func (erau *EmailRoleAttributeUpdate) SetDeletedAt(t time.Time) *EmailRoleAttributeUpdate {
	erau.mutation.SetDeletedAt(t)
	return erau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (erau *EmailRoleAttributeUpdate) SetNillableDeletedAt(t *time.Time) *EmailRoleAttributeUpdate {
	if t != nil {
		erau.SetDeletedAt(*t)
	}
	return erau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (erau *EmailRoleAttributeUpdate) ClearDeletedAt() *EmailRoleAttributeUpdate {
	erau.mutation.ClearDeletedAt()
	return erau
}

// SetEmailTemplateID sets the "email_template_id" field.
func (erau *EmailRoleAttributeUpdate) SetEmailTemplateID(u uuid.UUID) *EmailRoleAttributeUpdate {
	erau.mutation.SetEmailTemplateID(u)
	return erau
}

// SetRoleID sets the "role_id" field.
func (erau *EmailRoleAttributeUpdate) SetRoleID(u uuid.UUID) *EmailRoleAttributeUpdate {
	erau.mutation.SetRoleID(u)
	return erau
}

// SetEmailTemplateEdgeID sets the "email_template_edge" edge to the EmailTemplate entity by ID.
func (erau *EmailRoleAttributeUpdate) SetEmailTemplateEdgeID(id uuid.UUID) *EmailRoleAttributeUpdate {
	erau.mutation.SetEmailTemplateEdgeID(id)
	return erau
}

// SetEmailTemplateEdge sets the "email_template_edge" edge to the EmailTemplate entity.
func (erau *EmailRoleAttributeUpdate) SetEmailTemplateEdge(e *EmailTemplate) *EmailRoleAttributeUpdate {
	return erau.SetEmailTemplateEdgeID(e.ID)
}

// SetRoleEdgeID sets the "role_edge" edge to the Role entity by ID.
func (erau *EmailRoleAttributeUpdate) SetRoleEdgeID(id uuid.UUID) *EmailRoleAttributeUpdate {
	erau.mutation.SetRoleEdgeID(id)
	return erau
}

// SetRoleEdge sets the "role_edge" edge to the Role entity.
func (erau *EmailRoleAttributeUpdate) SetRoleEdge(r *Role) *EmailRoleAttributeUpdate {
	return erau.SetRoleEdgeID(r.ID)
}

// Mutation returns the EmailRoleAttributeMutation object of the builder.
func (erau *EmailRoleAttributeUpdate) Mutation() *EmailRoleAttributeMutation {
	return erau.mutation
}

// ClearEmailTemplateEdge clears the "email_template_edge" edge to the EmailTemplate entity.
func (erau *EmailRoleAttributeUpdate) ClearEmailTemplateEdge() *EmailRoleAttributeUpdate {
	erau.mutation.ClearEmailTemplateEdge()
	return erau
}

// ClearRoleEdge clears the "role_edge" edge to the Role entity.
func (erau *EmailRoleAttributeUpdate) ClearRoleEdge() *EmailRoleAttributeUpdate {
	erau.mutation.ClearRoleEdge()
	return erau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (erau *EmailRoleAttributeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(erau.hooks) == 0 {
		if err = erau.check(); err != nil {
			return 0, err
		}
		affected, err = erau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailRoleAttributeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = erau.check(); err != nil {
				return 0, err
			}
			erau.mutation = mutation
			affected, err = erau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(erau.hooks) - 1; i >= 0; i-- {
			if erau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = erau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, erau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (erau *EmailRoleAttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := erau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (erau *EmailRoleAttributeUpdate) Exec(ctx context.Context) error {
	_, err := erau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erau *EmailRoleAttributeUpdate) ExecX(ctx context.Context) {
	if err := erau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (erau *EmailRoleAttributeUpdate) check() error {
	if _, ok := erau.mutation.EmailTemplateEdgeID(); erau.mutation.EmailTemplateEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailRoleAttribute.email_template_edge"`)
	}
	if _, ok := erau.mutation.RoleEdgeID(); erau.mutation.RoleEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailRoleAttribute.role_edge"`)
	}
	return nil
}

func (erau *EmailRoleAttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailroleattribute.Table,
			Columns: emailroleattribute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailroleattribute.FieldID,
			},
		},
	}
	if ps := erau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := erau.mutation.UpdatedAt(); ok {
		_spec.SetField(emailroleattribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if erau.mutation.UpdatedAtCleared() {
		_spec.ClearField(emailroleattribute.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := erau.mutation.DeletedAt(); ok {
		_spec.SetField(emailroleattribute.FieldDeletedAt, field.TypeTime, value)
	}
	if erau.mutation.DeletedAtCleared() {
		_spec.ClearField(emailroleattribute.FieldDeletedAt, field.TypeTime)
	}
	if erau.mutation.EmailTemplateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.EmailTemplateEdgeTable,
			Columns: []string{emailroleattribute.EmailTemplateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailtemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := erau.mutation.EmailTemplateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.EmailTemplateEdgeTable,
			Columns: []string{emailroleattribute.EmailTemplateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailtemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if erau.mutation.RoleEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.RoleEdgeTable,
			Columns: []string{emailroleattribute.RoleEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := erau.mutation.RoleEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.RoleEdgeTable,
			Columns: []string{emailroleattribute.RoleEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, erau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailroleattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EmailRoleAttributeUpdateOne is the builder for updating a single EmailRoleAttribute entity.
type EmailRoleAttributeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailRoleAttributeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (erauo *EmailRoleAttributeUpdateOne) SetUpdatedAt(t time.Time) *EmailRoleAttributeUpdateOne {
	erauo.mutation.SetUpdatedAt(t)
	return erauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (erauo *EmailRoleAttributeUpdateOne) SetNillableUpdatedAt(t *time.Time) *EmailRoleAttributeUpdateOne {
	if t != nil {
		erauo.SetUpdatedAt(*t)
	}
	return erauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (erauo *EmailRoleAttributeUpdateOne) ClearUpdatedAt() *EmailRoleAttributeUpdateOne {
	erauo.mutation.ClearUpdatedAt()
	return erauo
}

// SetDeletedAt sets the "deleted_at" field.
func (erauo *EmailRoleAttributeUpdateOne) SetDeletedAt(t time.Time) *EmailRoleAttributeUpdateOne {
	erauo.mutation.SetDeletedAt(t)
	return erauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (erauo *EmailRoleAttributeUpdateOne) SetNillableDeletedAt(t *time.Time) *EmailRoleAttributeUpdateOne {
	if t != nil {
		erauo.SetDeletedAt(*t)
	}
	return erauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (erauo *EmailRoleAttributeUpdateOne) ClearDeletedAt() *EmailRoleAttributeUpdateOne {
	erauo.mutation.ClearDeletedAt()
	return erauo
}

// SetEmailTemplateID sets the "email_template_id" field.
func (erauo *EmailRoleAttributeUpdateOne) SetEmailTemplateID(u uuid.UUID) *EmailRoleAttributeUpdateOne {
	erauo.mutation.SetEmailTemplateID(u)
	return erauo
}

// SetRoleID sets the "role_id" field.
func (erauo *EmailRoleAttributeUpdateOne) SetRoleID(u uuid.UUID) *EmailRoleAttributeUpdateOne {
	erauo.mutation.SetRoleID(u)
	return erauo
}

// SetEmailTemplateEdgeID sets the "email_template_edge" edge to the EmailTemplate entity by ID.
func (erauo *EmailRoleAttributeUpdateOne) SetEmailTemplateEdgeID(id uuid.UUID) *EmailRoleAttributeUpdateOne {
	erauo.mutation.SetEmailTemplateEdgeID(id)
	return erauo
}

// SetEmailTemplateEdge sets the "email_template_edge" edge to the EmailTemplate entity.
func (erauo *EmailRoleAttributeUpdateOne) SetEmailTemplateEdge(e *EmailTemplate) *EmailRoleAttributeUpdateOne {
	return erauo.SetEmailTemplateEdgeID(e.ID)
}

// SetRoleEdgeID sets the "role_edge" edge to the Role entity by ID.
func (erauo *EmailRoleAttributeUpdateOne) SetRoleEdgeID(id uuid.UUID) *EmailRoleAttributeUpdateOne {
	erauo.mutation.SetRoleEdgeID(id)
	return erauo
}

// SetRoleEdge sets the "role_edge" edge to the Role entity.
func (erauo *EmailRoleAttributeUpdateOne) SetRoleEdge(r *Role) *EmailRoleAttributeUpdateOne {
	return erauo.SetRoleEdgeID(r.ID)
}

// Mutation returns the EmailRoleAttributeMutation object of the builder.
func (erauo *EmailRoleAttributeUpdateOne) Mutation() *EmailRoleAttributeMutation {
	return erauo.mutation
}

// ClearEmailTemplateEdge clears the "email_template_edge" edge to the EmailTemplate entity.
func (erauo *EmailRoleAttributeUpdateOne) ClearEmailTemplateEdge() *EmailRoleAttributeUpdateOne {
	erauo.mutation.ClearEmailTemplateEdge()
	return erauo
}

// ClearRoleEdge clears the "role_edge" edge to the Role entity.
func (erauo *EmailRoleAttributeUpdateOne) ClearRoleEdge() *EmailRoleAttributeUpdateOne {
	erauo.mutation.ClearRoleEdge()
	return erauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (erauo *EmailRoleAttributeUpdateOne) Select(field string, fields ...string) *EmailRoleAttributeUpdateOne {
	erauo.fields = append([]string{field}, fields...)
	return erauo
}

// Save executes the query and returns the updated EmailRoleAttribute entity.
func (erauo *EmailRoleAttributeUpdateOne) Save(ctx context.Context) (*EmailRoleAttribute, error) {
	var (
		err  error
		node *EmailRoleAttribute
	)
	if len(erauo.hooks) == 0 {
		if err = erauo.check(); err != nil {
			return nil, err
		}
		node, err = erauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailRoleAttributeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = erauo.check(); err != nil {
				return nil, err
			}
			erauo.mutation = mutation
			node, err = erauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(erauo.hooks) - 1; i >= 0; i-- {
			if erauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = erauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, erauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EmailRoleAttribute)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EmailRoleAttributeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (erauo *EmailRoleAttributeUpdateOne) SaveX(ctx context.Context) *EmailRoleAttribute {
	node, err := erauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (erauo *EmailRoleAttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := erauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erauo *EmailRoleAttributeUpdateOne) ExecX(ctx context.Context) {
	if err := erauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (erauo *EmailRoleAttributeUpdateOne) check() error {
	if _, ok := erauo.mutation.EmailTemplateEdgeID(); erauo.mutation.EmailTemplateEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailRoleAttribute.email_template_edge"`)
	}
	if _, ok := erauo.mutation.RoleEdgeID(); erauo.mutation.RoleEdgeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailRoleAttribute.role_edge"`)
	}
	return nil
}

func (erauo *EmailRoleAttributeUpdateOne) sqlSave(ctx context.Context) (_node *EmailRoleAttribute, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailroleattribute.Table,
			Columns: emailroleattribute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: emailroleattribute.FieldID,
			},
		},
	}
	id, ok := erauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailRoleAttribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := erauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailroleattribute.FieldID)
		for _, f := range fields {
			if !emailroleattribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailroleattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := erauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := erauo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailroleattribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if erauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(emailroleattribute.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := erauo.mutation.DeletedAt(); ok {
		_spec.SetField(emailroleattribute.FieldDeletedAt, field.TypeTime, value)
	}
	if erauo.mutation.DeletedAtCleared() {
		_spec.ClearField(emailroleattribute.FieldDeletedAt, field.TypeTime)
	}
	if erauo.mutation.EmailTemplateEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.EmailTemplateEdgeTable,
			Columns: []string{emailroleattribute.EmailTemplateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailtemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := erauo.mutation.EmailTemplateEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.EmailTemplateEdgeTable,
			Columns: []string{emailroleattribute.EmailTemplateEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailtemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if erauo.mutation.RoleEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.RoleEdgeTable,
			Columns: []string{emailroleattribute.RoleEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := erauo.mutation.RoleEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailroleattribute.RoleEdgeTable,
			Columns: []string{emailroleattribute.RoleEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmailRoleAttribute{config: erauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, erauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailroleattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
