// Code generated by ent, DO NOT EDIT.

package entityskill

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the entityskill type in the database.
	Label = "entity_skill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldEntityID holds the string denoting the entity_id field in the database.
	FieldEntityID = "entity_id"
	// FieldSkillID holds the string denoting the skill_id field in the database.
	FieldSkillID = "skill_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// EdgeSkillEdge holds the string denoting the skill_edge edge name in mutations.
	EdgeSkillEdge = "skill_edge"
	// EdgeHiringJobEdge holds the string denoting the hiring_job_edge edge name in mutations.
	EdgeHiringJobEdge = "hiring_job_edge"
	// EdgeCandidateEdge holds the string denoting the candidate_edge edge name in mutations.
	EdgeCandidateEdge = "candidate_edge"
	// Table holds the table name of the entityskill in the database.
	Table = "entity_skills"
	// SkillEdgeTable is the table that holds the skill_edge relation/edge.
	SkillEdgeTable = "entity_skills"
	// SkillEdgeInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	SkillEdgeInverseTable = "skills"
	// SkillEdgeColumn is the table column denoting the skill_edge relation/edge.
	SkillEdgeColumn = "skill_id"
	// HiringJobEdgeTable is the table that holds the hiring_job_edge relation/edge.
	HiringJobEdgeTable = "entity_skills"
	// HiringJobEdgeInverseTable is the table name for the HiringJob entity.
	// It exists in this package in order to avoid circular dependency with the "hiringjob" package.
	HiringJobEdgeInverseTable = "hiring_jobs"
	// HiringJobEdgeColumn is the table column denoting the hiring_job_edge relation/edge.
	HiringJobEdgeColumn = "entity_id"
	// CandidateEdgeTable is the table that holds the candidate_edge relation/edge.
	CandidateEdgeTable = "entity_skills"
	// CandidateEdgeInverseTable is the table name for the Candidate entity.
	// It exists in this package in order to avoid circular dependency with the "candidate" package.
	CandidateEdgeInverseTable = "candidates"
	// CandidateEdgeColumn is the table column denoting the candidate_edge relation/edge.
	CandidateEdgeColumn = "entity_id"
)

// Columns holds all SQL columns for entityskill fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEntityType,
	FieldEntityID,
	FieldSkillID,
	FieldOrderID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// EntityType defines the type for the "entity_type" enum field.
type EntityType string

// EntityType values.
const (
	EntityTypeCandidate EntityType = "candidate"
	EntityTypeHiringJob EntityType = "hiring_job"
)

func (et EntityType) String() string {
	return string(et)
}

// EntityTypeValidator is a validator for the "entity_type" field enum values. It is called by the builders before save.
func EntityTypeValidator(et EntityType) error {
	switch et {
	case EntityTypeCandidate, EntityTypeHiringJob:
		return nil
	default:
		return fmt.Errorf("entityskill: invalid enum value for entity_type field: %q", et)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e EntityType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *EntityType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = EntityType(str)
	if err := EntityTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid EntityType", str)
	}
	return nil
}
