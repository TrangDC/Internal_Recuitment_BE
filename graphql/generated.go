// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"
	"trec/ent"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Attachment() AttachmentResolver
	AuditTrail() AuditTrailResolver
	Candidate() CandidateResolver
	CandidateInterview() CandidateInterviewResolver
	CandidateJob() CandidateJobResolver
	CandidateJobFeedback() CandidateJobFeedbackResolver
	CandidateJobStep() CandidateJobStepResolver
	HiringJob() HiringJobResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Skill() SkillResolver
	SkillType() SkillTypeResolver
	Team() TeamResolver
	User() UserResolver
}

type DirectiveRoot struct {
	Authorize  func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Validation func(ctx context.Context, obj interface{}, next graphql.Resolver, constraints string) (res interface{}, err error)
}

type ComplexityRoot struct {
	Attachment struct {
		DocumentID   func(childComplexity int) int
		DocumentName func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	AttachmentResponse struct {
		Action   func(childComplexity int) int
		FileName func(childComplexity int) int
		ID       func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	AuditTrail struct {
		ActionType    func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		CreatedInfo   func(childComplexity int) int
		ID            func(childComplexity int) int
		Module        func(childComplexity int) int
		Note          func(childComplexity int) int
		RecordChanges func(childComplexity int) int
		RecordID      func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	AuditTrailEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AuditTrailResponse struct {
		Data func(childComplexity int) int
	}

	AuditTrailResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	AuthenticationToken struct {
		AccessToken  func(childComplexity int) int
		Email        func(childComplexity int) int
		ExpiresAt    func(childComplexity int) int
		RefreshToken func(childComplexity int) int
		TokenType    func(childComplexity int) int
	}

	Base64Response struct {
		Data func(childComplexity int) int
	}

	Candidate struct {
		Attachments      func(childComplexity int) int
		Country          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		Dob              func(childComplexity int) int
		Email            func(childComplexity int) int
		EntitySkillTypes func(childComplexity int) int
		HiringJobTitle   func(childComplexity int) int
		ID               func(childComplexity int) int
		IsAbleToDelete   func(childComplexity int) int
		IsBlacklist      func(childComplexity int) int
		LastApplyDate    func(childComplexity int) int
		Name             func(childComplexity int) int
		Phone            func(childComplexity int) int
		RecruitTime      func(childComplexity int) int
		ReferenceType    func(childComplexity int) int
		ReferenceUID     func(childComplexity int) int
		ReferenceUser    func(childComplexity int) int
		ReferenceValue   func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	CandidateEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CandidateInterview struct {
		CandidateJob   func(childComplexity int) int
		CandidateJobID func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Description    func(childComplexity int) int
		EditAble       func(childComplexity int) int
		Edited         func(childComplexity int) int
		EndAt          func(childComplexity int) int
		ID             func(childComplexity int) int
		InterviewDate  func(childComplexity int) int
		Interviewer    func(childComplexity int) int
		Owner          func(childComplexity int) int
		StartFrom      func(childComplexity int) int
		Status         func(childComplexity int) int
		Title          func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	CandidateInterviewEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CandidateInterviewResponse struct {
		Data func(childComplexity int) int
	}

	CandidateInterviewResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	CandidateInterviewResponseValidate struct {
		Data func(childComplexity int) int
	}

	CandidateInterviewValidate struct {
		CandidateJobInvalidStatus func(childComplexity int) int
		CandidateName             func(childComplexity int) int
		InterviewerInvalid        func(childComplexity int) int
		InvalidSchedule           func(childComplexity int) int
	}

	CandidateJob struct {
		Attachments      func(childComplexity int) int
		Candidate        func(childComplexity int) int
		CandidateID      func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		FailedReason     func(childComplexity int) int
		HiringJob        func(childComplexity int) int
		HiringJobID      func(childComplexity int) int
		ID               func(childComplexity int) int
		InterviewFeature func(childComplexity int) int
		IsAbleToDelete   func(childComplexity int) int
		Owner            func(childComplexity int) int
		Status           func(childComplexity int) int
		Steps            func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	CandidateJobEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CandidateJobFeedback struct {
		Attachments    func(childComplexity int) int
		CandidateJob   func(childComplexity int) int
		CandidateJobID func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		Edited         func(childComplexity int) int
		Feedback       func(childComplexity int) int
		ID             func(childComplexity int) int
		Owner          func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	CandidateJobFeedbackEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CandidateJobFeedbackResponse struct {
		Data func(childComplexity int) int
	}

	CandidateJobFeedbackResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	CandidateJobGroupByInterview struct {
		Applied      func(childComplexity int) int
		ExStaff      func(childComplexity int) int
		Hired        func(childComplexity int) int
		Interviewing func(childComplexity int) int
		Kiv          func(childComplexity int) int
		OfferLost    func(childComplexity int) int
		Offering     func(childComplexity int) int
	}

	CandidateJobGroupByInterviewResponse struct {
		Data func(childComplexity int) int
	}

	CandidateJobGroupByStatus struct {
		Applied      func(childComplexity int) int
		ExStaff      func(childComplexity int) int
		Hired        func(childComplexity int) int
		Interviewing func(childComplexity int) int
		Kiv          func(childComplexity int) int
		OfferLost    func(childComplexity int) int
		Offering     func(childComplexity int) int
	}

	CandidateJobGroupByStatusResponse struct {
		Data       func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	CandidateJobGroupInterviewFeedback struct {
		Feedback  func(childComplexity int) int
		Interview func(childComplexity int) int
	}

	CandidateJobResponse struct {
		Data func(childComplexity int) int
	}

	CandidateJobResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	CandidateJobStep struct {
		CandidateJobID     func(childComplexity int) int
		CandidateJobStatus func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		ID                 func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	CandidateResponse struct {
		Data func(childComplexity int) int
	}

	CandidateResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	CandidateSelection struct {
		Email func(childComplexity int) int
		ID    func(childComplexity int) int
		Name  func(childComplexity int) int
		Phone func(childComplexity int) int
	}

	CandidateSelectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CandidateSelectionResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	EntitySkillRecord struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		OrderID     func(childComplexity int) int
		SkillID     func(childComplexity int) int
	}

	EntitySkillType struct {
		Description  func(childComplexity int) int
		EntitySkills func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		OrderID      func(childComplexity int) int
	}

	HiringJob struct {
		Amount                   func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		Currency                 func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		Description              func(childComplexity int) int
		EntitySkillTypes         func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsAbleToClose            func(childComplexity int) int
		IsAbleToDelete           func(childComplexity int) int
		Location                 func(childComplexity int) int
		Name                     func(childComplexity int) int
		Priority                 func(childComplexity int) int
		SalaryFrom               func(childComplexity int) int
		SalaryTo                 func(childComplexity int) int
		SalaryType               func(childComplexity int) int
		Slug                     func(childComplexity int) int
		Status                   func(childComplexity int) int
		Team                     func(childComplexity int) int
		TotalCandidatesRecruited func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		User                     func(childComplexity int) int
	}

	HiringJobEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HiringJobResponse struct {
		Data func(childComplexity int) int
	}

	HiringJobResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	HiringJobSelection struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	HiringJobSelectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HiringJobSelectionResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	Mutation struct {
		CreateAttachmentSasurl            func(childComplexity int, input ent.AttachmentInput) int
		CreateCandidate                   func(childComplexity int, input ent.NewCandidateInput, note string) int
		CreateCandidateInterview          func(childComplexity int, input ent.NewCandidateInterviewInput, note *string) int
		CreateCandidateInterview4Calendar func(childComplexity int, input ent.NewCandidateInterview4CalendarInput, note *string) int
		CreateCandidateJob                func(childComplexity int, input ent.NewCandidateJobInput, note *string) int
		CreateCandidateJobFeedback        func(childComplexity int, input ent.NewCandidateJobFeedbackInput, note *string) int
		CreateHiringJob                   func(childComplexity int, input ent.NewHiringJobInput, note string) int
		CreateSkill                       func(childComplexity int, input ent.NewSkillInput, note string) int
		CreateSkillType                   func(childComplexity int, input ent.NewSkillTypeInput, note string) int
		CreateTeam                        func(childComplexity int, input ent.NewTeamInput, note string) int
		DeleteCandidate                   func(childComplexity int, id string, note string) int
		DeleteCandidateInterview          func(childComplexity int, id string, note *string) int
		DeleteCandidateJob                func(childComplexity int, id string, note *string) int
		DeleteCandidateJobFeedback        func(childComplexity int, id string, note *string) int
		DeleteHiringJob                   func(childComplexity int, id string, note string) int
		DeleteSkill                       func(childComplexity int, id string, note string) int
		DeleteSkillType                   func(childComplexity int, id string, note string) int
		DeleteTeam                        func(childComplexity int, id string, note string) int
		ImportCandidate                   func(childComplexity int, file graphql.Upload) int
		SetBlackListCandidate             func(childComplexity int, id string, isBlackList bool, note string) int
		UpdateCandidate                   func(childComplexity int, id string, input ent.UpdateCandidateInput, note string) int
		UpdateCandidateInterview          func(childComplexity int, id string, input ent.UpdateCandidateInterviewInput, note *string) int
		UpdateCandidateInterviewSchedule  func(childComplexity int, id string, input ent.UpdateCandidateInterviewScheduleInput) int
		UpdateCandidateInterviewStatus    func(childComplexity int, id string, input ent.UpdateCandidateInterviewStatusInput, note *string) int
		UpdateCandidateJobAttachment      func(childComplexity int, id string, input ent.UpdateCandidateAttachment, note *string) int
		UpdateCandidateJobFeedback        func(childComplexity int, id string, input ent.UpdateCandidateJobFeedbackInput, note *string) int
		UpdateCandidateJobStatus          func(childComplexity int, id string, input ent.UpdateCandidateJobStatus, note *string) int
		UpdateHiringJob                   func(childComplexity int, id string, input ent.UpdateHiringJobInput, note string) int
		UpdateHiringJobStatus             func(childComplexity int, id string, status ent.HiringJobStatus, note string) int
		UpdateSkill                       func(childComplexity int, id string, input ent.UpdateSkillInput, note string) int
		UpdateSkillType                   func(childComplexity int, id string, input ent.UpdateSkillTypeInput, note string) int
		UpdateTeam                        func(childComplexity int, id string, input ent.UpdateTeamInput, note string) int
		UpdateUser                        func(childComplexity int, id string, input ent.UpdateUserInput, note string) int
		UpdateUserStatus                  func(childComplexity int, id string, input ent.UpdateUserStatusInput, note string) int
		ValidateCandidateInterview        func(childComplexity int, input ent.CandidateInterviewValidateInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Pagination struct {
		Page    func(childComplexity int) int
		PerPage func(childComplexity int) int
		Total   func(childComplexity int) int
	}

	Query struct {
		ExportSampleCandidate             func(childComplexity int, lang ent.I18nLanguage) int
		GetAllAuditTrails                 func(childComplexity int, pagination *ent.PaginationInput, filter *ent.AuditTrailFilter, freeWord *ent.AuditTrailFreeWord, orderBy *ent.AuditTrailOrder) int
		GetAllCandidateInterview4Calendar func(childComplexity int, pagination *ent.PaginationInput, filter *ent.CandidateInterviewCalendarFilter, freeWord *ent.CandidateInterviewFreeWord, orderBy *ent.CandidateInterviewOrder) int
		GetAllCandidateInterviews         func(childComplexity int, pagination *ent.PaginationInput, filter ent.CandidateInterviewFilter, freeWord *ent.CandidateInterviewFreeWord, orderBy *ent.CandidateInterviewOrder) int
		GetAllCandidateJobFeedbacks       func(childComplexity int, pagination *ent.PaginationInput, filter ent.CandidateJobFeedbackFilter, freeWord *ent.CandidateJobFeedbackFreeWord, orderBy *ent.CandidateJobFeedbackOrder) int
		GetAllCandidateJobs               func(childComplexity int, pagination *ent.PaginationInput, filter ent.CandidateJobFilter, freeWord *ent.CandidateJobFreeWord, orderBy *ent.CandidateJobOrder) int
		GetAllCandidates                  func(childComplexity int, pagination *ent.PaginationInput, filter *ent.CandidateFilter, freeWord *ent.CandidateFreeWord, orderBy *ent.CandidateOrder) int
		GetAllHiringJobs                  func(childComplexity int, pagination *ent.PaginationInput, filter *ent.HiringJobFilter, freeWord *ent.HiringJobFreeWord, orderBy ent.HiringJobOrderBy) int
		GetAllSkillTypes                  func(childComplexity int, pagination *ent.PaginationInput, filter *ent.SkillTypeFilter, freeWord *ent.SkillTypeFreeWord, orderBy *ent.SkillTypeOrder) int
		GetAllSkills                      func(childComplexity int, pagination *ent.PaginationInput, filter *ent.SkillFilter, freeWord *ent.SkillFreeWord, orderBy *ent.SkillOrder) int
		GetAllTeams                       func(childComplexity int, pagination *ent.PaginationInput, filter *ent.TeamFilter, freeWord *ent.TeamFreeWord, orderBy ent.TeamOrderBy) int
		GetAllUsers                       func(childComplexity int, pagination *ent.PaginationInput, filter *ent.UserFilter, freeWord *ent.UserFreeWord, orderBy *ent.UserOrder) int
		GetAuditTrail                     func(childComplexity int, id string) int
		GetCandidate                      func(childComplexity int, id string) int
		GetCandidateInterview             func(childComplexity int, id string) int
		GetCandidateJob                   func(childComplexity int, id string) int
		GetCandidateJobFeedback           func(childComplexity int, id string) int
		GetCandidateJobGroupByInterview   func(childComplexity int, id string) int
		GetCandidateJobGroupByStatus      func(childComplexity int, pagination *ent.PaginationInput, filter *ent.CandidateJobGroupByStatusFilter, freeWord *ent.CandidateJobGroupByStatusFreeWord, orderBy *ent.CandidateJobByOrder) int
		GetHiringJob                      func(childComplexity int, id string) int
		GetSkill                          func(childComplexity int, id string) int
		GetSkillType                      func(childComplexity int, id string) int
		GetTeam                           func(childComplexity int, id string) int
		GetUser                           func(childComplexity int, id string) int
		SelectionCandidates               func(childComplexity int, pagination *ent.PaginationInput, filter *ent.CandidateFilter, freeWord *ent.CandidateFreeWord, orderBy *ent.CandidateOrder) int
		SelectionHiringJobs               func(childComplexity int, pagination *ent.PaginationInput, filter *ent.HiringJobFilter, freeWord *ent.HiringJobFreeWord, orderBy ent.HiringJobOrderBy) int
		SelectionSkillTypes               func(childComplexity int, pagination *ent.PaginationInput, filter *ent.SkillTypeFilter, freeWord *ent.SkillTypeFreeWord, orderBy *ent.SkillTypeOrder) int
		SelectionSkills                   func(childComplexity int, pagination *ent.PaginationInput, filter *ent.SkillFilter, freeWord *ent.SkillFreeWord, orderBy *ent.SkillOrder) int
		SelectionTeams                    func(childComplexity int, pagination *ent.PaginationInput, filter *ent.TeamFilter, freeWord *ent.TeamFreeWord, orderBy ent.TeamOrderBy) int
		SelectionUsers                    func(childComplexity int, pagination *ent.PaginationInput, filter *ent.UserFilter, freeWord *ent.UserFreeWord, orderBy *ent.UserOrder) int
	}

	Skill struct {
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		SkillType   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	SkillEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SkillResponse struct {
		Data func(childComplexity int) int
	}

	SkillResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	SkillSelection struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	SkillSelectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SkillSelectionResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	SkillType struct {
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	SkillTypeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SkillTypeResponse struct {
		Data func(childComplexity int) int
	}

	SkillTypeResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	SkillTypeSelection struct {
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
		Skills func(childComplexity int) int
	}

	SkillTypeSelectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SkillTypeSelectionResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	Team struct {
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		IsAbleToDelete  func(childComplexity int) int
		Members         func(childComplexity int) int
		Name            func(childComplexity int) int
		OpeningRequests func(childComplexity int) int
		Slug            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	TeamEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TeamResponse struct {
		Data func(childComplexity int) int
	}

	TeamResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	TeamSelection struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	TeamSelectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TeamSelectionResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	User struct {
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Status    func(childComplexity int) int
		Team      func(childComplexity int) int
		WorkEmail func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserResponse struct {
		Data func(childComplexity int) int
	}

	UserResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	UserSelection struct {
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		WorkEmail func(childComplexity int) int
	}

	UserSelectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserSelectionResponseGetAll struct {
		Edges      func(childComplexity int) int
		Pagination func(childComplexity int) int
	}
}

type AttachmentResolver interface {
	ID(ctx context.Context, obj *ent.Attachment) (string, error)

	DocumentID(ctx context.Context, obj *ent.Attachment) (string, error)
}
type AuditTrailResolver interface {
	ID(ctx context.Context, obj *ent.AuditTrail) (string, error)
	CreatedBy(ctx context.Context, obj *ent.AuditTrail) (string, error)
	CreatedInfo(ctx context.Context, obj *ent.AuditTrail) (*ent.User, error)
	RecordID(ctx context.Context, obj *ent.AuditTrail) (string, error)
	Module(ctx context.Context, obj *ent.AuditTrail) (ent.ProjectModule, error)
	ActionType(ctx context.Context, obj *ent.AuditTrail) (ent.AuditTrailAction, error)
}
type CandidateResolver interface {
	ID(ctx context.Context, obj *ent.Candidate) (string, error)

	Status(ctx context.Context, obj *ent.Candidate) (ent.CandidateStatusEnum, error)

	IsAbleToDelete(ctx context.Context, obj *ent.Candidate) (bool, error)
	HiringJobTitle(ctx context.Context, obj *ent.Candidate) (string, error)
	ReferenceType(ctx context.Context, obj *ent.Candidate) (ent.CandidateReferenceType, error)

	ReferenceUID(ctx context.Context, obj *ent.Candidate) (string, error)

	Attachments(ctx context.Context, obj *ent.Candidate) ([]*ent.Attachment, error)
	EntitySkillTypes(ctx context.Context, obj *ent.Candidate) ([]*ent.EntitySkillType, error)
	ReferenceUser(ctx context.Context, obj *ent.Candidate) (*ent.User, error)
}
type CandidateInterviewResolver interface {
	ID(ctx context.Context, obj *ent.CandidateInterview) (string, error)

	CandidateJobID(ctx context.Context, obj *ent.CandidateInterview) (string, error)

	Interviewer(ctx context.Context, obj *ent.CandidateInterview) ([]*ent.User, error)
	CandidateJob(ctx context.Context, obj *ent.CandidateInterview) (*ent.CandidateJob, error)
	EditAble(ctx context.Context, obj *ent.CandidateInterview) (bool, error)
	Owner(ctx context.Context, obj *ent.CandidateInterview) (*ent.User, error)
	Status(ctx context.Context, obj *ent.CandidateInterview) (ent.CandidateInterviewStatus, error)
	Edited(ctx context.Context, obj *ent.CandidateInterview) (bool, error)
}
type CandidateJobResolver interface {
	ID(ctx context.Context, obj *ent.CandidateJob) (string, error)
	CandidateID(ctx context.Context, obj *ent.CandidateJob) (string, error)
	HiringJobID(ctx context.Context, obj *ent.CandidateJob) (string, error)
	Status(ctx context.Context, obj *ent.CandidateJob) (ent.CandidateJobStatus, error)
	Attachments(ctx context.Context, obj *ent.CandidateJob) ([]*ent.Attachment, error)
	Candidate(ctx context.Context, obj *ent.CandidateJob) (*ent.Candidate, error)
	HiringJob(ctx context.Context, obj *ent.CandidateJob) (*ent.HiringJob, error)
	Owner(ctx context.Context, obj *ent.CandidateJob) (*ent.User, error)
	FailedReason(ctx context.Context, obj *ent.CandidateJob) ([]ent.CandidateJobFailedReason, error)
	IsAbleToDelete(ctx context.Context, obj *ent.CandidateJob) (bool, error)
	InterviewFeature(ctx context.Context, obj *ent.CandidateJob) (int, error)
	Steps(ctx context.Context, obj *ent.CandidateJob) ([]*ent.CandidateJobStep, error)
}
type CandidateJobFeedbackResolver interface {
	ID(ctx context.Context, obj *ent.CandidateJobFeedback) (string, error)
	CreatedBy(ctx context.Context, obj *ent.CandidateJobFeedback) (string, error)
	CandidateJobID(ctx context.Context, obj *ent.CandidateJobFeedback) (string, error)
	CandidateJob(ctx context.Context, obj *ent.CandidateJobFeedback) (*ent.CandidateJob, error)
	Owner(ctx context.Context, obj *ent.CandidateJobFeedback) (*ent.User, error)

	Edited(ctx context.Context, obj *ent.CandidateJobFeedback) (bool, error)
	Attachments(ctx context.Context, obj *ent.CandidateJobFeedback) ([]*ent.Attachment, error)
}
type CandidateJobStepResolver interface {
	ID(ctx context.Context, obj *ent.CandidateJobStep) (string, error)
	CandidateJobID(ctx context.Context, obj *ent.CandidateJobStep) (string, error)
	CandidateJobStatus(ctx context.Context, obj *ent.CandidateJobStep) (ent.CandidateJobStatus, error)
}
type HiringJobResolver interface {
	ID(ctx context.Context, obj *ent.HiringJob) (string, error)

	Location(ctx context.Context, obj *ent.HiringJob) (ent.LocationEnum, error)
	SalaryType(ctx context.Context, obj *ent.HiringJob) (ent.SalaryTypeEnum, error)

	Currency(ctx context.Context, obj *ent.HiringJob) (ent.CurrencyEnum, error)
	Team(ctx context.Context, obj *ent.HiringJob) (*ent.Team, error)
	User(ctx context.Context, obj *ent.HiringJob) (*ent.User, error)
	Status(ctx context.Context, obj *ent.HiringJob) (ent.HiringJobStatus, error)
	TotalCandidatesRecruited(ctx context.Context, obj *ent.HiringJob) (int, error)
	IsAbleToDelete(ctx context.Context, obj *ent.HiringJob) (bool, error)
	IsAbleToClose(ctx context.Context, obj *ent.HiringJob) (bool, error)

	EntitySkillTypes(ctx context.Context, obj *ent.HiringJob) ([]*ent.EntitySkillType, error)
}
type MutationResolver interface {
	CreateAttachmentSasurl(ctx context.Context, input ent.AttachmentInput) (*ent.AttachmentResponse, error)
	UpdateUser(ctx context.Context, id string, input ent.UpdateUserInput, note string) (*ent.UserResponse, error)
	UpdateUserStatus(ctx context.Context, id string, input ent.UpdateUserStatusInput, note string) (*ent.UserResponse, error)
	CreateTeam(ctx context.Context, input ent.NewTeamInput, note string) (*ent.TeamResponse, error)
	UpdateTeam(ctx context.Context, id string, input ent.UpdateTeamInput, note string) (*ent.TeamResponse, error)
	DeleteTeam(ctx context.Context, id string, note string) (bool, error)
	CreateHiringJob(ctx context.Context, input ent.NewHiringJobInput, note string) (*ent.HiringJobResponse, error)
	UpdateHiringJob(ctx context.Context, id string, input ent.UpdateHiringJobInput, note string) (*ent.HiringJobResponse, error)
	DeleteHiringJob(ctx context.Context, id string, note string) (bool, error)
	UpdateHiringJobStatus(ctx context.Context, id string, status ent.HiringJobStatus, note string) (*ent.HiringJobResponse, error)
	CreateCandidate(ctx context.Context, input ent.NewCandidateInput, note string) (*ent.CandidateResponse, error)
	UpdateCandidate(ctx context.Context, id string, input ent.UpdateCandidateInput, note string) (*ent.CandidateResponse, error)
	DeleteCandidate(ctx context.Context, id string, note string) (bool, error)
	SetBlackListCandidate(ctx context.Context, id string, isBlackList bool, note string) (bool, error)
	CreateCandidateJob(ctx context.Context, input ent.NewCandidateJobInput, note *string) (*ent.CandidateJobResponse, error)
	UpdateCandidateJobAttachment(ctx context.Context, id string, input ent.UpdateCandidateAttachment, note *string) (*ent.CandidateJobResponse, error)
	DeleteCandidateJob(ctx context.Context, id string, note *string) (bool, error)
	UpdateCandidateJobStatus(ctx context.Context, id string, input ent.UpdateCandidateJobStatus, note *string) (*ent.CandidateJobResponse, error)
	CreateCandidateJobFeedback(ctx context.Context, input ent.NewCandidateJobFeedbackInput, note *string) (*ent.CandidateJobFeedbackResponse, error)
	UpdateCandidateJobFeedback(ctx context.Context, id string, input ent.UpdateCandidateJobFeedbackInput, note *string) (*ent.CandidateJobFeedbackResponse, error)
	DeleteCandidateJobFeedback(ctx context.Context, id string, note *string) (bool, error)
	CreateCandidateInterview(ctx context.Context, input ent.NewCandidateInterviewInput, note *string) (*ent.CandidateInterviewResponse, error)
	UpdateCandidateInterview(ctx context.Context, id string, input ent.UpdateCandidateInterviewInput, note *string) (*ent.CandidateInterviewResponse, error)
	UpdateCandidateInterviewSchedule(ctx context.Context, id string, input ent.UpdateCandidateInterviewScheduleInput) (*ent.CandidateInterviewResponse, error)
	DeleteCandidateInterview(ctx context.Context, id string, note *string) (bool, error)
	CreateCandidateInterview4Calendar(ctx context.Context, input ent.NewCandidateInterview4CalendarInput, note *string) (bool, error)
	UpdateCandidateInterviewStatus(ctx context.Context, id string, input ent.UpdateCandidateInterviewStatusInput, note *string) (bool, error)
	ImportCandidate(ctx context.Context, file graphql.Upload) (bool, error)
	CreateSkill(ctx context.Context, input ent.NewSkillInput, note string) (*ent.SkillResponse, error)
	UpdateSkill(ctx context.Context, id string, input ent.UpdateSkillInput, note string) (*ent.SkillResponse, error)
	DeleteSkill(ctx context.Context, id string, note string) (bool, error)
	CreateSkillType(ctx context.Context, input ent.NewSkillTypeInput, note string) (*ent.SkillTypeResponse, error)
	UpdateSkillType(ctx context.Context, id string, input ent.UpdateSkillTypeInput, note string) (*ent.SkillTypeResponse, error)
	DeleteSkillType(ctx context.Context, id string, note string) (bool, error)
	ValidateCandidateInterview(ctx context.Context, input ent.CandidateInterviewValidateInput) (*ent.CandidateInterviewResponseValidate, error)
}
type QueryResolver interface {
	GetTeam(ctx context.Context, id string) (*ent.TeamResponse, error)
	GetAllTeams(ctx context.Context, pagination *ent.PaginationInput, filter *ent.TeamFilter, freeWord *ent.TeamFreeWord, orderBy ent.TeamOrderBy) (*ent.TeamResponseGetAll, error)
	GetUser(ctx context.Context, id string) (*ent.UserResponse, error)
	GetAllUsers(ctx context.Context, pagination *ent.PaginationInput, filter *ent.UserFilter, freeWord *ent.UserFreeWord, orderBy *ent.UserOrder) (*ent.UserResponseGetAll, error)
	GetHiringJob(ctx context.Context, id string) (*ent.HiringJobResponse, error)
	GetAllHiringJobs(ctx context.Context, pagination *ent.PaginationInput, filter *ent.HiringJobFilter, freeWord *ent.HiringJobFreeWord, orderBy ent.HiringJobOrderBy) (*ent.HiringJobResponseGetAll, error)
	GetAuditTrail(ctx context.Context, id string) (*ent.AuditTrailResponse, error)
	GetAllAuditTrails(ctx context.Context, pagination *ent.PaginationInput, filter *ent.AuditTrailFilter, freeWord *ent.AuditTrailFreeWord, orderBy *ent.AuditTrailOrder) (*ent.AuditTrailResponseGetAll, error)
	GetCandidate(ctx context.Context, id string) (*ent.CandidateResponse, error)
	GetAllCandidates(ctx context.Context, pagination *ent.PaginationInput, filter *ent.CandidateFilter, freeWord *ent.CandidateFreeWord, orderBy *ent.CandidateOrder) (*ent.CandidateResponseGetAll, error)
	GetCandidateJob(ctx context.Context, id string) (*ent.CandidateJobResponse, error)
	GetAllCandidateJobs(ctx context.Context, pagination *ent.PaginationInput, filter ent.CandidateJobFilter, freeWord *ent.CandidateJobFreeWord, orderBy *ent.CandidateJobOrder) (*ent.CandidateJobResponseGetAll, error)
	GetCandidateJobGroupByStatus(ctx context.Context, pagination *ent.PaginationInput, filter *ent.CandidateJobGroupByStatusFilter, freeWord *ent.CandidateJobGroupByStatusFreeWord, orderBy *ent.CandidateJobByOrder) (*ent.CandidateJobGroupByStatusResponse, error)
	GetCandidateJobGroupByInterview(ctx context.Context, id string) (*ent.CandidateJobGroupByInterviewResponse, error)
	GetCandidateJobFeedback(ctx context.Context, id string) (*ent.CandidateJobFeedbackResponse, error)
	GetAllCandidateJobFeedbacks(ctx context.Context, pagination *ent.PaginationInput, filter ent.CandidateJobFeedbackFilter, freeWord *ent.CandidateJobFeedbackFreeWord, orderBy *ent.CandidateJobFeedbackOrder) (*ent.CandidateJobFeedbackResponseGetAll, error)
	GetCandidateInterview(ctx context.Context, id string) (*ent.CandidateInterviewResponse, error)
	GetAllCandidateInterviews(ctx context.Context, pagination *ent.PaginationInput, filter ent.CandidateInterviewFilter, freeWord *ent.CandidateInterviewFreeWord, orderBy *ent.CandidateInterviewOrder) (*ent.CandidateInterviewResponseGetAll, error)
	GetAllCandidateInterview4Calendar(ctx context.Context, pagination *ent.PaginationInput, filter *ent.CandidateInterviewCalendarFilter, freeWord *ent.CandidateInterviewFreeWord, orderBy *ent.CandidateInterviewOrder) (*ent.CandidateInterviewResponseGetAll, error)
	ExportSampleCandidate(ctx context.Context, lang ent.I18nLanguage) (*ent.Base64Response, error)
	GetSkill(ctx context.Context, id string) (*ent.SkillResponse, error)
	GetAllSkills(ctx context.Context, pagination *ent.PaginationInput, filter *ent.SkillFilter, freeWord *ent.SkillFreeWord, orderBy *ent.SkillOrder) (*ent.SkillResponseGetAll, error)
	GetSkillType(ctx context.Context, id string) (*ent.SkillTypeResponse, error)
	GetAllSkillTypes(ctx context.Context, pagination *ent.PaginationInput, filter *ent.SkillTypeFilter, freeWord *ent.SkillTypeFreeWord, orderBy *ent.SkillTypeOrder) (*ent.SkillTypeResponseGetAll, error)
	SelectionUsers(ctx context.Context, pagination *ent.PaginationInput, filter *ent.UserFilter, freeWord *ent.UserFreeWord, orderBy *ent.UserOrder) (*ent.UserSelectionResponseGetAll, error)
	SelectionTeams(ctx context.Context, pagination *ent.PaginationInput, filter *ent.TeamFilter, freeWord *ent.TeamFreeWord, orderBy ent.TeamOrderBy) (*ent.TeamSelectionResponseGetAll, error)
	SelectionHiringJobs(ctx context.Context, pagination *ent.PaginationInput, filter *ent.HiringJobFilter, freeWord *ent.HiringJobFreeWord, orderBy ent.HiringJobOrderBy) (*ent.HiringJobSelectionResponseGetAll, error)
	SelectionCandidates(ctx context.Context, pagination *ent.PaginationInput, filter *ent.CandidateFilter, freeWord *ent.CandidateFreeWord, orderBy *ent.CandidateOrder) (*ent.CandidateSelectionResponseGetAll, error)
	SelectionSkills(ctx context.Context, pagination *ent.PaginationInput, filter *ent.SkillFilter, freeWord *ent.SkillFreeWord, orderBy *ent.SkillOrder) (*ent.SkillSelectionResponseGetAll, error)
	SelectionSkillTypes(ctx context.Context, pagination *ent.PaginationInput, filter *ent.SkillTypeFilter, freeWord *ent.SkillTypeFreeWord, orderBy *ent.SkillTypeOrder) (*ent.SkillTypeSelectionResponseGetAll, error)
}
type SkillResolver interface {
	ID(ctx context.Context, obj *ent.Skill) (string, error)

	SkillType(ctx context.Context, obj *ent.Skill) (*ent.SkillType, error)
}
type SkillTypeResolver interface {
	ID(ctx context.Context, obj *ent.SkillType) (string, error)
}
type TeamResolver interface {
	ID(ctx context.Context, obj *ent.Team) (string, error)

	Members(ctx context.Context, obj *ent.Team) ([]*ent.User, error)
	OpeningRequests(ctx context.Context, obj *ent.Team) (int, error)
	IsAbleToDelete(ctx context.Context, obj *ent.Team) (bool, error)
}
type UserResolver interface {
	ID(ctx context.Context, obj *ent.User) (string, error)

	Status(ctx context.Context, obj *ent.User) (ent.UserStatus, error)
	Team(ctx context.Context, obj *ent.User) (*ent.Team, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Attachment.document_id":
		if e.complexity.Attachment.DocumentID == nil {
			break
		}

		return e.complexity.Attachment.DocumentID(childComplexity), true

	case "Attachment.document_name":
		if e.complexity.Attachment.DocumentName == nil {
			break
		}

		return e.complexity.Attachment.DocumentName(childComplexity), true

	case "Attachment.id":
		if e.complexity.Attachment.ID == nil {
			break
		}

		return e.complexity.Attachment.ID(childComplexity), true

	case "AttachmentResponse.action":
		if e.complexity.AttachmentResponse.Action == nil {
			break
		}

		return e.complexity.AttachmentResponse.Action(childComplexity), true

	case "AttachmentResponse.fileName":
		if e.complexity.AttachmentResponse.FileName == nil {
			break
		}

		return e.complexity.AttachmentResponse.FileName(childComplexity), true

	case "AttachmentResponse.id":
		if e.complexity.AttachmentResponse.ID == nil {
			break
		}

		return e.complexity.AttachmentResponse.ID(childComplexity), true

	case "AttachmentResponse.url":
		if e.complexity.AttachmentResponse.URL == nil {
			break
		}

		return e.complexity.AttachmentResponse.URL(childComplexity), true

	case "AuditTrail.actionType":
		if e.complexity.AuditTrail.ActionType == nil {
			break
		}

		return e.complexity.AuditTrail.ActionType(childComplexity), true

	case "AuditTrail.createdAt":
		if e.complexity.AuditTrail.CreatedAt == nil {
			break
		}

		return e.complexity.AuditTrail.CreatedAt(childComplexity), true

	case "AuditTrail.createdBy":
		if e.complexity.AuditTrail.CreatedBy == nil {
			break
		}

		return e.complexity.AuditTrail.CreatedBy(childComplexity), true

	case "AuditTrail.createdInfo":
		if e.complexity.AuditTrail.CreatedInfo == nil {
			break
		}

		return e.complexity.AuditTrail.CreatedInfo(childComplexity), true

	case "AuditTrail.id":
		if e.complexity.AuditTrail.ID == nil {
			break
		}

		return e.complexity.AuditTrail.ID(childComplexity), true

	case "AuditTrail.module":
		if e.complexity.AuditTrail.Module == nil {
			break
		}

		return e.complexity.AuditTrail.Module(childComplexity), true

	case "AuditTrail.note":
		if e.complexity.AuditTrail.Note == nil {
			break
		}

		return e.complexity.AuditTrail.Note(childComplexity), true

	case "AuditTrail.record_changes":
		if e.complexity.AuditTrail.RecordChanges == nil {
			break
		}

		return e.complexity.AuditTrail.RecordChanges(childComplexity), true

	case "AuditTrail.recordId":
		if e.complexity.AuditTrail.RecordID == nil {
			break
		}

		return e.complexity.AuditTrail.RecordID(childComplexity), true

	case "AuditTrail.updatedAt":
		if e.complexity.AuditTrail.UpdatedAt == nil {
			break
		}

		return e.complexity.AuditTrail.UpdatedAt(childComplexity), true

	case "AuditTrailEdge.cursor":
		if e.complexity.AuditTrailEdge.Cursor == nil {
			break
		}

		return e.complexity.AuditTrailEdge.Cursor(childComplexity), true

	case "AuditTrailEdge.node":
		if e.complexity.AuditTrailEdge.Node == nil {
			break
		}

		return e.complexity.AuditTrailEdge.Node(childComplexity), true

	case "AuditTrailResponse.data":
		if e.complexity.AuditTrailResponse.Data == nil {
			break
		}

		return e.complexity.AuditTrailResponse.Data(childComplexity), true

	case "AuditTrailResponseGetAll.edges":
		if e.complexity.AuditTrailResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.AuditTrailResponseGetAll.Edges(childComplexity), true

	case "AuditTrailResponseGetAll.pagination":
		if e.complexity.AuditTrailResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.AuditTrailResponseGetAll.Pagination(childComplexity), true

	case "AuthenticationToken.accessToken":
		if e.complexity.AuthenticationToken.AccessToken == nil {
			break
		}

		return e.complexity.AuthenticationToken.AccessToken(childComplexity), true

	case "AuthenticationToken.email":
		if e.complexity.AuthenticationToken.Email == nil {
			break
		}

		return e.complexity.AuthenticationToken.Email(childComplexity), true

	case "AuthenticationToken.expiresAt":
		if e.complexity.AuthenticationToken.ExpiresAt == nil {
			break
		}

		return e.complexity.AuthenticationToken.ExpiresAt(childComplexity), true

	case "AuthenticationToken.refreshToken":
		if e.complexity.AuthenticationToken.RefreshToken == nil {
			break
		}

		return e.complexity.AuthenticationToken.RefreshToken(childComplexity), true

	case "AuthenticationToken.tokenType":
		if e.complexity.AuthenticationToken.TokenType == nil {
			break
		}

		return e.complexity.AuthenticationToken.TokenType(childComplexity), true

	case "Base64Response.data":
		if e.complexity.Base64Response.Data == nil {
			break
		}

		return e.complexity.Base64Response.Data(childComplexity), true

	case "Candidate.attachments":
		if e.complexity.Candidate.Attachments == nil {
			break
		}

		return e.complexity.Candidate.Attachments(childComplexity), true

	case "Candidate.country":
		if e.complexity.Candidate.Country == nil {
			break
		}

		return e.complexity.Candidate.Country(childComplexity), true

	case "Candidate.created_at":
		if e.complexity.Candidate.CreatedAt == nil {
			break
		}

		return e.complexity.Candidate.CreatedAt(childComplexity), true

	case "Candidate.deleted_at":
		if e.complexity.Candidate.DeletedAt == nil {
			break
		}

		return e.complexity.Candidate.DeletedAt(childComplexity), true

	case "Candidate.description":
		if e.complexity.Candidate.Description == nil {
			break
		}

		return e.complexity.Candidate.Description(childComplexity), true

	case "Candidate.dob":
		if e.complexity.Candidate.Dob == nil {
			break
		}

		return e.complexity.Candidate.Dob(childComplexity), true

	case "Candidate.email":
		if e.complexity.Candidate.Email == nil {
			break
		}

		return e.complexity.Candidate.Email(childComplexity), true

	case "Candidate.entity_skill_types":
		if e.complexity.Candidate.EntitySkillTypes == nil {
			break
		}

		return e.complexity.Candidate.EntitySkillTypes(childComplexity), true

	case "Candidate.hiring_job_title":
		if e.complexity.Candidate.HiringJobTitle == nil {
			break
		}

		return e.complexity.Candidate.HiringJobTitle(childComplexity), true

	case "Candidate.id":
		if e.complexity.Candidate.ID == nil {
			break
		}

		return e.complexity.Candidate.ID(childComplexity), true

	case "Candidate.is_able_to_delete":
		if e.complexity.Candidate.IsAbleToDelete == nil {
			break
		}

		return e.complexity.Candidate.IsAbleToDelete(childComplexity), true

	case "Candidate.is_black_list":
		if e.complexity.Candidate.IsBlacklist == nil {
			break
		}

		return e.complexity.Candidate.IsBlacklist(childComplexity), true

	case "Candidate.last_apply_date":
		if e.complexity.Candidate.LastApplyDate == nil {
			break
		}

		return e.complexity.Candidate.LastApplyDate(childComplexity), true

	case "Candidate.name":
		if e.complexity.Candidate.Name == nil {
			break
		}

		return e.complexity.Candidate.Name(childComplexity), true

	case "Candidate.phone":
		if e.complexity.Candidate.Phone == nil {
			break
		}

		return e.complexity.Candidate.Phone(childComplexity), true

	case "Candidate.recruit_time":
		if e.complexity.Candidate.RecruitTime == nil {
			break
		}

		return e.complexity.Candidate.RecruitTime(childComplexity), true

	case "Candidate.reference_type":
		if e.complexity.Candidate.ReferenceType == nil {
			break
		}

		return e.complexity.Candidate.ReferenceType(childComplexity), true

	case "Candidate.reference_uid":
		if e.complexity.Candidate.ReferenceUID == nil {
			break
		}

		return e.complexity.Candidate.ReferenceUID(childComplexity), true

	case "Candidate.reference_user":
		if e.complexity.Candidate.ReferenceUser == nil {
			break
		}

		return e.complexity.Candidate.ReferenceUser(childComplexity), true

	case "Candidate.reference_value":
		if e.complexity.Candidate.ReferenceValue == nil {
			break
		}

		return e.complexity.Candidate.ReferenceValue(childComplexity), true

	case "Candidate.status":
		if e.complexity.Candidate.Status == nil {
			break
		}

		return e.complexity.Candidate.Status(childComplexity), true

	case "Candidate.updated_at":
		if e.complexity.Candidate.UpdatedAt == nil {
			break
		}

		return e.complexity.Candidate.UpdatedAt(childComplexity), true

	case "CandidateEdge.cursor":
		if e.complexity.CandidateEdge.Cursor == nil {
			break
		}

		return e.complexity.CandidateEdge.Cursor(childComplexity), true

	case "CandidateEdge.node":
		if e.complexity.CandidateEdge.Node == nil {
			break
		}

		return e.complexity.CandidateEdge.Node(childComplexity), true

	case "CandidateInterview.candidate_job":
		if e.complexity.CandidateInterview.CandidateJob == nil {
			break
		}

		return e.complexity.CandidateInterview.CandidateJob(childComplexity), true

	case "CandidateInterview.candidate_job_id":
		if e.complexity.CandidateInterview.CandidateJobID == nil {
			break
		}

		return e.complexity.CandidateInterview.CandidateJobID(childComplexity), true

	case "CandidateInterview.created_at":
		if e.complexity.CandidateInterview.CreatedAt == nil {
			break
		}

		return e.complexity.CandidateInterview.CreatedAt(childComplexity), true

	case "CandidateInterview.description":
		if e.complexity.CandidateInterview.Description == nil {
			break
		}

		return e.complexity.CandidateInterview.Description(childComplexity), true

	case "CandidateInterview.edit_able":
		if e.complexity.CandidateInterview.EditAble == nil {
			break
		}

		return e.complexity.CandidateInterview.EditAble(childComplexity), true

	case "CandidateInterview.edited":
		if e.complexity.CandidateInterview.Edited == nil {
			break
		}

		return e.complexity.CandidateInterview.Edited(childComplexity), true

	case "CandidateInterview.end_at":
		if e.complexity.CandidateInterview.EndAt == nil {
			break
		}

		return e.complexity.CandidateInterview.EndAt(childComplexity), true

	case "CandidateInterview.id":
		if e.complexity.CandidateInterview.ID == nil {
			break
		}

		return e.complexity.CandidateInterview.ID(childComplexity), true

	case "CandidateInterview.interview_date":
		if e.complexity.CandidateInterview.InterviewDate == nil {
			break
		}

		return e.complexity.CandidateInterview.InterviewDate(childComplexity), true

	case "CandidateInterview.interviewer":
		if e.complexity.CandidateInterview.Interviewer == nil {
			break
		}

		return e.complexity.CandidateInterview.Interviewer(childComplexity), true

	case "CandidateInterview.owner":
		if e.complexity.CandidateInterview.Owner == nil {
			break
		}

		return e.complexity.CandidateInterview.Owner(childComplexity), true

	case "CandidateInterview.start_from":
		if e.complexity.CandidateInterview.StartFrom == nil {
			break
		}

		return e.complexity.CandidateInterview.StartFrom(childComplexity), true

	case "CandidateInterview.status":
		if e.complexity.CandidateInterview.Status == nil {
			break
		}

		return e.complexity.CandidateInterview.Status(childComplexity), true

	case "CandidateInterview.title":
		if e.complexity.CandidateInterview.Title == nil {
			break
		}

		return e.complexity.CandidateInterview.Title(childComplexity), true

	case "CandidateInterview.updated_at":
		if e.complexity.CandidateInterview.UpdatedAt == nil {
			break
		}

		return e.complexity.CandidateInterview.UpdatedAt(childComplexity), true

	case "CandidateInterviewEdge.cursor":
		if e.complexity.CandidateInterviewEdge.Cursor == nil {
			break
		}

		return e.complexity.CandidateInterviewEdge.Cursor(childComplexity), true

	case "CandidateInterviewEdge.node":
		if e.complexity.CandidateInterviewEdge.Node == nil {
			break
		}

		return e.complexity.CandidateInterviewEdge.Node(childComplexity), true

	case "CandidateInterviewResponse.data":
		if e.complexity.CandidateInterviewResponse.Data == nil {
			break
		}

		return e.complexity.CandidateInterviewResponse.Data(childComplexity), true

	case "CandidateInterviewResponseGetAll.edges":
		if e.complexity.CandidateInterviewResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.CandidateInterviewResponseGetAll.Edges(childComplexity), true

	case "CandidateInterviewResponseGetAll.pagination":
		if e.complexity.CandidateInterviewResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.CandidateInterviewResponseGetAll.Pagination(childComplexity), true

	case "CandidateInterviewResponseValidate.data":
		if e.complexity.CandidateInterviewResponseValidate.Data == nil {
			break
		}

		return e.complexity.CandidateInterviewResponseValidate.Data(childComplexity), true

	case "CandidateInterviewValidate.candidate_job_invalid_status":
		if e.complexity.CandidateInterviewValidate.CandidateJobInvalidStatus == nil {
			break
		}

		return e.complexity.CandidateInterviewValidate.CandidateJobInvalidStatus(childComplexity), true

	case "CandidateInterviewValidate.candidate_name":
		if e.complexity.CandidateInterviewValidate.CandidateName == nil {
			break
		}

		return e.complexity.CandidateInterviewValidate.CandidateName(childComplexity), true

	case "CandidateInterviewValidate.interviewer_invalid":
		if e.complexity.CandidateInterviewValidate.InterviewerInvalid == nil {
			break
		}

		return e.complexity.CandidateInterviewValidate.InterviewerInvalid(childComplexity), true

	case "CandidateInterviewValidate.invalid_schedule":
		if e.complexity.CandidateInterviewValidate.InvalidSchedule == nil {
			break
		}

		return e.complexity.CandidateInterviewValidate.InvalidSchedule(childComplexity), true

	case "CandidateJob.attachments":
		if e.complexity.CandidateJob.Attachments == nil {
			break
		}

		return e.complexity.CandidateJob.Attachments(childComplexity), true

	case "CandidateJob.candidate":
		if e.complexity.CandidateJob.Candidate == nil {
			break
		}

		return e.complexity.CandidateJob.Candidate(childComplexity), true

	case "CandidateJob.candidate_id":
		if e.complexity.CandidateJob.CandidateID == nil {
			break
		}

		return e.complexity.CandidateJob.CandidateID(childComplexity), true

	case "CandidateJob.created_at":
		if e.complexity.CandidateJob.CreatedAt == nil {
			break
		}

		return e.complexity.CandidateJob.CreatedAt(childComplexity), true

	case "CandidateJob.failed_reason":
		if e.complexity.CandidateJob.FailedReason == nil {
			break
		}

		return e.complexity.CandidateJob.FailedReason(childComplexity), true

	case "CandidateJob.hiring_job":
		if e.complexity.CandidateJob.HiringJob == nil {
			break
		}

		return e.complexity.CandidateJob.HiringJob(childComplexity), true

	case "CandidateJob.hiring_job_id":
		if e.complexity.CandidateJob.HiringJobID == nil {
			break
		}

		return e.complexity.CandidateJob.HiringJobID(childComplexity), true

	case "CandidateJob.id":
		if e.complexity.CandidateJob.ID == nil {
			break
		}

		return e.complexity.CandidateJob.ID(childComplexity), true

	case "CandidateJob.interview_feature":
		if e.complexity.CandidateJob.InterviewFeature == nil {
			break
		}

		return e.complexity.CandidateJob.InterviewFeature(childComplexity), true

	case "CandidateJob.is_able_to_delete":
		if e.complexity.CandidateJob.IsAbleToDelete == nil {
			break
		}

		return e.complexity.CandidateJob.IsAbleToDelete(childComplexity), true

	case "CandidateJob.owner":
		if e.complexity.CandidateJob.Owner == nil {
			break
		}

		return e.complexity.CandidateJob.Owner(childComplexity), true

	case "CandidateJob.status":
		if e.complexity.CandidateJob.Status == nil {
			break
		}

		return e.complexity.CandidateJob.Status(childComplexity), true

	case "CandidateJob.steps":
		if e.complexity.CandidateJob.Steps == nil {
			break
		}

		return e.complexity.CandidateJob.Steps(childComplexity), true

	case "CandidateJob.updated_at":
		if e.complexity.CandidateJob.UpdatedAt == nil {
			break
		}

		return e.complexity.CandidateJob.UpdatedAt(childComplexity), true

	case "CandidateJobEdge.cursor":
		if e.complexity.CandidateJobEdge.Cursor == nil {
			break
		}

		return e.complexity.CandidateJobEdge.Cursor(childComplexity), true

	case "CandidateJobEdge.node":
		if e.complexity.CandidateJobEdge.Node == nil {
			break
		}

		return e.complexity.CandidateJobEdge.Node(childComplexity), true

	case "CandidateJobFeedback.attachments":
		if e.complexity.CandidateJobFeedback.Attachments == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.Attachments(childComplexity), true

	case "CandidateJobFeedback.candidate_job":
		if e.complexity.CandidateJobFeedback.CandidateJob == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.CandidateJob(childComplexity), true

	case "CandidateJobFeedback.candidate_job_id":
		if e.complexity.CandidateJobFeedback.CandidateJobID == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.CandidateJobID(childComplexity), true

	case "CandidateJobFeedback.created_at":
		if e.complexity.CandidateJobFeedback.CreatedAt == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.CreatedAt(childComplexity), true

	case "CandidateJobFeedback.created_by":
		if e.complexity.CandidateJobFeedback.CreatedBy == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.CreatedBy(childComplexity), true

	case "CandidateJobFeedback.edited":
		if e.complexity.CandidateJobFeedback.Edited == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.Edited(childComplexity), true

	case "CandidateJobFeedback.feedback":
		if e.complexity.CandidateJobFeedback.Feedback == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.Feedback(childComplexity), true

	case "CandidateJobFeedback.id":
		if e.complexity.CandidateJobFeedback.ID == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.ID(childComplexity), true

	case "CandidateJobFeedback.owner":
		if e.complexity.CandidateJobFeedback.Owner == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.Owner(childComplexity), true

	case "CandidateJobFeedback.updated_at":
		if e.complexity.CandidateJobFeedback.UpdatedAt == nil {
			break
		}

		return e.complexity.CandidateJobFeedback.UpdatedAt(childComplexity), true

	case "CandidateJobFeedbackEdge.cursor":
		if e.complexity.CandidateJobFeedbackEdge.Cursor == nil {
			break
		}

		return e.complexity.CandidateJobFeedbackEdge.Cursor(childComplexity), true

	case "CandidateJobFeedbackEdge.node":
		if e.complexity.CandidateJobFeedbackEdge.Node == nil {
			break
		}

		return e.complexity.CandidateJobFeedbackEdge.Node(childComplexity), true

	case "CandidateJobFeedbackResponse.data":
		if e.complexity.CandidateJobFeedbackResponse.Data == nil {
			break
		}

		return e.complexity.CandidateJobFeedbackResponse.Data(childComplexity), true

	case "CandidateJobFeedbackResponseGetAll.edges":
		if e.complexity.CandidateJobFeedbackResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.CandidateJobFeedbackResponseGetAll.Edges(childComplexity), true

	case "CandidateJobFeedbackResponseGetAll.pagination":
		if e.complexity.CandidateJobFeedbackResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.CandidateJobFeedbackResponseGetAll.Pagination(childComplexity), true

	case "CandidateJobGroupByInterview.applied":
		if e.complexity.CandidateJobGroupByInterview.Applied == nil {
			break
		}

		return e.complexity.CandidateJobGroupByInterview.Applied(childComplexity), true

	case "CandidateJobGroupByInterview.ex_staff":
		if e.complexity.CandidateJobGroupByInterview.ExStaff == nil {
			break
		}

		return e.complexity.CandidateJobGroupByInterview.ExStaff(childComplexity), true

	case "CandidateJobGroupByInterview.hired":
		if e.complexity.CandidateJobGroupByInterview.Hired == nil {
			break
		}

		return e.complexity.CandidateJobGroupByInterview.Hired(childComplexity), true

	case "CandidateJobGroupByInterview.interviewing":
		if e.complexity.CandidateJobGroupByInterview.Interviewing == nil {
			break
		}

		return e.complexity.CandidateJobGroupByInterview.Interviewing(childComplexity), true

	case "CandidateJobGroupByInterview.kiv":
		if e.complexity.CandidateJobGroupByInterview.Kiv == nil {
			break
		}

		return e.complexity.CandidateJobGroupByInterview.Kiv(childComplexity), true

	case "CandidateJobGroupByInterview.offer_lost":
		if e.complexity.CandidateJobGroupByInterview.OfferLost == nil {
			break
		}

		return e.complexity.CandidateJobGroupByInterview.OfferLost(childComplexity), true

	case "CandidateJobGroupByInterview.offering":
		if e.complexity.CandidateJobGroupByInterview.Offering == nil {
			break
		}

		return e.complexity.CandidateJobGroupByInterview.Offering(childComplexity), true

	case "CandidateJobGroupByInterviewResponse.data":
		if e.complexity.CandidateJobGroupByInterviewResponse.Data == nil {
			break
		}

		return e.complexity.CandidateJobGroupByInterviewResponse.Data(childComplexity), true

	case "CandidateJobGroupByStatus.applied":
		if e.complexity.CandidateJobGroupByStatus.Applied == nil {
			break
		}

		return e.complexity.CandidateJobGroupByStatus.Applied(childComplexity), true

	case "CandidateJobGroupByStatus.ex_staff":
		if e.complexity.CandidateJobGroupByStatus.ExStaff == nil {
			break
		}

		return e.complexity.CandidateJobGroupByStatus.ExStaff(childComplexity), true

	case "CandidateJobGroupByStatus.hired":
		if e.complexity.CandidateJobGroupByStatus.Hired == nil {
			break
		}

		return e.complexity.CandidateJobGroupByStatus.Hired(childComplexity), true

	case "CandidateJobGroupByStatus.interviewing":
		if e.complexity.CandidateJobGroupByStatus.Interviewing == nil {
			break
		}

		return e.complexity.CandidateJobGroupByStatus.Interviewing(childComplexity), true

	case "CandidateJobGroupByStatus.kiv":
		if e.complexity.CandidateJobGroupByStatus.Kiv == nil {
			break
		}

		return e.complexity.CandidateJobGroupByStatus.Kiv(childComplexity), true

	case "CandidateJobGroupByStatus.offer_lost":
		if e.complexity.CandidateJobGroupByStatus.OfferLost == nil {
			break
		}

		return e.complexity.CandidateJobGroupByStatus.OfferLost(childComplexity), true

	case "CandidateJobGroupByStatus.offering":
		if e.complexity.CandidateJobGroupByStatus.Offering == nil {
			break
		}

		return e.complexity.CandidateJobGroupByStatus.Offering(childComplexity), true

	case "CandidateJobGroupByStatusResponse.data":
		if e.complexity.CandidateJobGroupByStatusResponse.Data == nil {
			break
		}

		return e.complexity.CandidateJobGroupByStatusResponse.Data(childComplexity), true

	case "CandidateJobGroupByStatusResponse.pagination":
		if e.complexity.CandidateJobGroupByStatusResponse.Pagination == nil {
			break
		}

		return e.complexity.CandidateJobGroupByStatusResponse.Pagination(childComplexity), true

	case "CandidateJobGroupInterviewFeedback.feedback":
		if e.complexity.CandidateJobGroupInterviewFeedback.Feedback == nil {
			break
		}

		return e.complexity.CandidateJobGroupInterviewFeedback.Feedback(childComplexity), true

	case "CandidateJobGroupInterviewFeedback.interview":
		if e.complexity.CandidateJobGroupInterviewFeedback.Interview == nil {
			break
		}

		return e.complexity.CandidateJobGroupInterviewFeedback.Interview(childComplexity), true

	case "CandidateJobResponse.data":
		if e.complexity.CandidateJobResponse.Data == nil {
			break
		}

		return e.complexity.CandidateJobResponse.Data(childComplexity), true

	case "CandidateJobResponseGetAll.edges":
		if e.complexity.CandidateJobResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.CandidateJobResponseGetAll.Edges(childComplexity), true

	case "CandidateJobResponseGetAll.pagination":
		if e.complexity.CandidateJobResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.CandidateJobResponseGetAll.Pagination(childComplexity), true

	case "CandidateJobStep.candidate_job_id":
		if e.complexity.CandidateJobStep.CandidateJobID == nil {
			break
		}

		return e.complexity.CandidateJobStep.CandidateJobID(childComplexity), true

	case "CandidateJobStep.candidate_job_status":
		if e.complexity.CandidateJobStep.CandidateJobStatus == nil {
			break
		}

		return e.complexity.CandidateJobStep.CandidateJobStatus(childComplexity), true

	case "CandidateJobStep.created_at":
		if e.complexity.CandidateJobStep.CreatedAt == nil {
			break
		}

		return e.complexity.CandidateJobStep.CreatedAt(childComplexity), true

	case "CandidateJobStep.id":
		if e.complexity.CandidateJobStep.ID == nil {
			break
		}

		return e.complexity.CandidateJobStep.ID(childComplexity), true

	case "CandidateJobStep.updated_at":
		if e.complexity.CandidateJobStep.UpdatedAt == nil {
			break
		}

		return e.complexity.CandidateJobStep.UpdatedAt(childComplexity), true

	case "CandidateResponse.data":
		if e.complexity.CandidateResponse.Data == nil {
			break
		}

		return e.complexity.CandidateResponse.Data(childComplexity), true

	case "CandidateResponseGetAll.edges":
		if e.complexity.CandidateResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.CandidateResponseGetAll.Edges(childComplexity), true

	case "CandidateResponseGetAll.pagination":
		if e.complexity.CandidateResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.CandidateResponseGetAll.Pagination(childComplexity), true

	case "CandidateSelection.email":
		if e.complexity.CandidateSelection.Email == nil {
			break
		}

		return e.complexity.CandidateSelection.Email(childComplexity), true

	case "CandidateSelection.id":
		if e.complexity.CandidateSelection.ID == nil {
			break
		}

		return e.complexity.CandidateSelection.ID(childComplexity), true

	case "CandidateSelection.name":
		if e.complexity.CandidateSelection.Name == nil {
			break
		}

		return e.complexity.CandidateSelection.Name(childComplexity), true

	case "CandidateSelection.phone":
		if e.complexity.CandidateSelection.Phone == nil {
			break
		}

		return e.complexity.CandidateSelection.Phone(childComplexity), true

	case "CandidateSelectionEdge.cursor":
		if e.complexity.CandidateSelectionEdge.Cursor == nil {
			break
		}

		return e.complexity.CandidateSelectionEdge.Cursor(childComplexity), true

	case "CandidateSelectionEdge.node":
		if e.complexity.CandidateSelectionEdge.Node == nil {
			break
		}

		return e.complexity.CandidateSelectionEdge.Node(childComplexity), true

	case "CandidateSelectionResponseGetAll.edges":
		if e.complexity.CandidateSelectionResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.CandidateSelectionResponseGetAll.Edges(childComplexity), true

	case "CandidateSelectionResponseGetAll.pagination":
		if e.complexity.CandidateSelectionResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.CandidateSelectionResponseGetAll.Pagination(childComplexity), true

	case "EntitySkillRecord.description":
		if e.complexity.EntitySkillRecord.Description == nil {
			break
		}

		return e.complexity.EntitySkillRecord.Description(childComplexity), true

	case "EntitySkillRecord.id":
		if e.complexity.EntitySkillRecord.ID == nil {
			break
		}

		return e.complexity.EntitySkillRecord.ID(childComplexity), true

	case "EntitySkillRecord.name":
		if e.complexity.EntitySkillRecord.Name == nil {
			break
		}

		return e.complexity.EntitySkillRecord.Name(childComplexity), true

	case "EntitySkillRecord.orderId":
		if e.complexity.EntitySkillRecord.OrderID == nil {
			break
		}

		return e.complexity.EntitySkillRecord.OrderID(childComplexity), true

	case "EntitySkillRecord.skill_id":
		if e.complexity.EntitySkillRecord.SkillID == nil {
			break
		}

		return e.complexity.EntitySkillRecord.SkillID(childComplexity), true

	case "EntitySkillType.description":
		if e.complexity.EntitySkillType.Description == nil {
			break
		}

		return e.complexity.EntitySkillType.Description(childComplexity), true

	case "EntitySkillType.entity_skills":
		if e.complexity.EntitySkillType.EntitySkills == nil {
			break
		}

		return e.complexity.EntitySkillType.EntitySkills(childComplexity), true

	case "EntitySkillType.id":
		if e.complexity.EntitySkillType.ID == nil {
			break
		}

		return e.complexity.EntitySkillType.ID(childComplexity), true

	case "EntitySkillType.name":
		if e.complexity.EntitySkillType.Name == nil {
			break
		}

		return e.complexity.EntitySkillType.Name(childComplexity), true

	case "EntitySkillType.orderId":
		if e.complexity.EntitySkillType.OrderID == nil {
			break
		}

		return e.complexity.EntitySkillType.OrderID(childComplexity), true

	case "HiringJob.amount":
		if e.complexity.HiringJob.Amount == nil {
			break
		}

		return e.complexity.HiringJob.Amount(childComplexity), true

	case "HiringJob.created_at":
		if e.complexity.HiringJob.CreatedAt == nil {
			break
		}

		return e.complexity.HiringJob.CreatedAt(childComplexity), true

	case "HiringJob.currency":
		if e.complexity.HiringJob.Currency == nil {
			break
		}

		return e.complexity.HiringJob.Currency(childComplexity), true

	case "HiringJob.deleted_at":
		if e.complexity.HiringJob.DeletedAt == nil {
			break
		}

		return e.complexity.HiringJob.DeletedAt(childComplexity), true

	case "HiringJob.description":
		if e.complexity.HiringJob.Description == nil {
			break
		}

		return e.complexity.HiringJob.Description(childComplexity), true

	case "HiringJob.entity_skill_types":
		if e.complexity.HiringJob.EntitySkillTypes == nil {
			break
		}

		return e.complexity.HiringJob.EntitySkillTypes(childComplexity), true

	case "HiringJob.id":
		if e.complexity.HiringJob.ID == nil {
			break
		}

		return e.complexity.HiringJob.ID(childComplexity), true

	case "HiringJob.is_able_to_close":
		if e.complexity.HiringJob.IsAbleToClose == nil {
			break
		}

		return e.complexity.HiringJob.IsAbleToClose(childComplexity), true

	case "HiringJob.is_able_to_delete":
		if e.complexity.HiringJob.IsAbleToDelete == nil {
			break
		}

		return e.complexity.HiringJob.IsAbleToDelete(childComplexity), true

	case "HiringJob.location":
		if e.complexity.HiringJob.Location == nil {
			break
		}

		return e.complexity.HiringJob.Location(childComplexity), true

	case "HiringJob.name":
		if e.complexity.HiringJob.Name == nil {
			break
		}

		return e.complexity.HiringJob.Name(childComplexity), true

	case "HiringJob.priority":
		if e.complexity.HiringJob.Priority == nil {
			break
		}

		return e.complexity.HiringJob.Priority(childComplexity), true

	case "HiringJob.salary_from":
		if e.complexity.HiringJob.SalaryFrom == nil {
			break
		}

		return e.complexity.HiringJob.SalaryFrom(childComplexity), true

	case "HiringJob.salary_to":
		if e.complexity.HiringJob.SalaryTo == nil {
			break
		}

		return e.complexity.HiringJob.SalaryTo(childComplexity), true

	case "HiringJob.salary_type":
		if e.complexity.HiringJob.SalaryType == nil {
			break
		}

		return e.complexity.HiringJob.SalaryType(childComplexity), true

	case "HiringJob.slug":
		if e.complexity.HiringJob.Slug == nil {
			break
		}

		return e.complexity.HiringJob.Slug(childComplexity), true

	case "HiringJob.status":
		if e.complexity.HiringJob.Status == nil {
			break
		}

		return e.complexity.HiringJob.Status(childComplexity), true

	case "HiringJob.team":
		if e.complexity.HiringJob.Team == nil {
			break
		}

		return e.complexity.HiringJob.Team(childComplexity), true

	case "HiringJob.total_candidates_recruited":
		if e.complexity.HiringJob.TotalCandidatesRecruited == nil {
			break
		}

		return e.complexity.HiringJob.TotalCandidatesRecruited(childComplexity), true

	case "HiringJob.updated_at":
		if e.complexity.HiringJob.UpdatedAt == nil {
			break
		}

		return e.complexity.HiringJob.UpdatedAt(childComplexity), true

	case "HiringJob.user":
		if e.complexity.HiringJob.User == nil {
			break
		}

		return e.complexity.HiringJob.User(childComplexity), true

	case "HiringJobEdge.cursor":
		if e.complexity.HiringJobEdge.Cursor == nil {
			break
		}

		return e.complexity.HiringJobEdge.Cursor(childComplexity), true

	case "HiringJobEdge.node":
		if e.complexity.HiringJobEdge.Node == nil {
			break
		}

		return e.complexity.HiringJobEdge.Node(childComplexity), true

	case "HiringJobResponse.data":
		if e.complexity.HiringJobResponse.Data == nil {
			break
		}

		return e.complexity.HiringJobResponse.Data(childComplexity), true

	case "HiringJobResponseGetAll.edges":
		if e.complexity.HiringJobResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.HiringJobResponseGetAll.Edges(childComplexity), true

	case "HiringJobResponseGetAll.pagination":
		if e.complexity.HiringJobResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.HiringJobResponseGetAll.Pagination(childComplexity), true

	case "HiringJobSelection.id":
		if e.complexity.HiringJobSelection.ID == nil {
			break
		}

		return e.complexity.HiringJobSelection.ID(childComplexity), true

	case "HiringJobSelection.name":
		if e.complexity.HiringJobSelection.Name == nil {
			break
		}

		return e.complexity.HiringJobSelection.Name(childComplexity), true

	case "HiringJobSelectionEdge.cursor":
		if e.complexity.HiringJobSelectionEdge.Cursor == nil {
			break
		}

		return e.complexity.HiringJobSelectionEdge.Cursor(childComplexity), true

	case "HiringJobSelectionEdge.node":
		if e.complexity.HiringJobSelectionEdge.Node == nil {
			break
		}

		return e.complexity.HiringJobSelectionEdge.Node(childComplexity), true

	case "HiringJobSelectionResponseGetAll.edges":
		if e.complexity.HiringJobSelectionResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.HiringJobSelectionResponseGetAll.Edges(childComplexity), true

	case "HiringJobSelectionResponseGetAll.pagination":
		if e.complexity.HiringJobSelectionResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.HiringJobSelectionResponseGetAll.Pagination(childComplexity), true

	case "Mutation.CreateAttachmentSASURL":
		if e.complexity.Mutation.CreateAttachmentSasurl == nil {
			break
		}

		args, err := ec.field_Mutation_CreateAttachmentSASURL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAttachmentSasurl(childComplexity, args["input"].(ent.AttachmentInput)), true

	case "Mutation.CreateCandidate":
		if e.complexity.Mutation.CreateCandidate == nil {
			break
		}

		args, err := ec.field_Mutation_CreateCandidate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCandidate(childComplexity, args["input"].(ent.NewCandidateInput), args["note"].(string)), true

	case "Mutation.CreateCandidateInterview":
		if e.complexity.Mutation.CreateCandidateInterview == nil {
			break
		}

		args, err := ec.field_Mutation_CreateCandidateInterview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCandidateInterview(childComplexity, args["input"].(ent.NewCandidateInterviewInput), args["note"].(*string)), true

	case "Mutation.CreateCandidateInterview4Calendar":
		if e.complexity.Mutation.CreateCandidateInterview4Calendar == nil {
			break
		}

		args, err := ec.field_Mutation_CreateCandidateInterview4Calendar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCandidateInterview4Calendar(childComplexity, args["input"].(ent.NewCandidateInterview4CalendarInput), args["note"].(*string)), true

	case "Mutation.CreateCandidateJob":
		if e.complexity.Mutation.CreateCandidateJob == nil {
			break
		}

		args, err := ec.field_Mutation_CreateCandidateJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCandidateJob(childComplexity, args["input"].(ent.NewCandidateJobInput), args["note"].(*string)), true

	case "Mutation.CreateCandidateJobFeedback":
		if e.complexity.Mutation.CreateCandidateJobFeedback == nil {
			break
		}

		args, err := ec.field_Mutation_CreateCandidateJobFeedback_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCandidateJobFeedback(childComplexity, args["input"].(ent.NewCandidateJobFeedbackInput), args["note"].(*string)), true

	case "Mutation.CreateHiringJob":
		if e.complexity.Mutation.CreateHiringJob == nil {
			break
		}

		args, err := ec.field_Mutation_CreateHiringJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHiringJob(childComplexity, args["input"].(ent.NewHiringJobInput), args["note"].(string)), true

	case "Mutation.CreateSkill":
		if e.complexity.Mutation.CreateSkill == nil {
			break
		}

		args, err := ec.field_Mutation_CreateSkill_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSkill(childComplexity, args["input"].(ent.NewSkillInput), args["note"].(string)), true

	case "Mutation.CreateSkillType":
		if e.complexity.Mutation.CreateSkillType == nil {
			break
		}

		args, err := ec.field_Mutation_CreateSkillType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSkillType(childComplexity, args["input"].(ent.NewSkillTypeInput), args["note"].(string)), true

	case "Mutation.CreateTeam":
		if e.complexity.Mutation.CreateTeam == nil {
			break
		}

		args, err := ec.field_Mutation_CreateTeam_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTeam(childComplexity, args["input"].(ent.NewTeamInput), args["note"].(string)), true

	case "Mutation.DeleteCandidate":
		if e.complexity.Mutation.DeleteCandidate == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteCandidate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCandidate(childComplexity, args["id"].(string), args["note"].(string)), true

	case "Mutation.DeleteCandidateInterview":
		if e.complexity.Mutation.DeleteCandidateInterview == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteCandidateInterview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCandidateInterview(childComplexity, args["id"].(string), args["note"].(*string)), true

	case "Mutation.DeleteCandidateJob":
		if e.complexity.Mutation.DeleteCandidateJob == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteCandidateJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCandidateJob(childComplexity, args["id"].(string), args["note"].(*string)), true

	case "Mutation.DeleteCandidateJobFeedback":
		if e.complexity.Mutation.DeleteCandidateJobFeedback == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteCandidateJobFeedback_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCandidateJobFeedback(childComplexity, args["id"].(string), args["note"].(*string)), true

	case "Mutation.DeleteHiringJob":
		if e.complexity.Mutation.DeleteHiringJob == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteHiringJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHiringJob(childComplexity, args["id"].(string), args["note"].(string)), true

	case "Mutation.DeleteSkill":
		if e.complexity.Mutation.DeleteSkill == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteSkill_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSkill(childComplexity, args["id"].(string), args["note"].(string)), true

	case "Mutation.DeleteSkillType":
		if e.complexity.Mutation.DeleteSkillType == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteSkillType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSkillType(childComplexity, args["id"].(string), args["note"].(string)), true

	case "Mutation.DeleteTeam":
		if e.complexity.Mutation.DeleteTeam == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteTeam_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTeam(childComplexity, args["id"].(string), args["note"].(string)), true

	case "Mutation.ImportCandidate":
		if e.complexity.Mutation.ImportCandidate == nil {
			break
		}

		args, err := ec.field_Mutation_ImportCandidate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImportCandidate(childComplexity, args["file"].(graphql.Upload)), true

	case "Mutation.SetBlackListCandidate":
		if e.complexity.Mutation.SetBlackListCandidate == nil {
			break
		}

		args, err := ec.field_Mutation_SetBlackListCandidate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetBlackListCandidate(childComplexity, args["id"].(string), args["is_black_list"].(bool), args["note"].(string)), true

	case "Mutation.UpdateCandidate":
		if e.complexity.Mutation.UpdateCandidate == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateCandidate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCandidate(childComplexity, args["id"].(string), args["input"].(ent.UpdateCandidateInput), args["note"].(string)), true

	case "Mutation.UpdateCandidateInterview":
		if e.complexity.Mutation.UpdateCandidateInterview == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateCandidateInterview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCandidateInterview(childComplexity, args["id"].(string), args["input"].(ent.UpdateCandidateInterviewInput), args["note"].(*string)), true

	case "Mutation.UpdateCandidateInterviewSchedule":
		if e.complexity.Mutation.UpdateCandidateInterviewSchedule == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateCandidateInterviewSchedule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCandidateInterviewSchedule(childComplexity, args["id"].(string), args["input"].(ent.UpdateCandidateInterviewScheduleInput)), true

	case "Mutation.UpdateCandidateInterviewStatus":
		if e.complexity.Mutation.UpdateCandidateInterviewStatus == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateCandidateInterviewStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCandidateInterviewStatus(childComplexity, args["id"].(string), args["input"].(ent.UpdateCandidateInterviewStatusInput), args["note"].(*string)), true

	case "Mutation.UpdateCandidateJobAttachment":
		if e.complexity.Mutation.UpdateCandidateJobAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateCandidateJobAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCandidateJobAttachment(childComplexity, args["id"].(string), args["input"].(ent.UpdateCandidateAttachment), args["note"].(*string)), true

	case "Mutation.UpdateCandidateJobFeedback":
		if e.complexity.Mutation.UpdateCandidateJobFeedback == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateCandidateJobFeedback_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCandidateJobFeedback(childComplexity, args["id"].(string), args["input"].(ent.UpdateCandidateJobFeedbackInput), args["note"].(*string)), true

	case "Mutation.UpdateCandidateJobStatus":
		if e.complexity.Mutation.UpdateCandidateJobStatus == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateCandidateJobStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCandidateJobStatus(childComplexity, args["id"].(string), args["input"].(ent.UpdateCandidateJobStatus), args["note"].(*string)), true

	case "Mutation.UpdateHiringJob":
		if e.complexity.Mutation.UpdateHiringJob == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateHiringJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHiringJob(childComplexity, args["id"].(string), args["input"].(ent.UpdateHiringJobInput), args["note"].(string)), true

	case "Mutation.UpdateHiringJobStatus":
		if e.complexity.Mutation.UpdateHiringJobStatus == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateHiringJobStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHiringJobStatus(childComplexity, args["id"].(string), args["status"].(ent.HiringJobStatus), args["note"].(string)), true

	case "Mutation.UpdateSkill":
		if e.complexity.Mutation.UpdateSkill == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateSkill_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSkill(childComplexity, args["id"].(string), args["input"].(ent.UpdateSkillInput), args["note"].(string)), true

	case "Mutation.UpdateSkillType":
		if e.complexity.Mutation.UpdateSkillType == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateSkillType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSkillType(childComplexity, args["id"].(string), args["input"].(ent.UpdateSkillTypeInput), args["note"].(string)), true

	case "Mutation.UpdateTeam":
		if e.complexity.Mutation.UpdateTeam == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateTeam_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTeam(childComplexity, args["id"].(string), args["input"].(ent.UpdateTeamInput), args["note"].(string)), true

	case "Mutation.UpdateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(string), args["input"].(ent.UpdateUserInput), args["note"].(string)), true

	case "Mutation.UpdateUserStatus":
		if e.complexity.Mutation.UpdateUserStatus == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateUserStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserStatus(childComplexity, args["id"].(string), args["input"].(ent.UpdateUserStatusInput), args["note"].(string)), true

	case "Mutation.ValidateCandidateInterview":
		if e.complexity.Mutation.ValidateCandidateInterview == nil {
			break
		}

		args, err := ec.field_Mutation_ValidateCandidateInterview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ValidateCandidateInterview(childComplexity, args["input"].(ent.CandidateInterviewValidateInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Pagination.page":
		if e.complexity.Pagination.Page == nil {
			break
		}

		return e.complexity.Pagination.Page(childComplexity), true

	case "Pagination.perPage":
		if e.complexity.Pagination.PerPage == nil {
			break
		}

		return e.complexity.Pagination.PerPage(childComplexity), true

	case "Pagination.total":
		if e.complexity.Pagination.Total == nil {
			break
		}

		return e.complexity.Pagination.Total(childComplexity), true

	case "Query.ExportSampleCandidate":
		if e.complexity.Query.ExportSampleCandidate == nil {
			break
		}

		args, err := ec.field_Query_ExportSampleCandidate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExportSampleCandidate(childComplexity, args["lang"].(ent.I18nLanguage)), true

	case "Query.GetAllAuditTrails":
		if e.complexity.Query.GetAllAuditTrails == nil {
			break
		}

		args, err := ec.field_Query_GetAllAuditTrails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllAuditTrails(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.AuditTrailFilter), args["freeWord"].(*ent.AuditTrailFreeWord), args["orderBy"].(*ent.AuditTrailOrder)), true

	case "Query.GetAllCandidateInterview4Calendar":
		if e.complexity.Query.GetAllCandidateInterview4Calendar == nil {
			break
		}

		args, err := ec.field_Query_GetAllCandidateInterview4Calendar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllCandidateInterview4Calendar(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.CandidateInterviewCalendarFilter), args["freeWord"].(*ent.CandidateInterviewFreeWord), args["orderBy"].(*ent.CandidateInterviewOrder)), true

	case "Query.GetAllCandidateInterviews":
		if e.complexity.Query.GetAllCandidateInterviews == nil {
			break
		}

		args, err := ec.field_Query_GetAllCandidateInterviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllCandidateInterviews(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(ent.CandidateInterviewFilter), args["freeWord"].(*ent.CandidateInterviewFreeWord), args["orderBy"].(*ent.CandidateInterviewOrder)), true

	case "Query.GetAllCandidateJobFeedbacks":
		if e.complexity.Query.GetAllCandidateJobFeedbacks == nil {
			break
		}

		args, err := ec.field_Query_GetAllCandidateJobFeedbacks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllCandidateJobFeedbacks(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(ent.CandidateJobFeedbackFilter), args["freeWord"].(*ent.CandidateJobFeedbackFreeWord), args["orderBy"].(*ent.CandidateJobFeedbackOrder)), true

	case "Query.GetAllCandidateJobs":
		if e.complexity.Query.GetAllCandidateJobs == nil {
			break
		}

		args, err := ec.field_Query_GetAllCandidateJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllCandidateJobs(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(ent.CandidateJobFilter), args["freeWord"].(*ent.CandidateJobFreeWord), args["orderBy"].(*ent.CandidateJobOrder)), true

	case "Query.GetAllCandidates":
		if e.complexity.Query.GetAllCandidates == nil {
			break
		}

		args, err := ec.field_Query_GetAllCandidates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllCandidates(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.CandidateFilter), args["freeWord"].(*ent.CandidateFreeWord), args["orderBy"].(*ent.CandidateOrder)), true

	case "Query.GetAllHiringJobs":
		if e.complexity.Query.GetAllHiringJobs == nil {
			break
		}

		args, err := ec.field_Query_GetAllHiringJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllHiringJobs(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.HiringJobFilter), args["freeWord"].(*ent.HiringJobFreeWord), args["orderBy"].(ent.HiringJobOrderBy)), true

	case "Query.GetAllSkillTypes":
		if e.complexity.Query.GetAllSkillTypes == nil {
			break
		}

		args, err := ec.field_Query_GetAllSkillTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllSkillTypes(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.SkillTypeFilter), args["freeWord"].(*ent.SkillTypeFreeWord), args["orderBy"].(*ent.SkillTypeOrder)), true

	case "Query.GetAllSkills":
		if e.complexity.Query.GetAllSkills == nil {
			break
		}

		args, err := ec.field_Query_GetAllSkills_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllSkills(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.SkillFilter), args["freeWord"].(*ent.SkillFreeWord), args["orderBy"].(*ent.SkillOrder)), true

	case "Query.GetAllTeams":
		if e.complexity.Query.GetAllTeams == nil {
			break
		}

		args, err := ec.field_Query_GetAllTeams_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllTeams(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.TeamFilter), args["freeWord"].(*ent.TeamFreeWord), args["orderBy"].(ent.TeamOrderBy)), true

	case "Query.GetAllUsers":
		if e.complexity.Query.GetAllUsers == nil {
			break
		}

		args, err := ec.field_Query_GetAllUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllUsers(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.UserFilter), args["freeWord"].(*ent.UserFreeWord), args["orderBy"].(*ent.UserOrder)), true

	case "Query.GetAuditTrail":
		if e.complexity.Query.GetAuditTrail == nil {
			break
		}

		args, err := ec.field_Query_GetAuditTrail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAuditTrail(childComplexity, args["id"].(string)), true

	case "Query.GetCandidate":
		if e.complexity.Query.GetCandidate == nil {
			break
		}

		args, err := ec.field_Query_GetCandidate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCandidate(childComplexity, args["id"].(string)), true

	case "Query.GetCandidateInterview":
		if e.complexity.Query.GetCandidateInterview == nil {
			break
		}

		args, err := ec.field_Query_GetCandidateInterview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCandidateInterview(childComplexity, args["id"].(string)), true

	case "Query.GetCandidateJob":
		if e.complexity.Query.GetCandidateJob == nil {
			break
		}

		args, err := ec.field_Query_GetCandidateJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCandidateJob(childComplexity, args["id"].(string)), true

	case "Query.GetCandidateJobFeedback":
		if e.complexity.Query.GetCandidateJobFeedback == nil {
			break
		}

		args, err := ec.field_Query_GetCandidateJobFeedback_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCandidateJobFeedback(childComplexity, args["id"].(string)), true

	case "Query.GetCandidateJobGroupByInterview":
		if e.complexity.Query.GetCandidateJobGroupByInterview == nil {
			break
		}

		args, err := ec.field_Query_GetCandidateJobGroupByInterview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCandidateJobGroupByInterview(childComplexity, args["id"].(string)), true

	case "Query.GetCandidateJobGroupByStatus":
		if e.complexity.Query.GetCandidateJobGroupByStatus == nil {
			break
		}

		args, err := ec.field_Query_GetCandidateJobGroupByStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCandidateJobGroupByStatus(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.CandidateJobGroupByStatusFilter), args["freeWord"].(*ent.CandidateJobGroupByStatusFreeWord), args["orderBy"].(*ent.CandidateJobByOrder)), true

	case "Query.GetHiringJob":
		if e.complexity.Query.GetHiringJob == nil {
			break
		}

		args, err := ec.field_Query_GetHiringJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHiringJob(childComplexity, args["id"].(string)), true

	case "Query.GetSkill":
		if e.complexity.Query.GetSkill == nil {
			break
		}

		args, err := ec.field_Query_GetSkill_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSkill(childComplexity, args["id"].(string)), true

	case "Query.GetSkillType":
		if e.complexity.Query.GetSkillType == nil {
			break
		}

		args, err := ec.field_Query_GetSkillType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSkillType(childComplexity, args["id"].(string)), true

	case "Query.GetTeam":
		if e.complexity.Query.GetTeam == nil {
			break
		}

		args, err := ec.field_Query_GetTeam_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTeam(childComplexity, args["id"].(string)), true

	case "Query.GetUser":
		if e.complexity.Query.GetUser == nil {
			break
		}

		args, err := ec.field_Query_GetUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUser(childComplexity, args["id"].(string)), true

	case "Query.SelectionCandidates":
		if e.complexity.Query.SelectionCandidates == nil {
			break
		}

		args, err := ec.field_Query_SelectionCandidates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SelectionCandidates(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.CandidateFilter), args["freeWord"].(*ent.CandidateFreeWord), args["orderBy"].(*ent.CandidateOrder)), true

	case "Query.SelectionHiringJobs":
		if e.complexity.Query.SelectionHiringJobs == nil {
			break
		}

		args, err := ec.field_Query_SelectionHiringJobs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SelectionHiringJobs(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.HiringJobFilter), args["freeWord"].(*ent.HiringJobFreeWord), args["orderBy"].(ent.HiringJobOrderBy)), true

	case "Query.SelectionSkillTypes":
		if e.complexity.Query.SelectionSkillTypes == nil {
			break
		}

		args, err := ec.field_Query_SelectionSkillTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SelectionSkillTypes(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.SkillTypeFilter), args["freeWord"].(*ent.SkillTypeFreeWord), args["orderBy"].(*ent.SkillTypeOrder)), true

	case "Query.SelectionSkills":
		if e.complexity.Query.SelectionSkills == nil {
			break
		}

		args, err := ec.field_Query_SelectionSkills_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SelectionSkills(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.SkillFilter), args["freeWord"].(*ent.SkillFreeWord), args["orderBy"].(*ent.SkillOrder)), true

	case "Query.SelectionTeams":
		if e.complexity.Query.SelectionTeams == nil {
			break
		}

		args, err := ec.field_Query_SelectionTeams_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SelectionTeams(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.TeamFilter), args["freeWord"].(*ent.TeamFreeWord), args["orderBy"].(ent.TeamOrderBy)), true

	case "Query.SelectionUsers":
		if e.complexity.Query.SelectionUsers == nil {
			break
		}

		args, err := ec.field_Query_SelectionUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SelectionUsers(childComplexity, args["pagination"].(*ent.PaginationInput), args["filter"].(*ent.UserFilter), args["freeWord"].(*ent.UserFreeWord), args["orderBy"].(*ent.UserOrder)), true

	case "Skill.created_at":
		if e.complexity.Skill.CreatedAt == nil {
			break
		}

		return e.complexity.Skill.CreatedAt(childComplexity), true

	case "Skill.deleted_at":
		if e.complexity.Skill.DeletedAt == nil {
			break
		}

		return e.complexity.Skill.DeletedAt(childComplexity), true

	case "Skill.description":
		if e.complexity.Skill.Description == nil {
			break
		}

		return e.complexity.Skill.Description(childComplexity), true

	case "Skill.id":
		if e.complexity.Skill.ID == nil {
			break
		}

		return e.complexity.Skill.ID(childComplexity), true

	case "Skill.name":
		if e.complexity.Skill.Name == nil {
			break
		}

		return e.complexity.Skill.Name(childComplexity), true

	case "Skill.skill_type":
		if e.complexity.Skill.SkillType == nil {
			break
		}

		return e.complexity.Skill.SkillType(childComplexity), true

	case "Skill.updated_at":
		if e.complexity.Skill.UpdatedAt == nil {
			break
		}

		return e.complexity.Skill.UpdatedAt(childComplexity), true

	case "SkillEdge.cursor":
		if e.complexity.SkillEdge.Cursor == nil {
			break
		}

		return e.complexity.SkillEdge.Cursor(childComplexity), true

	case "SkillEdge.node":
		if e.complexity.SkillEdge.Node == nil {
			break
		}

		return e.complexity.SkillEdge.Node(childComplexity), true

	case "SkillResponse.data":
		if e.complexity.SkillResponse.Data == nil {
			break
		}

		return e.complexity.SkillResponse.Data(childComplexity), true

	case "SkillResponseGetAll.edges":
		if e.complexity.SkillResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.SkillResponseGetAll.Edges(childComplexity), true

	case "SkillResponseGetAll.pagination":
		if e.complexity.SkillResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.SkillResponseGetAll.Pagination(childComplexity), true

	case "SkillSelection.id":
		if e.complexity.SkillSelection.ID == nil {
			break
		}

		return e.complexity.SkillSelection.ID(childComplexity), true

	case "SkillSelection.name":
		if e.complexity.SkillSelection.Name == nil {
			break
		}

		return e.complexity.SkillSelection.Name(childComplexity), true

	case "SkillSelectionEdge.cursor":
		if e.complexity.SkillSelectionEdge.Cursor == nil {
			break
		}

		return e.complexity.SkillSelectionEdge.Cursor(childComplexity), true

	case "SkillSelectionEdge.node":
		if e.complexity.SkillSelectionEdge.Node == nil {
			break
		}

		return e.complexity.SkillSelectionEdge.Node(childComplexity), true

	case "SkillSelectionResponseGetAll.edges":
		if e.complexity.SkillSelectionResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.SkillSelectionResponseGetAll.Edges(childComplexity), true

	case "SkillSelectionResponseGetAll.pagination":
		if e.complexity.SkillSelectionResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.SkillSelectionResponseGetAll.Pagination(childComplexity), true

	case "SkillType.created_at":
		if e.complexity.SkillType.CreatedAt == nil {
			break
		}

		return e.complexity.SkillType.CreatedAt(childComplexity), true

	case "SkillType.deleted_at":
		if e.complexity.SkillType.DeletedAt == nil {
			break
		}

		return e.complexity.SkillType.DeletedAt(childComplexity), true

	case "SkillType.description":
		if e.complexity.SkillType.Description == nil {
			break
		}

		return e.complexity.SkillType.Description(childComplexity), true

	case "SkillType.id":
		if e.complexity.SkillType.ID == nil {
			break
		}

		return e.complexity.SkillType.ID(childComplexity), true

	case "SkillType.name":
		if e.complexity.SkillType.Name == nil {
			break
		}

		return e.complexity.SkillType.Name(childComplexity), true

	case "SkillType.updated_at":
		if e.complexity.SkillType.UpdatedAt == nil {
			break
		}

		return e.complexity.SkillType.UpdatedAt(childComplexity), true

	case "SkillTypeEdge.cursor":
		if e.complexity.SkillTypeEdge.Cursor == nil {
			break
		}

		return e.complexity.SkillTypeEdge.Cursor(childComplexity), true

	case "SkillTypeEdge.node":
		if e.complexity.SkillTypeEdge.Node == nil {
			break
		}

		return e.complexity.SkillTypeEdge.Node(childComplexity), true

	case "SkillTypeResponse.data":
		if e.complexity.SkillTypeResponse.Data == nil {
			break
		}

		return e.complexity.SkillTypeResponse.Data(childComplexity), true

	case "SkillTypeResponseGetAll.edges":
		if e.complexity.SkillTypeResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.SkillTypeResponseGetAll.Edges(childComplexity), true

	case "SkillTypeResponseGetAll.pagination":
		if e.complexity.SkillTypeResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.SkillTypeResponseGetAll.Pagination(childComplexity), true

	case "SkillTypeSelection.id":
		if e.complexity.SkillTypeSelection.ID == nil {
			break
		}

		return e.complexity.SkillTypeSelection.ID(childComplexity), true

	case "SkillTypeSelection.name":
		if e.complexity.SkillTypeSelection.Name == nil {
			break
		}

		return e.complexity.SkillTypeSelection.Name(childComplexity), true

	case "SkillTypeSelection.skills":
		if e.complexity.SkillTypeSelection.Skills == nil {
			break
		}

		return e.complexity.SkillTypeSelection.Skills(childComplexity), true

	case "SkillTypeSelectionEdge.cursor":
		if e.complexity.SkillTypeSelectionEdge.Cursor == nil {
			break
		}

		return e.complexity.SkillTypeSelectionEdge.Cursor(childComplexity), true

	case "SkillTypeSelectionEdge.node":
		if e.complexity.SkillTypeSelectionEdge.Node == nil {
			break
		}

		return e.complexity.SkillTypeSelectionEdge.Node(childComplexity), true

	case "SkillTypeSelectionResponseGetAll.edges":
		if e.complexity.SkillTypeSelectionResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.SkillTypeSelectionResponseGetAll.Edges(childComplexity), true

	case "SkillTypeSelectionResponseGetAll.pagination":
		if e.complexity.SkillTypeSelectionResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.SkillTypeSelectionResponseGetAll.Pagination(childComplexity), true

	case "Team.created_at":
		if e.complexity.Team.CreatedAt == nil {
			break
		}

		return e.complexity.Team.CreatedAt(childComplexity), true

	case "Team.deleted_at":
		if e.complexity.Team.DeletedAt == nil {
			break
		}

		return e.complexity.Team.DeletedAt(childComplexity), true

	case "Team.id":
		if e.complexity.Team.ID == nil {
			break
		}

		return e.complexity.Team.ID(childComplexity), true

	case "Team.is_able_to_delete":
		if e.complexity.Team.IsAbleToDelete == nil {
			break
		}

		return e.complexity.Team.IsAbleToDelete(childComplexity), true

	case "Team.members":
		if e.complexity.Team.Members == nil {
			break
		}

		return e.complexity.Team.Members(childComplexity), true

	case "Team.name":
		if e.complexity.Team.Name == nil {
			break
		}

		return e.complexity.Team.Name(childComplexity), true

	case "Team.opening_requests":
		if e.complexity.Team.OpeningRequests == nil {
			break
		}

		return e.complexity.Team.OpeningRequests(childComplexity), true

	case "Team.slug":
		if e.complexity.Team.Slug == nil {
			break
		}

		return e.complexity.Team.Slug(childComplexity), true

	case "Team.updated_at":
		if e.complexity.Team.UpdatedAt == nil {
			break
		}

		return e.complexity.Team.UpdatedAt(childComplexity), true

	case "TeamEdge.cursor":
		if e.complexity.TeamEdge.Cursor == nil {
			break
		}

		return e.complexity.TeamEdge.Cursor(childComplexity), true

	case "TeamEdge.node":
		if e.complexity.TeamEdge.Node == nil {
			break
		}

		return e.complexity.TeamEdge.Node(childComplexity), true

	case "TeamResponse.data":
		if e.complexity.TeamResponse.Data == nil {
			break
		}

		return e.complexity.TeamResponse.Data(childComplexity), true

	case "TeamResponseGetAll.edges":
		if e.complexity.TeamResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.TeamResponseGetAll.Edges(childComplexity), true

	case "TeamResponseGetAll.pagination":
		if e.complexity.TeamResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.TeamResponseGetAll.Pagination(childComplexity), true

	case "TeamSelection.id":
		if e.complexity.TeamSelection.ID == nil {
			break
		}

		return e.complexity.TeamSelection.ID(childComplexity), true

	case "TeamSelection.name":
		if e.complexity.TeamSelection.Name == nil {
			break
		}

		return e.complexity.TeamSelection.Name(childComplexity), true

	case "TeamSelectionEdge.cursor":
		if e.complexity.TeamSelectionEdge.Cursor == nil {
			break
		}

		return e.complexity.TeamSelectionEdge.Cursor(childComplexity), true

	case "TeamSelectionEdge.node":
		if e.complexity.TeamSelectionEdge.Node == nil {
			break
		}

		return e.complexity.TeamSelectionEdge.Node(childComplexity), true

	case "TeamSelectionResponseGetAll.edges":
		if e.complexity.TeamSelectionResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.TeamSelectionResponseGetAll.Edges(childComplexity), true

	case "TeamSelectionResponseGetAll.pagination":
		if e.complexity.TeamSelectionResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.TeamSelectionResponseGetAll.Pagination(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.team":
		if e.complexity.User.Team == nil {
			break
		}

		return e.complexity.User.Team(childComplexity), true

	case "User.work_email":
		if e.complexity.User.WorkEmail == nil {
			break
		}

		return e.complexity.User.WorkEmail(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserResponse.data":
		if e.complexity.UserResponse.Data == nil {
			break
		}

		return e.complexity.UserResponse.Data(childComplexity), true

	case "UserResponseGetAll.edges":
		if e.complexity.UserResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.UserResponseGetAll.Edges(childComplexity), true

	case "UserResponseGetAll.pagination":
		if e.complexity.UserResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.UserResponseGetAll.Pagination(childComplexity), true

	case "UserSelection.id":
		if e.complexity.UserSelection.ID == nil {
			break
		}

		return e.complexity.UserSelection.ID(childComplexity), true

	case "UserSelection.name":
		if e.complexity.UserSelection.Name == nil {
			break
		}

		return e.complexity.UserSelection.Name(childComplexity), true

	case "UserSelection.work_email":
		if e.complexity.UserSelection.WorkEmail == nil {
			break
		}

		return e.complexity.UserSelection.WorkEmail(childComplexity), true

	case "UserSelectionEdge.cursor":
		if e.complexity.UserSelectionEdge.Cursor == nil {
			break
		}

		return e.complexity.UserSelectionEdge.Cursor(childComplexity), true

	case "UserSelectionEdge.node":
		if e.complexity.UserSelectionEdge.Node == nil {
			break
		}

		return e.complexity.UserSelectionEdge.Node(childComplexity), true

	case "UserSelectionResponseGetAll.edges":
		if e.complexity.UserSelectionResponseGetAll.Edges == nil {
			break
		}

		return e.complexity.UserSelectionResponseGetAll.Edges(childComplexity), true

	case "UserSelectionResponseGetAll.pagination":
		if e.complexity.UserSelectionResponseGetAll.Pagination == nil {
			break
		}

		return e.complexity.UserSelectionResponseGetAll.Pagination(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAttachmentInput,
		ec.unmarshalInputAuditTrailFilter,
		ec.unmarshalInputAuditTrailFreeWord,
		ec.unmarshalInputAuditTrailOrder,
		ec.unmarshalInputCandidateFilter,
		ec.unmarshalInputCandidateFreeWord,
		ec.unmarshalInputCandidateInterviewCalendarFilter,
		ec.unmarshalInputCandidateInterviewFilter,
		ec.unmarshalInputCandidateInterviewFreeWord,
		ec.unmarshalInputCandidateInterviewOrder,
		ec.unmarshalInputCandidateInterviewValidateInput,
		ec.unmarshalInputCandidateJobByOrder,
		ec.unmarshalInputCandidateJobFeedbackFilter,
		ec.unmarshalInputCandidateJobFeedbackFreeWord,
		ec.unmarshalInputCandidateJobFeedbackOrder,
		ec.unmarshalInputCandidateJobFilter,
		ec.unmarshalInputCandidateJobFreeWord,
		ec.unmarshalInputCandidateJobGroupByStatusFilter,
		ec.unmarshalInputCandidateJobGroupByStatusFreeWord,
		ec.unmarshalInputCandidateJobOrder,
		ec.unmarshalInputCandidateOrder,
		ec.unmarshalInputEntitySkillRecordInput,
		ec.unmarshalInputHiringJobFilter,
		ec.unmarshalInputHiringJobFreeWord,
		ec.unmarshalInputHiringJobOrderBy,
		ec.unmarshalInputNewAttachmentInput,
		ec.unmarshalInputNewCandidateInput,
		ec.unmarshalInputNewCandidateInterview4CalendarInput,
		ec.unmarshalInputNewCandidateInterviewInput,
		ec.unmarshalInputNewCandidateJobFeedbackInput,
		ec.unmarshalInputNewCandidateJobInput,
		ec.unmarshalInputNewHiringJobInput,
		ec.unmarshalInputNewSkillInput,
		ec.unmarshalInputNewSkillTypeInput,
		ec.unmarshalInputNewTeamInput,
		ec.unmarshalInputNewUserInput,
		ec.unmarshalInputPaginationInput,
		ec.unmarshalInputSkillFilter,
		ec.unmarshalInputSkillFreeWord,
		ec.unmarshalInputSkillOrder,
		ec.unmarshalInputSkillTypeFilter,
		ec.unmarshalInputSkillTypeFreeWord,
		ec.unmarshalInputSkillTypeOrder,
		ec.unmarshalInputTeamFilter,
		ec.unmarshalInputTeamFreeWord,
		ec.unmarshalInputTeamOrderBy,
		ec.unmarshalInputUpdateCandidateAttachment,
		ec.unmarshalInputUpdateCandidateInput,
		ec.unmarshalInputUpdateCandidateInterviewInput,
		ec.unmarshalInputUpdateCandidateInterviewScheduleInput,
		ec.unmarshalInputUpdateCandidateInterviewStatusInput,
		ec.unmarshalInputUpdateCandidateJobFeedbackInput,
		ec.unmarshalInputUpdateCandidateJobStatus,
		ec.unmarshalInputUpdateHiringJobInput,
		ec.unmarshalInputUpdateSkillInput,
		ec.unmarshalInputUpdateSkillTypeInput,
		ec.unmarshalInputUpdateTeamInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateUserStatusInput,
		ec.unmarshalInputUserFilter,
		ec.unmarshalInputUserFreeWord,
		ec.unmarshalInputUserOrder,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._queryMiddleware(ctx, rc.Operation, func(ctx context.Context) (interface{}, error) {
				return ec._Query(ctx, rc.Operation.SelectionSet), nil
			})
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._mutationMiddleware(ctx, rc.Operation, func(ctx context.Context) (interface{}, error) {
				return ec._Mutation(ctx, rc.Operation.SelectionSet), nil
			})
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/attachment.graphql", Input: `type Attachment {
  id: ID!
  document_name: String!
  document_id: ID!
}

input NewAttachmentInput {
  id: ID
  document_name: String!
  document_id: ID!
}

enum AttachmentRelationType {
  candidate_jobs
  candidate_job_feedbacks
}
`, BuiltIn: false},
	{Name: "../schema/audit_trail.graphql", Input: `enum AuditTrailOrderField {
  created_at
}

input AuditTrailFilter  {
  recordId: String
  module: projectModule
  actionType: auditTrailAction
  fromDate: Time
  toDate: Time
}

input AuditTrailFreeWord  {
  recordChange: String
}

input AuditTrailOrder {
  direction: OrderDirection!
  field: AuditTrailOrderField!
}

type AuditTrail {
  id: ID!
  createdBy: String!
  createdInfo: User!
  recordId: String!
  module: projectModule!
  actionType: auditTrailAction!
  note: String!
  record_changes: JSON!
  createdAt: Time!
  updatedAt: Time!
}

type AuditTrailEdge {
  node: AuditTrail!
  cursor: Cursor!
}

type AuditTrailResponse {
  data: AuditTrail!
}

type AuditTrailResponseGetAll {
  edges: [AuditTrailEdge!]!
  pagination: Pagination!
}
`, BuiltIn: false},
	{Name: "../schema/authentication.graphql", Input: `type AuthenticationToken {
  accessToken: String!
  refreshToken: String!
  tokenType: String!
  expiresAt: Time!
  email: String!
}
`, BuiltIn: false},
	{Name: "../schema/candidate_interview.graphql", Input: `enum CandidateInterviewOrderField {
  created_at
  name
  interview_date
}

enum CandidateJobStatusEditable {
  applied
  interviewing
}

enum CandidateInterviewStatus {
  invited_to_interview
  interviewing
  done
  cancelled
}

type CandidateInterview {
  id: ID!
  title: String!
  description: String
  candidate_job_id: ID!
  interview_date: Time!
  start_from: Time!
  end_at: Time!
  interviewer: [User!]!
  candidate_job: CandidateJob!
  edit_able: Boolean!
  owner: User
  status: CandidateInterviewStatus!
  edited: Boolean!
  created_at: Time!
  updated_at: Time!
}

input CandidateInterviewOrder {
  field: CandidateInterviewOrderField!
  direction: OrderDirection!
}

input NewCandidateInterviewInput {
  title: String!
  description: String!
  candidate_job_id: ID!
  interview_date: Time!
  start_from: Time!
  end_at: Time!
  interviewer: [ID!]!
}

input NewCandidateInterview4CalendarInput {
  title: String!
  description: String!
  candidate_id: [ID!]!
  job_id: ID!
  interview_date: Time!
  start_from: Time!
  end_at: Time!
  interviewer: [ID!]!
}

input UpdateCandidateInterviewInput {
  title: String!
  description: String!
  candidate_job_id: ID!
  interview_date: Time!
  start_from: Time!
  end_at: Time!
  interviewer: [ID!]
}

input UpdateCandidateInterviewScheduleInput {
  interview_date: Time!
  start_from: Time!
  end_at: Time!
  interviewer: [ID!]
}

input CandidateInterviewFilter {
  candidate_job_id: ID!
  interview_date: Time
  start_from: Time
  end_at: Time
  interviewer: [ID!]
  from_date: Time
  to_date: Time
}

input CandidateInterviewCalendarFilter {
  interview_date: Time
  start_from: Time
  end_at: Time
  interviewer: [ID!]
  from_date: Time
  to_date: Time
  team_id: ID
  hiring_job_id: ID
  interview_date_from: Time
  interview_date_to: Time
}

input CandidateInterviewValidateInput {
  id: ID
  title: String!
  candidate_job_id: ID
  candidate_id: ID
  job_id: ID
  interview_date: Time!
  start_from: Time!
  end_at: Time!
  interviewer: [ID!]!
}

type CandidateInterviewValidate {
  interviewer_invalid: [ID!]
  invalid_schedule: Boolean!
  candidate_name: String!
  candidate_job_invalid_status: Boolean!
}

type CandidateInterviewResponseValidate {
  data: CandidateInterviewValidate
}

input CandidateInterviewFreeWord {
  title: String
  description: String
}

type CandidateInterviewResponse {
  data: CandidateInterview
}

type CandidateInterviewEdge {
  node: CandidateInterview!
  cursor: Cursor!
}

type CandidateInterviewResponseGetAll {
  edges: [CandidateInterviewEdge!]!
  pagination: Pagination!
}

enum CandidateInterviewStatusEditable {
  done
  cancelled
}

input UpdateCandidateInterviewStatusInput {
  status: CandidateInterviewStatusEditable!
}
`, BuiltIn: false},
	{Name: "../schema/candidate_job.graphql", Input: `enum CandidateJobStatusEnded {
  hired
  kiv
  offer_lost
  ex_staff
}

enum CandidateJobStatusOpen{
  applied
  interviewing
  offering
}
enum CandidateJobStatusAbleToClose{
  interviewing
  offering
}

enum CandidateJobStatusFailed{
  offer_lost
  kiv
}

enum CandidateJobStatus {
  hired
  kiv
  offer_lost
  ex_staff
  applied
  interviewing
  offering
  new
}

enum CandidateJobOrderField {
  created_at
  updated_at
}

enum CandidateJobOrderByField {
  created_at
  updated_at
  priority
  hiring_job_created_at
}

enum CandidateJobFailedReason {
  poor_professionalism
  poor_fit_and_engagement
  over_expectations
  over_qualification
  language_deficiency
  weak_technical_skills
  poor_interpersonal_skills
  poor_problem_solving_skills
  poor_management_skills
  candidate_withdrawal
  others
}

enum CandidateJobOrderByAdditionalField {
  priority
  hiring_job_created_at
}

input CandidateJobGroupByStatusFilter{
  hiring_job_id: [ID!]
  team_id: [ID!]
  priority: [Int!]
  skill_id: [ID!]
  from_date: Time
  to_date: Time
  location: [LocationEnum!]
  created_by_ids: [ID!]
}

input CandidateJobGroupByStatusFreeWord{
  job_title: String
}

type CandidateJob {
  id: ID!
  candidate_id: ID!
  hiring_job_id: ID!
  status: CandidateJobStatus!
  attachments: [Attachment!]
  candidate: Candidate
  hiring_job: HiringJob
  owner: User
  failed_reason: [CandidateJobFailedReason!]
  is_able_to_delete: Boolean!
  interview_feature: Int!
  steps: [CandidateJobStep!]
  created_at: Time!
  updated_at: Time!
}

type CandidateJobGroupInterviewFeedback {
  interview: [CandidateInterview!]
  feedback: [CandidateJobFeedback!]
}

type CandidateJobGroupByInterview {
  hired: CandidateJobGroupInterviewFeedback
  kiv: CandidateJobGroupInterviewFeedback
  offer_lost: CandidateJobGroupInterviewFeedback
  ex_staff: CandidateJobGroupInterviewFeedback
  applied: CandidateJobGroupInterviewFeedback
  interviewing: CandidateJobGroupInterviewFeedback
  offering: CandidateJobGroupInterviewFeedback
}

type CandidateJobGroupByStatus {
  hired: [CandidateJob!]
  kiv: [CandidateJob!]
  offer_lost: [CandidateJob!]
  ex_staff: [CandidateJob!]
  applied: [CandidateJob!]
  interviewing: [CandidateJob!]
  offering: [CandidateJob!]
}

input NewCandidateJobInput {
  candidate_id: ID!
  hiring_job_id: ID!
  status: CandidateJobStatus!
  attachments: [NewAttachmentInput!]
}

input UpdateCandidateAttachment {
  attachments: [NewAttachmentInput!]
}

input UpdateCandidateJobStatus {
  status: CandidateJobStatus!
  failed_reason: [CandidateJobFailedReason!]
}

type CandidateJobResponse {
  data: CandidateJob
}

type CandidateJobGroupByStatusResponse {
  data: CandidateJobGroupByStatus
  pagination: Pagination!
}

type CandidateJobGroupByInterviewResponse {
  data: CandidateJobGroupByInterview
}

type CandidateJobEdge {
  node: CandidateJob!
  cursor: Cursor!
}

type CandidateJobResponseGetAll {
  edges: [CandidateJobEdge!]!
  pagination: Pagination!
}

input CandidateJobFilter {
  status: CandidateJobStatus
  from_date: Time
  to_date: Time
  team_id: ID
  hiring_job_id: ID
  candidate_id: ID!
  failed_reason: [CandidateJobFailedReason!]
}

input CandidateJobOrder {
  direction: OrderDirection!
  field: CandidateJobOrderField!
}

input CandidateJobByOrder {
  direction: OrderDirection!
  field: CandidateJobOrderByField!
}

input CandidateJobFreeWord {
  team: String
  hiring_job: String
}
`, BuiltIn: false},
	{Name: "../schema/candidate_job_feedback.graphql", Input: `type CandidateJobFeedback {
  id: ID!
  created_by: ID!
  candidate_job_id: ID!
  candidate_job: CandidateJob!
  owner: User!
  feedback: String!
  edited: Boolean!
  attachments: [Attachment!]
  created_at: Time!
  updated_at: Time!
}

input NewCandidateJobFeedbackInput {
  candidate_job_id: ID!
  feedback: String!
  attachments: [NewAttachmentInput!]
}

input UpdateCandidateJobFeedbackInput {
  feedback: String!
  attachments: [NewAttachmentInput!]
}

enum CandidateJobFeedbackOrderField {
  created_at
}

input CandidateJobFeedbackOrder {
  field: CandidateJobFeedbackOrderField!
  direction: OrderDirection!
}

input CandidateJobFeedbackFilter {
  candidate_job_id: ID!
  created_by: ID
}

input CandidateJobFeedbackFreeWord {
  feedback: String
  user_name: String
}

type CandidateJobFeedbackResponse {
  data: CandidateJobFeedback
}

type CandidateJobFeedbackEdge {
  node: CandidateJobFeedback!
  cursor: Cursor!
}

type CandidateJobFeedbackResponseGetAll {
  edges: [CandidateJobFeedbackEdge!]!
  pagination: Pagination!
}
`, BuiltIn: false},
	{Name: "../schema/candidate_job_step.graphql", Input: `type CandidateJobStep {
  id: ID!
  candidate_job_id: ID!
  candidate_job_status: CandidateJobStatus!
  created_at: Time!
  updated_at: Time!
}
`, BuiltIn: false},
	{Name: "../schema/candidates.graphql", Input: `enum CandidateStatusEnum {
  applied
  interviewing
  offering
  hired
  kiv
  offer_lost
  ex_staff
  new
}

enum CandidateOrderField {
  name
  dob
  created_at
  last_apply_date
  email
}

enum CandidateReferenceType {
  eb
  rec
  hiring_platform
  reference
  headhunt
}

enum CandidateReferenceEB {
  tiktok_techvify_official
  tiktok_thedevdad
  linkedin_junie_truong
  other_linkedin
  group_seeding
  fanpage_techvify_careers
  google_search
  youtube_techvify_careers
  thread
  instagram
  twitter
  others
}

enum CandidateReferenceRec {
  linkedin
  facebook
  instagram
  thread
  github
  others
}

enum CandidateReferenceHiringPlatform {
  topcv
  vietnam_works
  itviec
}

input NewCandidateInput{
  name: String!
  email: String!
  phone: String!
  dob: Time
  reference_type: CandidateReferenceType!
  reference_value: String!
  reference_uid: ID!
  recruit_time: Time
  description: String!
  country: String!
  entity_skill_records: [EntitySkillRecordInput!]
  attachments: [NewAttachmentInput!]
}

input UpdateCandidateInput {
  name: String!
  email: String!
  phone: String!
  dob: Time
  reference_type: CandidateReferenceType!
  reference_value: String!
  reference_uid: ID!
  recruit_time: Time
  description: String!
  country: String!
  entity_skill_records: [EntitySkillRecordInput!]
  attachments: [NewAttachmentInput!]
}

input CandidateFilter {
  name: String
  email: String
  phone: String
  dob_from_date: Time
  dob_to_date: Time
  status: CandidateStatusEnum
  from_date: Time
  to_date: Time
  is_black_list: Boolean
  job_id: ID
  is_able_to_interview: Boolean
  failed_reason: [CandidateJobFailedReason!]
  reference_uid: [ID!]
  recruit_time_from_date: Time
  recruit_time_to_date: Time
  skill_type_ids: [ID!]
  skill_ids: [ID!]
  reference_type: [CandidateReferenceType!]
}

input CandidateFreeWord {
  name: String
  email: String
  phone: String
}

input CandidateOrder {
  direction: OrderDirection!
  field: CandidateOrderField!
}

type Candidate {
  id: ID!
  name: String!
  email: String!
  phone: String!
  dob: Time
  status: CandidateStatusEnum!
  is_black_list: Boolean!
  last_apply_date: Time
  is_able_to_delete: Boolean!
  hiring_job_title: String!
  reference_type: CandidateReferenceType!
  reference_value: String!
  reference_uid: ID!
  recruit_time: Time
  description: String!
  country: String!
  attachments: [Attachment!]
  entity_skill_types: [EntitySkillType!]
  reference_user: User
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

type CandidateResponse {
  data: Candidate!
}

type CandidateResponseGetAll {
  edges: [CandidateEdge!]!
  pagination: Pagination!
}

type CandidateEdge {
  node: Candidate!
  cursor: Cursor!
}

type CandidateSelection {
  id: ID!
  name: String!
  phone: String!
  email: String!
}

type CandidateSelectionEdge {
  node: CandidateSelection!
  cursor: Cursor!
}

type CandidateSelectionResponseGetAll {
  edges: [CandidateSelectionEdge!]!
  pagination: Pagination!
}

type EntitySkillType {
  id: ID!
  name: String!
  description: String
  entity_skills: [EntitySkillRecord!]
  orderId: Int!
}

type EntitySkillRecord {
  id: ID!
  name: String!
  description: String
  skill_id: ID!
  orderId: Int!
}

input EntitySkillRecordInput {
  id: ID
  skill_id: ID!
  orderId: Int!
}
`, BuiltIn: false},
	{Name: "../schema/common.graphql", Input: `directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @validation(constraints: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION
directive @authorize on QUERY | MUTATION | FIELD_DEFINITION

scalar Time
scalar Map
scalar Cursor
scalar Base64
scalar Upload
scalar JSON

enum OrderDirection {
    ASC
    DESC
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type Pagination {
  page: Int!
  perPage: Int!
  total: Int!
}

input PaginationInput {
  page: Int
  perPage: Int
}

enum AttachmentAction {
  UPLOAD
  DOWNLOAD
}

enum AttachmentFolder{
  candidate
  candidate_feedback
}

input AttachmentInput {
  id: ID!
  folder: AttachmentFolder!
  fileName: String!
  action: AttachmentAction!
}

type AttachmentResponse {
  fileName: String!
  url: String!
  action: AttachmentAction!
  id: String!
}

type Base64Response {
  data: Base64!
}

enum projectModule {
  teams
  hiring_jobs
  candidates
  skills
}

enum auditTrailAction {
  create
  update
  delete
}

enum I18nLanguage {
  en
  vi
}
`, BuiltIn: false},
	{Name: "../schema/hiring_job.graphql", Input: `enum LocationEnum {
  ha_noi
  ho_chi_minh
  da_nang
  japan
  singapore
}

enum SalaryTypeEnum {
  range
  up_to
  negotiate
  minimum
}

enum CurrencyEnum {
  vnd
  usd
  jpy
}

enum HiringJobStatus {
  draft
  opened
  closed
}

enum HiringJobOrderByField {
  name
  created_at
  amount
  salary_from
  salary_to
  last_apply_date
  total_candidates_recruited
  priority
}

enum HiringJobOrderByAdditionalField {
  total_candidates_recruited
}

input HiringJobOrderBy {
  direction: OrderDirection!
  field: HiringJobOrderByField!
}

input HiringJobFilter {
  name: String
  team_ids: [ID!]
  status: HiringJobStatus
  priority: Int
  location: [LocationEnum]
  skill_ids: [ID!]
  created_by_ids: [ID!]
}

input HiringJobFreeWord {
  name: String
}

input NewHiringJobInput {
  status: HiringJobStatus!
  name: String!
  description: String!
  amount: Int!
  location: LocationEnum!
  salary_type: SalaryTypeEnum!
  salary_from: Int!
  salary_to: Int!
  currency: CurrencyEnum!
  team_id: ID!
  created_by: ID!
  priority: Int!
  entity_skill_records: [EntitySkillRecordInput!]
}

input UpdateHiringJobInput {
  name: String!
  description: String!
  amount: Int!
  location: LocationEnum!
  salary_type: SalaryTypeEnum!
  salary_from: Int!
  salary_to: Int!
  currency: CurrencyEnum!
  team_id: ID!
  created_by: ID!
  priority: Int!
  entity_skill_records: [EntitySkillRecordInput!]
}

type HiringJob {
  id: ID!
  name: String!
  slug: String!
  description: String!
  amount: Int!
  location: LocationEnum!
  salary_type: SalaryTypeEnum!
  salary_from: Int!
  salary_to: Int!
  currency: CurrencyEnum!
  team: Team!
  user: User!
  status: HiringJobStatus!
  total_candidates_recruited: Int!
  is_able_to_delete: Boolean!
  is_able_to_close: Boolean!
  priority: Int!
  entity_skill_types: [EntitySkillType!]
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

type HiringJobResponse {
  data: HiringJob
}

type HiringJobEdge {
  node: HiringJob!
  cursor: Cursor!
}

type HiringJobResponseGetAll {
  edges: [HiringJobEdge!]!
  pagination: Pagination!
}

type HiringJobSelection {
  id: ID!
  name: String!
}

type HiringJobSelectionEdge {
  node: HiringJobSelection!
  cursor: Cursor!
}

type HiringJobSelectionResponseGetAll {
  edges: [HiringJobSelectionEdge!]!
  pagination: Pagination!
}

# Path: schema/hiring_job.graphql
`, BuiltIn: false},
	{Name: "../schema/mutation.graphql", Input: `type Mutation {
  #Attachment
  CreateAttachmentSASURL(input: AttachmentInput!): AttachmentResponse!

  # User
  UpdateUser(id: ID!, input: UpdateUserInput!, note: String!): UserResponse!
  UpdateUserStatus(id: ID!, input: UpdateUserStatusInput!, note: String!): UserResponse!

  # Team
  CreateTeam(input: NewTeamInput!, note: String!): TeamResponse!
  UpdateTeam(id: ID!, input: UpdateTeamInput!, note: String!): TeamResponse!
  DeleteTeam(id: ID!, note: String!): Boolean!

  # HiringJob
  CreateHiringJob(input: NewHiringJobInput!, note: String!): HiringJobResponse!
  UpdateHiringJob(id: ID!, input: UpdateHiringJobInput!, note: String!): HiringJobResponse!
  DeleteHiringJob(id: ID!, note: String!): Boolean!
  UpdateHiringJobStatus(id: ID!, status: HiringJobStatus!, note: String!): HiringJobResponse!

  # Candidate
  CreateCandidate(input: NewCandidateInput!, note: String!): CandidateResponse!
  UpdateCandidate(id: ID!, input: UpdateCandidateInput!, note: String!): CandidateResponse!
  DeleteCandidate(id: ID!, note: String!): Boolean!
  SetBlackListCandidate(id: ID!, is_black_list: Boolean!, note: String!): Boolean!

  # CandidateJob
  CreateCandidateJob(input: NewCandidateJobInput!, note: String): CandidateJobResponse!
  UpdateCandidateJobAttachment(id: ID!, input: UpdateCandidateAttachment!, note: String): CandidateJobResponse!
  DeleteCandidateJob(id: ID!, note: String): Boolean!
  UpdateCandidateJobStatus(id: ID!, input: UpdateCandidateJobStatus!, note: String): CandidateJobResponse!

  # CandidateJobFeedback
  CreateCandidateJobFeedback(input: NewCandidateJobFeedbackInput!, note: String): CandidateJobFeedbackResponse!
  UpdateCandidateJobFeedback(id: ID!, input: UpdateCandidateJobFeedbackInput!, note: String): CandidateJobFeedbackResponse!
  DeleteCandidateJobFeedback(id: ID!, note: String): Boolean!

  # CandidateInterview
  CreateCandidateInterview(input: NewCandidateInterviewInput!, note: String): CandidateInterviewResponse!
  UpdateCandidateInterview(id: ID!, input: UpdateCandidateInterviewInput!, note: String): CandidateInterviewResponse!
  UpdateCandidateInterviewSchedule(id: ID!, input: UpdateCandidateInterviewScheduleInput!): CandidateInterviewResponse!
  DeleteCandidateInterview(id: ID!, note: String): Boolean!
  CreateCandidateInterview4Calendar(input: NewCandidateInterview4CalendarInput!, note: String): Boolean!
  UpdateCandidateInterviewStatus(id: ID!, input: UpdateCandidateInterviewStatusInput!, note: String): Boolean!

  #import
  ImportCandidate(file: Upload!): Boolean!

  #Skill
  CreateSkill(input: NewSkillInput!, note: String!): SkillResponse!
  UpdateSkill(id: ID!, input: UpdateSkillInput!, note: String!): SkillResponse!
  DeleteSkill(id: ID!, note: String!): Boolean!

  #SkillType
  CreateSkillType(input: NewSkillTypeInput!, note: String!): SkillTypeResponse!
  UpdateSkillType(id: ID!, input: UpdateSkillTypeInput!, note: String!): SkillTypeResponse!
  DeleteSkillType(id: ID!, note: String!): Boolean!

  #Validate
  ValidateCandidateInterview(input: CandidateInterviewValidateInput!): CandidateInterviewResponseValidate!
}
`, BuiltIn: false},
	{Name: "../schema/query.graphql", Input: `type Query {
	# Team
	GetTeam(id: ID!): TeamResponse!
	GetAllTeams(pagination: PaginationInput, filter: TeamFilter, freeWord: TeamFreeWord, orderBy: TeamOrderBy!): TeamResponseGetAll!

	# User
	GetUser(id: ID!): UserResponse!
	GetAllUsers(pagination: PaginationInput, filter: UserFilter, freeWord: UserFreeWord, orderBy: UserOrder): UserResponseGetAll!

	# HiringJob
	GetHiringJob(id: ID!): HiringJobResponse!
	GetAllHiringJobs(pagination: PaginationInput, filter: HiringJobFilter, freeWord: HiringJobFreeWord, orderBy: HiringJobOrderBy!): HiringJobResponseGetAll!

	# AuditTrail
	GetAuditTrail(id: ID!): AuditTrailResponse!
	GetAllAuditTrails(pagination: PaginationInput, filter: AuditTrailFilter, freeWord: AuditTrailFreeWord, orderBy: AuditTrailOrder): AuditTrailResponseGetAll!

	# Candidate
	GetCandidate(id: ID!): CandidateResponse!
	GetAllCandidates(pagination: PaginationInput, filter: CandidateFilter, freeWord: CandidateFreeWord, orderBy: CandidateOrder): CandidateResponseGetAll!

	# CandidateJob
	GetCandidateJob(id: ID!): CandidateJobResponse!
	GetAllCandidateJobs(pagination: PaginationInput, filter: CandidateJobFilter!, freeWord: CandidateJobFreeWord, orderBy: CandidateJobOrder): CandidateJobResponseGetAll!
	GetCandidateJobGroupByStatus(pagination: PaginationInput, filter: CandidateJobGroupByStatusFilter, freeWord: CandidateJobGroupByStatusFreeWord, orderBy: CandidateJobByOrder): CandidateJobGroupByStatusResponse!
	GetCandidateJobGroupByInterview(id : ID!): CandidateJobGroupByInterviewResponse!

	# CandidateJobFeedback
	GetCandidateJobFeedback(id: ID!): CandidateJobFeedbackResponse!
	GetAllCandidateJobFeedbacks(pagination: PaginationInput, filter: CandidateJobFeedbackFilter!, freeWord: CandidateJobFeedbackFreeWord, orderBy: CandidateJobFeedbackOrder): CandidateJobFeedbackResponseGetAll!

	# CandidateInterview
	GetCandidateInterview(id: ID!): CandidateInterviewResponse!
	GetAllCandidateInterviews(pagination: PaginationInput, filter: CandidateInterviewFilter!, freeWord: CandidateInterviewFreeWord, orderBy: CandidateInterviewOrder): CandidateInterviewResponseGetAll!
	GetAllCandidateInterview4Calendar(pagination: PaginationInput, filter: CandidateInterviewCalendarFilter, freeWord: CandidateInterviewFreeWord, orderBy: CandidateInterviewOrder): CandidateInterviewResponseGetAll!

	# Export
	ExportSampleCandidate(lang: I18nLanguage!): Base64Response!

	# Skill
  GetSkill(id: ID!): SkillResponse!
  GetAllSkills(pagination: PaginationInput, filter: SkillFilter, freeWord: SkillFreeWord, orderBy: SkillOrder): SkillResponseGetAll!

	# SkillType
	GetSkillType(id: ID!): SkillTypeResponse!
	GetAllSkillTypes(pagination: PaginationInput, filter: SkillTypeFilter, freeWord: SkillTypeFreeWord, orderBy: SkillTypeOrder): SkillTypeResponseGetAll!

	# Selection
	SelectionUsers(pagination: PaginationInput, filter: UserFilter, freeWord: UserFreeWord, orderBy: UserOrder): UserSelectionResponseGetAll!
	SelectionTeams(pagination: PaginationInput, filter: TeamFilter, freeWord: TeamFreeWord, orderBy: TeamOrderBy!): TeamSelectionResponseGetAll!
	SelectionHiringJobs(pagination: PaginationInput, filter: HiringJobFilter, freeWord: HiringJobFreeWord, orderBy: HiringJobOrderBy!): HiringJobSelectionResponseGetAll!
	SelectionCandidates(pagination: PaginationInput, filter: CandidateFilter, freeWord: CandidateFreeWord, orderBy: CandidateOrder): CandidateSelectionResponseGetAll!
	SelectionSkills(pagination: PaginationInput, filter: SkillFilter, freeWord: SkillFreeWord, orderBy: SkillOrder): SkillSelectionResponseGetAll!
	SelectionSkillTypes(pagination: PaginationInput, filter: SkillTypeFilter, freeWord: SkillTypeFreeWord, orderBy: SkillTypeOrder): SkillTypeSelectionResponseGetAll!
}

# Path: schema/query.graphql
`, BuiltIn: false},
	{Name: "../schema/skill_type.graphql", Input: `enum SkillTypeOrderField {
  name
  description
  created_at
}

input SkillTypeOrder {
  direction: OrderDirection!
  field: SkillTypeOrderField!
}

input SkillTypeFilter {
  name: String
}

input SkillTypeFreeWord {
  name: String
}

input NewSkillTypeInput {
  name: String!
  description: String!
}

input UpdateSkillTypeInput {
  name: String!
  description: String!
}

type SkillType {
  id: ID!
  name: String!
  description: String
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

type SkillTypeResponse {
  data: SkillType!
}

type SkillTypeEdge {
  node: SkillType!
  cursor: Cursor!
}

type SkillTypeResponseGetAll {
  edges: [SkillTypeEdge!]!
  pagination: Pagination!
}

type SkillTypeSelection {
  id: ID!
  name: String!
  skills: [SkillSelection!]
}

type SkillTypeSelectionEdge {
  node: SkillTypeSelection!
  cursor: Cursor!
}

type SkillTypeSelectionResponseGetAll {
  edges: [SkillTypeSelectionEdge!]!
  pagination: Pagination!
}


# Path: schema/skill_type.graphql
`, BuiltIn: false},
	{Name: "../schema/skills.graphql", Input: `enum SkillOrderField {
  name
  description
  created_at
}

input SkillOrder {
  direction: OrderDirection!
  field: SkillOrderField!
}

input SkillFilter {
  name: String
}

input SkillFreeWord {
  name: String
}

input NewSkillInput {
  name: String!
  description: String!
  skill_type_id: ID
}

input UpdateSkillInput {
  name: String!
  description: String!
  skill_type_id: ID
}

type Skill {
  id: ID!
  name: String!
  description: String
  skill_type: SkillType
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

type SkillResponse {
  data: Skill!
}

type SkillEdge {
  node: Skill!
  cursor: Cursor!
}

type SkillResponseGetAll {
  edges: [SkillEdge!]!
  pagination: Pagination!
}

type SkillSelection {
  id: ID!
  name: String!
}

type SkillSelectionEdge {
  node: SkillSelection!
  cursor: Cursor!
}

type SkillSelectionResponseGetAll {
  edges: [SkillSelectionEdge!]!
  pagination: Pagination!
}

# Path: schema/skill.graphql
`, BuiltIn: false},
	{Name: "../schema/team.graphql", Input: `enum TeamOrderByField {
  name
  created_at
  opening_requests
  newest_applied
}

enum TeamOrderByAdditionalField {
  opening_requests
  newest_applied
}

input TeamOrderBy {
  direction: OrderDirection!
  field: TeamOrderByField!
}

input TeamFilter {
  name: String
}

input TeamFreeWord {
  name: String
}

input NewTeamInput {
  name: String!
  members: [ID!]
}

input UpdateTeamInput {
  name: String!
  members: [ID!]
}

type Team {
  id: ID!
  name: String!
  slug: String!
  members: [User!]!
  opening_requests: Int!
  is_able_to_delete: Boolean!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

type TeamResponse {
  data: Team
}

type TeamEdge {
  node: Team!
  cursor: Cursor!
}

type TeamResponseGetAll {
  edges: [TeamEdge!]!
  pagination: Pagination!
}

type TeamSelection {
  id: ID!
  name: String!
}

type TeamSelectionEdge {
  node: TeamSelection!
  cursor: Cursor!
}

type TeamSelectionResponseGetAll {
  edges: [TeamSelectionEdge!]!
  pagination: Pagination!
}

# Path: schema/user.graphql
`, BuiltIn: false},
	{Name: "../schema/user.graphql", Input: `enum UserOrderField {
  name
  created_at
}

enum UserStatus {
  active
  inactive
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

type UserSelection {
  id: ID!
  name: String!
  work_email: String!
}

type User {
  id: ID!
  name: String!
  work_email: String!
  status: UserStatus!
  team: Team
}

type UserSelectionEdge {
  node: UserSelection!
  cursor: Cursor!
}

type UserSelectionResponseGetAll {
  edges: [UserSelectionEdge!]!
  pagination: Pagination!
}

input UserFilter {
  name: String
  ids: [ID!]
  ignore_ids: [ID!]
  not_in_team: Boolean
  status: UserStatus
}

input UserFreeWord {
  name: String
  work_email: String
}

input NewUserInput {
  name: String!
  work_email: String!
}

input UpdateUserInput {
  name: String!
  work_email: String!
  status: UserStatus!
}

type UserResponse {
  data: User
}

type UserEdge {
  node: User!
  cursor: Cursor!
}

type UserResponseGetAll {
  edges: [UserEdge!]!
  pagination: Pagination!
}

input UpdateUserStatusInput {
  status: UserStatus!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_validation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["constraints"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraints"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["constraints"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateAttachmentSASURL_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.AttachmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAttachmentInput2trecᚋentᚐAttachmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateCandidateInterview4Calendar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.NewCandidateInterview4CalendarInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewCandidateInterview4CalendarInput2trecᚋentᚐNewCandidateInterview4CalendarInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateCandidateInterview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.NewCandidateInterviewInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewCandidateInterviewInput2trecᚋentᚐNewCandidateInterviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateCandidateJobFeedback_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.NewCandidateJobFeedbackInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewCandidateJobFeedbackInput2trecᚋentᚐNewCandidateJobFeedbackInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateCandidateJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.NewCandidateJobInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewCandidateJobInput2trecᚋentᚐNewCandidateJobInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateCandidate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.NewCandidateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewCandidateInput2trecᚋentᚐNewCandidateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateHiringJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.NewHiringJobInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewHiringJobInput2trecᚋentᚐNewHiringJobInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateSkillType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.NewSkillTypeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewSkillTypeInput2trecᚋentᚐNewSkillTypeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateSkill_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.NewSkillInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewSkillInput2trecᚋentᚐNewSkillInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateTeam_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.NewTeamInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewTeamInput2trecᚋentᚐNewTeamInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteCandidateInterview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteCandidateJobFeedback_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteCandidateJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteCandidate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteHiringJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteSkillType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteSkill_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteTeam_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_ImportCandidate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["file"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_SetBlackListCandidate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["is_black_list"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black_list"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["is_black_list"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateCandidateInterviewSchedule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateCandidateInterviewScheduleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateCandidateInterviewScheduleInput2trecᚋentᚐUpdateCandidateInterviewScheduleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateCandidateInterviewStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateCandidateInterviewStatusInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateCandidateInterviewStatusInput2trecᚋentᚐUpdateCandidateInterviewStatusInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateCandidateInterview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateCandidateInterviewInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateCandidateInterviewInput2trecᚋentᚐUpdateCandidateInterviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateCandidateJobAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateCandidateAttachment
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateCandidateAttachment2trecᚋentᚐUpdateCandidateAttachment(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateCandidateJobFeedback_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateCandidateJobFeedbackInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateCandidateJobFeedbackInput2trecᚋentᚐUpdateCandidateJobFeedbackInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateCandidateJobStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateCandidateJobStatus
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateCandidateJobStatus2trecᚋentᚐUpdateCandidateJobStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateCandidate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateCandidateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateCandidateInput2trecᚋentᚐUpdateCandidateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateHiringJobStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.HiringJobStatus
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalNHiringJobStatus2trecᚋentᚐHiringJobStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateHiringJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateHiringJobInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateHiringJobInput2trecᚋentᚐUpdateHiringJobInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateSkillType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateSkillTypeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateSkillTypeInput2trecᚋentᚐUpdateSkillTypeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateSkill_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateSkillInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateSkillInput2trecᚋentᚐUpdateSkillInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateTeam_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateTeamInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateTeamInput2trecᚋentᚐUpdateTeamInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateUserStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateUserStatusInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateUserStatusInput2trecᚋentᚐUpdateUserStatusInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateUserInput2trecᚋentᚐUpdateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_ValidateCandidateInterview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CandidateInterviewValidateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCandidateInterviewValidateInput2trecᚋentᚐCandidateInterviewValidateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ExportSampleCandidate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.I18nLanguage
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNI18nLanguage2trecᚋentᚐI18nLanguage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllAuditTrails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.AuditTrailFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOAuditTrailFilter2ᚖtrecᚋentᚐAuditTrailFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.AuditTrailFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOAuditTrailFreeWord2ᚖtrecᚋentᚐAuditTrailFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.AuditTrailOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOAuditTrailOrder2ᚖtrecᚋentᚐAuditTrailOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllCandidateInterview4Calendar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.CandidateInterviewCalendarFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOCandidateInterviewCalendarFilter2ᚖtrecᚋentᚐCandidateInterviewCalendarFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.CandidateInterviewFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOCandidateInterviewFreeWord2ᚖtrecᚋentᚐCandidateInterviewFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.CandidateInterviewOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOCandidateInterviewOrder2ᚖtrecᚋentᚐCandidateInterviewOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllCandidateInterviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 ent.CandidateInterviewFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalNCandidateInterviewFilter2trecᚋentᚐCandidateInterviewFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.CandidateInterviewFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOCandidateInterviewFreeWord2ᚖtrecᚋentᚐCandidateInterviewFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.CandidateInterviewOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOCandidateInterviewOrder2ᚖtrecᚋentᚐCandidateInterviewOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllCandidateJobFeedbacks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 ent.CandidateJobFeedbackFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalNCandidateJobFeedbackFilter2trecᚋentᚐCandidateJobFeedbackFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.CandidateJobFeedbackFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOCandidateJobFeedbackFreeWord2ᚖtrecᚋentᚐCandidateJobFeedbackFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.CandidateJobFeedbackOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOCandidateJobFeedbackOrder2ᚖtrecᚋentᚐCandidateJobFeedbackOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllCandidateJobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 ent.CandidateJobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalNCandidateJobFilter2trecᚋentᚐCandidateJobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.CandidateJobFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOCandidateJobFreeWord2ᚖtrecᚋentᚐCandidateJobFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.CandidateJobOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOCandidateJobOrder2ᚖtrecᚋentᚐCandidateJobOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllCandidates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.CandidateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOCandidateFilter2ᚖtrecᚋentᚐCandidateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.CandidateFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOCandidateFreeWord2ᚖtrecᚋentᚐCandidateFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.CandidateOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOCandidateOrder2ᚖtrecᚋentᚐCandidateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllHiringJobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.HiringJobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOHiringJobFilter2ᚖtrecᚋentᚐHiringJobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.HiringJobFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOHiringJobFreeWord2ᚖtrecᚋentᚐHiringJobFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 ent.HiringJobOrderBy
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalNHiringJobOrderBy2trecᚋentᚐHiringJobOrderBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllSkillTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.SkillTypeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOSkillTypeFilter2ᚖtrecᚋentᚐSkillTypeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.SkillTypeFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOSkillTypeFreeWord2ᚖtrecᚋentᚐSkillTypeFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.SkillTypeOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOSkillTypeOrder2ᚖtrecᚋentᚐSkillTypeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllSkills_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.SkillFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOSkillFilter2ᚖtrecᚋentᚐSkillFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.SkillFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOSkillFreeWord2ᚖtrecᚋentᚐSkillFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.SkillOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOSkillOrder2ᚖtrecᚋentᚐSkillOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllTeams_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.TeamFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOTeamFilter2ᚖtrecᚋentᚐTeamFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.TeamFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOTeamFreeWord2ᚖtrecᚋentᚐTeamFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 ent.TeamOrderBy
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalNTeamOrderBy2trecᚋentᚐTeamOrderBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAllUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOUserFilter2ᚖtrecᚋentᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.UserFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOUserFreeWord2ᚖtrecᚋentᚐUserFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.UserOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOUserOrder2ᚖtrecᚋentᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetAuditTrail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetCandidateInterview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetCandidateJobFeedback_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetCandidateJobGroupByInterview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetCandidateJobGroupByStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.CandidateJobGroupByStatusFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOCandidateJobGroupByStatusFilter2ᚖtrecᚋentᚐCandidateJobGroupByStatusFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.CandidateJobGroupByStatusFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOCandidateJobGroupByStatusFreeWord2ᚖtrecᚋentᚐCandidateJobGroupByStatusFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.CandidateJobByOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOCandidateJobByOrder2ᚖtrecᚋentᚐCandidateJobByOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_GetCandidateJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetCandidate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetHiringJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetSkillType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetSkill_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetTeam_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_SelectionCandidates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.CandidateFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOCandidateFilter2ᚖtrecᚋentᚐCandidateFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.CandidateFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOCandidateFreeWord2ᚖtrecᚋentᚐCandidateFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.CandidateOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOCandidateOrder2ᚖtrecᚋentᚐCandidateOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_SelectionHiringJobs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.HiringJobFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOHiringJobFilter2ᚖtrecᚋentᚐHiringJobFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.HiringJobFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOHiringJobFreeWord2ᚖtrecᚋentᚐHiringJobFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 ent.HiringJobOrderBy
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalNHiringJobOrderBy2trecᚋentᚐHiringJobOrderBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_SelectionSkillTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.SkillTypeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOSkillTypeFilter2ᚖtrecᚋentᚐSkillTypeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.SkillTypeFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOSkillTypeFreeWord2ᚖtrecᚋentᚐSkillTypeFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.SkillTypeOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOSkillTypeOrder2ᚖtrecᚋentᚐSkillTypeOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_SelectionSkills_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.SkillFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOSkillFilter2ᚖtrecᚋentᚐSkillFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.SkillFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOSkillFreeWord2ᚖtrecᚋentᚐSkillFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.SkillOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOSkillOrder2ᚖtrecᚋentᚐSkillOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_SelectionTeams_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.TeamFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOTeamFilter2ᚖtrecᚋentᚐTeamFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.TeamFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOTeamFreeWord2ᚖtrecᚋentᚐTeamFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 ent.TeamOrderBy
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalNTeamOrderBy2trecᚋentᚐTeamOrderBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_SelectionUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ent.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *ent.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOUserFilter2ᚖtrecᚋentᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 *ent.UserFreeWord
	if tmp, ok := rawArgs["freeWord"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("freeWord"))
		arg2, err = ec.unmarshalOUserFreeWord2ᚖtrecᚋentᚐUserFreeWord(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["freeWord"] = arg2
	var arg3 *ent.UserOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOUserOrder2ᚖtrecᚋentᚐUserOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

func (ec *executionContext) _queryMiddleware(ctx context.Context, obj *ast.OperationDefinition, next func(ctx context.Context) (interface{}, error)) graphql.Marshaler {

	for _, d := range obj.Directives {
		switch d.Name {
		case "authorize":
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Authorize == nil {
					return nil, errors.New("directive authorize is not implemented")
				}
				return ec.directives.Authorize(ctx, obj, n)
			}
		}
	}
	tmp, err := next(ctx)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if data, ok := tmp.(graphql.Marshaler); ok {
		return data
	}
	ec.Errorf(ctx, `unexpected type %T from directive, should be graphql.Marshaler`, tmp)
	return graphql.Null

}

func (ec *executionContext) _mutationMiddleware(ctx context.Context, obj *ast.OperationDefinition, next func(ctx context.Context) (interface{}, error)) graphql.Marshaler {

	for _, d := range obj.Directives {
		switch d.Name {
		case "authorize":
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Authorize == nil {
					return nil, errors.New("directive authorize is not implemented")
				}
				return ec.directives.Authorize(ctx, obj, n)
			}
		}
	}
	tmp, err := next(ctx)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if data, ok := tmp.(graphql.Marshaler); ok {
		return data
	}
	ec.Errorf(ctx, `unexpected type %T from directive, should be graphql.Marshaler`, tmp)
	return graphql.Null

}

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Attachment_id(ctx context.Context, field graphql.CollectedField, obj *ent.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Attachment().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_document_name(ctx context.Context, field graphql.CollectedField, obj *ent.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_document_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_document_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_document_id(ctx context.Context, field graphql.CollectedField, obj *ent.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_document_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Attachment().DocumentID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_document_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttachmentResponse_fileName(ctx context.Context, field graphql.CollectedField, obj *ent.AttachmentResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttachmentResponse_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttachmentResponse_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttachmentResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttachmentResponse_url(ctx context.Context, field graphql.CollectedField, obj *ent.AttachmentResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttachmentResponse_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttachmentResponse_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttachmentResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttachmentResponse_action(ctx context.Context, field graphql.CollectedField, obj *ent.AttachmentResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttachmentResponse_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.AttachmentAction)
	fc.Result = res
	return ec.marshalNAttachmentAction2trecᚋentᚐAttachmentAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttachmentResponse_action(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttachmentResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AttachmentAction does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttachmentResponse_id(ctx context.Context, field graphql.CollectedField, obj *ent.AttachmentResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttachmentResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttachmentResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttachmentResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_id(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuditTrail().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_createdBy(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuditTrail().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_createdInfo(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_createdInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuditTrail().CreatedInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖtrecᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_createdInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_recordId(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_recordId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuditTrail().RecordID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_recordId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_module(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_module(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuditTrail().Module(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.ProjectModule)
	fc.Result = res
	return ec.marshalNprojectModule2trecᚋentᚐProjectModule(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_module(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type projectModule does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_actionType(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_actionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuditTrail().ActionType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.AuditTrailAction)
	fc.Result = res
	return ec.marshalNauditTrailAction2trecᚋentᚐAuditTrailAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_actionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type auditTrailAction does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_note(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_record_changes(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_record_changes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordChanges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJSON2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_record_changes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_createdAt(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrail_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrail_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrail_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrailEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrailEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrailEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AuditTrail)
	fc.Result = res
	return ec.marshalNAuditTrail2ᚖtrecᚋentᚐAuditTrail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrailEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrailEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuditTrail_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_AuditTrail_createdBy(ctx, field)
			case "createdInfo":
				return ec.fieldContext_AuditTrail_createdInfo(ctx, field)
			case "recordId":
				return ec.fieldContext_AuditTrail_recordId(ctx, field)
			case "module":
				return ec.fieldContext_AuditTrail_module(ctx, field)
			case "actionType":
				return ec.fieldContext_AuditTrail_actionType(ctx, field)
			case "note":
				return ec.fieldContext_AuditTrail_note(ctx, field)
			case "record_changes":
				return ec.fieldContext_AuditTrail_record_changes(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuditTrail_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AuditTrail_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditTrail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrailEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrailEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrailEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrailEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrailEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrailResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrailResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrailResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AuditTrail)
	fc.Result = res
	return ec.marshalNAuditTrail2ᚖtrecᚋentᚐAuditTrail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrailResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrailResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuditTrail_id(ctx, field)
			case "createdBy":
				return ec.fieldContext_AuditTrail_createdBy(ctx, field)
			case "createdInfo":
				return ec.fieldContext_AuditTrail_createdInfo(ctx, field)
			case "recordId":
				return ec.fieldContext_AuditTrail_recordId(ctx, field)
			case "module":
				return ec.fieldContext_AuditTrail_module(ctx, field)
			case "actionType":
				return ec.fieldContext_AuditTrail_actionType(ctx, field)
			case "note":
				return ec.fieldContext_AuditTrail_note(ctx, field)
			case "record_changes":
				return ec.fieldContext_AuditTrail_record_changes(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuditTrail_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AuditTrail_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditTrail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrailResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrailResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrailResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.AuditTrailEdge)
	fc.Result = res
	return ec.marshalNAuditTrailEdge2ᚕᚖtrecᚋentᚐAuditTrailEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrailResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrailResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_AuditTrailEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_AuditTrailEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditTrailEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditTrailResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.AuditTrailResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditTrailResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditTrailResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditTrailResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticationToken_accessToken(ctx context.Context, field graphql.CollectedField, obj *ent.AuthenticationToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticationToken_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticationToken_accessToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticationToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticationToken_refreshToken(ctx context.Context, field graphql.CollectedField, obj *ent.AuthenticationToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticationToken_refreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticationToken_refreshToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticationToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticationToken_tokenType(ctx context.Context, field graphql.CollectedField, obj *ent.AuthenticationToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticationToken_tokenType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticationToken_tokenType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticationToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticationToken_expiresAt(ctx context.Context, field graphql.CollectedField, obj *ent.AuthenticationToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticationToken_expiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticationToken_expiresAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticationToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticationToken_email(ctx context.Context, field graphql.CollectedField, obj *ent.AuthenticationToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticationToken_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticationToken_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticationToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Base64Response_data(ctx context.Context, field graphql.CollectedField, obj *ent.Base64Response) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Base64Response_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNBase642string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Base64Response_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Base64Response",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Base64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_id(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Candidate().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_name(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_email(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_phone(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_dob(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_dob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dob, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_dob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_status(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Candidate().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.CandidateStatusEnum)
	fc.Result = res
	return ec.marshalNCandidateStatusEnum2trecᚋentᚐCandidateStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CandidateStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_is_black_list(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_is_black_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlacklist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_is_black_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_last_apply_date(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_last_apply_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastApplyDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_last_apply_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_is_able_to_delete(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_is_able_to_delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Candidate().IsAbleToDelete(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_is_able_to_delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_hiring_job_title(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_hiring_job_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Candidate().HiringJobTitle(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_hiring_job_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_reference_type(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_reference_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Candidate().ReferenceType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.CandidateReferenceType)
	fc.Result = res
	return ec.marshalNCandidateReferenceType2trecᚋentᚐCandidateReferenceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_reference_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CandidateReferenceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_reference_value(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_reference_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_reference_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_reference_uid(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_reference_uid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Candidate().ReferenceUID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_reference_uid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_recruit_time(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_recruit_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecruitTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_recruit_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_description(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_country(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_attachments(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_attachments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Candidate().Attachments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚕᚖtrecᚋentᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_attachments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "document_name":
				return ec.fieldContext_Attachment_document_name(ctx, field)
			case "document_id":
				return ec.fieldContext_Attachment_document_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_entity_skill_types(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_entity_skill_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Candidate().EntitySkillTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.EntitySkillType)
	fc.Result = res
	return ec.marshalOEntitySkillType2ᚕᚖtrecᚋentᚐEntitySkillTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_entity_skill_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EntitySkillType_id(ctx, field)
			case "name":
				return ec.fieldContext_EntitySkillType_name(ctx, field)
			case "description":
				return ec.fieldContext_EntitySkillType_description(ctx, field)
			case "entity_skills":
				return ec.fieldContext_EntitySkillType_entity_skills(ctx, field)
			case "orderId":
				return ec.fieldContext_EntitySkillType_orderId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntitySkillType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_reference_user(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_reference_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Candidate().ReferenceUser(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖtrecᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_reference_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Candidate_deleted_at(ctx context.Context, field graphql.CollectedField, obj *ent.Candidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Candidate_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Candidate_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Candidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Candidate)
	fc.Result = res
	return ec.marshalNCandidate2ᚖtrecᚋentᚐCandidate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Candidate_id(ctx, field)
			case "name":
				return ec.fieldContext_Candidate_name(ctx, field)
			case "email":
				return ec.fieldContext_Candidate_email(ctx, field)
			case "phone":
				return ec.fieldContext_Candidate_phone(ctx, field)
			case "dob":
				return ec.fieldContext_Candidate_dob(ctx, field)
			case "status":
				return ec.fieldContext_Candidate_status(ctx, field)
			case "is_black_list":
				return ec.fieldContext_Candidate_is_black_list(ctx, field)
			case "last_apply_date":
				return ec.fieldContext_Candidate_last_apply_date(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_Candidate_is_able_to_delete(ctx, field)
			case "hiring_job_title":
				return ec.fieldContext_Candidate_hiring_job_title(ctx, field)
			case "reference_type":
				return ec.fieldContext_Candidate_reference_type(ctx, field)
			case "reference_value":
				return ec.fieldContext_Candidate_reference_value(ctx, field)
			case "reference_uid":
				return ec.fieldContext_Candidate_reference_uid(ctx, field)
			case "recruit_time":
				return ec.fieldContext_Candidate_recruit_time(ctx, field)
			case "description":
				return ec.fieldContext_Candidate_description(ctx, field)
			case "country":
				return ec.fieldContext_Candidate_country(ctx, field)
			case "attachments":
				return ec.fieldContext_Candidate_attachments(ctx, field)
			case "entity_skill_types":
				return ec.fieldContext_Candidate_entity_skill_types(ctx, field)
			case "reference_user":
				return ec.fieldContext_Candidate_reference_user(ctx, field)
			case "created_at":
				return ec.fieldContext_Candidate_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Candidate_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Candidate_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Candidate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateInterview().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_title(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_description(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_candidate_job_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_candidate_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateInterview().CandidateJobID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_candidate_job_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_interview_date(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_interview_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_interview_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_start_from(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_start_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_start_from(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_end_at(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_end_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_end_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_interviewer(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_interviewer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateInterview().Interviewer(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖtrecᚋentᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_interviewer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_candidate_job(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_candidate_job(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateInterview().CandidateJob(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJob)
	fc.Result = res
	return ec.marshalNCandidateJob2ᚖtrecᚋentᚐCandidateJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_candidate_job(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_edit_able(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_edit_able(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateInterview().EditAble(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_edit_able(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_owner(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateInterview().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖtrecᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_status(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateInterview().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.CandidateInterviewStatus)
	fc.Result = res
	return ec.marshalNCandidateInterviewStatus2trecᚋentᚐCandidateInterviewStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CandidateInterviewStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_edited(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_edited(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateInterview().Edited(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_edited(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterview_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterview_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterview_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterview)
	fc.Result = res
	return ec.marshalNCandidateInterview2ᚖtrecᚋentᚐCandidateInterview(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateInterview_id(ctx, field)
			case "title":
				return ec.fieldContext_CandidateInterview_title(ctx, field)
			case "description":
				return ec.fieldContext_CandidateInterview_description(ctx, field)
			case "candidate_job_id":
				return ec.fieldContext_CandidateInterview_candidate_job_id(ctx, field)
			case "interview_date":
				return ec.fieldContext_CandidateInterview_interview_date(ctx, field)
			case "start_from":
				return ec.fieldContext_CandidateInterview_start_from(ctx, field)
			case "end_at":
				return ec.fieldContext_CandidateInterview_end_at(ctx, field)
			case "interviewer":
				return ec.fieldContext_CandidateInterview_interviewer(ctx, field)
			case "candidate_job":
				return ec.fieldContext_CandidateInterview_candidate_job(ctx, field)
			case "edit_able":
				return ec.fieldContext_CandidateInterview_edit_able(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateInterview_owner(ctx, field)
			case "status":
				return ec.fieldContext_CandidateInterview_status(ctx, field)
			case "edited":
				return ec.fieldContext_CandidateInterview_edited(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateInterview_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateInterview_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterview)
	fc.Result = res
	return ec.marshalOCandidateInterview2ᚖtrecᚋentᚐCandidateInterview(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateInterview_id(ctx, field)
			case "title":
				return ec.fieldContext_CandidateInterview_title(ctx, field)
			case "description":
				return ec.fieldContext_CandidateInterview_description(ctx, field)
			case "candidate_job_id":
				return ec.fieldContext_CandidateInterview_candidate_job_id(ctx, field)
			case "interview_date":
				return ec.fieldContext_CandidateInterview_interview_date(ctx, field)
			case "start_from":
				return ec.fieldContext_CandidateInterview_start_from(ctx, field)
			case "end_at":
				return ec.fieldContext_CandidateInterview_end_at(ctx, field)
			case "interviewer":
				return ec.fieldContext_CandidateInterview_interviewer(ctx, field)
			case "candidate_job":
				return ec.fieldContext_CandidateInterview_candidate_job(ctx, field)
			case "edit_able":
				return ec.fieldContext_CandidateInterview_edit_able(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateInterview_owner(ctx, field)
			case "status":
				return ec.fieldContext_CandidateInterview_status(ctx, field)
			case "edited":
				return ec.fieldContext_CandidateInterview_edited(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateInterview_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateInterview_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateInterviewEdge)
	fc.Result = res
	return ec.marshalNCandidateInterviewEdge2ᚕᚖtrecᚋentᚐCandidateInterviewEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CandidateInterviewEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CandidateInterviewEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterviewEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewResponseValidate_data(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewResponseValidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewResponseValidate_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterviewValidate)
	fc.Result = res
	return ec.marshalOCandidateInterviewValidate2ᚖtrecᚋentᚐCandidateInterviewValidate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewResponseValidate_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewResponseValidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "interviewer_invalid":
				return ec.fieldContext_CandidateInterviewValidate_interviewer_invalid(ctx, field)
			case "invalid_schedule":
				return ec.fieldContext_CandidateInterviewValidate_invalid_schedule(ctx, field)
			case "candidate_name":
				return ec.fieldContext_CandidateInterviewValidate_candidate_name(ctx, field)
			case "candidate_job_invalid_status":
				return ec.fieldContext_CandidateInterviewValidate_candidate_job_invalid_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterviewValidate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewValidate_interviewer_invalid(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewValidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewValidate_interviewer_invalid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterviewerInvalid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewValidate_interviewer_invalid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewValidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewValidate_invalid_schedule(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewValidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewValidate_invalid_schedule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvalidSchedule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewValidate_invalid_schedule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewValidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewValidate_candidate_name(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewValidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewValidate_candidate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CandidateName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewValidate_candidate_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewValidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateInterviewValidate_candidate_job_invalid_status(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateInterviewValidate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateInterviewValidate_candidate_job_invalid_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CandidateJobInvalidStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateInterviewValidate_candidate_job_invalid_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateInterviewValidate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_candidate_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_candidate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().CandidateID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_candidate_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_hiring_job_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().HiringJobID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_hiring_job_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_status(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.CandidateJobStatus)
	fc.Result = res
	return ec.marshalNCandidateJobStatus2trecᚋentᚐCandidateJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CandidateJobStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_attachments(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_attachments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().Attachments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚕᚖtrecᚋentᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_attachments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "document_name":
				return ec.fieldContext_Attachment_document_name(ctx, field)
			case "document_id":
				return ec.fieldContext_Attachment_document_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_candidate(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_candidate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().Candidate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Candidate)
	fc.Result = res
	return ec.marshalOCandidate2ᚖtrecᚋentᚐCandidate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_candidate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Candidate_id(ctx, field)
			case "name":
				return ec.fieldContext_Candidate_name(ctx, field)
			case "email":
				return ec.fieldContext_Candidate_email(ctx, field)
			case "phone":
				return ec.fieldContext_Candidate_phone(ctx, field)
			case "dob":
				return ec.fieldContext_Candidate_dob(ctx, field)
			case "status":
				return ec.fieldContext_Candidate_status(ctx, field)
			case "is_black_list":
				return ec.fieldContext_Candidate_is_black_list(ctx, field)
			case "last_apply_date":
				return ec.fieldContext_Candidate_last_apply_date(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_Candidate_is_able_to_delete(ctx, field)
			case "hiring_job_title":
				return ec.fieldContext_Candidate_hiring_job_title(ctx, field)
			case "reference_type":
				return ec.fieldContext_Candidate_reference_type(ctx, field)
			case "reference_value":
				return ec.fieldContext_Candidate_reference_value(ctx, field)
			case "reference_uid":
				return ec.fieldContext_Candidate_reference_uid(ctx, field)
			case "recruit_time":
				return ec.fieldContext_Candidate_recruit_time(ctx, field)
			case "description":
				return ec.fieldContext_Candidate_description(ctx, field)
			case "country":
				return ec.fieldContext_Candidate_country(ctx, field)
			case "attachments":
				return ec.fieldContext_Candidate_attachments(ctx, field)
			case "entity_skill_types":
				return ec.fieldContext_Candidate_entity_skill_types(ctx, field)
			case "reference_user":
				return ec.fieldContext_Candidate_reference_user(ctx, field)
			case "created_at":
				return ec.fieldContext_Candidate_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Candidate_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Candidate_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Candidate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_hiring_job(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_hiring_job(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().HiringJob(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJob)
	fc.Result = res
	return ec.marshalOHiringJob2ᚖtrecᚋentᚐHiringJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_hiring_job(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HiringJob_id(ctx, field)
			case "name":
				return ec.fieldContext_HiringJob_name(ctx, field)
			case "slug":
				return ec.fieldContext_HiringJob_slug(ctx, field)
			case "description":
				return ec.fieldContext_HiringJob_description(ctx, field)
			case "amount":
				return ec.fieldContext_HiringJob_amount(ctx, field)
			case "location":
				return ec.fieldContext_HiringJob_location(ctx, field)
			case "salary_type":
				return ec.fieldContext_HiringJob_salary_type(ctx, field)
			case "salary_from":
				return ec.fieldContext_HiringJob_salary_from(ctx, field)
			case "salary_to":
				return ec.fieldContext_HiringJob_salary_to(ctx, field)
			case "currency":
				return ec.fieldContext_HiringJob_currency(ctx, field)
			case "team":
				return ec.fieldContext_HiringJob_team(ctx, field)
			case "user":
				return ec.fieldContext_HiringJob_user(ctx, field)
			case "status":
				return ec.fieldContext_HiringJob_status(ctx, field)
			case "total_candidates_recruited":
				return ec.fieldContext_HiringJob_total_candidates_recruited(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_HiringJob_is_able_to_delete(ctx, field)
			case "is_able_to_close":
				return ec.fieldContext_HiringJob_is_able_to_close(ctx, field)
			case "priority":
				return ec.fieldContext_HiringJob_priority(ctx, field)
			case "entity_skill_types":
				return ec.fieldContext_HiringJob_entity_skill_types(ctx, field)
			case "created_at":
				return ec.fieldContext_HiringJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_HiringJob_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_HiringJob_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_owner(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖtrecᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_failed_reason(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_failed_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().FailedReason(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]ent.CandidateJobFailedReason)
	fc.Result = res
	return ec.marshalOCandidateJobFailedReason2ᚕtrecᚋentᚐCandidateJobFailedReasonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_failed_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CandidateJobFailedReason does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_is_able_to_delete(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().IsAbleToDelete(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_is_able_to_delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_interview_feature(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_interview_feature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().InterviewFeature(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_interview_feature(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_steps(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_steps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJob().Steps(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJobStep)
	fc.Result = res
	return ec.marshalOCandidateJobStep2ᚕᚖtrecᚋentᚐCandidateJobStepᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_steps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJobStep_id(ctx, field)
			case "candidate_job_id":
				return ec.fieldContext_CandidateJobStep_candidate_job_id(ctx, field)
			case "candidate_job_status":
				return ec.fieldContext_CandidateJobStep_candidate_job_status(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJobStep_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJobStep_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobStep", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJob_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJob_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJob_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJob)
	fc.Result = res
	return ec.marshalNCandidateJob2ᚖtrecᚋentᚐCandidateJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobFeedback().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_created_by(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobFeedback().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_candidate_job_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_candidate_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobFeedback().CandidateJobID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_candidate_job_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_candidate_job(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_candidate_job(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobFeedback().CandidateJob(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJob)
	fc.Result = res
	return ec.marshalNCandidateJob2ᚖtrecᚋentᚐCandidateJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_candidate_job(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_owner(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobFeedback().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖtrecᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_feedback(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_feedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_feedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_edited(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_edited(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobFeedback().Edited(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_edited(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_attachments(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_attachments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobFeedback().Attachments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚕᚖtrecᚋentᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_attachments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "document_name":
				return ec.fieldContext_Attachment_document_name(ctx, field)
			case "document_id":
				return ec.fieldContext_Attachment_document_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedback_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedback_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedback_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedbackEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedbackEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedbackEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobFeedback)
	fc.Result = res
	return ec.marshalNCandidateJobFeedback2ᚖtrecᚋentᚐCandidateJobFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedbackEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedbackEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJobFeedback_id(ctx, field)
			case "created_by":
				return ec.fieldContext_CandidateJobFeedback_created_by(ctx, field)
			case "candidate_job_id":
				return ec.fieldContext_CandidateJobFeedback_candidate_job_id(ctx, field)
			case "candidate_job":
				return ec.fieldContext_CandidateJobFeedback_candidate_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJobFeedback_owner(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobFeedback_feedback(ctx, field)
			case "edited":
				return ec.fieldContext_CandidateJobFeedback_edited(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJobFeedback_attachments(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJobFeedback_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJobFeedback_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedbackEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedbackEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedbackEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedbackEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedbackEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedbackResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedbackResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedbackResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobFeedback)
	fc.Result = res
	return ec.marshalOCandidateJobFeedback2ᚖtrecᚋentᚐCandidateJobFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedbackResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedbackResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJobFeedback_id(ctx, field)
			case "created_by":
				return ec.fieldContext_CandidateJobFeedback_created_by(ctx, field)
			case "candidate_job_id":
				return ec.fieldContext_CandidateJobFeedback_candidate_job_id(ctx, field)
			case "candidate_job":
				return ec.fieldContext_CandidateJobFeedback_candidate_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJobFeedback_owner(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobFeedback_feedback(ctx, field)
			case "edited":
				return ec.fieldContext_CandidateJobFeedback_edited(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJobFeedback_attachments(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJobFeedback_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJobFeedback_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedbackResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedbackResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedbackResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJobFeedbackEdge)
	fc.Result = res
	return ec.marshalNCandidateJobFeedbackEdge2ᚕᚖtrecᚋentᚐCandidateJobFeedbackEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedbackResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedbackResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CandidateJobFeedbackEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CandidateJobFeedbackEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobFeedbackEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobFeedbackResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobFeedbackResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobFeedbackResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobFeedbackResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobFeedbackResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByInterview_hired(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByInterview_hired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupInterviewFeedback)
	fc.Result = res
	return ec.marshalOCandidateJobGroupInterviewFeedback2ᚖtrecᚋentᚐCandidateJobGroupInterviewFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByInterview_hired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "interview":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_interview(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupInterviewFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByInterview_kiv(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByInterview_kiv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kiv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupInterviewFeedback)
	fc.Result = res
	return ec.marshalOCandidateJobGroupInterviewFeedback2ᚖtrecᚋentᚐCandidateJobGroupInterviewFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByInterview_kiv(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "interview":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_interview(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupInterviewFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByInterview_offer_lost(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByInterview_offer_lost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfferLost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupInterviewFeedback)
	fc.Result = res
	return ec.marshalOCandidateJobGroupInterviewFeedback2ᚖtrecᚋentᚐCandidateJobGroupInterviewFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByInterview_offer_lost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "interview":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_interview(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupInterviewFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByInterview_ex_staff(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByInterview_ex_staff(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExStaff, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupInterviewFeedback)
	fc.Result = res
	return ec.marshalOCandidateJobGroupInterviewFeedback2ᚖtrecᚋentᚐCandidateJobGroupInterviewFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByInterview_ex_staff(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "interview":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_interview(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupInterviewFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByInterview_applied(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByInterview_applied(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupInterviewFeedback)
	fc.Result = res
	return ec.marshalOCandidateJobGroupInterviewFeedback2ᚖtrecᚋentᚐCandidateJobGroupInterviewFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByInterview_applied(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "interview":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_interview(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupInterviewFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByInterview_interviewing(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByInterview_interviewing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interviewing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupInterviewFeedback)
	fc.Result = res
	return ec.marshalOCandidateJobGroupInterviewFeedback2ᚖtrecᚋentᚐCandidateJobGroupInterviewFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByInterview_interviewing(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "interview":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_interview(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupInterviewFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByInterview_offering(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByInterview) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByInterview_offering(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Offering, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupInterviewFeedback)
	fc.Result = res
	return ec.marshalOCandidateJobGroupInterviewFeedback2ᚖtrecᚋentᚐCandidateJobGroupInterviewFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByInterview_offering(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByInterview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "interview":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_interview(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobGroupInterviewFeedback_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupInterviewFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByInterviewResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByInterviewResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByInterviewResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupByInterview)
	fc.Result = res
	return ec.marshalOCandidateJobGroupByInterview2ᚖtrecᚋentᚐCandidateJobGroupByInterview(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByInterviewResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByInterviewResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hired":
				return ec.fieldContext_CandidateJobGroupByInterview_hired(ctx, field)
			case "kiv":
				return ec.fieldContext_CandidateJobGroupByInterview_kiv(ctx, field)
			case "offer_lost":
				return ec.fieldContext_CandidateJobGroupByInterview_offer_lost(ctx, field)
			case "ex_staff":
				return ec.fieldContext_CandidateJobGroupByInterview_ex_staff(ctx, field)
			case "applied":
				return ec.fieldContext_CandidateJobGroupByInterview_applied(ctx, field)
			case "interviewing":
				return ec.fieldContext_CandidateJobGroupByInterview_interviewing(ctx, field)
			case "offering":
				return ec.fieldContext_CandidateJobGroupByInterview_offering(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupByInterview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByStatus_hired(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByStatus_hired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJob)
	fc.Result = res
	return ec.marshalOCandidateJob2ᚕᚖtrecᚋentᚐCandidateJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByStatus_hired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByStatus_kiv(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByStatus_kiv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kiv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJob)
	fc.Result = res
	return ec.marshalOCandidateJob2ᚕᚖtrecᚋentᚐCandidateJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByStatus_kiv(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByStatus_offer_lost(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByStatus_offer_lost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfferLost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJob)
	fc.Result = res
	return ec.marshalOCandidateJob2ᚕᚖtrecᚋentᚐCandidateJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByStatus_offer_lost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByStatus_ex_staff(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByStatus_ex_staff(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExStaff, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJob)
	fc.Result = res
	return ec.marshalOCandidateJob2ᚕᚖtrecᚋentᚐCandidateJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByStatus_ex_staff(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByStatus_applied(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByStatus_applied(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJob)
	fc.Result = res
	return ec.marshalOCandidateJob2ᚕᚖtrecᚋentᚐCandidateJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByStatus_applied(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByStatus_interviewing(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByStatus_interviewing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interviewing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJob)
	fc.Result = res
	return ec.marshalOCandidateJob2ᚕᚖtrecᚋentᚐCandidateJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByStatus_interviewing(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByStatus_offering(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByStatus_offering(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Offering, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJob)
	fc.Result = res
	return ec.marshalOCandidateJob2ᚕᚖtrecᚋentᚐCandidateJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByStatus_offering(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByStatusResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByStatusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByStatusResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupByStatus)
	fc.Result = res
	return ec.marshalOCandidateJobGroupByStatus2ᚖtrecᚋentᚐCandidateJobGroupByStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByStatusResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByStatusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hired":
				return ec.fieldContext_CandidateJobGroupByStatus_hired(ctx, field)
			case "kiv":
				return ec.fieldContext_CandidateJobGroupByStatus_kiv(ctx, field)
			case "offer_lost":
				return ec.fieldContext_CandidateJobGroupByStatus_offer_lost(ctx, field)
			case "ex_staff":
				return ec.fieldContext_CandidateJobGroupByStatus_ex_staff(ctx, field)
			case "applied":
				return ec.fieldContext_CandidateJobGroupByStatus_applied(ctx, field)
			case "interviewing":
				return ec.fieldContext_CandidateJobGroupByStatus_interviewing(ctx, field)
			case "offering":
				return ec.fieldContext_CandidateJobGroupByStatus_offering(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupByStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupByStatusResponse_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupByStatusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupByStatusResponse_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupByStatusResponse_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupByStatusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupInterviewFeedback_interview(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupInterviewFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupInterviewFeedback_interview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateInterview)
	fc.Result = res
	return ec.marshalOCandidateInterview2ᚕᚖtrecᚋentᚐCandidateInterviewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupInterviewFeedback_interview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupInterviewFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateInterview_id(ctx, field)
			case "title":
				return ec.fieldContext_CandidateInterview_title(ctx, field)
			case "description":
				return ec.fieldContext_CandidateInterview_description(ctx, field)
			case "candidate_job_id":
				return ec.fieldContext_CandidateInterview_candidate_job_id(ctx, field)
			case "interview_date":
				return ec.fieldContext_CandidateInterview_interview_date(ctx, field)
			case "start_from":
				return ec.fieldContext_CandidateInterview_start_from(ctx, field)
			case "end_at":
				return ec.fieldContext_CandidateInterview_end_at(ctx, field)
			case "interviewer":
				return ec.fieldContext_CandidateInterview_interviewer(ctx, field)
			case "candidate_job":
				return ec.fieldContext_CandidateInterview_candidate_job(ctx, field)
			case "edit_able":
				return ec.fieldContext_CandidateInterview_edit_able(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateInterview_owner(ctx, field)
			case "status":
				return ec.fieldContext_CandidateInterview_status(ctx, field)
			case "edited":
				return ec.fieldContext_CandidateInterview_edited(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateInterview_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateInterview_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobGroupInterviewFeedback_feedback(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobGroupInterviewFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobGroupInterviewFeedback_feedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJobFeedback)
	fc.Result = res
	return ec.marshalOCandidateJobFeedback2ᚕᚖtrecᚋentᚐCandidateJobFeedbackᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobGroupInterviewFeedback_feedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobGroupInterviewFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJobFeedback_id(ctx, field)
			case "created_by":
				return ec.fieldContext_CandidateJobFeedback_created_by(ctx, field)
			case "candidate_job_id":
				return ec.fieldContext_CandidateJobFeedback_candidate_job_id(ctx, field)
			case "candidate_job":
				return ec.fieldContext_CandidateJobFeedback_candidate_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJobFeedback_owner(ctx, field)
			case "feedback":
				return ec.fieldContext_CandidateJobFeedback_feedback(ctx, field)
			case "edited":
				return ec.fieldContext_CandidateJobFeedback_edited(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJobFeedback_attachments(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJobFeedback_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJobFeedback_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJob)
	fc.Result = res
	return ec.marshalOCandidateJob2ᚖtrecᚋentᚐCandidateJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateJob_id(ctx, field)
			case "candidate_id":
				return ec.fieldContext_CandidateJob_candidate_id(ctx, field)
			case "hiring_job_id":
				return ec.fieldContext_CandidateJob_hiring_job_id(ctx, field)
			case "status":
				return ec.fieldContext_CandidateJob_status(ctx, field)
			case "attachments":
				return ec.fieldContext_CandidateJob_attachments(ctx, field)
			case "candidate":
				return ec.fieldContext_CandidateJob_candidate(ctx, field)
			case "hiring_job":
				return ec.fieldContext_CandidateJob_hiring_job(ctx, field)
			case "owner":
				return ec.fieldContext_CandidateJob_owner(ctx, field)
			case "failed_reason":
				return ec.fieldContext_CandidateJob_failed_reason(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_CandidateJob_is_able_to_delete(ctx, field)
			case "interview_feature":
				return ec.fieldContext_CandidateJob_interview_feature(ctx, field)
			case "steps":
				return ec.fieldContext_CandidateJob_steps(ctx, field)
			case "created_at":
				return ec.fieldContext_CandidateJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CandidateJob_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateJobEdge)
	fc.Result = res
	return ec.marshalNCandidateJobEdge2ᚕᚖtrecᚋentᚐCandidateJobEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CandidateJobEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CandidateJobEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobStep_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobStep) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobStep_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobStep().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobStep_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobStep",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobStep_candidate_job_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobStep) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobStep_candidate_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobStep().CandidateJobID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobStep_candidate_job_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobStep",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobStep_candidate_job_status(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobStep) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobStep_candidate_job_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CandidateJobStep().CandidateJobStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.CandidateJobStatus)
	fc.Result = res
	return ec.marshalNCandidateJobStatus2trecᚋentᚐCandidateJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobStep_candidate_job_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobStep",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CandidateJobStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobStep_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobStep) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobStep_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobStep_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobStep",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateJobStep_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateJobStep) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateJobStep_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateJobStep_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateJobStep",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Candidate)
	fc.Result = res
	return ec.marshalNCandidate2ᚖtrecᚋentᚐCandidate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Candidate_id(ctx, field)
			case "name":
				return ec.fieldContext_Candidate_name(ctx, field)
			case "email":
				return ec.fieldContext_Candidate_email(ctx, field)
			case "phone":
				return ec.fieldContext_Candidate_phone(ctx, field)
			case "dob":
				return ec.fieldContext_Candidate_dob(ctx, field)
			case "status":
				return ec.fieldContext_Candidate_status(ctx, field)
			case "is_black_list":
				return ec.fieldContext_Candidate_is_black_list(ctx, field)
			case "last_apply_date":
				return ec.fieldContext_Candidate_last_apply_date(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_Candidate_is_able_to_delete(ctx, field)
			case "hiring_job_title":
				return ec.fieldContext_Candidate_hiring_job_title(ctx, field)
			case "reference_type":
				return ec.fieldContext_Candidate_reference_type(ctx, field)
			case "reference_value":
				return ec.fieldContext_Candidate_reference_value(ctx, field)
			case "reference_uid":
				return ec.fieldContext_Candidate_reference_uid(ctx, field)
			case "recruit_time":
				return ec.fieldContext_Candidate_recruit_time(ctx, field)
			case "description":
				return ec.fieldContext_Candidate_description(ctx, field)
			case "country":
				return ec.fieldContext_Candidate_country(ctx, field)
			case "attachments":
				return ec.fieldContext_Candidate_attachments(ctx, field)
			case "entity_skill_types":
				return ec.fieldContext_Candidate_entity_skill_types(ctx, field)
			case "reference_user":
				return ec.fieldContext_Candidate_reference_user(ctx, field)
			case "created_at":
				return ec.fieldContext_Candidate_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Candidate_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Candidate_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Candidate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateEdge)
	fc.Result = res
	return ec.marshalNCandidateEdge2ᚕᚖtrecᚋentᚐCandidateEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CandidateEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CandidateEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateSelection_id(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateSelection_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateSelection_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateSelection_name(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateSelection_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateSelection_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateSelection_phone(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateSelection_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateSelection_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateSelection_email(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateSelection_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateSelection_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateSelectionEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateSelectionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateSelection)
	fc.Result = res
	return ec.marshalNCandidateSelection2ᚖtrecᚋentᚐCandidateSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateSelectionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CandidateSelection_id(ctx, field)
			case "name":
				return ec.fieldContext_CandidateSelection_name(ctx, field)
			case "phone":
				return ec.fieldContext_CandidateSelection_phone(ctx, field)
			case "email":
				return ec.fieldContext_CandidateSelection_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateSelectionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateSelectionResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.CandidateSelectionEdge)
	fc.Result = res
	return ec.marshalNCandidateSelectionEdge2ᚕᚖtrecᚋentᚐCandidateSelectionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CandidateSelectionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CandidateSelectionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateSelectionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CandidateSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.CandidateSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CandidateSelectionResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CandidateSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CandidateSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillRecord_id(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillRecord_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillRecord_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillRecord_name(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillRecord_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillRecord_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillRecord_description(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillRecord_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillRecord_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillRecord_skill_id(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillRecord_skill_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkillID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillRecord_skill_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillRecord_orderId(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillRecord_orderId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillRecord_orderId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillType_id(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillType_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillType_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillType_name(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillType_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillType_description(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillType_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillType_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillType_entity_skills(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillType_entity_skills(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntitySkills, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.EntitySkillRecord)
	fc.Result = res
	return ec.marshalOEntitySkillRecord2ᚕᚖtrecᚋentᚐEntitySkillRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillType_entity_skills(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EntitySkillRecord_id(ctx, field)
			case "name":
				return ec.fieldContext_EntitySkillRecord_name(ctx, field)
			case "description":
				return ec.fieldContext_EntitySkillRecord_description(ctx, field)
			case "skill_id":
				return ec.fieldContext_EntitySkillRecord_skill_id(ctx, field)
			case "orderId":
				return ec.fieldContext_EntitySkillRecord_orderId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntitySkillRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntitySkillType_orderId(ctx context.Context, field graphql.CollectedField, obj *ent.EntitySkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntitySkillType_orderId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntitySkillType_orderId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntitySkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_id(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_name(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_slug(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_description(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_amount(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_location(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().Location(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.LocationEnum)
	fc.Result = res
	return ec.marshalNLocationEnum2trecᚋentᚐLocationEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LocationEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_salary_type(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_salary_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().SalaryType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.SalaryTypeEnum)
	fc.Result = res
	return ec.marshalNSalaryTypeEnum2trecᚋentᚐSalaryTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_salary_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SalaryTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_salary_from(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_salary_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalaryFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_salary_from(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_salary_to(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_salary_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalaryTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_salary_to(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_currency(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().Currency(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.CurrencyEnum)
	fc.Result = res
	return ec.marshalNCurrencyEnum2trecᚋentᚐCurrencyEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CurrencyEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_team(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_team(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().Team(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Team)
	fc.Result = res
	return ec.marshalNTeam2ᚖtrecᚋentᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_team(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "slug":
				return ec.fieldContext_Team_slug(ctx, field)
			case "members":
				return ec.fieldContext_Team_members(ctx, field)
			case "opening_requests":
				return ec.fieldContext_Team_opening_requests(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_Team_is_able_to_delete(ctx, field)
			case "created_at":
				return ec.fieldContext_Team_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Team_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Team_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_user(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖtrecᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_status(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.HiringJobStatus)
	fc.Result = res
	return ec.marshalNHiringJobStatus2trecᚋentᚐHiringJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HiringJobStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_total_candidates_recruited(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_total_candidates_recruited(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().TotalCandidatesRecruited(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_total_candidates_recruited(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_is_able_to_delete(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_is_able_to_delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().IsAbleToDelete(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_is_able_to_delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_is_able_to_close(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_is_able_to_close(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().IsAbleToClose(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_is_able_to_close(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_priority(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_priority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_priority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_entity_skill_types(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_entity_skill_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HiringJob().EntitySkillTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.EntitySkillType)
	fc.Result = res
	return ec.marshalOEntitySkillType2ᚕᚖtrecᚋentᚐEntitySkillTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_entity_skill_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EntitySkillType_id(ctx, field)
			case "name":
				return ec.fieldContext_EntitySkillType_name(ctx, field)
			case "description":
				return ec.fieldContext_EntitySkillType_description(ctx, field)
			case "entity_skills":
				return ec.fieldContext_EntitySkillType_entity_skills(ctx, field)
			case "orderId":
				return ec.fieldContext_EntitySkillType_orderId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntitySkillType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJob_deleted_at(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJob_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJob_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJob)
	fc.Result = res
	return ec.marshalNHiringJob2ᚖtrecᚋentᚐHiringJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HiringJob_id(ctx, field)
			case "name":
				return ec.fieldContext_HiringJob_name(ctx, field)
			case "slug":
				return ec.fieldContext_HiringJob_slug(ctx, field)
			case "description":
				return ec.fieldContext_HiringJob_description(ctx, field)
			case "amount":
				return ec.fieldContext_HiringJob_amount(ctx, field)
			case "location":
				return ec.fieldContext_HiringJob_location(ctx, field)
			case "salary_type":
				return ec.fieldContext_HiringJob_salary_type(ctx, field)
			case "salary_from":
				return ec.fieldContext_HiringJob_salary_from(ctx, field)
			case "salary_to":
				return ec.fieldContext_HiringJob_salary_to(ctx, field)
			case "currency":
				return ec.fieldContext_HiringJob_currency(ctx, field)
			case "team":
				return ec.fieldContext_HiringJob_team(ctx, field)
			case "user":
				return ec.fieldContext_HiringJob_user(ctx, field)
			case "status":
				return ec.fieldContext_HiringJob_status(ctx, field)
			case "total_candidates_recruited":
				return ec.fieldContext_HiringJob_total_candidates_recruited(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_HiringJob_is_able_to_delete(ctx, field)
			case "is_able_to_close":
				return ec.fieldContext_HiringJob_is_able_to_close(ctx, field)
			case "priority":
				return ec.fieldContext_HiringJob_priority(ctx, field)
			case "entity_skill_types":
				return ec.fieldContext_HiringJob_entity_skill_types(ctx, field)
			case "created_at":
				return ec.fieldContext_HiringJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_HiringJob_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_HiringJob_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJob)
	fc.Result = res
	return ec.marshalOHiringJob2ᚖtrecᚋentᚐHiringJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HiringJob_id(ctx, field)
			case "name":
				return ec.fieldContext_HiringJob_name(ctx, field)
			case "slug":
				return ec.fieldContext_HiringJob_slug(ctx, field)
			case "description":
				return ec.fieldContext_HiringJob_description(ctx, field)
			case "amount":
				return ec.fieldContext_HiringJob_amount(ctx, field)
			case "location":
				return ec.fieldContext_HiringJob_location(ctx, field)
			case "salary_type":
				return ec.fieldContext_HiringJob_salary_type(ctx, field)
			case "salary_from":
				return ec.fieldContext_HiringJob_salary_from(ctx, field)
			case "salary_to":
				return ec.fieldContext_HiringJob_salary_to(ctx, field)
			case "currency":
				return ec.fieldContext_HiringJob_currency(ctx, field)
			case "team":
				return ec.fieldContext_HiringJob_team(ctx, field)
			case "user":
				return ec.fieldContext_HiringJob_user(ctx, field)
			case "status":
				return ec.fieldContext_HiringJob_status(ctx, field)
			case "total_candidates_recruited":
				return ec.fieldContext_HiringJob_total_candidates_recruited(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_HiringJob_is_able_to_delete(ctx, field)
			case "is_able_to_close":
				return ec.fieldContext_HiringJob_is_able_to_close(ctx, field)
			case "priority":
				return ec.fieldContext_HiringJob_priority(ctx, field)
			case "entity_skill_types":
				return ec.fieldContext_HiringJob_entity_skill_types(ctx, field)
			case "created_at":
				return ec.fieldContext_HiringJob_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_HiringJob_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_HiringJob_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.HiringJobEdge)
	fc.Result = res
	return ec.marshalNHiringJobEdge2ᚕᚖtrecᚋentᚐHiringJobEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HiringJobEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HiringJobEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJobEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobSelection_id(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobSelection_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobSelection_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobSelection_name(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobSelection_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobSelection_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobSelectionEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobSelectionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJobSelection)
	fc.Result = res
	return ec.marshalNHiringJobSelection2ᚖtrecᚋentᚐHiringJobSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobSelectionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HiringJobSelection_id(ctx, field)
			case "name":
				return ec.fieldContext_HiringJobSelection_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJobSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobSelectionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobSelectionResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.HiringJobSelectionEdge)
	fc.Result = res
	return ec.marshalNHiringJobSelectionEdge2ᚕᚖtrecᚋentᚐHiringJobSelectionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_HiringJobSelectionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_HiringJobSelectionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJobSelectionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HiringJobSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.HiringJobSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HiringJobSelectionResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HiringJobSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HiringJobSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateAttachmentSASURL(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateAttachmentSASURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAttachmentSasurl(rctx, fc.Args["input"].(ent.AttachmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AttachmentResponse)
	fc.Result = res
	return ec.marshalNAttachmentResponse2ᚖtrecᚋentᚐAttachmentResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateAttachmentSASURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fileName":
				return ec.fieldContext_AttachmentResponse_fileName(ctx, field)
			case "url":
				return ec.fieldContext_AttachmentResponse_url(ctx, field)
			case "action":
				return ec.fieldContext_AttachmentResponse_action(ctx, field)
			case "id":
				return ec.fieldContext_AttachmentResponse_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttachmentResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateAttachmentSASURL_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateUserInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserResponse)
	fc.Result = res
	return ec.marshalNUserResponse2ᚖtrecᚋentᚐUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_UserResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateUserStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateUserStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserStatus(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateUserStatusInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserResponse)
	fc.Result = res
	return ec.marshalNUserResponse2ᚖtrecᚋentᚐUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateUserStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_UserResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateUserStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateTeam(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateTeam(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTeam(rctx, fc.Args["input"].(ent.NewTeamInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TeamResponse)
	fc.Result = res
	return ec.marshalNTeamResponse2ᚖtrecᚋentᚐTeamResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateTeam(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_TeamResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateTeam_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateTeam(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateTeam(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTeam(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateTeamInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TeamResponse)
	fc.Result = res
	return ec.marshalNTeamResponse2ᚖtrecᚋentᚐTeamResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateTeam(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_TeamResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateTeam_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_DeleteTeam(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_DeleteTeam(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTeam(rctx, fc.Args["id"].(string), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_DeleteTeam(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_DeleteTeam_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateHiringJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateHiringJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateHiringJob(rctx, fc.Args["input"].(ent.NewHiringJobInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJobResponse)
	fc.Result = res
	return ec.marshalNHiringJobResponse2ᚖtrecᚋentᚐHiringJobResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateHiringJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_HiringJobResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJobResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateHiringJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateHiringJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateHiringJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateHiringJob(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateHiringJobInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJobResponse)
	fc.Result = res
	return ec.marshalNHiringJobResponse2ᚖtrecᚋentᚐHiringJobResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateHiringJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_HiringJobResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJobResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateHiringJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_DeleteHiringJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_DeleteHiringJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteHiringJob(rctx, fc.Args["id"].(string), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_DeleteHiringJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_DeleteHiringJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateHiringJobStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateHiringJobStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateHiringJobStatus(rctx, fc.Args["id"].(string), fc.Args["status"].(ent.HiringJobStatus), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJobResponse)
	fc.Result = res
	return ec.marshalNHiringJobResponse2ᚖtrecᚋentᚐHiringJobResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateHiringJobStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_HiringJobResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJobResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateHiringJobStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateCandidate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateCandidate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCandidate(rctx, fc.Args["input"].(ent.NewCandidateInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateResponse)
	fc.Result = res
	return ec.marshalNCandidateResponse2ᚖtrecᚋentᚐCandidateResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateCandidate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateCandidate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateCandidate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateCandidate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCandidate(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateCandidateInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateResponse)
	fc.Result = res
	return ec.marshalNCandidateResponse2ᚖtrecᚋentᚐCandidateResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateCandidate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateCandidate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_DeleteCandidate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_DeleteCandidate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCandidate(rctx, fc.Args["id"].(string), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_DeleteCandidate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_DeleteCandidate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_SetBlackListCandidate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_SetBlackListCandidate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetBlackListCandidate(rctx, fc.Args["id"].(string), fc.Args["is_black_list"].(bool), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_SetBlackListCandidate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_SetBlackListCandidate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateCandidateJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateCandidateJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCandidateJob(rctx, fc.Args["input"].(ent.NewCandidateJobInput), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobResponse)
	fc.Result = res
	return ec.marshalNCandidateJobResponse2ᚖtrecᚋentᚐCandidateJobResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateCandidateJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateJobResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateCandidateJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateCandidateJobAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateCandidateJobAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCandidateJobAttachment(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateCandidateAttachment), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobResponse)
	fc.Result = res
	return ec.marshalNCandidateJobResponse2ᚖtrecᚋentᚐCandidateJobResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateCandidateJobAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateJobResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateCandidateJobAttachment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_DeleteCandidateJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_DeleteCandidateJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCandidateJob(rctx, fc.Args["id"].(string), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_DeleteCandidateJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_DeleteCandidateJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateCandidateJobStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateCandidateJobStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCandidateJobStatus(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateCandidateJobStatus), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobResponse)
	fc.Result = res
	return ec.marshalNCandidateJobResponse2ᚖtrecᚋentᚐCandidateJobResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateCandidateJobStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateJobResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateCandidateJobStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateCandidateJobFeedback(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateCandidateJobFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCandidateJobFeedback(rctx, fc.Args["input"].(ent.NewCandidateJobFeedbackInput), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobFeedbackResponse)
	fc.Result = res
	return ec.marshalNCandidateJobFeedbackResponse2ᚖtrecᚋentᚐCandidateJobFeedbackResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateCandidateJobFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateJobFeedbackResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobFeedbackResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateCandidateJobFeedback_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateCandidateJobFeedback(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateCandidateJobFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCandidateJobFeedback(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateCandidateJobFeedbackInput), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobFeedbackResponse)
	fc.Result = res
	return ec.marshalNCandidateJobFeedbackResponse2ᚖtrecᚋentᚐCandidateJobFeedbackResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateCandidateJobFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateJobFeedbackResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobFeedbackResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateCandidateJobFeedback_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_DeleteCandidateJobFeedback(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_DeleteCandidateJobFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCandidateJobFeedback(rctx, fc.Args["id"].(string), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_DeleteCandidateJobFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_DeleteCandidateJobFeedback_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateCandidateInterview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateCandidateInterview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCandidateInterview(rctx, fc.Args["input"].(ent.NewCandidateInterviewInput), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterviewResponse)
	fc.Result = res
	return ec.marshalNCandidateInterviewResponse2ᚖtrecᚋentᚐCandidateInterviewResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateCandidateInterview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateInterviewResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterviewResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateCandidateInterview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateCandidateInterview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateCandidateInterview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCandidateInterview(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateCandidateInterviewInput), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterviewResponse)
	fc.Result = res
	return ec.marshalNCandidateInterviewResponse2ᚖtrecᚋentᚐCandidateInterviewResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateCandidateInterview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateInterviewResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterviewResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateCandidateInterview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateCandidateInterviewSchedule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateCandidateInterviewSchedule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCandidateInterviewSchedule(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateCandidateInterviewScheduleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterviewResponse)
	fc.Result = res
	return ec.marshalNCandidateInterviewResponse2ᚖtrecᚋentᚐCandidateInterviewResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateCandidateInterviewSchedule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateInterviewResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterviewResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateCandidateInterviewSchedule_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_DeleteCandidateInterview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_DeleteCandidateInterview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCandidateInterview(rctx, fc.Args["id"].(string), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_DeleteCandidateInterview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_DeleteCandidateInterview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateCandidateInterview4Calendar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateCandidateInterview4Calendar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCandidateInterview4Calendar(rctx, fc.Args["input"].(ent.NewCandidateInterview4CalendarInput), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateCandidateInterview4Calendar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateCandidateInterview4Calendar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateCandidateInterviewStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateCandidateInterviewStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCandidateInterviewStatus(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateCandidateInterviewStatusInput), fc.Args["note"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateCandidateInterviewStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateCandidateInterviewStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_ImportCandidate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_ImportCandidate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImportCandidate(rctx, fc.Args["file"].(graphql.Upload))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_ImportCandidate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_ImportCandidate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateSkill(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateSkill(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSkill(rctx, fc.Args["input"].(ent.NewSkillInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillResponse)
	fc.Result = res
	return ec.marshalNSkillResponse2ᚖtrecᚋentᚐSkillResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateSkill(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_SkillResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateSkill_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateSkill(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateSkill(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSkill(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateSkillInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillResponse)
	fc.Result = res
	return ec.marshalNSkillResponse2ᚖtrecᚋentᚐSkillResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateSkill(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_SkillResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateSkill_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_DeleteSkill(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_DeleteSkill(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSkill(rctx, fc.Args["id"].(string), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_DeleteSkill(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_DeleteSkill_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateSkillType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateSkillType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSkillType(rctx, fc.Args["input"].(ent.NewSkillTypeInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillTypeResponse)
	fc.Result = res
	return ec.marshalNSkillTypeResponse2ᚖtrecᚋentᚐSkillTypeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateSkillType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_SkillTypeResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTypeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateSkillType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_UpdateSkillType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_UpdateSkillType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSkillType(rctx, fc.Args["id"].(string), fc.Args["input"].(ent.UpdateSkillTypeInput), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillTypeResponse)
	fc.Result = res
	return ec.marshalNSkillTypeResponse2ᚖtrecᚋentᚐSkillTypeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_UpdateSkillType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_SkillTypeResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTypeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_UpdateSkillType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_DeleteSkillType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_DeleteSkillType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSkillType(rctx, fc.Args["id"].(string), fc.Args["note"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_DeleteSkillType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_DeleteSkillType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_ValidateCandidateInterview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_ValidateCandidateInterview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ValidateCandidateInterview(rctx, fc.Args["input"].(ent.CandidateInterviewValidateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterviewResponseValidate)
	fc.Result = res
	return ec.marshalNCandidateInterviewResponseValidate2ᚖtrecᚋentᚐCandidateInterviewResponseValidate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_ValidateCandidateInterview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateInterviewResponseValidate_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterviewResponseValidate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_ValidateCandidateInterview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2ᚖtrecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2ᚖtrecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pagination_page(ctx context.Context, field graphql.CollectedField, obj *ent.Pagination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pagination_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pagination_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pagination_perPage(ctx context.Context, field graphql.CollectedField, obj *ent.Pagination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pagination_perPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pagination_perPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pagination_total(ctx context.Context, field graphql.CollectedField, obj *ent.Pagination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pagination_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pagination_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetTeam(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetTeam(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTeam(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TeamResponse)
	fc.Result = res
	return ec.marshalNTeamResponse2ᚖtrecᚋentᚐTeamResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetTeam(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_TeamResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetTeam_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllTeams(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllTeams(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllTeams(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.TeamFilter), fc.Args["freeWord"].(*ent.TeamFreeWord), fc.Args["orderBy"].(ent.TeamOrderBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TeamResponseGetAll)
	fc.Result = res
	return ec.marshalNTeamResponseGetAll2ᚖtrecᚋentᚐTeamResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllTeams(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TeamResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_TeamResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllTeams_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUser(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserResponse)
	fc.Result = res
	return ec.marshalNUserResponse2ᚖtrecᚋentᚐUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_UserResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllUsers(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.UserFilter), fc.Args["freeWord"].(*ent.UserFreeWord), fc.Args["orderBy"].(*ent.UserOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserResponseGetAll)
	fc.Result = res
	return ec.marshalNUserResponseGetAll2ᚖtrecᚋentᚐUserResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_UserResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetHiringJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetHiringJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHiringJob(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJobResponse)
	fc.Result = res
	return ec.marshalNHiringJobResponse2ᚖtrecᚋentᚐHiringJobResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetHiringJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_HiringJobResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJobResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetHiringJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllHiringJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllHiringJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllHiringJobs(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.HiringJobFilter), fc.Args["freeWord"].(*ent.HiringJobFreeWord), fc.Args["orderBy"].(ent.HiringJobOrderBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJobResponseGetAll)
	fc.Result = res
	return ec.marshalNHiringJobResponseGetAll2ᚖtrecᚋentᚐHiringJobResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllHiringJobs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_HiringJobResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_HiringJobResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJobResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllHiringJobs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAuditTrail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAuditTrail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAuditTrail(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AuditTrailResponse)
	fc.Result = res
	return ec.marshalNAuditTrailResponse2ᚖtrecᚋentᚐAuditTrailResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAuditTrail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_AuditTrailResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditTrailResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAuditTrail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllAuditTrails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllAuditTrails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAuditTrails(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.AuditTrailFilter), fc.Args["freeWord"].(*ent.AuditTrailFreeWord), fc.Args["orderBy"].(*ent.AuditTrailOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AuditTrailResponseGetAll)
	fc.Result = res
	return ec.marshalNAuditTrailResponseGetAll2ᚖtrecᚋentᚐAuditTrailResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllAuditTrails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_AuditTrailResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_AuditTrailResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditTrailResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllAuditTrails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetCandidate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetCandidate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCandidate(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateResponse)
	fc.Result = res
	return ec.marshalNCandidateResponse2ᚖtrecᚋentᚐCandidateResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetCandidate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetCandidate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllCandidates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllCandidates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllCandidates(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.CandidateFilter), fc.Args["freeWord"].(*ent.CandidateFreeWord), fc.Args["orderBy"].(*ent.CandidateOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateResponseGetAll)
	fc.Result = res
	return ec.marshalNCandidateResponseGetAll2ᚖtrecᚋentᚐCandidateResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllCandidates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CandidateResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_CandidateResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllCandidates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetCandidateJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetCandidateJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCandidateJob(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobResponse)
	fc.Result = res
	return ec.marshalNCandidateJobResponse2ᚖtrecᚋentᚐCandidateJobResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetCandidateJob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateJobResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetCandidateJob_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllCandidateJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllCandidateJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllCandidateJobs(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(ent.CandidateJobFilter), fc.Args["freeWord"].(*ent.CandidateJobFreeWord), fc.Args["orderBy"].(*ent.CandidateJobOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobResponseGetAll)
	fc.Result = res
	return ec.marshalNCandidateJobResponseGetAll2ᚖtrecᚋentᚐCandidateJobResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllCandidateJobs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CandidateJobResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_CandidateJobResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllCandidateJobs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetCandidateJobGroupByStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetCandidateJobGroupByStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCandidateJobGroupByStatus(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.CandidateJobGroupByStatusFilter), fc.Args["freeWord"].(*ent.CandidateJobGroupByStatusFreeWord), fc.Args["orderBy"].(*ent.CandidateJobByOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupByStatusResponse)
	fc.Result = res
	return ec.marshalNCandidateJobGroupByStatusResponse2ᚖtrecᚋentᚐCandidateJobGroupByStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetCandidateJobGroupByStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateJobGroupByStatusResponse_data(ctx, field)
			case "pagination":
				return ec.fieldContext_CandidateJobGroupByStatusResponse_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupByStatusResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetCandidateJobGroupByStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetCandidateJobGroupByInterview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetCandidateJobGroupByInterview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCandidateJobGroupByInterview(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobGroupByInterviewResponse)
	fc.Result = res
	return ec.marshalNCandidateJobGroupByInterviewResponse2ᚖtrecᚋentᚐCandidateJobGroupByInterviewResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetCandidateJobGroupByInterview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateJobGroupByInterviewResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobGroupByInterviewResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetCandidateJobGroupByInterview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetCandidateJobFeedback(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetCandidateJobFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCandidateJobFeedback(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobFeedbackResponse)
	fc.Result = res
	return ec.marshalNCandidateJobFeedbackResponse2ᚖtrecᚋentᚐCandidateJobFeedbackResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetCandidateJobFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateJobFeedbackResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobFeedbackResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetCandidateJobFeedback_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllCandidateJobFeedbacks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllCandidateJobFeedbacks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllCandidateJobFeedbacks(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(ent.CandidateJobFeedbackFilter), fc.Args["freeWord"].(*ent.CandidateJobFeedbackFreeWord), fc.Args["orderBy"].(*ent.CandidateJobFeedbackOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateJobFeedbackResponseGetAll)
	fc.Result = res
	return ec.marshalNCandidateJobFeedbackResponseGetAll2ᚖtrecᚋentᚐCandidateJobFeedbackResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllCandidateJobFeedbacks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CandidateJobFeedbackResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_CandidateJobFeedbackResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateJobFeedbackResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllCandidateJobFeedbacks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetCandidateInterview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetCandidateInterview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCandidateInterview(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterviewResponse)
	fc.Result = res
	return ec.marshalNCandidateInterviewResponse2ᚖtrecᚋentᚐCandidateInterviewResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetCandidateInterview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_CandidateInterviewResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterviewResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetCandidateInterview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllCandidateInterviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllCandidateInterviews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllCandidateInterviews(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(ent.CandidateInterviewFilter), fc.Args["freeWord"].(*ent.CandidateInterviewFreeWord), fc.Args["orderBy"].(*ent.CandidateInterviewOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterviewResponseGetAll)
	fc.Result = res
	return ec.marshalNCandidateInterviewResponseGetAll2ᚖtrecᚋentᚐCandidateInterviewResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllCandidateInterviews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CandidateInterviewResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_CandidateInterviewResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterviewResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllCandidateInterviews_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllCandidateInterview4Calendar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllCandidateInterview4Calendar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllCandidateInterview4Calendar(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.CandidateInterviewCalendarFilter), fc.Args["freeWord"].(*ent.CandidateInterviewFreeWord), fc.Args["orderBy"].(*ent.CandidateInterviewOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateInterviewResponseGetAll)
	fc.Result = res
	return ec.marshalNCandidateInterviewResponseGetAll2ᚖtrecᚋentᚐCandidateInterviewResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllCandidateInterview4Calendar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CandidateInterviewResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_CandidateInterviewResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateInterviewResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllCandidateInterview4Calendar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_ExportSampleCandidate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_ExportSampleCandidate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExportSampleCandidate(rctx, fc.Args["lang"].(ent.I18nLanguage))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Base64Response)
	fc.Result = res
	return ec.marshalNBase64Response2ᚖtrecᚋentᚐBase64Response(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_ExportSampleCandidate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_Base64Response_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Base64Response", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_ExportSampleCandidate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetSkill(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetSkill(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSkill(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillResponse)
	fc.Result = res
	return ec.marshalNSkillResponse2ᚖtrecᚋentᚐSkillResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetSkill(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_SkillResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetSkill_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllSkills(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllSkills(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllSkills(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.SkillFilter), fc.Args["freeWord"].(*ent.SkillFreeWord), fc.Args["orderBy"].(*ent.SkillOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillResponseGetAll)
	fc.Result = res
	return ec.marshalNSkillResponseGetAll2ᚖtrecᚋentᚐSkillResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllSkills(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SkillResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_SkillResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllSkills_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetSkillType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetSkillType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSkillType(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillTypeResponse)
	fc.Result = res
	return ec.marshalNSkillTypeResponse2ᚖtrecᚋentᚐSkillTypeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetSkillType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_SkillTypeResponse_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTypeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetSkillType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllSkillTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllSkillTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllSkillTypes(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.SkillTypeFilter), fc.Args["freeWord"].(*ent.SkillTypeFreeWord), fc.Args["orderBy"].(*ent.SkillTypeOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillTypeResponseGetAll)
	fc.Result = res
	return ec.marshalNSkillTypeResponseGetAll2ᚖtrecᚋentᚐSkillTypeResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllSkillTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SkillTypeResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_SkillTypeResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTypeResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllSkillTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_SelectionUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_SelectionUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SelectionUsers(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.UserFilter), fc.Args["freeWord"].(*ent.UserFreeWord), fc.Args["orderBy"].(*ent.UserOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserSelectionResponseGetAll)
	fc.Result = res
	return ec.marshalNUserSelectionResponseGetAll2ᚖtrecᚋentᚐUserSelectionResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_SelectionUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_UserSelectionResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_UserSelectionResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSelectionResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_SelectionUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_SelectionTeams(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_SelectionTeams(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SelectionTeams(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.TeamFilter), fc.Args["freeWord"].(*ent.TeamFreeWord), fc.Args["orderBy"].(ent.TeamOrderBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TeamSelectionResponseGetAll)
	fc.Result = res
	return ec.marshalNTeamSelectionResponseGetAll2ᚖtrecᚋentᚐTeamSelectionResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_SelectionTeams(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TeamSelectionResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_TeamSelectionResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamSelectionResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_SelectionTeams_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_SelectionHiringJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_SelectionHiringJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SelectionHiringJobs(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.HiringJobFilter), fc.Args["freeWord"].(*ent.HiringJobFreeWord), fc.Args["orderBy"].(ent.HiringJobOrderBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HiringJobSelectionResponseGetAll)
	fc.Result = res
	return ec.marshalNHiringJobSelectionResponseGetAll2ᚖtrecᚋentᚐHiringJobSelectionResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_SelectionHiringJobs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_HiringJobSelectionResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_HiringJobSelectionResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HiringJobSelectionResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_SelectionHiringJobs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_SelectionCandidates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_SelectionCandidates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SelectionCandidates(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.CandidateFilter), fc.Args["freeWord"].(*ent.CandidateFreeWord), fc.Args["orderBy"].(*ent.CandidateOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CandidateSelectionResponseGetAll)
	fc.Result = res
	return ec.marshalNCandidateSelectionResponseGetAll2ᚖtrecᚋentᚐCandidateSelectionResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_SelectionCandidates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CandidateSelectionResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_CandidateSelectionResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CandidateSelectionResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_SelectionCandidates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_SelectionSkills(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_SelectionSkills(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SelectionSkills(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.SkillFilter), fc.Args["freeWord"].(*ent.SkillFreeWord), fc.Args["orderBy"].(*ent.SkillOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillSelectionResponseGetAll)
	fc.Result = res
	return ec.marshalNSkillSelectionResponseGetAll2ᚖtrecᚋentᚐSkillSelectionResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_SelectionSkills(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SkillSelectionResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_SkillSelectionResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillSelectionResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_SelectionSkills_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_SelectionSkillTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_SelectionSkillTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SelectionSkillTypes(rctx, fc.Args["pagination"].(*ent.PaginationInput), fc.Args["filter"].(*ent.SkillTypeFilter), fc.Args["freeWord"].(*ent.SkillTypeFreeWord), fc.Args["orderBy"].(*ent.SkillTypeOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillTypeSelectionResponseGetAll)
	fc.Result = res
	return ec.marshalNSkillTypeSelectionResponseGetAll2ᚖtrecᚋentᚐSkillTypeSelectionResponseGetAll(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_SelectionSkillTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_SkillTypeSelectionResponseGetAll_edges(ctx, field)
			case "pagination":
				return ec.fieldContext_SkillTypeSelectionResponseGetAll_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTypeSelectionResponseGetAll", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_SelectionSkillTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_id(ctx context.Context, field graphql.CollectedField, obj *ent.Skill) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Skill_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Skill().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Skill_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_name(ctx context.Context, field graphql.CollectedField, obj *ent.Skill) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Skill_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Skill_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_description(ctx context.Context, field graphql.CollectedField, obj *ent.Skill) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Skill_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Skill_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_skill_type(ctx context.Context, field graphql.CollectedField, obj *ent.Skill) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Skill_skill_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Skill().SkillType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.SkillType)
	fc.Result = res
	return ec.marshalOSkillType2ᚖtrecᚋentᚐSkillType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Skill_skill_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SkillType_id(ctx, field)
			case "name":
				return ec.fieldContext_SkillType_name(ctx, field)
			case "description":
				return ec.fieldContext_SkillType_description(ctx, field)
			case "created_at":
				return ec.fieldContext_SkillType_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_SkillType_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_SkillType_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.Skill) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Skill_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Skill_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.Skill) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Skill_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Skill_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_deleted_at(ctx context.Context, field graphql.CollectedField, obj *ent.Skill) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Skill_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Skill_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.SkillEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Skill)
	fc.Result = res
	return ec.marshalNSkill2ᚖtrecᚋentᚐSkill(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Skill_id(ctx, field)
			case "name":
				return ec.fieldContext_Skill_name(ctx, field)
			case "description":
				return ec.fieldContext_Skill_description(ctx, field)
			case "skill_type":
				return ec.fieldContext_Skill_skill_type(ctx, field)
			case "created_at":
				return ec.fieldContext_Skill_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Skill_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Skill_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Skill", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.SkillEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.SkillResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Skill)
	fc.Result = res
	return ec.marshalNSkill2ᚖtrecᚋentᚐSkill(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Skill_id(ctx, field)
			case "name":
				return ec.fieldContext_Skill_name(ctx, field)
			case "description":
				return ec.fieldContext_Skill_description(ctx, field)
			case "skill_type":
				return ec.fieldContext_Skill_skill_type(ctx, field)
			case "created_at":
				return ec.fieldContext_Skill_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Skill_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Skill_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Skill", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.SkillResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.SkillEdge)
	fc.Result = res
	return ec.marshalNSkillEdge2ᚕᚖtrecᚋentᚐSkillEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_SkillEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_SkillEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.SkillResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillSelection_id(ctx context.Context, field graphql.CollectedField, obj *ent.SkillSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillSelection_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillSelection_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillSelection_name(ctx context.Context, field graphql.CollectedField, obj *ent.SkillSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillSelection_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillSelection_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillSelectionEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.SkillSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillSelectionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillSelection)
	fc.Result = res
	return ec.marshalNSkillSelection2ᚖtrecᚋentᚐSkillSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillSelectionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SkillSelection_id(ctx, field)
			case "name":
				return ec.fieldContext_SkillSelection_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.SkillSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillSelectionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.SkillSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillSelectionResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.SkillSelectionEdge)
	fc.Result = res
	return ec.marshalNSkillSelectionEdge2ᚕᚖtrecᚋentᚐSkillSelectionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_SkillSelectionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_SkillSelectionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillSelectionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.SkillSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillSelectionResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillType_id(ctx context.Context, field graphql.CollectedField, obj *ent.SkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillType_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SkillType().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillType_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillType",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillType_name(ctx context.Context, field graphql.CollectedField, obj *ent.SkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillType_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillType_description(ctx context.Context, field graphql.CollectedField, obj *ent.SkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillType_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillType_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillType_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.SkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillType_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillType_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillType_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.SkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillType_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillType_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillType_deleted_at(ctx context.Context, field graphql.CollectedField, obj *ent.SkillType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillType_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillType_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillType)
	fc.Result = res
	return ec.marshalNSkillType2ᚖtrecᚋentᚐSkillType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SkillType_id(ctx, field)
			case "name":
				return ec.fieldContext_SkillType_name(ctx, field)
			case "description":
				return ec.fieldContext_SkillType_description(ctx, field)
			case "created_at":
				return ec.fieldContext_SkillType_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_SkillType_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_SkillType_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillType)
	fc.Result = res
	return ec.marshalNSkillType2ᚖtrecᚋentᚐSkillType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SkillType_id(ctx, field)
			case "name":
				return ec.fieldContext_SkillType_name(ctx, field)
			case "description":
				return ec.fieldContext_SkillType_description(ctx, field)
			case "created_at":
				return ec.fieldContext_SkillType_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_SkillType_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_SkillType_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.SkillTypeEdge)
	fc.Result = res
	return ec.marshalNSkillTypeEdge2ᚕᚖtrecᚋentᚐSkillTypeEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_SkillTypeEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_SkillTypeEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTypeEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeSelection_id(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeSelection_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeSelection_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeSelection_name(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeSelection_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeSelection_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeSelection_skills(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeSelection_skills(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skills, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.SkillSelection)
	fc.Result = res
	return ec.marshalOSkillSelection2ᚕᚖtrecᚋentᚐSkillSelectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeSelection_skills(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SkillSelection_id(ctx, field)
			case "name":
				return ec.fieldContext_SkillSelection_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeSelectionEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeSelectionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.SkillTypeSelection)
	fc.Result = res
	return ec.marshalNSkillTypeSelection2ᚖtrecᚋentᚐSkillTypeSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeSelectionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SkillTypeSelection_id(ctx, field)
			case "name":
				return ec.fieldContext_SkillTypeSelection_name(ctx, field)
			case "skills":
				return ec.fieldContext_SkillTypeSelection_skills(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTypeSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeSelectionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeSelectionResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.SkillTypeSelectionEdge)
	fc.Result = res
	return ec.marshalNSkillTypeSelectionEdge2ᚕᚖtrecᚋentᚐSkillTypeSelectionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_SkillTypeSelectionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_SkillTypeSelectionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTypeSelectionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTypeSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.SkillTypeSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SkillTypeSelectionResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SkillTypeSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTypeSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_id(ctx context.Context, field graphql.CollectedField, obj *ent.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Team().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_name(ctx context.Context, field graphql.CollectedField, obj *ent.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_slug(ctx context.Context, field graphql.CollectedField, obj *ent.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_members(ctx context.Context, field graphql.CollectedField, obj *ent.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_members(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Team().Members(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖtrecᚋentᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_members(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_opening_requests(ctx context.Context, field graphql.CollectedField, obj *ent.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_opening_requests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Team().OpeningRequests(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_opening_requests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_is_able_to_delete(ctx context.Context, field graphql.CollectedField, obj *ent.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_is_able_to_delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Team().IsAbleToDelete(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_is_able_to_delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Team_deleted_at(ctx context.Context, field graphql.CollectedField, obj *ent.Team) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Team_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Team_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TeamEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Team)
	fc.Result = res
	return ec.marshalNTeam2ᚖtrecᚋentᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "slug":
				return ec.fieldContext_Team_slug(ctx, field)
			case "members":
				return ec.fieldContext_Team_members(ctx, field)
			case "opening_requests":
				return ec.fieldContext_Team_opening_requests(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_Team_is_able_to_delete(ctx, field)
			case "created_at":
				return ec.fieldContext_Team_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Team_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Team_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TeamEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.TeamResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖtrecᚋentᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "slug":
				return ec.fieldContext_Team_slug(ctx, field)
			case "members":
				return ec.fieldContext_Team_members(ctx, field)
			case "opening_requests":
				return ec.fieldContext_Team_opening_requests(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_Team_is_able_to_delete(ctx, field)
			case "created_at":
				return ec.fieldContext_Team_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Team_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Team_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TeamResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.TeamEdge)
	fc.Result = res
	return ec.marshalNTeamEdge2ᚕᚖtrecᚋentᚐTeamEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TeamEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TeamEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.TeamResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamSelection_id(ctx context.Context, field graphql.CollectedField, obj *ent.TeamSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamSelection_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamSelection_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamSelection_name(ctx context.Context, field graphql.CollectedField, obj *ent.TeamSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamSelection_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamSelection_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamSelectionEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.TeamSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamSelectionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.TeamSelection)
	fc.Result = res
	return ec.marshalNTeamSelection2ᚖtrecᚋentᚐTeamSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamSelectionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TeamSelection_id(ctx, field)
			case "name":
				return ec.fieldContext_TeamSelection_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.TeamSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamSelectionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.TeamSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamSelectionResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.TeamSelectionEdge)
	fc.Result = res
	return ec.marshalNTeamSelectionEdge2ᚕᚖtrecᚋentᚐTeamSelectionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TeamSelectionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TeamSelectionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TeamSelectionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeamSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.TeamSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TeamSelectionResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TeamSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeamSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_work_email(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_work_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_work_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_status(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.UserStatus)
	fc.Result = res
	return ec.marshalNUserStatus2trecᚋentᚐUserStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_team(ctx context.Context, field graphql.CollectedField, obj *ent.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_team(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Team(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚖtrecᚋentᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_team(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Team_id(ctx, field)
			case "name":
				return ec.fieldContext_Team_name(ctx, field)
			case "slug":
				return ec.fieldContext_Team_slug(ctx, field)
			case "members":
				return ec.fieldContext_Team_members(ctx, field)
			case "opening_requests":
				return ec.fieldContext_Team_opening_requests(ctx, field)
			case "is_able_to_delete":
				return ec.fieldContext_Team_is_able_to_delete(ctx, field)
			case "created_at":
				return ec.fieldContext_Team_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Team_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Team_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Team", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalNUser2ᚖtrecᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.UserEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponse_data(ctx context.Context, field graphql.CollectedField, obj *ent.UserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserResponse_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖtrecᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserResponse_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "work_email":
				return ec.fieldContext_User_work_email(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "team":
				return ec.fieldContext_User_team(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.UserResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.UserEdge)
	fc.Result = res
	return ec.marshalNUserEdge2ᚕᚖtrecᚋentᚐUserEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_UserEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_UserEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.UserResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSelection_id(ctx context.Context, field graphql.CollectedField, obj *ent.UserSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSelection_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSelection_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSelection_name(ctx context.Context, field graphql.CollectedField, obj *ent.UserSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSelection_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSelection_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSelection_work_email(ctx context.Context, field graphql.CollectedField, obj *ent.UserSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSelection_work_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSelection_work_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSelectionEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.UserSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSelectionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.UserSelection)
	fc.Result = res
	return ec.marshalNUserSelection2ᚖtrecᚋentᚐUserSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSelectionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserSelection_id(ctx, field)
			case "name":
				return ec.fieldContext_UserSelection_name(ctx, field)
			case "work_email":
				return ec.fieldContext_UserSelection_work_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.UserSelectionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSelectionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2trecᚋentᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSelectionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSelectionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField, obj *ent.UserSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSelectionResponseGetAll_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.UserSelectionEdge)
	fc.Result = res
	return ec.marshalNUserSelectionEdge2ᚕᚖtrecᚋentᚐUserSelectionEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSelectionResponseGetAll_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_UserSelectionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_UserSelectionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSelectionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField, obj *ent.UserSelectionResponseGetAll) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSelectionResponseGetAll_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖtrecᚋentᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSelectionResponseGetAll_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSelectionResponseGetAll",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Pagination_page(ctx, field)
			case "perPage":
				return ec.fieldContext_Pagination_perPage(ctx, field)
			case "total":
				return ec.fieldContext_Pagination_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAttachmentInput(ctx context.Context, obj interface{}) (ent.AttachmentInput, error) {
	var it ent.AttachmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "folder", "fileName", "action"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "folder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folder"))
			it.Folder, err = ec.unmarshalNAttachmentFolder2trecᚋentᚐAttachmentFolder(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
			it.FileName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalNAttachmentAction2trecᚋentᚐAttachmentAction(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditTrailFilter(ctx context.Context, obj interface{}) (ent.AuditTrailFilter, error) {
	var it ent.AuditTrailFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"recordId", "module", "actionType", "fromDate", "toDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "recordId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recordId"))
			it.RecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "module":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("module"))
			it.Module, err = ec.unmarshalOprojectModule2ᚖtrecᚋentᚐProjectModule(ctx, v)
			if err != nil {
				return it, err
			}
		case "actionType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionType"))
			it.ActionType, err = ec.unmarshalOauditTrailAction2ᚖtrecᚋentᚐAuditTrailAction(ctx, v)
			if err != nil {
				return it, err
			}
		case "fromDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromDate"))
			it.FromDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "toDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toDate"))
			it.ToDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditTrailFreeWord(ctx context.Context, obj interface{}) (ent.AuditTrailFreeWord, error) {
	var it ent.AuditTrailFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"recordChange"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "recordChange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recordChange"))
			it.RecordChange, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditTrailOrder(ctx context.Context, obj interface{}) (ent.AuditTrailOrder, error) {
	var it ent.AuditTrailOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNAuditTrailOrderField2ᚖtrecᚋentᚐAuditTrailOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateFilter(ctx context.Context, obj interface{}) (ent.CandidateFilter, error) {
	var it ent.CandidateFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "phone", "dob_from_date", "dob_to_date", "status", "from_date", "to_date", "is_black_list", "job_id", "is_able_to_interview", "failed_reason", "reference_uid", "recruit_time_from_date", "recruit_time_to_date", "skill_type_ids", "skill_ids", "reference_type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dob_from_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dob_from_date"))
			it.DobFromDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "dob_to_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dob_to_date"))
			it.DobToDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOCandidateStatusEnum2ᚖtrecᚋentᚐCandidateStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "from_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from_date"))
			it.FromDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "to_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to_date"))
			it.ToDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black_list":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black_list"))
			it.IsBlackList, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job_id"))
			it.JobID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_able_to_interview":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_able_to_interview"))
			it.IsAbleToInterview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "failed_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failed_reason"))
			it.FailedReason, err = ec.unmarshalOCandidateJobFailedReason2ᚕtrecᚋentᚐCandidateJobFailedReasonᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_uid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_uid"))
			it.ReferenceUID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "recruit_time_from_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recruit_time_from_date"))
			it.RecruitTimeFromDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "recruit_time_to_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recruit_time_to_date"))
			it.RecruitTimeToDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "skill_type_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skill_type_ids"))
			it.SkillTypeIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "skill_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skill_ids"))
			it.SkillIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_type"))
			it.ReferenceType, err = ec.unmarshalOCandidateReferenceType2ᚕtrecᚋentᚐCandidateReferenceTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateFreeWord(ctx context.Context, obj interface{}) (ent.CandidateFreeWord, error) {
	var it ent.CandidateFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "phone"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateInterviewCalendarFilter(ctx context.Context, obj interface{}) (ent.CandidateInterviewCalendarFilter, error) {
	var it ent.CandidateInterviewCalendarFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"interview_date", "start_from", "end_at", "interviewer", "from_date", "to_date", "team_id", "hiring_job_id", "interview_date_from", "interview_date_to"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "interview_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interview_date"))
			it.InterviewDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_from"))
			it.StartFrom, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_at"))
			it.EndAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "interviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interviewer"))
			it.Interviewer, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "from_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from_date"))
			it.FromDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "to_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to_date"))
			it.ToDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "team_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team_id"))
			it.TeamID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hiring_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hiring_job_id"))
			it.HiringJobID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interview_date_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interview_date_from"))
			it.InterviewDateFrom, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "interview_date_to":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interview_date_to"))
			it.InterviewDateTo, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateInterviewFilter(ctx context.Context, obj interface{}) (ent.CandidateInterviewFilter, error) {
	var it ent.CandidateInterviewFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"candidate_job_id", "interview_date", "start_from", "end_at", "interviewer", "from_date", "to_date"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "candidate_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_job_id"))
			it.CandidateJobID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "interview_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interview_date"))
			it.InterviewDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_from"))
			it.StartFrom, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_at"))
			it.EndAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "interviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interviewer"))
			it.Interviewer, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "from_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from_date"))
			it.FromDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "to_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to_date"))
			it.ToDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateInterviewFreeWord(ctx context.Context, obj interface{}) (ent.CandidateInterviewFreeWord, error) {
	var it ent.CandidateInterviewFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateInterviewOrder(ctx context.Context, obj interface{}) (ent.CandidateInterviewOrder, error) {
	var it ent.CandidateInterviewOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNCandidateInterviewOrderField2ᚖtrecᚋentᚐCandidateInterviewOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateInterviewValidateInput(ctx context.Context, obj interface{}) (ent.CandidateInterviewValidateInput, error) {
	var it ent.CandidateInterviewValidateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "candidate_job_id", "candidate_id", "job_id", "interview_date", "start_from", "end_at", "interviewer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidate_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_job_id"))
			it.CandidateJobID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidate_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_id"))
			it.CandidateID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job_id"))
			it.JobID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interview_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interview_date"))
			it.InterviewDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_from"))
			it.StartFrom, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_at"))
			it.EndAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "interviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interviewer"))
			it.Interviewer, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateJobByOrder(ctx context.Context, obj interface{}) (ent.CandidateJobByOrder, error) {
	var it ent.CandidateJobByOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNCandidateJobOrderByField2trecᚋentᚐCandidateJobOrderByField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateJobFeedbackFilter(ctx context.Context, obj interface{}) (ent.CandidateJobFeedbackFilter, error) {
	var it ent.CandidateJobFeedbackFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"candidate_job_id", "created_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "candidate_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_job_id"))
			it.CandidateJobID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateJobFeedbackFreeWord(ctx context.Context, obj interface{}) (ent.CandidateJobFeedbackFreeWord, error) {
	var it ent.CandidateJobFeedbackFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"feedback", "user_name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_name"))
			it.UserName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateJobFeedbackOrder(ctx context.Context, obj interface{}) (ent.CandidateJobFeedbackOrder, error) {
	var it ent.CandidateJobFeedbackOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNCandidateJobFeedbackOrderField2ᚖtrecᚋentᚐCandidateJobFeedbackOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateJobFilter(ctx context.Context, obj interface{}) (ent.CandidateJobFilter, error) {
	var it ent.CandidateJobFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "from_date", "to_date", "team_id", "hiring_job_id", "candidate_id", "failed_reason"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOCandidateJobStatus2ᚖtrecᚋentᚐCandidateJobStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "from_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from_date"))
			it.FromDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "to_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to_date"))
			it.ToDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "team_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team_id"))
			it.TeamID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hiring_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hiring_job_id"))
			it.HiringJobID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidate_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_id"))
			it.CandidateID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "failed_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failed_reason"))
			it.FailedReason, err = ec.unmarshalOCandidateJobFailedReason2ᚕtrecᚋentᚐCandidateJobFailedReasonᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateJobFreeWord(ctx context.Context, obj interface{}) (ent.CandidateJobFreeWord, error) {
	var it ent.CandidateJobFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"team", "hiring_job"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "team":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team"))
			it.Team, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hiring_job":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hiring_job"))
			it.HiringJob, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateJobGroupByStatusFilter(ctx context.Context, obj interface{}) (ent.CandidateJobGroupByStatusFilter, error) {
	var it ent.CandidateJobGroupByStatusFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"hiring_job_id", "team_id", "priority", "skill_id", "from_date", "to_date", "location", "created_by_ids"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "hiring_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hiring_job_id"))
			it.HiringJobID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "team_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team_id"))
			it.TeamID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "skill_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skill_id"))
			it.SkillID, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "from_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from_date"))
			it.FromDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "to_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to_date"))
			it.ToDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOLocationEnum2ᚕtrecᚋentᚐLocationEnumᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by_ids"))
			it.CreatedByIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateJobGroupByStatusFreeWord(ctx context.Context, obj interface{}) (ent.CandidateJobGroupByStatusFreeWord, error) {
	var it ent.CandidateJobGroupByStatusFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"job_title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "job_title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job_title"))
			it.JobTitle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateJobOrder(ctx context.Context, obj interface{}) (ent.CandidateJobOrder, error) {
	var it ent.CandidateJobOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNCandidateJobOrderField2ᚖtrecᚋentᚐCandidateJobOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCandidateOrder(ctx context.Context, obj interface{}) (ent.CandidateOrder, error) {
	var it ent.CandidateOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNCandidateOrderField2ᚖtrecᚋentᚐCandidateOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEntitySkillRecordInput(ctx context.Context, obj interface{}) (ent.EntitySkillRecordInput, error) {
	var it ent.EntitySkillRecordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "skill_id", "orderId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "skill_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skill_id"))
			it.SkillID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderId"))
			it.OrderID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHiringJobFilter(ctx context.Context, obj interface{}) (ent.HiringJobFilter, error) {
	var it ent.HiringJobFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "team_ids", "status", "priority", "location", "skill_ids", "created_by_ids"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "team_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team_ids"))
			it.TeamIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOHiringJobStatus2ᚖtrecᚋentᚐHiringJobStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOLocationEnum2ᚕᚖtrecᚋentᚐLocationEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "skill_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skill_ids"))
			it.SkillIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by_ids"))
			it.CreatedByIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHiringJobFreeWord(ctx context.Context, obj interface{}) (ent.HiringJobFreeWord, error) {
	var it ent.HiringJobFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHiringJobOrderBy(ctx context.Context, obj interface{}) (ent.HiringJobOrderBy, error) {
	var it ent.HiringJobOrderBy
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNHiringJobOrderByField2trecᚋentᚐHiringJobOrderByField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewAttachmentInput(ctx context.Context, obj interface{}) (ent.NewAttachmentInput, error) {
	var it ent.NewAttachmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "document_name", "document_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "document_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("document_name"))
			it.DocumentName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "document_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("document_id"))
			it.DocumentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewCandidateInput(ctx context.Context, obj interface{}) (ent.NewCandidateInput, error) {
	var it ent.NewCandidateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "phone", "dob", "reference_type", "reference_value", "reference_uid", "recruit_time", "description", "country", "entity_skill_records", "attachments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dob"))
			it.Dob, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_type"))
			it.ReferenceType, err = ec.unmarshalNCandidateReferenceType2trecᚋentᚐCandidateReferenceType(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_value"))
			it.ReferenceValue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_uid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_uid"))
			it.ReferenceUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recruit_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recruit_time"))
			it.RecruitTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "entity_skill_records":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entity_skill_records"))
			it.EntitySkillRecords, err = ec.unmarshalOEntitySkillRecordInput2ᚕᚖtrecᚋentᚐEntitySkillRecordInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachments"))
			it.Attachments, err = ec.unmarshalONewAttachmentInput2ᚕᚖtrecᚋentᚐNewAttachmentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewCandidateInterview4CalendarInput(ctx context.Context, obj interface{}) (ent.NewCandidateInterview4CalendarInput, error) {
	var it ent.NewCandidateInterview4CalendarInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "candidate_id", "job_id", "interview_date", "start_from", "end_at", "interviewer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidate_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_id"))
			it.CandidateID, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job_id"))
			it.JobID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "interview_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interview_date"))
			it.InterviewDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_from"))
			it.StartFrom, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_at"))
			it.EndAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "interviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interviewer"))
			it.Interviewer, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewCandidateInterviewInput(ctx context.Context, obj interface{}) (ent.NewCandidateInterviewInput, error) {
	var it ent.NewCandidateInterviewInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "candidate_job_id", "interview_date", "start_from", "end_at", "interviewer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidate_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_job_id"))
			it.CandidateJobID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "interview_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interview_date"))
			it.InterviewDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_from"))
			it.StartFrom, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_at"))
			it.EndAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "interviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interviewer"))
			it.Interviewer, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewCandidateJobFeedbackInput(ctx context.Context, obj interface{}) (ent.NewCandidateJobFeedbackInput, error) {
	var it ent.NewCandidateJobFeedbackInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"candidate_job_id", "feedback", "attachments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "candidate_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_job_id"))
			it.CandidateJobID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachments"))
			it.Attachments, err = ec.unmarshalONewAttachmentInput2ᚕᚖtrecᚋentᚐNewAttachmentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewCandidateJobInput(ctx context.Context, obj interface{}) (ent.NewCandidateJobInput, error) {
	var it ent.NewCandidateJobInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"candidate_id", "hiring_job_id", "status", "attachments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "candidate_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_id"))
			it.CandidateID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "hiring_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hiring_job_id"))
			it.HiringJobID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNCandidateJobStatus2trecᚋentᚐCandidateJobStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachments"))
			it.Attachments, err = ec.unmarshalONewAttachmentInput2ᚕᚖtrecᚋentᚐNewAttachmentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewHiringJobInput(ctx context.Context, obj interface{}) (ent.NewHiringJobInput, error) {
	var it ent.NewHiringJobInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "name", "description", "amount", "location", "salary_type", "salary_from", "salary_to", "currency", "team_id", "created_by", "priority", "entity_skill_records"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNHiringJobStatus2trecᚋentᚐHiringJobStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalNLocationEnum2trecᚋentᚐLocationEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "salary_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salary_type"))
			it.SalaryType, err = ec.unmarshalNSalaryTypeEnum2trecᚋentᚐSalaryTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "salary_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salary_from"))
			it.SalaryFrom, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "salary_to":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salary_to"))
			it.SalaryTo, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalNCurrencyEnum2trecᚋentᚐCurrencyEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "team_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team_id"))
			it.TeamID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "entity_skill_records":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entity_skill_records"))
			it.EntitySkillRecords, err = ec.unmarshalOEntitySkillRecordInput2ᚕᚖtrecᚋentᚐEntitySkillRecordInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewSkillInput(ctx context.Context, obj interface{}) (ent.NewSkillInput, error) {
	var it ent.NewSkillInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "skill_type_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "skill_type_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skill_type_id"))
			it.SkillTypeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewSkillTypeInput(ctx context.Context, obj interface{}) (ent.NewSkillTypeInput, error) {
	var it ent.NewSkillTypeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewTeamInput(ctx context.Context, obj interface{}) (ent.NewTeamInput, error) {
	var it ent.NewTeamInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "members"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "members":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("members"))
			it.Members, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewUserInput(ctx context.Context, obj interface{}) (ent.NewUserInput, error) {
	var it ent.NewUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "work_email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "work_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work_email"))
			it.WorkEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (ent.PaginationInput, error) {
	var it ent.PaginationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "perPage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSkillFilter(ctx context.Context, obj interface{}) (ent.SkillFilter, error) {
	var it ent.SkillFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSkillFreeWord(ctx context.Context, obj interface{}) (ent.SkillFreeWord, error) {
	var it ent.SkillFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSkillOrder(ctx context.Context, obj interface{}) (ent.SkillOrder, error) {
	var it ent.SkillOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNSkillOrderField2ᚖtrecᚋentᚐSkillOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSkillTypeFilter(ctx context.Context, obj interface{}) (ent.SkillTypeFilter, error) {
	var it ent.SkillTypeFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSkillTypeFreeWord(ctx context.Context, obj interface{}) (ent.SkillTypeFreeWord, error) {
	var it ent.SkillTypeFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSkillTypeOrder(ctx context.Context, obj interface{}) (ent.SkillTypeOrder, error) {
	var it ent.SkillTypeOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNSkillTypeOrderField2ᚖtrecᚋentᚐSkillTypeOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamFilter(ctx context.Context, obj interface{}) (ent.TeamFilter, error) {
	var it ent.TeamFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamFreeWord(ctx context.Context, obj interface{}) (ent.TeamFreeWord, error) {
	var it ent.TeamFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamOrderBy(ctx context.Context, obj interface{}) (ent.TeamOrderBy, error) {
	var it ent.TeamOrderBy
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNTeamOrderByField2trecᚋentᚐTeamOrderByField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCandidateAttachment(ctx context.Context, obj interface{}) (ent.UpdateCandidateAttachment, error) {
	var it ent.UpdateCandidateAttachment
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"attachments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "attachments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachments"))
			it.Attachments, err = ec.unmarshalONewAttachmentInput2ᚕᚖtrecᚋentᚐNewAttachmentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCandidateInput(ctx context.Context, obj interface{}) (ent.UpdateCandidateInput, error) {
	var it ent.UpdateCandidateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "phone", "dob", "reference_type", "reference_value", "reference_uid", "recruit_time", "description", "country", "entity_skill_records", "attachments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dob"))
			it.Dob, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_type"))
			it.ReferenceType, err = ec.unmarshalNCandidateReferenceType2trecᚋentᚐCandidateReferenceType(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_value"))
			it.ReferenceValue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_uid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_uid"))
			it.ReferenceUID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recruit_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recruit_time"))
			it.RecruitTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "entity_skill_records":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entity_skill_records"))
			it.EntitySkillRecords, err = ec.unmarshalOEntitySkillRecordInput2ᚕᚖtrecᚋentᚐEntitySkillRecordInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachments"))
			it.Attachments, err = ec.unmarshalONewAttachmentInput2ᚕᚖtrecᚋentᚐNewAttachmentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCandidateInterviewInput(ctx context.Context, obj interface{}) (ent.UpdateCandidateInterviewInput, error) {
	var it ent.UpdateCandidateInterviewInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "candidate_job_id", "interview_date", "start_from", "end_at", "interviewer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "candidate_job_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("candidate_job_id"))
			it.CandidateJobID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "interview_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interview_date"))
			it.InterviewDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_from"))
			it.StartFrom, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_at"))
			it.EndAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "interviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interviewer"))
			it.Interviewer, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCandidateInterviewScheduleInput(ctx context.Context, obj interface{}) (ent.UpdateCandidateInterviewScheduleInput, error) {
	var it ent.UpdateCandidateInterviewScheduleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"interview_date", "start_from", "end_at", "interviewer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "interview_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interview_date"))
			it.InterviewDate, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_from"))
			it.StartFrom, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_at"))
			it.EndAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "interviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interviewer"))
			it.Interviewer, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCandidateInterviewStatusInput(ctx context.Context, obj interface{}) (ent.UpdateCandidateInterviewStatusInput, error) {
	var it ent.UpdateCandidateInterviewStatusInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNCandidateInterviewStatusEditable2trecᚋentᚐCandidateInterviewStatusEditable(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCandidateJobFeedbackInput(ctx context.Context, obj interface{}) (ent.UpdateCandidateJobFeedbackInput, error) {
	var it ent.UpdateCandidateJobFeedbackInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"feedback", "attachments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachments"))
			it.Attachments, err = ec.unmarshalONewAttachmentInput2ᚕᚖtrecᚋentᚐNewAttachmentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCandidateJobStatus(ctx context.Context, obj interface{}) (ent.UpdateCandidateJobStatus, error) {
	var it ent.UpdateCandidateJobStatus
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "failed_reason"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNCandidateJobStatus2trecᚋentᚐCandidateJobStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "failed_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("failed_reason"))
			it.FailedReason, err = ec.unmarshalOCandidateJobFailedReason2ᚕtrecᚋentᚐCandidateJobFailedReasonᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateHiringJobInput(ctx context.Context, obj interface{}) (ent.UpdateHiringJobInput, error) {
	var it ent.UpdateHiringJobInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "amount", "location", "salary_type", "salary_from", "salary_to", "currency", "team_id", "created_by", "priority", "entity_skill_records"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalNLocationEnum2trecᚋentᚐLocationEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "salary_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salary_type"))
			it.SalaryType, err = ec.unmarshalNSalaryTypeEnum2trecᚋentᚐSalaryTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "salary_from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salary_from"))
			it.SalaryFrom, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "salary_to":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salary_to"))
			it.SalaryTo, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "currency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			it.Currency, err = ec.unmarshalNCurrencyEnum2trecᚋentᚐCurrencyEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "team_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team_id"))
			it.TeamID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "entity_skill_records":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entity_skill_records"))
			it.EntitySkillRecords, err = ec.unmarshalOEntitySkillRecordInput2ᚕᚖtrecᚋentᚐEntitySkillRecordInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSkillInput(ctx context.Context, obj interface{}) (ent.UpdateSkillInput, error) {
	var it ent.UpdateSkillInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "skill_type_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "skill_type_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skill_type_id"))
			it.SkillTypeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSkillTypeInput(ctx context.Context, obj interface{}) (ent.UpdateSkillTypeInput, error) {
	var it ent.UpdateSkillTypeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTeamInput(ctx context.Context, obj interface{}) (ent.UpdateTeamInput, error) {
	var it ent.UpdateTeamInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "members"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "members":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("members"))
			it.Members, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj interface{}) (ent.UpdateUserInput, error) {
	var it ent.UpdateUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "work_email", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "work_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work_email"))
			it.WorkEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNUserStatus2trecᚋentᚐUserStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserStatusInput(ctx context.Context, obj interface{}) (ent.UpdateUserStatusInput, error) {
	var it ent.UpdateUserStatusInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNUserStatus2trecᚋentᚐUserStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilter(ctx context.Context, obj interface{}) (ent.UserFilter, error) {
	var it ent.UserFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "ids", "ignore_ids", "not_in_team", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_ids"))
			it.IgnoreIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "not_in_team":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not_in_team"))
			it.NotInTeam, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOUserStatus2ᚖtrecᚋentᚐUserStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFreeWord(ctx context.Context, obj interface{}) (ent.UserFreeWord, error) {
	var it ent.UserFreeWord
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "work_email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "work_email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work_email"))
			it.WorkEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrder(ctx context.Context, obj interface{}) (ent.UserOrder, error) {
	var it ent.UserOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNUserOrderField2ᚖtrecᚋentᚐUserOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var attachmentImplementors = []string{"Attachment"}

func (ec *executionContext) _Attachment(ctx context.Context, sel ast.SelectionSet, obj *ent.Attachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attachmentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attachment")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Attachment_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "document_name":

			out.Values[i] = ec._Attachment_document_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "document_id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Attachment_document_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attachmentResponseImplementors = []string{"AttachmentResponse"}

func (ec *executionContext) _AttachmentResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.AttachmentResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attachmentResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttachmentResponse")
		case "fileName":

			out.Values[i] = ec._AttachmentResponse_fileName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":

			out.Values[i] = ec._AttachmentResponse_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "action":

			out.Values[i] = ec._AttachmentResponse_action(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._AttachmentResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var auditTrailImplementors = []string{"AuditTrail"}

func (ec *executionContext) _AuditTrail(ctx context.Context, sel ast.SelectionSet, obj *ent.AuditTrail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditTrailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditTrail")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditTrail_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditTrail_createdBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdInfo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditTrail_createdInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "recordId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditTrail_recordId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "module":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditTrail_module(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "actionType":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditTrail_actionType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "note":

			out.Values[i] = ec._AuditTrail_note(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "record_changes":

			out.Values[i] = ec._AuditTrail_record_changes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":

			out.Values[i] = ec._AuditTrail_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":

			out.Values[i] = ec._AuditTrail_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var auditTrailEdgeImplementors = []string{"AuditTrailEdge"}

func (ec *executionContext) _AuditTrailEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.AuditTrailEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditTrailEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditTrailEdge")
		case "node":

			out.Values[i] = ec._AuditTrailEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._AuditTrailEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var auditTrailResponseImplementors = []string{"AuditTrailResponse"}

func (ec *executionContext) _AuditTrailResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.AuditTrailResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditTrailResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditTrailResponse")
		case "data":

			out.Values[i] = ec._AuditTrailResponse_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var auditTrailResponseGetAllImplementors = []string{"AuditTrailResponseGetAll"}

func (ec *executionContext) _AuditTrailResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.AuditTrailResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditTrailResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditTrailResponseGetAll")
		case "edges":

			out.Values[i] = ec._AuditTrailResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._AuditTrailResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authenticationTokenImplementors = []string{"AuthenticationToken"}

func (ec *executionContext) _AuthenticationToken(ctx context.Context, sel ast.SelectionSet, obj *ent.AuthenticationToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authenticationTokenImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthenticationToken")
		case "accessToken":

			out.Values[i] = ec._AuthenticationToken_accessToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshToken":

			out.Values[i] = ec._AuthenticationToken_refreshToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tokenType":

			out.Values[i] = ec._AuthenticationToken_tokenType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiresAt":

			out.Values[i] = ec._AuthenticationToken_expiresAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._AuthenticationToken_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var base64ResponseImplementors = []string{"Base64Response"}

func (ec *executionContext) _Base64Response(ctx context.Context, sel ast.SelectionSet, obj *ent.Base64Response) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, base64ResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Base64Response")
		case "data":

			out.Values[i] = ec._Base64Response_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateImplementors = []string{"Candidate"}

func (ec *executionContext) _Candidate(ctx context.Context, sel ast.SelectionSet, obj *ent.Candidate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Candidate")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Candidate_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._Candidate_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":

			out.Values[i] = ec._Candidate_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "phone":

			out.Values[i] = ec._Candidate_phone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "dob":

			out.Values[i] = ec._Candidate_dob(ctx, field, obj)

		case "status":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Candidate_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "is_black_list":

			out.Values[i] = ec._Candidate_is_black_list(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "last_apply_date":

			out.Values[i] = ec._Candidate_last_apply_date(ctx, field, obj)

		case "is_able_to_delete":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Candidate_is_able_to_delete(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hiring_job_title":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Candidate_hiring_job_title(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "reference_type":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Candidate_reference_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "reference_value":

			out.Values[i] = ec._Candidate_reference_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reference_uid":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Candidate_reference_uid(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "recruit_time":

			out.Values[i] = ec._Candidate_recruit_time(ctx, field, obj)

		case "description":

			out.Values[i] = ec._Candidate_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "country":

			out.Values[i] = ec._Candidate_country(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "attachments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Candidate_attachments(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "entity_skill_types":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Candidate_entity_skill_types(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "reference_user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Candidate_reference_user(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":

			out.Values[i] = ec._Candidate_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":

			out.Values[i] = ec._Candidate_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deleted_at":

			out.Values[i] = ec._Candidate_deleted_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateEdgeImplementors = []string{"CandidateEdge"}

func (ec *executionContext) _CandidateEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateEdge")
		case "node":

			out.Values[i] = ec._CandidateEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._CandidateEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateInterviewImplementors = []string{"CandidateInterview"}

func (ec *executionContext) _CandidateInterview(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateInterview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateInterviewImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateInterview")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateInterview_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "title":

			out.Values[i] = ec._CandidateInterview_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._CandidateInterview_description(ctx, field, obj)

		case "candidate_job_id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateInterview_candidate_job_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "interview_date":

			out.Values[i] = ec._CandidateInterview_interview_date(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "start_from":

			out.Values[i] = ec._CandidateInterview_start_from(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "end_at":

			out.Values[i] = ec._CandidateInterview_end_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "interviewer":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateInterview_interviewer(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "candidate_job":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateInterview_candidate_job(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "edit_able":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateInterview_edit_able(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "owner":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateInterview_owner(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "status":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateInterview_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "edited":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateInterview_edited(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":

			out.Values[i] = ec._CandidateInterview_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":

			out.Values[i] = ec._CandidateInterview_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateInterviewEdgeImplementors = []string{"CandidateInterviewEdge"}

func (ec *executionContext) _CandidateInterviewEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateInterviewEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateInterviewEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateInterviewEdge")
		case "node":

			out.Values[i] = ec._CandidateInterviewEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._CandidateInterviewEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateInterviewResponseImplementors = []string{"CandidateInterviewResponse"}

func (ec *executionContext) _CandidateInterviewResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateInterviewResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateInterviewResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateInterviewResponse")
		case "data":

			out.Values[i] = ec._CandidateInterviewResponse_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateInterviewResponseGetAllImplementors = []string{"CandidateInterviewResponseGetAll"}

func (ec *executionContext) _CandidateInterviewResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateInterviewResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateInterviewResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateInterviewResponseGetAll")
		case "edges":

			out.Values[i] = ec._CandidateInterviewResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._CandidateInterviewResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateInterviewResponseValidateImplementors = []string{"CandidateInterviewResponseValidate"}

func (ec *executionContext) _CandidateInterviewResponseValidate(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateInterviewResponseValidate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateInterviewResponseValidateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateInterviewResponseValidate")
		case "data":

			out.Values[i] = ec._CandidateInterviewResponseValidate_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateInterviewValidateImplementors = []string{"CandidateInterviewValidate"}

func (ec *executionContext) _CandidateInterviewValidate(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateInterviewValidate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateInterviewValidateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateInterviewValidate")
		case "interviewer_invalid":

			out.Values[i] = ec._CandidateInterviewValidate_interviewer_invalid(ctx, field, obj)

		case "invalid_schedule":

			out.Values[i] = ec._CandidateInterviewValidate_invalid_schedule(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "candidate_name":

			out.Values[i] = ec._CandidateInterviewValidate_candidate_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "candidate_job_invalid_status":

			out.Values[i] = ec._CandidateInterviewValidate_candidate_job_invalid_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobImplementors = []string{"CandidateJob"}

func (ec *executionContext) _CandidateJob(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJob")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "candidate_id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_candidate_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hiring_job_id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_hiring_job_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "status":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "attachments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_attachments(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "candidate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_candidate(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hiring_job":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_hiring_job(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "owner":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_owner(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "failed_reason":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_failed_reason(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "is_able_to_delete":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_is_able_to_delete(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "interview_feature":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_interview_feature(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "steps":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJob_steps(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":

			out.Values[i] = ec._CandidateJob_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":

			out.Values[i] = ec._CandidateJob_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobEdgeImplementors = []string{"CandidateJobEdge"}

func (ec *executionContext) _CandidateJobEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobEdge")
		case "node":

			out.Values[i] = ec._CandidateJobEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._CandidateJobEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobFeedbackImplementors = []string{"CandidateJobFeedback"}

func (ec *executionContext) _CandidateJobFeedback(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobFeedback) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobFeedbackImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobFeedback")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobFeedback_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_by":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobFeedback_created_by(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "candidate_job_id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobFeedback_candidate_job_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "candidate_job":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobFeedback_candidate_job(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "owner":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobFeedback_owner(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "feedback":

			out.Values[i] = ec._CandidateJobFeedback_feedback(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "edited":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobFeedback_edited(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "attachments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobFeedback_attachments(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":

			out.Values[i] = ec._CandidateJobFeedback_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":

			out.Values[i] = ec._CandidateJobFeedback_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobFeedbackEdgeImplementors = []string{"CandidateJobFeedbackEdge"}

func (ec *executionContext) _CandidateJobFeedbackEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobFeedbackEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobFeedbackEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobFeedbackEdge")
		case "node":

			out.Values[i] = ec._CandidateJobFeedbackEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._CandidateJobFeedbackEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobFeedbackResponseImplementors = []string{"CandidateJobFeedbackResponse"}

func (ec *executionContext) _CandidateJobFeedbackResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobFeedbackResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobFeedbackResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobFeedbackResponse")
		case "data":

			out.Values[i] = ec._CandidateJobFeedbackResponse_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobFeedbackResponseGetAllImplementors = []string{"CandidateJobFeedbackResponseGetAll"}

func (ec *executionContext) _CandidateJobFeedbackResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobFeedbackResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobFeedbackResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobFeedbackResponseGetAll")
		case "edges":

			out.Values[i] = ec._CandidateJobFeedbackResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._CandidateJobFeedbackResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobGroupByInterviewImplementors = []string{"CandidateJobGroupByInterview"}

func (ec *executionContext) _CandidateJobGroupByInterview(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobGroupByInterview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobGroupByInterviewImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobGroupByInterview")
		case "hired":

			out.Values[i] = ec._CandidateJobGroupByInterview_hired(ctx, field, obj)

		case "kiv":

			out.Values[i] = ec._CandidateJobGroupByInterview_kiv(ctx, field, obj)

		case "offer_lost":

			out.Values[i] = ec._CandidateJobGroupByInterview_offer_lost(ctx, field, obj)

		case "ex_staff":

			out.Values[i] = ec._CandidateJobGroupByInterview_ex_staff(ctx, field, obj)

		case "applied":

			out.Values[i] = ec._CandidateJobGroupByInterview_applied(ctx, field, obj)

		case "interviewing":

			out.Values[i] = ec._CandidateJobGroupByInterview_interviewing(ctx, field, obj)

		case "offering":

			out.Values[i] = ec._CandidateJobGroupByInterview_offering(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobGroupByInterviewResponseImplementors = []string{"CandidateJobGroupByInterviewResponse"}

func (ec *executionContext) _CandidateJobGroupByInterviewResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobGroupByInterviewResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobGroupByInterviewResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobGroupByInterviewResponse")
		case "data":

			out.Values[i] = ec._CandidateJobGroupByInterviewResponse_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobGroupByStatusImplementors = []string{"CandidateJobGroupByStatus"}

func (ec *executionContext) _CandidateJobGroupByStatus(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobGroupByStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobGroupByStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobGroupByStatus")
		case "hired":

			out.Values[i] = ec._CandidateJobGroupByStatus_hired(ctx, field, obj)

		case "kiv":

			out.Values[i] = ec._CandidateJobGroupByStatus_kiv(ctx, field, obj)

		case "offer_lost":

			out.Values[i] = ec._CandidateJobGroupByStatus_offer_lost(ctx, field, obj)

		case "ex_staff":

			out.Values[i] = ec._CandidateJobGroupByStatus_ex_staff(ctx, field, obj)

		case "applied":

			out.Values[i] = ec._CandidateJobGroupByStatus_applied(ctx, field, obj)

		case "interviewing":

			out.Values[i] = ec._CandidateJobGroupByStatus_interviewing(ctx, field, obj)

		case "offering":

			out.Values[i] = ec._CandidateJobGroupByStatus_offering(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobGroupByStatusResponseImplementors = []string{"CandidateJobGroupByStatusResponse"}

func (ec *executionContext) _CandidateJobGroupByStatusResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobGroupByStatusResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobGroupByStatusResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobGroupByStatusResponse")
		case "data":

			out.Values[i] = ec._CandidateJobGroupByStatusResponse_data(ctx, field, obj)

		case "pagination":

			out.Values[i] = ec._CandidateJobGroupByStatusResponse_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobGroupInterviewFeedbackImplementors = []string{"CandidateJobGroupInterviewFeedback"}

func (ec *executionContext) _CandidateJobGroupInterviewFeedback(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobGroupInterviewFeedback) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobGroupInterviewFeedbackImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobGroupInterviewFeedback")
		case "interview":

			out.Values[i] = ec._CandidateJobGroupInterviewFeedback_interview(ctx, field, obj)

		case "feedback":

			out.Values[i] = ec._CandidateJobGroupInterviewFeedback_feedback(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobResponseImplementors = []string{"CandidateJobResponse"}

func (ec *executionContext) _CandidateJobResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobResponse")
		case "data":

			out.Values[i] = ec._CandidateJobResponse_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobResponseGetAllImplementors = []string{"CandidateJobResponseGetAll"}

func (ec *executionContext) _CandidateJobResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobResponseGetAll")
		case "edges":

			out.Values[i] = ec._CandidateJobResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._CandidateJobResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateJobStepImplementors = []string{"CandidateJobStep"}

func (ec *executionContext) _CandidateJobStep(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateJobStep) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateJobStepImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateJobStep")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobStep_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "candidate_job_id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobStep_candidate_job_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "candidate_job_status":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CandidateJobStep_candidate_job_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":

			out.Values[i] = ec._CandidateJobStep_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":

			out.Values[i] = ec._CandidateJobStep_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateResponseImplementors = []string{"CandidateResponse"}

func (ec *executionContext) _CandidateResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateResponse")
		case "data":

			out.Values[i] = ec._CandidateResponse_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateResponseGetAllImplementors = []string{"CandidateResponseGetAll"}

func (ec *executionContext) _CandidateResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateResponseGetAll")
		case "edges":

			out.Values[i] = ec._CandidateResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._CandidateResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateSelectionImplementors = []string{"CandidateSelection"}

func (ec *executionContext) _CandidateSelection(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateSelectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateSelection")
		case "id":

			out.Values[i] = ec._CandidateSelection_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._CandidateSelection_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone":

			out.Values[i] = ec._CandidateSelection_phone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._CandidateSelection_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateSelectionEdgeImplementors = []string{"CandidateSelectionEdge"}

func (ec *executionContext) _CandidateSelectionEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateSelectionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateSelectionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateSelectionEdge")
		case "node":

			out.Values[i] = ec._CandidateSelectionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._CandidateSelectionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var candidateSelectionResponseGetAllImplementors = []string{"CandidateSelectionResponseGetAll"}

func (ec *executionContext) _CandidateSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.CandidateSelectionResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, candidateSelectionResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CandidateSelectionResponseGetAll")
		case "edges":

			out.Values[i] = ec._CandidateSelectionResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._CandidateSelectionResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entitySkillRecordImplementors = []string{"EntitySkillRecord"}

func (ec *executionContext) _EntitySkillRecord(ctx context.Context, sel ast.SelectionSet, obj *ent.EntitySkillRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entitySkillRecordImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EntitySkillRecord")
		case "id":

			out.Values[i] = ec._EntitySkillRecord_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._EntitySkillRecord_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._EntitySkillRecord_description(ctx, field, obj)

		case "skill_id":

			out.Values[i] = ec._EntitySkillRecord_skill_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orderId":

			out.Values[i] = ec._EntitySkillRecord_orderId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entitySkillTypeImplementors = []string{"EntitySkillType"}

func (ec *executionContext) _EntitySkillType(ctx context.Context, sel ast.SelectionSet, obj *ent.EntitySkillType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entitySkillTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EntitySkillType")
		case "id":

			out.Values[i] = ec._EntitySkillType_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._EntitySkillType_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._EntitySkillType_description(ctx, field, obj)

		case "entity_skills":

			out.Values[i] = ec._EntitySkillType_entity_skills(ctx, field, obj)

		case "orderId":

			out.Values[i] = ec._EntitySkillType_orderId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hiringJobImplementors = []string{"HiringJob"}

func (ec *executionContext) _HiringJob(ctx context.Context, sel ast.SelectionSet, obj *ent.HiringJob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hiringJobImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HiringJob")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._HiringJob_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slug":

			out.Values[i] = ec._HiringJob_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._HiringJob_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "amount":

			out.Values[i] = ec._HiringJob_amount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "location":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_location(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "salary_type":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_salary_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "salary_from":

			out.Values[i] = ec._HiringJob_salary_from(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "salary_to":

			out.Values[i] = ec._HiringJob_salary_to(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "currency":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_currency(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "team":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_team(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "status":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "total_candidates_recruited":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_total_candidates_recruited(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "is_able_to_delete":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_is_able_to_delete(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "is_able_to_close":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_is_able_to_close(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "priority":

			out.Values[i] = ec._HiringJob_priority(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "entity_skill_types":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HiringJob_entity_skill_types(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":

			out.Values[i] = ec._HiringJob_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":

			out.Values[i] = ec._HiringJob_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deleted_at":

			out.Values[i] = ec._HiringJob_deleted_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hiringJobEdgeImplementors = []string{"HiringJobEdge"}

func (ec *executionContext) _HiringJobEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.HiringJobEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hiringJobEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HiringJobEdge")
		case "node":

			out.Values[i] = ec._HiringJobEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._HiringJobEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hiringJobResponseImplementors = []string{"HiringJobResponse"}

func (ec *executionContext) _HiringJobResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.HiringJobResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hiringJobResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HiringJobResponse")
		case "data":

			out.Values[i] = ec._HiringJobResponse_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hiringJobResponseGetAllImplementors = []string{"HiringJobResponseGetAll"}

func (ec *executionContext) _HiringJobResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.HiringJobResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hiringJobResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HiringJobResponseGetAll")
		case "edges":

			out.Values[i] = ec._HiringJobResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._HiringJobResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hiringJobSelectionImplementors = []string{"HiringJobSelection"}

func (ec *executionContext) _HiringJobSelection(ctx context.Context, sel ast.SelectionSet, obj *ent.HiringJobSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hiringJobSelectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HiringJobSelection")
		case "id":

			out.Values[i] = ec._HiringJobSelection_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._HiringJobSelection_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hiringJobSelectionEdgeImplementors = []string{"HiringJobSelectionEdge"}

func (ec *executionContext) _HiringJobSelectionEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.HiringJobSelectionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hiringJobSelectionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HiringJobSelectionEdge")
		case "node":

			out.Values[i] = ec._HiringJobSelectionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._HiringJobSelectionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hiringJobSelectionResponseGetAllImplementors = []string{"HiringJobSelectionResponseGetAll"}

func (ec *executionContext) _HiringJobSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.HiringJobSelectionResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hiringJobSelectionResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HiringJobSelectionResponseGetAll")
		case "edges":

			out.Values[i] = ec._HiringJobSelectionResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._HiringJobSelectionResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "CreateAttachmentSASURL":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateAttachmentSASURL(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateUser(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateUserStatus":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateUserStatus(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateTeam":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateTeam(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateTeam":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateTeam(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteTeam":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_DeleteTeam(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateHiringJob":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateHiringJob(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateHiringJob":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateHiringJob(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteHiringJob":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_DeleteHiringJob(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateHiringJobStatus":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateHiringJobStatus(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateCandidate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateCandidate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateCandidate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateCandidate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteCandidate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_DeleteCandidate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SetBlackListCandidate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_SetBlackListCandidate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateCandidateJob":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateCandidateJob(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateCandidateJobAttachment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateCandidateJobAttachment(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteCandidateJob":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_DeleteCandidateJob(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateCandidateJobStatus":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateCandidateJobStatus(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateCandidateJobFeedback":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateCandidateJobFeedback(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateCandidateJobFeedback":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateCandidateJobFeedback(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteCandidateJobFeedback":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_DeleteCandidateJobFeedback(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateCandidateInterview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateCandidateInterview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateCandidateInterview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateCandidateInterview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateCandidateInterviewSchedule":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateCandidateInterviewSchedule(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteCandidateInterview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_DeleteCandidateInterview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateCandidateInterview4Calendar":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateCandidateInterview4Calendar(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateCandidateInterviewStatus":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateCandidateInterviewStatus(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ImportCandidate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_ImportCandidate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateSkill":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateSkill(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateSkill":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateSkill(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteSkill":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_DeleteSkill(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateSkillType":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateSkillType(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateSkillType":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_UpdateSkillType(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteSkillType":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_DeleteSkillType(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ValidateCandidateInterview":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_ValidateCandidateInterview(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *ent.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":

			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":

			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":

			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)

		case "endCursor":

			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginationImplementors = []string{"Pagination"}

func (ec *executionContext) _Pagination(ctx context.Context, sel ast.SelectionSet, obj *ent.Pagination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Pagination")
		case "page":

			out.Values[i] = ec._Pagination_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "perPage":

			out.Values[i] = ec._Pagination_perPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":

			out.Values[i] = ec._Pagination_total(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "GetTeam":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetTeam(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllTeams":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllTeams(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllUsers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetHiringJob":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetHiringJob(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllHiringJobs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllHiringJobs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAuditTrail":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAuditTrail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllAuditTrails":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllAuditTrails(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetCandidate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCandidate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllCandidates":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllCandidates(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetCandidateJob":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCandidateJob(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllCandidateJobs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllCandidateJobs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetCandidateJobGroupByStatus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCandidateJobGroupByStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetCandidateJobGroupByInterview":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCandidateJobGroupByInterview(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetCandidateJobFeedback":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCandidateJobFeedback(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllCandidateJobFeedbacks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllCandidateJobFeedbacks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetCandidateInterview":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCandidateInterview(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllCandidateInterviews":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllCandidateInterviews(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllCandidateInterview4Calendar":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllCandidateInterview4Calendar(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "ExportSampleCandidate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ExportSampleCandidate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetSkill":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetSkill(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllSkills":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllSkills(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetSkillType":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetSkillType(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "GetAllSkillTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllSkillTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "SelectionUsers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SelectionUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "SelectionTeams":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SelectionTeams(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "SelectionHiringJobs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SelectionHiringJobs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "SelectionCandidates":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SelectionCandidates(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "SelectionSkills":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SelectionSkills(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "SelectionSkillTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SelectionSkillTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillImplementors = []string{"Skill"}

func (ec *executionContext) _Skill(ctx context.Context, sel ast.SelectionSet, obj *ent.Skill) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Skill")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Skill_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._Skill_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._Skill_description(ctx, field, obj)

		case "skill_type":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Skill_skill_type(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":

			out.Values[i] = ec._Skill_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":

			out.Values[i] = ec._Skill_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deleted_at":

			out.Values[i] = ec._Skill_deleted_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillEdgeImplementors = []string{"SkillEdge"}

func (ec *executionContext) _SkillEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillEdge")
		case "node":

			out.Values[i] = ec._SkillEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._SkillEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillResponseImplementors = []string{"SkillResponse"}

func (ec *executionContext) _SkillResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillResponse")
		case "data":

			out.Values[i] = ec._SkillResponse_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillResponseGetAllImplementors = []string{"SkillResponseGetAll"}

func (ec *executionContext) _SkillResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillResponseGetAll")
		case "edges":

			out.Values[i] = ec._SkillResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._SkillResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillSelectionImplementors = []string{"SkillSelection"}

func (ec *executionContext) _SkillSelection(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillSelectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillSelection")
		case "id":

			out.Values[i] = ec._SkillSelection_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._SkillSelection_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillSelectionEdgeImplementors = []string{"SkillSelectionEdge"}

func (ec *executionContext) _SkillSelectionEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillSelectionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillSelectionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillSelectionEdge")
		case "node":

			out.Values[i] = ec._SkillSelectionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._SkillSelectionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillSelectionResponseGetAllImplementors = []string{"SkillSelectionResponseGetAll"}

func (ec *executionContext) _SkillSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillSelectionResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillSelectionResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillSelectionResponseGetAll")
		case "edges":

			out.Values[i] = ec._SkillSelectionResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._SkillSelectionResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillTypeImplementors = []string{"SkillType"}

func (ec *executionContext) _SkillType(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillType")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SkillType_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._SkillType_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._SkillType_description(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._SkillType_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":

			out.Values[i] = ec._SkillType_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deleted_at":

			out.Values[i] = ec._SkillType_deleted_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillTypeEdgeImplementors = []string{"SkillTypeEdge"}

func (ec *executionContext) _SkillTypeEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillTypeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillTypeEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillTypeEdge")
		case "node":

			out.Values[i] = ec._SkillTypeEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._SkillTypeEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillTypeResponseImplementors = []string{"SkillTypeResponse"}

func (ec *executionContext) _SkillTypeResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillTypeResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillTypeResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillTypeResponse")
		case "data":

			out.Values[i] = ec._SkillTypeResponse_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillTypeResponseGetAllImplementors = []string{"SkillTypeResponseGetAll"}

func (ec *executionContext) _SkillTypeResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillTypeResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillTypeResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillTypeResponseGetAll")
		case "edges":

			out.Values[i] = ec._SkillTypeResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._SkillTypeResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillTypeSelectionImplementors = []string{"SkillTypeSelection"}

func (ec *executionContext) _SkillTypeSelection(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillTypeSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillTypeSelectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillTypeSelection")
		case "id":

			out.Values[i] = ec._SkillTypeSelection_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._SkillTypeSelection_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "skills":

			out.Values[i] = ec._SkillTypeSelection_skills(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillTypeSelectionEdgeImplementors = []string{"SkillTypeSelectionEdge"}

func (ec *executionContext) _SkillTypeSelectionEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillTypeSelectionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillTypeSelectionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillTypeSelectionEdge")
		case "node":

			out.Values[i] = ec._SkillTypeSelectionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._SkillTypeSelectionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillTypeSelectionResponseGetAllImplementors = []string{"SkillTypeSelectionResponseGetAll"}

func (ec *executionContext) _SkillTypeSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.SkillTypeSelectionResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillTypeSelectionResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillTypeSelectionResponseGetAll")
		case "edges":

			out.Values[i] = ec._SkillTypeSelectionResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._SkillTypeSelectionResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamImplementors = []string{"Team"}

func (ec *executionContext) _Team(ctx context.Context, sel ast.SelectionSet, obj *ent.Team) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Team")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Team_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._Team_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "slug":

			out.Values[i] = ec._Team_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "members":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Team_members(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "opening_requests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Team_opening_requests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "is_able_to_delete":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Team_is_able_to_delete(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":

			out.Values[i] = ec._Team_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updated_at":

			out.Values[i] = ec._Team_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deleted_at":

			out.Values[i] = ec._Team_deleted_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamEdgeImplementors = []string{"TeamEdge"}

func (ec *executionContext) _TeamEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TeamEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamEdge")
		case "node":

			out.Values[i] = ec._TeamEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._TeamEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamResponseImplementors = []string{"TeamResponse"}

func (ec *executionContext) _TeamResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.TeamResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamResponse")
		case "data":

			out.Values[i] = ec._TeamResponse_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamResponseGetAllImplementors = []string{"TeamResponseGetAll"}

func (ec *executionContext) _TeamResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.TeamResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamResponseGetAll")
		case "edges":

			out.Values[i] = ec._TeamResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._TeamResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamSelectionImplementors = []string{"TeamSelection"}

func (ec *executionContext) _TeamSelection(ctx context.Context, sel ast.SelectionSet, obj *ent.TeamSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamSelectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamSelection")
		case "id":

			out.Values[i] = ec._TeamSelection_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._TeamSelection_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamSelectionEdgeImplementors = []string{"TeamSelectionEdge"}

func (ec *executionContext) _TeamSelectionEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.TeamSelectionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamSelectionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamSelectionEdge")
		case "node":

			out.Values[i] = ec._TeamSelectionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._TeamSelectionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamSelectionResponseGetAllImplementors = []string{"TeamSelectionResponseGetAll"}

func (ec *executionContext) _TeamSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.TeamSelectionResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamSelectionResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamSelectionResponseGetAll")
		case "edges":

			out.Values[i] = ec._TeamSelectionResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._TeamSelectionResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *ent.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._User_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "work_email":

			out.Values[i] = ec._User_work_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "team":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_team(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userEdgeImplementors = []string{"UserEdge"}

func (ec *executionContext) _UserEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.UserEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEdge")
		case "node":

			out.Values[i] = ec._UserEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._UserEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userResponseImplementors = []string{"UserResponse"}

func (ec *executionContext) _UserResponse(ctx context.Context, sel ast.SelectionSet, obj *ent.UserResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserResponse")
		case "data":

			out.Values[i] = ec._UserResponse_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userResponseGetAllImplementors = []string{"UserResponseGetAll"}

func (ec *executionContext) _UserResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.UserResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserResponseGetAll")
		case "edges":

			out.Values[i] = ec._UserResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._UserResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userSelectionImplementors = []string{"UserSelection"}

func (ec *executionContext) _UserSelection(ctx context.Context, sel ast.SelectionSet, obj *ent.UserSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userSelectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserSelection")
		case "id":

			out.Values[i] = ec._UserSelection_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._UserSelection_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "work_email":

			out.Values[i] = ec._UserSelection_work_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userSelectionEdgeImplementors = []string{"UserSelectionEdge"}

func (ec *executionContext) _UserSelectionEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.UserSelectionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userSelectionEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserSelectionEdge")
		case "node":

			out.Values[i] = ec._UserSelectionEdge_node(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursor":

			out.Values[i] = ec._UserSelectionEdge_cursor(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userSelectionResponseGetAllImplementors = []string{"UserSelectionResponseGetAll"}

func (ec *executionContext) _UserSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, obj *ent.UserSelectionResponseGetAll) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userSelectionResponseGetAllImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserSelectionResponseGetAll")
		case "edges":

			out.Values[i] = ec._UserSelectionResponseGetAll_edges(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._UserSelectionResponseGetAll_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAttachment2ᚖtrecᚋentᚐAttachment(ctx context.Context, sel ast.SelectionSet, v *ent.Attachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Attachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAttachmentAction2trecᚋentᚐAttachmentAction(ctx context.Context, v interface{}) (ent.AttachmentAction, error) {
	var res ent.AttachmentAction
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAttachmentAction2trecᚋentᚐAttachmentAction(ctx context.Context, sel ast.SelectionSet, v ent.AttachmentAction) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAttachmentFolder2trecᚋentᚐAttachmentFolder(ctx context.Context, v interface{}) (ent.AttachmentFolder, error) {
	var res ent.AttachmentFolder
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAttachmentFolder2trecᚋentᚐAttachmentFolder(ctx context.Context, sel ast.SelectionSet, v ent.AttachmentFolder) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAttachmentInput2trecᚋentᚐAttachmentInput(ctx context.Context, v interface{}) (ent.AttachmentInput, error) {
	res, err := ec.unmarshalInputAttachmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAttachmentResponse2trecᚋentᚐAttachmentResponse(ctx context.Context, sel ast.SelectionSet, v ent.AttachmentResponse) graphql.Marshaler {
	return ec._AttachmentResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNAttachmentResponse2ᚖtrecᚋentᚐAttachmentResponse(ctx context.Context, sel ast.SelectionSet, v *ent.AttachmentResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AttachmentResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNAuditTrail2ᚖtrecᚋentᚐAuditTrail(ctx context.Context, sel ast.SelectionSet, v *ent.AuditTrail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditTrail(ctx, sel, v)
}

func (ec *executionContext) marshalNAuditTrailEdge2ᚕᚖtrecᚋentᚐAuditTrailEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.AuditTrailEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuditTrailEdge2ᚖtrecᚋentᚐAuditTrailEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuditTrailEdge2ᚖtrecᚋentᚐAuditTrailEdge(ctx context.Context, sel ast.SelectionSet, v *ent.AuditTrailEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditTrailEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuditTrailOrderField2ᚖtrecᚋentᚐAuditTrailOrderField(ctx context.Context, v interface{}) (*ent.AuditTrailOrderField, error) {
	var res = new(ent.AuditTrailOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuditTrailOrderField2ᚖtrecᚋentᚐAuditTrailOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.AuditTrailOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNAuditTrailResponse2trecᚋentᚐAuditTrailResponse(ctx context.Context, sel ast.SelectionSet, v ent.AuditTrailResponse) graphql.Marshaler {
	return ec._AuditTrailResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuditTrailResponse2ᚖtrecᚋentᚐAuditTrailResponse(ctx context.Context, sel ast.SelectionSet, v *ent.AuditTrailResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditTrailResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNAuditTrailResponseGetAll2trecᚋentᚐAuditTrailResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.AuditTrailResponseGetAll) graphql.Marshaler {
	return ec._AuditTrailResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuditTrailResponseGetAll2ᚖtrecᚋentᚐAuditTrailResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.AuditTrailResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditTrailResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBase642string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBase642string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNBase64Response2trecᚋentᚐBase64Response(ctx context.Context, sel ast.SelectionSet, v ent.Base64Response) graphql.Marshaler {
	return ec._Base64Response(ctx, sel, &v)
}

func (ec *executionContext) marshalNBase64Response2ᚖtrecᚋentᚐBase64Response(ctx context.Context, sel ast.SelectionSet, v *ent.Base64Response) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Base64Response(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCandidate2ᚖtrecᚋentᚐCandidate(ctx context.Context, sel ast.SelectionSet, v *ent.Candidate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Candidate(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateEdge2ᚕᚖtrecᚋentᚐCandidateEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CandidateEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateEdge2ᚖtrecᚋentᚐCandidateEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCandidateEdge2ᚖtrecᚋentᚐCandidateEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateInterview2ᚖtrecᚋentᚐCandidateInterview(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateInterview) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateInterview(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateInterviewEdge2ᚕᚖtrecᚋentᚐCandidateInterviewEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CandidateInterviewEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateInterviewEdge2ᚖtrecᚋentᚐCandidateInterviewEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCandidateInterviewEdge2ᚖtrecᚋentᚐCandidateInterviewEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateInterviewEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateInterviewEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCandidateInterviewFilter2trecᚋentᚐCandidateInterviewFilter(ctx context.Context, v interface{}) (ent.CandidateInterviewFilter, error) {
	res, err := ec.unmarshalInputCandidateInterviewFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCandidateInterviewOrderField2ᚖtrecᚋentᚐCandidateInterviewOrderField(ctx context.Context, v interface{}) (*ent.CandidateInterviewOrderField, error) {
	var res = new(ent.CandidateInterviewOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateInterviewOrderField2ᚖtrecᚋentᚐCandidateInterviewOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateInterviewOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNCandidateInterviewResponse2trecᚋentᚐCandidateInterviewResponse(ctx context.Context, sel ast.SelectionSet, v ent.CandidateInterviewResponse) graphql.Marshaler {
	return ec._CandidateInterviewResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateInterviewResponse2ᚖtrecᚋentᚐCandidateInterviewResponse(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateInterviewResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateInterviewResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateInterviewResponseGetAll2trecᚋentᚐCandidateInterviewResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.CandidateInterviewResponseGetAll) graphql.Marshaler {
	return ec._CandidateInterviewResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateInterviewResponseGetAll2ᚖtrecᚋentᚐCandidateInterviewResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateInterviewResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateInterviewResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateInterviewResponseValidate2trecᚋentᚐCandidateInterviewResponseValidate(ctx context.Context, sel ast.SelectionSet, v ent.CandidateInterviewResponseValidate) graphql.Marshaler {
	return ec._CandidateInterviewResponseValidate(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateInterviewResponseValidate2ᚖtrecᚋentᚐCandidateInterviewResponseValidate(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateInterviewResponseValidate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateInterviewResponseValidate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCandidateInterviewStatus2trecᚋentᚐCandidateInterviewStatus(ctx context.Context, v interface{}) (ent.CandidateInterviewStatus, error) {
	var res ent.CandidateInterviewStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateInterviewStatus2trecᚋentᚐCandidateInterviewStatus(ctx context.Context, sel ast.SelectionSet, v ent.CandidateInterviewStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCandidateInterviewStatusEditable2trecᚋentᚐCandidateInterviewStatusEditable(ctx context.Context, v interface{}) (ent.CandidateInterviewStatusEditable, error) {
	var res ent.CandidateInterviewStatusEditable
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateInterviewStatusEditable2trecᚋentᚐCandidateInterviewStatusEditable(ctx context.Context, sel ast.SelectionSet, v ent.CandidateInterviewStatusEditable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCandidateInterviewValidateInput2trecᚋentᚐCandidateInterviewValidateInput(ctx context.Context, v interface{}) (ent.CandidateInterviewValidateInput, error) {
	res, err := ec.unmarshalInputCandidateInterviewValidateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateJob2trecᚋentᚐCandidateJob(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJob) graphql.Marshaler {
	return ec._CandidateJob(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateJob2ᚖtrecᚋentᚐCandidateJob(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJob) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJob(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateJobEdge2ᚕᚖtrecᚋentᚐCandidateJobEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CandidateJobEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateJobEdge2ᚖtrecᚋentᚐCandidateJobEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCandidateJobEdge2ᚖtrecᚋentᚐCandidateJobEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCandidateJobFailedReason2trecᚋentᚐCandidateJobFailedReason(ctx context.Context, v interface{}) (ent.CandidateJobFailedReason, error) {
	var res ent.CandidateJobFailedReason
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateJobFailedReason2trecᚋentᚐCandidateJobFailedReason(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJobFailedReason) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCandidateJobFeedback2ᚖtrecᚋentᚐCandidateJobFeedback(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobFeedback) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobFeedback(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateJobFeedbackEdge2ᚕᚖtrecᚋentᚐCandidateJobFeedbackEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CandidateJobFeedbackEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateJobFeedbackEdge2ᚖtrecᚋentᚐCandidateJobFeedbackEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCandidateJobFeedbackEdge2ᚖtrecᚋentᚐCandidateJobFeedbackEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobFeedbackEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobFeedbackEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCandidateJobFeedbackFilter2trecᚋentᚐCandidateJobFeedbackFilter(ctx context.Context, v interface{}) (ent.CandidateJobFeedbackFilter, error) {
	res, err := ec.unmarshalInputCandidateJobFeedbackFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCandidateJobFeedbackOrderField2ᚖtrecᚋentᚐCandidateJobFeedbackOrderField(ctx context.Context, v interface{}) (*ent.CandidateJobFeedbackOrderField, error) {
	var res = new(ent.CandidateJobFeedbackOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateJobFeedbackOrderField2ᚖtrecᚋentᚐCandidateJobFeedbackOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobFeedbackOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNCandidateJobFeedbackResponse2trecᚋentᚐCandidateJobFeedbackResponse(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJobFeedbackResponse) graphql.Marshaler {
	return ec._CandidateJobFeedbackResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateJobFeedbackResponse2ᚖtrecᚋentᚐCandidateJobFeedbackResponse(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobFeedbackResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobFeedbackResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateJobFeedbackResponseGetAll2trecᚋentᚐCandidateJobFeedbackResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJobFeedbackResponseGetAll) graphql.Marshaler {
	return ec._CandidateJobFeedbackResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateJobFeedbackResponseGetAll2ᚖtrecᚋentᚐCandidateJobFeedbackResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobFeedbackResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobFeedbackResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCandidateJobFilter2trecᚋentᚐCandidateJobFilter(ctx context.Context, v interface{}) (ent.CandidateJobFilter, error) {
	res, err := ec.unmarshalInputCandidateJobFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateJobGroupByInterviewResponse2trecᚋentᚐCandidateJobGroupByInterviewResponse(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJobGroupByInterviewResponse) graphql.Marshaler {
	return ec._CandidateJobGroupByInterviewResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateJobGroupByInterviewResponse2ᚖtrecᚋentᚐCandidateJobGroupByInterviewResponse(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobGroupByInterviewResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobGroupByInterviewResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateJobGroupByStatusResponse2trecᚋentᚐCandidateJobGroupByStatusResponse(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJobGroupByStatusResponse) graphql.Marshaler {
	return ec._CandidateJobGroupByStatusResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateJobGroupByStatusResponse2ᚖtrecᚋentᚐCandidateJobGroupByStatusResponse(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobGroupByStatusResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobGroupByStatusResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCandidateJobOrderByField2trecᚋentᚐCandidateJobOrderByField(ctx context.Context, v interface{}) (ent.CandidateJobOrderByField, error) {
	var res ent.CandidateJobOrderByField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateJobOrderByField2trecᚋentᚐCandidateJobOrderByField(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJobOrderByField) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCandidateJobOrderField2ᚖtrecᚋentᚐCandidateJobOrderField(ctx context.Context, v interface{}) (*ent.CandidateJobOrderField, error) {
	var res = new(ent.CandidateJobOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateJobOrderField2ᚖtrecᚋentᚐCandidateJobOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNCandidateJobResponse2trecᚋentᚐCandidateJobResponse(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJobResponse) graphql.Marshaler {
	return ec._CandidateJobResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateJobResponse2ᚖtrecᚋentᚐCandidateJobResponse(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateJobResponseGetAll2trecᚋentᚐCandidateJobResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJobResponseGetAll) graphql.Marshaler {
	return ec._CandidateJobResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateJobResponseGetAll2ᚖtrecᚋentᚐCandidateJobResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCandidateJobStatus2trecᚋentᚐCandidateJobStatus(ctx context.Context, v interface{}) (ent.CandidateJobStatus, error) {
	var res ent.CandidateJobStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateJobStatus2trecᚋentᚐCandidateJobStatus(ctx context.Context, sel ast.SelectionSet, v ent.CandidateJobStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCandidateJobStep2ᚖtrecᚋentᚐCandidateJobStep(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobStep) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateJobStep(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCandidateOrderField2ᚖtrecᚋentᚐCandidateOrderField(ctx context.Context, v interface{}) (*ent.CandidateOrderField, error) {
	var res = new(ent.CandidateOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateOrderField2ᚖtrecᚋentᚐCandidateOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCandidateReferenceType2trecᚋentᚐCandidateReferenceType(ctx context.Context, v interface{}) (ent.CandidateReferenceType, error) {
	var res ent.CandidateReferenceType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateReferenceType2trecᚋentᚐCandidateReferenceType(ctx context.Context, sel ast.SelectionSet, v ent.CandidateReferenceType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCandidateResponse2trecᚋentᚐCandidateResponse(ctx context.Context, sel ast.SelectionSet, v ent.CandidateResponse) graphql.Marshaler {
	return ec._CandidateResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateResponse2ᚖtrecᚋentᚐCandidateResponse(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateResponseGetAll2trecᚋentᚐCandidateResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.CandidateResponseGetAll) graphql.Marshaler {
	return ec._CandidateResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateResponseGetAll2ᚖtrecᚋentᚐCandidateResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateSelection2ᚖtrecᚋentᚐCandidateSelection(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateSelection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateSelection(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateSelectionEdge2ᚕᚖtrecᚋentᚐCandidateSelectionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CandidateSelectionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateSelectionEdge2ᚖtrecᚋentᚐCandidateSelectionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCandidateSelectionEdge2ᚖtrecᚋentᚐCandidateSelectionEdge(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateSelectionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateSelectionEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNCandidateSelectionResponseGetAll2trecᚋentᚐCandidateSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.CandidateSelectionResponseGetAll) graphql.Marshaler {
	return ec._CandidateSelectionResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNCandidateSelectionResponseGetAll2ᚖtrecᚋentᚐCandidateSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateSelectionResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CandidateSelectionResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCandidateStatusEnum2trecᚋentᚐCandidateStatusEnum(ctx context.Context, v interface{}) (ent.CandidateStatusEnum, error) {
	var res ent.CandidateStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCandidateStatusEnum2trecᚋentᚐCandidateStatusEnum(ctx context.Context, sel ast.SelectionSet, v ent.CandidateStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCurrencyEnum2trecᚋentᚐCurrencyEnum(ctx context.Context, v interface{}) (ent.CurrencyEnum, error) {
	var res ent.CurrencyEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCurrencyEnum2trecᚋentᚐCurrencyEnum(ctx context.Context, sel ast.SelectionSet, v ent.CurrencyEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCursor2trecᚋentᚐCursor(ctx context.Context, v interface{}) (ent.Cursor, error) {
	var res ent.Cursor
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2trecᚋentᚐCursor(ctx context.Context, sel ast.SelectionSet, v ent.Cursor) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEntitySkillRecord2ᚖtrecᚋentᚐEntitySkillRecord(ctx context.Context, sel ast.SelectionSet, v *ent.EntitySkillRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EntitySkillRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEntitySkillRecordInput2ᚖtrecᚋentᚐEntitySkillRecordInput(ctx context.Context, v interface{}) (*ent.EntitySkillRecordInput, error) {
	res, err := ec.unmarshalInputEntitySkillRecordInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEntitySkillType2ᚖtrecᚋentᚐEntitySkillType(ctx context.Context, sel ast.SelectionSet, v *ent.EntitySkillType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EntitySkillType(ctx, sel, v)
}

func (ec *executionContext) marshalNHiringJob2ᚖtrecᚋentᚐHiringJob(ctx context.Context, sel ast.SelectionSet, v *ent.HiringJob) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HiringJob(ctx, sel, v)
}

func (ec *executionContext) marshalNHiringJobEdge2ᚕᚖtrecᚋentᚐHiringJobEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HiringJobEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHiringJobEdge2ᚖtrecᚋentᚐHiringJobEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHiringJobEdge2ᚖtrecᚋentᚐHiringJobEdge(ctx context.Context, sel ast.SelectionSet, v *ent.HiringJobEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HiringJobEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHiringJobOrderBy2trecᚋentᚐHiringJobOrderBy(ctx context.Context, v interface{}) (ent.HiringJobOrderBy, error) {
	res, err := ec.unmarshalInputHiringJobOrderBy(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHiringJobOrderByField2trecᚋentᚐHiringJobOrderByField(ctx context.Context, v interface{}) (ent.HiringJobOrderByField, error) {
	var res ent.HiringJobOrderByField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHiringJobOrderByField2trecᚋentᚐHiringJobOrderByField(ctx context.Context, sel ast.SelectionSet, v ent.HiringJobOrderByField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNHiringJobResponse2trecᚋentᚐHiringJobResponse(ctx context.Context, sel ast.SelectionSet, v ent.HiringJobResponse) graphql.Marshaler {
	return ec._HiringJobResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNHiringJobResponse2ᚖtrecᚋentᚐHiringJobResponse(ctx context.Context, sel ast.SelectionSet, v *ent.HiringJobResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HiringJobResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNHiringJobResponseGetAll2trecᚋentᚐHiringJobResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.HiringJobResponseGetAll) graphql.Marshaler {
	return ec._HiringJobResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNHiringJobResponseGetAll2ᚖtrecᚋentᚐHiringJobResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.HiringJobResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HiringJobResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) marshalNHiringJobSelection2ᚖtrecᚋentᚐHiringJobSelection(ctx context.Context, sel ast.SelectionSet, v *ent.HiringJobSelection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HiringJobSelection(ctx, sel, v)
}

func (ec *executionContext) marshalNHiringJobSelectionEdge2ᚕᚖtrecᚋentᚐHiringJobSelectionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.HiringJobSelectionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHiringJobSelectionEdge2ᚖtrecᚋentᚐHiringJobSelectionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHiringJobSelectionEdge2ᚖtrecᚋentᚐHiringJobSelectionEdge(ctx context.Context, sel ast.SelectionSet, v *ent.HiringJobSelectionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HiringJobSelectionEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNHiringJobSelectionResponseGetAll2trecᚋentᚐHiringJobSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.HiringJobSelectionResponseGetAll) graphql.Marshaler {
	return ec._HiringJobSelectionResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNHiringJobSelectionResponseGetAll2ᚖtrecᚋentᚐHiringJobSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.HiringJobSelectionResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HiringJobSelectionResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHiringJobStatus2trecᚋentᚐHiringJobStatus(ctx context.Context, v interface{}) (ent.HiringJobStatus, error) {
	var res ent.HiringJobStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHiringJobStatus2trecᚋentᚐHiringJobStatus(ctx context.Context, sel ast.SelectionSet, v ent.HiringJobStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNI18nLanguage2trecᚋentᚐI18nLanguage(ctx context.Context, v interface{}) (ent.I18nLanguage, error) {
	var res ent.I18nLanguage
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNI18nLanguage2trecᚋentᚐI18nLanguage(ctx context.Context, sel ast.SelectionSet, v ent.I18nLanguage) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJSON2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSON2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNLocationEnum2trecᚋentᚐLocationEnum(ctx context.Context, v interface{}) (ent.LocationEnum, error) {
	var res ent.LocationEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLocationEnum2trecᚋentᚐLocationEnum(ctx context.Context, sel ast.SelectionSet, v ent.LocationEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNewAttachmentInput2ᚖtrecᚋentᚐNewAttachmentInput(ctx context.Context, v interface{}) (*ent.NewAttachmentInput, error) {
	res, err := ec.unmarshalInputNewAttachmentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewCandidateInput2trecᚋentᚐNewCandidateInput(ctx context.Context, v interface{}) (ent.NewCandidateInput, error) {
	res, err := ec.unmarshalInputNewCandidateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewCandidateInterview4CalendarInput2trecᚋentᚐNewCandidateInterview4CalendarInput(ctx context.Context, v interface{}) (ent.NewCandidateInterview4CalendarInput, error) {
	res, err := ec.unmarshalInputNewCandidateInterview4CalendarInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewCandidateInterviewInput2trecᚋentᚐNewCandidateInterviewInput(ctx context.Context, v interface{}) (ent.NewCandidateInterviewInput, error) {
	res, err := ec.unmarshalInputNewCandidateInterviewInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewCandidateJobFeedbackInput2trecᚋentᚐNewCandidateJobFeedbackInput(ctx context.Context, v interface{}) (ent.NewCandidateJobFeedbackInput, error) {
	res, err := ec.unmarshalInputNewCandidateJobFeedbackInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewCandidateJobInput2trecᚋentᚐNewCandidateJobInput(ctx context.Context, v interface{}) (ent.NewCandidateJobInput, error) {
	res, err := ec.unmarshalInputNewCandidateJobInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewHiringJobInput2trecᚋentᚐNewHiringJobInput(ctx context.Context, v interface{}) (ent.NewHiringJobInput, error) {
	res, err := ec.unmarshalInputNewHiringJobInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewSkillInput2trecᚋentᚐNewSkillInput(ctx context.Context, v interface{}) (ent.NewSkillInput, error) {
	res, err := ec.unmarshalInputNewSkillInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewSkillTypeInput2trecᚋentᚐNewSkillTypeInput(ctx context.Context, v interface{}) (ent.NewSkillTypeInput, error) {
	res, err := ec.unmarshalInputNewSkillTypeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewTeamInput2trecᚋentᚐNewTeamInput(ctx context.Context, v interface{}) (ent.NewTeamInput, error) {
	res, err := ec.unmarshalInputNewTeamInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrderDirection2trecᚋentᚐOrderDirection(ctx context.Context, v interface{}) (ent.OrderDirection, error) {
	var res ent.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2trecᚋentᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v ent.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPagination2ᚖtrecᚋentᚐPagination(ctx context.Context, sel ast.SelectionSet, v *ent.Pagination) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Pagination(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSalaryTypeEnum2trecᚋentᚐSalaryTypeEnum(ctx context.Context, v interface{}) (ent.SalaryTypeEnum, error) {
	var res ent.SalaryTypeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSalaryTypeEnum2trecᚋentᚐSalaryTypeEnum(ctx context.Context, sel ast.SelectionSet, v ent.SalaryTypeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSkill2ᚖtrecᚋentᚐSkill(ctx context.Context, sel ast.SelectionSet, v *ent.Skill) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Skill(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillEdge2ᚕᚖtrecᚋentᚐSkillEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.SkillEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSkillEdge2ᚖtrecᚋentᚐSkillEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSkillEdge2ᚖtrecᚋentᚐSkillEdge(ctx context.Context, sel ast.SelectionSet, v *ent.SkillEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSkillOrderField2ᚖtrecᚋentᚐSkillOrderField(ctx context.Context, v interface{}) (*ent.SkillOrderField, error) {
	var res = new(ent.SkillOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSkillOrderField2ᚖtrecᚋentᚐSkillOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.SkillOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNSkillResponse2trecᚋentᚐSkillResponse(ctx context.Context, sel ast.SelectionSet, v ent.SkillResponse) graphql.Marshaler {
	return ec._SkillResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNSkillResponse2ᚖtrecᚋentᚐSkillResponse(ctx context.Context, sel ast.SelectionSet, v *ent.SkillResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillResponseGetAll2trecᚋentᚐSkillResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.SkillResponseGetAll) graphql.Marshaler {
	return ec._SkillResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNSkillResponseGetAll2ᚖtrecᚋentᚐSkillResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.SkillResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillSelection2ᚖtrecᚋentᚐSkillSelection(ctx context.Context, sel ast.SelectionSet, v *ent.SkillSelection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillSelection(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillSelectionEdge2ᚕᚖtrecᚋentᚐSkillSelectionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.SkillSelectionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSkillSelectionEdge2ᚖtrecᚋentᚐSkillSelectionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSkillSelectionEdge2ᚖtrecᚋentᚐSkillSelectionEdge(ctx context.Context, sel ast.SelectionSet, v *ent.SkillSelectionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillSelectionEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillSelectionResponseGetAll2trecᚋentᚐSkillSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.SkillSelectionResponseGetAll) graphql.Marshaler {
	return ec._SkillSelectionResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNSkillSelectionResponseGetAll2ᚖtrecᚋentᚐSkillSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.SkillSelectionResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillSelectionResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillType2ᚖtrecᚋentᚐSkillType(ctx context.Context, sel ast.SelectionSet, v *ent.SkillType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillType(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillTypeEdge2ᚕᚖtrecᚋentᚐSkillTypeEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.SkillTypeEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSkillTypeEdge2ᚖtrecᚋentᚐSkillTypeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSkillTypeEdge2ᚖtrecᚋentᚐSkillTypeEdge(ctx context.Context, sel ast.SelectionSet, v *ent.SkillTypeEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillTypeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSkillTypeOrderField2ᚖtrecᚋentᚐSkillTypeOrderField(ctx context.Context, v interface{}) (*ent.SkillTypeOrderField, error) {
	var res = new(ent.SkillTypeOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSkillTypeOrderField2ᚖtrecᚋentᚐSkillTypeOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.SkillTypeOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNSkillTypeResponse2trecᚋentᚐSkillTypeResponse(ctx context.Context, sel ast.SelectionSet, v ent.SkillTypeResponse) graphql.Marshaler {
	return ec._SkillTypeResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNSkillTypeResponse2ᚖtrecᚋentᚐSkillTypeResponse(ctx context.Context, sel ast.SelectionSet, v *ent.SkillTypeResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillTypeResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillTypeResponseGetAll2trecᚋentᚐSkillTypeResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.SkillTypeResponseGetAll) graphql.Marshaler {
	return ec._SkillTypeResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNSkillTypeResponseGetAll2ᚖtrecᚋentᚐSkillTypeResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.SkillTypeResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillTypeResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillTypeSelection2ᚖtrecᚋentᚐSkillTypeSelection(ctx context.Context, sel ast.SelectionSet, v *ent.SkillTypeSelection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillTypeSelection(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillTypeSelectionEdge2ᚕᚖtrecᚋentᚐSkillTypeSelectionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.SkillTypeSelectionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSkillTypeSelectionEdge2ᚖtrecᚋentᚐSkillTypeSelectionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSkillTypeSelectionEdge2ᚖtrecᚋentᚐSkillTypeSelectionEdge(ctx context.Context, sel ast.SelectionSet, v *ent.SkillTypeSelectionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillTypeSelectionEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNSkillTypeSelectionResponseGetAll2trecᚋentᚐSkillTypeSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.SkillTypeSelectionResponseGetAll) graphql.Marshaler {
	return ec._SkillTypeSelectionResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNSkillTypeSelectionResponseGetAll2ᚖtrecᚋentᚐSkillTypeSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.SkillTypeSelectionResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillTypeSelectionResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTeam2trecᚋentᚐTeam(ctx context.Context, sel ast.SelectionSet, v ent.Team) graphql.Marshaler {
	return ec._Team(ctx, sel, &v)
}

func (ec *executionContext) marshalNTeam2ᚖtrecᚋentᚐTeam(ctx context.Context, sel ast.SelectionSet, v *ent.Team) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Team(ctx, sel, v)
}

func (ec *executionContext) marshalNTeamEdge2ᚕᚖtrecᚋentᚐTeamEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.TeamEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTeamEdge2ᚖtrecᚋentᚐTeamEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTeamEdge2ᚖtrecᚋentᚐTeamEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TeamEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTeamOrderBy2trecᚋentᚐTeamOrderBy(ctx context.Context, v interface{}) (ent.TeamOrderBy, error) {
	res, err := ec.unmarshalInputTeamOrderBy(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTeamOrderByField2trecᚋentᚐTeamOrderByField(ctx context.Context, v interface{}) (ent.TeamOrderByField, error) {
	var res ent.TeamOrderByField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTeamOrderByField2trecᚋentᚐTeamOrderByField(ctx context.Context, sel ast.SelectionSet, v ent.TeamOrderByField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTeamResponse2trecᚋentᚐTeamResponse(ctx context.Context, sel ast.SelectionSet, v ent.TeamResponse) graphql.Marshaler {
	return ec._TeamResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTeamResponse2ᚖtrecᚋentᚐTeamResponse(ctx context.Context, sel ast.SelectionSet, v *ent.TeamResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTeamResponseGetAll2trecᚋentᚐTeamResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.TeamResponseGetAll) graphql.Marshaler {
	return ec._TeamResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNTeamResponseGetAll2ᚖtrecᚋentᚐTeamResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.TeamResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) marshalNTeamSelection2ᚖtrecᚋentᚐTeamSelection(ctx context.Context, sel ast.SelectionSet, v *ent.TeamSelection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamSelection(ctx, sel, v)
}

func (ec *executionContext) marshalNTeamSelectionEdge2ᚕᚖtrecᚋentᚐTeamSelectionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.TeamSelectionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTeamSelectionEdge2ᚖtrecᚋentᚐTeamSelectionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTeamSelectionEdge2ᚖtrecᚋentᚐTeamSelectionEdge(ctx context.Context, sel ast.SelectionSet, v *ent.TeamSelectionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamSelectionEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNTeamSelectionResponseGetAll2trecᚋentᚐTeamSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.TeamSelectionResponseGetAll) graphql.Marshaler {
	return ec._TeamSelectionResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNTeamSelectionResponseGetAll2ᚖtrecᚋentᚐTeamSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.TeamSelectionResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeamSelectionResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateCandidateAttachment2trecᚋentᚐUpdateCandidateAttachment(ctx context.Context, v interface{}) (ent.UpdateCandidateAttachment, error) {
	res, err := ec.unmarshalInputUpdateCandidateAttachment(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCandidateInput2trecᚋentᚐUpdateCandidateInput(ctx context.Context, v interface{}) (ent.UpdateCandidateInput, error) {
	res, err := ec.unmarshalInputUpdateCandidateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCandidateInterviewInput2trecᚋentᚐUpdateCandidateInterviewInput(ctx context.Context, v interface{}) (ent.UpdateCandidateInterviewInput, error) {
	res, err := ec.unmarshalInputUpdateCandidateInterviewInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCandidateInterviewScheduleInput2trecᚋentᚐUpdateCandidateInterviewScheduleInput(ctx context.Context, v interface{}) (ent.UpdateCandidateInterviewScheduleInput, error) {
	res, err := ec.unmarshalInputUpdateCandidateInterviewScheduleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCandidateInterviewStatusInput2trecᚋentᚐUpdateCandidateInterviewStatusInput(ctx context.Context, v interface{}) (ent.UpdateCandidateInterviewStatusInput, error) {
	res, err := ec.unmarshalInputUpdateCandidateInterviewStatusInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCandidateJobFeedbackInput2trecᚋentᚐUpdateCandidateJobFeedbackInput(ctx context.Context, v interface{}) (ent.UpdateCandidateJobFeedbackInput, error) {
	res, err := ec.unmarshalInputUpdateCandidateJobFeedbackInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCandidateJobStatus2trecᚋentᚐUpdateCandidateJobStatus(ctx context.Context, v interface{}) (ent.UpdateCandidateJobStatus, error) {
	res, err := ec.unmarshalInputUpdateCandidateJobStatus(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateHiringJobInput2trecᚋentᚐUpdateHiringJobInput(ctx context.Context, v interface{}) (ent.UpdateHiringJobInput, error) {
	res, err := ec.unmarshalInputUpdateHiringJobInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSkillInput2trecᚋentᚐUpdateSkillInput(ctx context.Context, v interface{}) (ent.UpdateSkillInput, error) {
	res, err := ec.unmarshalInputUpdateSkillInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSkillTypeInput2trecᚋentᚐUpdateSkillTypeInput(ctx context.Context, v interface{}) (ent.UpdateSkillTypeInput, error) {
	res, err := ec.unmarshalInputUpdateSkillTypeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTeamInput2trecᚋentᚐUpdateTeamInput(ctx context.Context, v interface{}) (ent.UpdateTeamInput, error) {
	res, err := ec.unmarshalInputUpdateTeamInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserInput2trecᚋentᚐUpdateUserInput(ctx context.Context, v interface{}) (ent.UpdateUserInput, error) {
	res, err := ec.unmarshalInputUpdateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserStatusInput2trecᚋentᚐUpdateUserStatusInput(ctx context.Context, v interface{}) (ent.UpdateUserStatusInput, error) {
	res, err := ec.unmarshalInputUpdateUserStatusInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2trecᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v ent.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖtrecᚋentᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖtrecᚋentᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖtrecᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v *ent.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserEdge2ᚕᚖtrecᚋentᚐUserEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.UserEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserEdge2ᚖtrecᚋentᚐUserEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserEdge2ᚖtrecᚋentᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v *ent.UserEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserOrderField2ᚖtrecᚋentᚐUserOrderField(ctx context.Context, v interface{}) (*ent.UserOrderField, error) {
	var res = new(ent.UserOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserOrderField2ᚖtrecᚋentᚐUserOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.UserOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNUserResponse2trecᚋentᚐUserResponse(ctx context.Context, sel ast.SelectionSet, v ent.UserResponse) graphql.Marshaler {
	return ec._UserResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserResponse2ᚖtrecᚋentᚐUserResponse(ctx context.Context, sel ast.SelectionSet, v *ent.UserResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNUserResponseGetAll2trecᚋentᚐUserResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.UserResponseGetAll) graphql.Marshaler {
	return ec._UserResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserResponseGetAll2ᚖtrecᚋentᚐUserResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.UserResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) marshalNUserSelection2ᚖtrecᚋentᚐUserSelection(ctx context.Context, sel ast.SelectionSet, v *ent.UserSelection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserSelection(ctx, sel, v)
}

func (ec *executionContext) marshalNUserSelectionEdge2ᚕᚖtrecᚋentᚐUserSelectionEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.UserSelectionEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserSelectionEdge2ᚖtrecᚋentᚐUserSelectionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserSelectionEdge2ᚖtrecᚋentᚐUserSelectionEdge(ctx context.Context, sel ast.SelectionSet, v *ent.UserSelectionEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserSelectionEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNUserSelectionResponseGetAll2trecᚋentᚐUserSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v ent.UserSelectionResponseGetAll) graphql.Marshaler {
	return ec._UserSelectionResponseGetAll(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserSelectionResponseGetAll2ᚖtrecᚋentᚐUserSelectionResponseGetAll(ctx context.Context, sel ast.SelectionSet, v *ent.UserSelectionResponseGetAll) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserSelectionResponseGetAll(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserStatus2trecᚋentᚐUserStatus(ctx context.Context, v interface{}) (ent.UserStatus, error) {
	var res ent.UserStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserStatus2trecᚋentᚐUserStatus(ctx context.Context, sel ast.SelectionSet, v ent.UserStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNauditTrailAction2trecᚋentᚐAuditTrailAction(ctx context.Context, v interface{}) (ent.AuditTrailAction, error) {
	var res ent.AuditTrailAction
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNauditTrailAction2trecᚋentᚐAuditTrailAction(ctx context.Context, sel ast.SelectionSet, v ent.AuditTrailAction) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNprojectModule2trecᚋentᚐProjectModule(ctx context.Context, v interface{}) (ent.ProjectModule, error) {
	var res ent.ProjectModule
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNprojectModule2trecᚋentᚐProjectModule(ctx context.Context, sel ast.SelectionSet, v ent.ProjectModule) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOAttachment2ᚕᚖtrecᚋentᚐAttachmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Attachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAttachment2ᚖtrecᚋentᚐAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAuditTrailFilter2ᚖtrecᚋentᚐAuditTrailFilter(ctx context.Context, v interface{}) (*ent.AuditTrailFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditTrailFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuditTrailFreeWord2ᚖtrecᚋentᚐAuditTrailFreeWord(ctx context.Context, v interface{}) (*ent.AuditTrailFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditTrailFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuditTrailOrder2ᚖtrecᚋentᚐAuditTrailOrder(ctx context.Context, v interface{}) (*ent.AuditTrailOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditTrailOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCandidate2ᚖtrecᚋentᚐCandidate(ctx context.Context, sel ast.SelectionSet, v *ent.Candidate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Candidate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCandidateFilter2ᚖtrecᚋentᚐCandidateFilter(ctx context.Context, v interface{}) (*ent.CandidateFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateFreeWord2ᚖtrecᚋentᚐCandidateFreeWord(ctx context.Context, v interface{}) (*ent.CandidateFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCandidateInterview2ᚕᚖtrecᚋentᚐCandidateInterviewᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CandidateInterview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateInterview2ᚖtrecᚋentᚐCandidateInterview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCandidateInterview2ᚖtrecᚋentᚐCandidateInterview(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateInterview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CandidateInterview(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCandidateInterviewCalendarFilter2ᚖtrecᚋentᚐCandidateInterviewCalendarFilter(ctx context.Context, v interface{}) (*ent.CandidateInterviewCalendarFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateInterviewCalendarFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateInterviewFreeWord2ᚖtrecᚋentᚐCandidateInterviewFreeWord(ctx context.Context, v interface{}) (*ent.CandidateInterviewFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateInterviewFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateInterviewOrder2ᚖtrecᚋentᚐCandidateInterviewOrder(ctx context.Context, v interface{}) (*ent.CandidateInterviewOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateInterviewOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCandidateInterviewValidate2ᚖtrecᚋentᚐCandidateInterviewValidate(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateInterviewValidate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CandidateInterviewValidate(ctx, sel, v)
}

func (ec *executionContext) marshalOCandidateJob2ᚕᚖtrecᚋentᚐCandidateJobᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CandidateJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateJob2ᚖtrecᚋentᚐCandidateJob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCandidateJob2ᚖtrecᚋentᚐCandidateJob(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CandidateJob(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCandidateJobByOrder2ᚖtrecᚋentᚐCandidateJobByOrder(ctx context.Context, v interface{}) (*ent.CandidateJobByOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateJobByOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateJobFailedReason2ᚕtrecᚋentᚐCandidateJobFailedReasonᚄ(ctx context.Context, v interface{}) ([]ent.CandidateJobFailedReason, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]ent.CandidateJobFailedReason, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCandidateJobFailedReason2trecᚋentᚐCandidateJobFailedReason(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCandidateJobFailedReason2ᚕtrecᚋentᚐCandidateJobFailedReasonᚄ(ctx context.Context, sel ast.SelectionSet, v []ent.CandidateJobFailedReason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateJobFailedReason2trecᚋentᚐCandidateJobFailedReason(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCandidateJobFeedback2ᚕᚖtrecᚋentᚐCandidateJobFeedbackᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CandidateJobFeedback) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateJobFeedback2ᚖtrecᚋentᚐCandidateJobFeedback(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCandidateJobFeedback2ᚖtrecᚋentᚐCandidateJobFeedback(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobFeedback) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CandidateJobFeedback(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCandidateJobFeedbackFreeWord2ᚖtrecᚋentᚐCandidateJobFeedbackFreeWord(ctx context.Context, v interface{}) (*ent.CandidateJobFeedbackFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateJobFeedbackFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateJobFeedbackOrder2ᚖtrecᚋentᚐCandidateJobFeedbackOrder(ctx context.Context, v interface{}) (*ent.CandidateJobFeedbackOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateJobFeedbackOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateJobFreeWord2ᚖtrecᚋentᚐCandidateJobFreeWord(ctx context.Context, v interface{}) (*ent.CandidateJobFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateJobFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCandidateJobGroupByInterview2ᚖtrecᚋentᚐCandidateJobGroupByInterview(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobGroupByInterview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CandidateJobGroupByInterview(ctx, sel, v)
}

func (ec *executionContext) marshalOCandidateJobGroupByStatus2ᚖtrecᚋentᚐCandidateJobGroupByStatus(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobGroupByStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CandidateJobGroupByStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCandidateJobGroupByStatusFilter2ᚖtrecᚋentᚐCandidateJobGroupByStatusFilter(ctx context.Context, v interface{}) (*ent.CandidateJobGroupByStatusFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateJobGroupByStatusFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateJobGroupByStatusFreeWord2ᚖtrecᚋentᚐCandidateJobGroupByStatusFreeWord(ctx context.Context, v interface{}) (*ent.CandidateJobGroupByStatusFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateJobGroupByStatusFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCandidateJobGroupInterviewFeedback2ᚖtrecᚋentᚐCandidateJobGroupInterviewFeedback(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobGroupInterviewFeedback) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CandidateJobGroupInterviewFeedback(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCandidateJobOrder2ᚖtrecᚋentᚐCandidateJobOrder(ctx context.Context, v interface{}) (*ent.CandidateJobOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateJobOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateJobStatus2ᚖtrecᚋentᚐCandidateJobStatus(ctx context.Context, v interface{}) (*ent.CandidateJobStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.CandidateJobStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCandidateJobStatus2ᚖtrecᚋentᚐCandidateJobStatus(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateJobStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCandidateJobStep2ᚕᚖtrecᚋentᚐCandidateJobStepᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CandidateJobStep) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateJobStep2ᚖtrecᚋentᚐCandidateJobStep(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCandidateOrder2ᚖtrecᚋentᚐCandidateOrder(ctx context.Context, v interface{}) (*ent.CandidateOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCandidateOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCandidateReferenceType2ᚕtrecᚋentᚐCandidateReferenceTypeᚄ(ctx context.Context, v interface{}) ([]ent.CandidateReferenceType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]ent.CandidateReferenceType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCandidateReferenceType2trecᚋentᚐCandidateReferenceType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCandidateReferenceType2ᚕtrecᚋentᚐCandidateReferenceTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []ent.CandidateReferenceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCandidateReferenceType2trecᚋentᚐCandidateReferenceType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCandidateStatusEnum2ᚖtrecᚋentᚐCandidateStatusEnum(ctx context.Context, v interface{}) (*ent.CandidateStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.CandidateStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCandidateStatusEnum2ᚖtrecᚋentᚐCandidateStatusEnum(ctx context.Context, sel ast.SelectionSet, v *ent.CandidateStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCursor2ᚖtrecᚋentᚐCursor(ctx context.Context, v interface{}) (*ent.Cursor, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.Cursor)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖtrecᚋentᚐCursor(ctx context.Context, sel ast.SelectionSet, v *ent.Cursor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOEntitySkillRecord2ᚕᚖtrecᚋentᚐEntitySkillRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.EntitySkillRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEntitySkillRecord2ᚖtrecᚋentᚐEntitySkillRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOEntitySkillRecordInput2ᚕᚖtrecᚋentᚐEntitySkillRecordInputᚄ(ctx context.Context, v interface{}) ([]*ent.EntitySkillRecordInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.EntitySkillRecordInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEntitySkillRecordInput2ᚖtrecᚋentᚐEntitySkillRecordInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEntitySkillType2ᚕᚖtrecᚋentᚐEntitySkillTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.EntitySkillType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEntitySkillType2ᚖtrecᚋentᚐEntitySkillType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOHiringJob2ᚖtrecᚋentᚐHiringJob(ctx context.Context, sel ast.SelectionSet, v *ent.HiringJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HiringJob(ctx, sel, v)
}

func (ec *executionContext) unmarshalOHiringJobFilter2ᚖtrecᚋentᚐHiringJobFilter(ctx context.Context, v interface{}) (*ent.HiringJobFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHiringJobFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHiringJobFreeWord2ᚖtrecᚋentᚐHiringJobFreeWord(ctx context.Context, v interface{}) (*ent.HiringJobFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHiringJobFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHiringJobStatus2ᚖtrecᚋentᚐHiringJobStatus(ctx context.Context, v interface{}) (*ent.HiringJobStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.HiringJobStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHiringJobStatus2ᚖtrecᚋentᚐHiringJobStatus(ctx context.Context, sel ast.SelectionSet, v *ent.HiringJobStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOLocationEnum2ᚕtrecᚋentᚐLocationEnumᚄ(ctx context.Context, v interface{}) ([]ent.LocationEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]ent.LocationEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLocationEnum2trecᚋentᚐLocationEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLocationEnum2ᚕtrecᚋentᚐLocationEnumᚄ(ctx context.Context, sel ast.SelectionSet, v []ent.LocationEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLocationEnum2trecᚋentᚐLocationEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOLocationEnum2ᚕᚖtrecᚋentᚐLocationEnum(ctx context.Context, v interface{}) ([]*ent.LocationEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.LocationEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLocationEnum2ᚖtrecᚋentᚐLocationEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLocationEnum2ᚕᚖtrecᚋentᚐLocationEnum(ctx context.Context, sel ast.SelectionSet, v []*ent.LocationEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLocationEnum2ᚖtrecᚋentᚐLocationEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOLocationEnum2ᚖtrecᚋentᚐLocationEnum(ctx context.Context, v interface{}) (*ent.LocationEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.LocationEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLocationEnum2ᚖtrecᚋentᚐLocationEnum(ctx context.Context, sel ast.SelectionSet, v *ent.LocationEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONewAttachmentInput2ᚕᚖtrecᚋentᚐNewAttachmentInputᚄ(ctx context.Context, v interface{}) ([]*ent.NewAttachmentInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.NewAttachmentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewAttachmentInput2ᚖtrecᚋentᚐNewAttachmentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaginationInput2ᚖtrecᚋentᚐPaginationInput(ctx context.Context, v interface{}) (*ent.PaginationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaginationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSkillFilter2ᚖtrecᚋentᚐSkillFilter(ctx context.Context, v interface{}) (*ent.SkillFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSkillFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSkillFreeWord2ᚖtrecᚋentᚐSkillFreeWord(ctx context.Context, v interface{}) (*ent.SkillFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSkillFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSkillOrder2ᚖtrecᚋentᚐSkillOrder(ctx context.Context, v interface{}) (*ent.SkillOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSkillOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSkillSelection2ᚕᚖtrecᚋentᚐSkillSelectionᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.SkillSelection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSkillSelection2ᚖtrecᚋentᚐSkillSelection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSkillType2ᚖtrecᚋentᚐSkillType(ctx context.Context, sel ast.SelectionSet, v *ent.SkillType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SkillType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSkillTypeFilter2ᚖtrecᚋentᚐSkillTypeFilter(ctx context.Context, v interface{}) (*ent.SkillTypeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSkillTypeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSkillTypeFreeWord2ᚖtrecᚋentᚐSkillTypeFreeWord(ctx context.Context, v interface{}) (*ent.SkillTypeFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSkillTypeFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSkillTypeOrder2ᚖtrecᚋentᚐSkillTypeOrder(ctx context.Context, v interface{}) (*ent.SkillTypeOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSkillTypeOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTeam2ᚖtrecᚋentᚐTeam(ctx context.Context, sel ast.SelectionSet, v *ent.Team) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Team(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTeamFilter2ᚖtrecᚋentᚐTeamFilter(ctx context.Context, v interface{}) (*ent.TeamFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTeamFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTeamFreeWord2ᚖtrecᚋentᚐTeamFreeWord(ctx context.Context, v interface{}) (*ent.TeamFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTeamFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖtrecᚋentᚐUser(ctx context.Context, sel ast.SelectionSet, v *ent.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserFilter2ᚖtrecᚋentᚐUserFilter(ctx context.Context, v interface{}) (*ent.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserFreeWord2ᚖtrecᚋentᚐUserFreeWord(ctx context.Context, v interface{}) (*ent.UserFreeWord, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserFreeWord(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserOrder2ᚖtrecᚋentᚐUserOrder(ctx context.Context, v interface{}) (*ent.UserOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserStatus2ᚖtrecᚋentᚐUserStatus(ctx context.Context, v interface{}) (*ent.UserStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.UserStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserStatus2ᚖtrecᚋentᚐUserStatus(ctx context.Context, sel ast.SelectionSet, v *ent.UserStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOauditTrailAction2ᚖtrecᚋentᚐAuditTrailAction(ctx context.Context, v interface{}) (*ent.AuditTrailAction, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.AuditTrailAction)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOauditTrailAction2ᚖtrecᚋentᚐAuditTrailAction(ctx context.Context, sel ast.SelectionSet, v *ent.AuditTrailAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOprojectModule2ᚖtrecᚋentᚐProjectModule(ctx context.Context, v interface{}) (*ent.ProjectModule, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.ProjectModule)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOprojectModule2ᚖtrecᚋentᚐProjectModule(ctx context.Context, sel ast.SelectionSet, v *ent.ProjectModule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

// endregion ***************************** type.gotpl *****************************
